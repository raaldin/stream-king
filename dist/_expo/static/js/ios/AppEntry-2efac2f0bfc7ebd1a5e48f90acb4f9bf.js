var __BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),__DEV__=false,process=this.process||{},__METRO_GLOBAL_PREFIX__='';process.env=process.env||{};process.env.NODE_ENV=process.env.NODE_ENV||"production";
(function (global) {
  "use strict";

  global.__r = metroRequire;
  global[`${__METRO_GLOBAL_PREFIX__}__d`] = define;
  global.__c = clear;
  global.__registerSegment = registerSegment;
  var modules = clear();
  var EMPTY = {};
  var CYCLE_DETECTED = {};
  var _ref = {},
    hasOwnProperty = _ref.hasOwnProperty;
  function clear() {
    modules = new Map();
    return modules;
  }
  function define(factory, moduleId, dependencyMap) {
    if (modules.has(moduleId)) {
      return;
    }
    var mod = {
      dependencyMap,
      factory,
      hasError: false,
      importedAll: EMPTY,
      importedDefault: EMPTY,
      isInitialized: false,
      publicModule: {
        exports: {}
      }
    };
    modules.set(moduleId, mod);
  }
  function metroRequire(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var module = modules.get(moduleIdReallyIsNumber);
    return module && module.isInitialized ? module.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }
  function metroImportDefault(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var maybeInitializedModule = modules.get(moduleIdReallyIsNumber);
    if (maybeInitializedModule && maybeInitializedModule.importedDefault !== EMPTY) {
      return maybeInitializedModule.importedDefault;
    }
    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedDefault = exports && exports.__esModule ? exports.default : exports;
    var initializedModule = modules.get(moduleIdReallyIsNumber);
    return initializedModule.importedDefault = importedDefault;
  }
  metroRequire.importDefault = metroImportDefault;
  function metroImportAll(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var maybeInitializedModule = modules.get(moduleIdReallyIsNumber);
    if (maybeInitializedModule && maybeInitializedModule.importedAll !== EMPTY) {
      return maybeInitializedModule.importedAll;
    }
    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedAll;
    if (exports && exports.__esModule) {
      importedAll = exports;
    } else {
      importedAll = {};
      if (exports) {
        for (var key in exports) {
          if (hasOwnProperty.call(exports, key)) {
            importedAll[key] = exports[key];
          }
        }
      }
      importedAll.default = exports;
    }
    var initializedModule = modules.get(moduleIdReallyIsNumber);
    return initializedModule.importedAll = importedAll;
  }
  metroRequire.importAll = metroImportAll;
  metroRequire.context = function fallbackRequireContext() {
    throw new Error("The experimental Metro feature `require.context` is not enabled in your project.");
  };
  metroRequire.resolveWeak = function fallbackRequireResolveWeak() {
    throw new Error("require.resolveWeak cannot be called dynamically.");
  };
  var inGuard = false;
  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue;
      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }
      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }
  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = 65535;
  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId,
      localId
    };
  }
  metroRequire.unpackModuleId = unpackModuleId;
  function packModuleId(value) {
    return (value.segmentId << ID_MASK_SHIFT) + value.localId;
  }
  metroRequire.packModuleId = packModuleId;
  var moduleDefinersBySegmentID = [];
  var definingSegmentByModuleID = new Map();
  function registerSegment(segmentId, moduleDefiner, moduleIds) {
    moduleDefinersBySegmentID[segmentId] = moduleDefiner;
    if (moduleIds) {
      moduleIds.forEach(moduleId => {
        if (!modules.has(moduleId) && !definingSegmentByModuleID.has(moduleId)) {
          definingSegmentByModuleID.set(moduleId, segmentId);
        }
      });
    }
  }
  function loadModuleImplementation(moduleId, module) {
    if (!module && moduleDefinersBySegmentID.length > 0) {
      var segmentId = definingSegmentByModuleID.get(moduleId) ?? 0;
      var definer = moduleDefinersBySegmentID[segmentId];
      if (definer != null) {
        definer(moduleId);
        module = modules.get(moduleId);
        definingSegmentByModuleID.delete(moduleId);
      }
    }
    var nativeRequire = global.nativeRequire;
    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId),
        _segmentId = _unpackModuleId.segmentId,
        localId = _unpackModuleId.localId;
      nativeRequire(localId, _segmentId);
      module = modules.get(moduleId);
    }
    if (!module) {
      throw unknownModuleError(moduleId);
    }
    if (module.hasError) {
      throw module.error;
    }
    module.isInitialized = true;
    var _module = module,
      factory = _module.factory,
      dependencyMap = _module.dependencyMap;
    try {
      var moduleObject = module.publicModule;
      moduleObject.id = moduleId;
      factory(global, metroRequire, metroImportDefault, metroImportAll, moduleObject, moduleObject.exports, dependencyMap);
      {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }
      return moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.publicModule.exports = undefined;
      throw e;
    } finally {}
  }
  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';
    return Error(message);
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @polyfill
   * @nolint
   * @format
   */

  /* eslint-disable no-shadow, eqeqeq, curly, no-unused-vars, no-void, no-control-regex  */

  /**
   * This pipes all of our console logging functions to native logging so that
   * JavaScript errors in required modules show up in Xcode via NSLog.
   */
  var inspect = function () {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    // https://github.com/joyent/node/blob/master/lib/util.js

    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        formatValueCalls: 0,
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      ctx.formatValueCalls++;
      if (ctx.formatValueCalls > 200) {
        return `[TOO BIG formatValueCalls ${ctx.formatValueCalls} exceeded limit of 200]`;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = '',
        array = false,
        braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value)) return ctx.stylize('null', 'null');
    }
    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').slice(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.slice(1, name.length - 1);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }
      return name + ': ' + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }
      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
      return Array.isArray(ar);
    }
    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    function isNull(arg) {
      return arg === null;
    }
    function isNumber(arg) {
      return typeof arg === 'number';
    }
    function isString(arg) {
      return typeof arg === 'string';
    }
    function isUndefined(arg) {
      return arg === undefined;
    }
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }
    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    function isFunction(arg) {
      return typeof arg === 'function';
    }
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    return inspect;
  }();
  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';

  // Strip the inner function in getNativeLogFunction(), if in dev also
  // strip method printing to originalConsole.
  var INSPECTOR_FRAMES_TO_SKIP = 1;
  function getNativeLogFunction(level) {
    return function () {
      var str;
      if (arguments.length === 1 && typeof arguments[0] === 'string') {
        str = arguments[0];
      } else {
        str = Array.prototype.map.call(arguments, function (arg) {
          return inspect(arg, {
            depth: 10
          });
        }).join(', ');
      }

      // TRICKY
      // If more than one argument is provided, the code above collapses them all
      // into a single formatted string. This transform wraps string arguments in
      // single quotes (e.g. "foo" -> "'foo'") which then breaks the "Warning:"
      // check below. So it's important that we look at the first argument, rather
      // than the formatted argument string.
      var firstArg = arguments[0];
      var logLevel = level;
      if (typeof firstArg === 'string' && firstArg.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
        // React warnings use console.error so that a stack trace is shown,
        // but we don't (currently) want these to show a redbox
        // (Note: Logic duplicated in ExceptionsManager.js.)
        logLevel = LOG_LEVELS.warn;
      }
      if (global.__inspectorLog) {
        global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
      }
      if (groupStack.length) {
        str = groupFormat('', str);
      }
      global.nativeLoggingHook(str, logLevel);
    };
  }
  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  }
  function consoleTablePolyfill(rows) {
    // convert object -> array
    if (!Array.isArray(rows)) {
      var data = rows;
      rows = [];
      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var row = data[key];
          row[OBJECT_COLUMN_NAME] = key;
          rows.push(row);
        }
      }
    }
    if (rows.length === 0) {
      global.nativeLoggingHook('', LOG_LEVELS.info);
      return;
    }
    var columns = Object.keys(rows[0]).sort();
    var stringRows = [];
    var columnWidths = [];

    // Convert each cell to a string. Also
    // figure out max cell width for each column
    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;
      for (var j = 0; j < rows.length; j++) {
        var cellStr = (rows[j][k] || '?').toString();
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    // Join all elements in the row into a single string with | separators
    // (appends extra spaces to each cell to make separators  | aligned)
    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
        return cell + extraSpaces;
      });
      space = space || ' ';
      return cells.join(space + '|' + space);
    }
    var separators = columnWidths.map(function (columnWidth) {
      return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators, '-');
    var header = joinRow(columns);
    var table = [header, separatorRow];
    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    // Notice extra empty line at the beginning.
    // Native logging hook adds "RCTLog >" at the front of every
    // logged string, which would shift the header and screw up
    // the table
    global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
  }
  var GROUP_PAD = '\u2502'; // Box light vertical
  var GROUP_OPEN = '\u2510'; // Box light down+left
  var GROUP_CLOSE = '\u2518'; // Box light up+left

  var groupStack = [];
  function groupFormat(prefix, msg) {
    // Insert group formatting before the console message
    return groupStack.join('') + prefix + ' ' + (msg || '');
  }
  function consoleGroupPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_OPEN, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }
  function consoleGroupCollapsedPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }
  function consoleGroupEndPolyfill() {
    groupStack.pop();
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE), LOG_LEVELS.info);
  }
  function consoleAssertPolyfill(expression, label) {
    if (!expression) {
      global.nativeLoggingHook('Assertion failed: ' + label, LOG_LEVELS.error);
    }
  }
  if (global.nativeLoggingHook) {
    var originalConsole = global.console;
    // Preserve the original `console` as `originalConsole`

    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill,
      group: consoleGroupPolyfill,
      groupEnd: consoleGroupEndPolyfill,
      groupCollapsed: consoleGroupCollapsedPolyfill,
      assert: consoleAssertPolyfill
    };
    Object.defineProperty(console, '_isPolyfilled', {
      value: true,
      enumerable: false
    });

    // If available, also call the original `console` method since that is
    // sometimes useful. Ex: on OS X, this will let you see rich output in
    // the Safari Web Inspector console.
  } else if (!global.console) {
    var stub = function () {};
    var log = global.print || stub;
    global.console = {
      debug: log,
      error: log,
      info: log,
      log: log,
      trace: log,
      warn: log,
      assert(expression, label) {
        if (!expression) {
          log('Assertion failed: ' + label);
        }
      },
      clear: stub,
      dir: stub,
      dirxml: stub,
      group: stub,
      groupCollapsed: stub,
      groupEnd: stub,
      profile: stub,
      profileEnd: stub,
      table: stub
    };
    Object.defineProperty(console, '_isPolyfilled', {
      value: true,
      enumerable: false
    });
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  var _inGuard = 0;
  var _globalHandler = function onError(e, isFatal) {
    throw e;
  };
  var ErrorUtils = {
    setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler() {
      return _globalHandler;
    },
    reportError(error) {
      _globalHandler && _globalHandler(error, false);
    },
    reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard(fun, context, args, unused_onError, unused_name) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }
      return null;
    },
    applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }
      return null;
    },
    inGuard() {
      return !!_inGuard;
    },
    guard(fun, name, context) {
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }
      var guardName = name ?? fun.name ?? '<generated guard>';
      function guarded() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return ErrorUtils.applyWithGuard(fun, context ?? this, args, null, guardName);
      }
      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * @polyfill
   * @nolint
   */

  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    /**
     * Returns an array of the given object's own enumerable entries.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries
     */
    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        // `null` and `undefined` values are not allowed.
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }
        var entries = [];
        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }
        return entries;
      };
    }

    /**
     * Returns an array of the given object's own enumerable entries.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
     */
    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        // `null` and `undefined` values are not allowed.
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }
        var values = [];
        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }
        return values;
      };
    }
  })();
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  try {
    global.$$require_external = typeof expo === "undefined" ? require : moduleId => {
      throw new Error(`Node.js standard library module ${moduleId} is not available in this JavaScript environment`);
    };
  } catch {
    global.$$require_external = moduleId => {
      throw new Error(`Node.js standard library module ${moduleId} is not available in this JavaScript environment`);
    };
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _registerRootComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var _App = _interopRequireDefault(require(_dependencyMap[2]));
  (0, _registerRootComponent.default)(_App.default);
},0,[1,2,503]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
      "default": e
    };
  }
  module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
},1,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = registerRootComponent;
  require(_dependencyMap[0]);
  var _reactNative = require(_dependencyMap[1]);
  // @needsAudit
  /**
   * Sets the initial React component to render natively in the app's root React Native view on Android, iOS, tvOS and the web.
   *
   * This method does the following:
   * - Invokes React Native's `AppRegistry.registerComponent`.
   * - Invokes React Native web's `AppRegistry.runApplication` on web to render to the root `index.html` file.
   * - Polyfills the `process.nextTick` function globally.
   *
   * This method also adds the following dev-only features that are removed in production bundles.
   * - Adds the Fast Refresh and bundle splitting indicator to the app.
   * - Asserts if the `expo-updates` package is misconfigured.
   * - Asserts if `react-native` is not aliased to `react-native-web` when running in the browser.
   * @param component The React component class that renders the rest of your app.
   */
  function registerRootComponent(component) {
    var qualifiedComponent = component;
    _reactNative.AppRegistry.registerComponent('main', () => qualifiedComponent);
    // Skip querying the DOM if we're in a Node.js environment.
  }
},2,[3,45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  require(_dependencyMap[1]);
  require(_dependencyMap[2]);
  var _expoConstants = _interopRequireDefault(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _ExpoGo = require(_dependencyMap[5]);
  var _AppEntryNotFound = require(_dependencyMap[6]);
  var _ExpoErrorManager = require(_dependencyMap[7]);
  // load expo-asset immediately to set a custom `source` transformer in React Native

  if ((0, _ExpoGo.isRunningInExpoGo)()) {
    // set up some improvements to commonly logged error messages stemming from react-native
    var globalHandler = ErrorUtils.getGlobalHandler();
    ErrorUtils.setGlobalHandler((0, _ExpoErrorManager.createErrorHandler)(globalHandler));
  }

  // Warn if the New Architecture is not explicitly enabled in the app config and we are running in Expo Go.
  // This could be problematic because you will be developing your app with the New Architecture enabled and
  // but your builds will have the New Architecture disabled.

  // Disable the "Open debugger to view warnings" React Native DevTools warning in
  // Expo Go and expo-dev-client, because launching the debugger from there will not
  // get the correct JS target.
  var IS_RUNNING_IN_DEV_CLIENT = !!_reactNative.NativeModules.EXDevLauncher;
},3,[1,4,37,491,45,500,501,502]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  require(_dependencyMap[0]);
},4,[5]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _PolyfillFunctions = require(_dependencyMap[0]);
  var _FormData = require(_dependencyMap[1]);
  // This file configures the runtime environment to increase compatibility with WinterCG.
  // https://wintercg.org/

  // Add a well-known shared symbol that doesn't show up in iteration or inspection
  // this can be used to detect if the global object abides by the Expo team's documented
  // built-in requirements.
  var BUILTIN_SYMBOL = Symbol.for('expo.builtin');
  function addBuiltinSymbol(obj) {
    Object.defineProperty(obj, BUILTIN_SYMBOL, {
      value: true,
      enumerable: false,
      configurable: false
    });
    return obj;
  }
  function install(name, getValue) {
    (0, _PolyfillFunctions.polyfillGlobal)(name, () => addBuiltinSymbol(getValue()));
  }

  // https://encoding.spec.whatwg.org/#textdecoder
  install('TextDecoder', () => require(_dependencyMap[2]).TextDecoder);
  // https://url.spec.whatwg.org/#url
  install('URL', () => require(_dependencyMap[3]).URL);
  // https://url.spec.whatwg.org/#urlsearchparams
  install('URLSearchParams', () => require(_dependencyMap[3]).URLSearchParams);
  (0, _FormData.installFormDataPatch)(FormData);

  // Polyfill async iterator symbol for Hermes.
  // @ts-expect-error: readonly property only applies when the engine supports it
  Symbol.asyncIterator ??= Symbol.for('Symbol.asyncIterator');
},5,[6,8,9,15]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var defineLazyObjectProperty = require(_dependencyMap[0]);
  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);
    var _ref = descriptor || {},
      enumerable = _ref.enumerable,
      writable = _ref.writable,
      _ref$configurable = _ref.configurable,
      configurable = _ref$configurable === undefined ? false : _ref$configurable;
    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }
    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }
  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }
  module.exports = {
    polyfillObjectProperty,
    polyfillGlobal
  };
},6,[7]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value;
    var valueSet = false;
    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }
      return value;
    }
    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable,
        writable
      });
    }
    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable
    });
  }
  module.exports = defineLazyObjectProperty;
},7,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.installFormDataPatch = installFormDataPatch;
  // React Native's FormData implementation is missing several methods that are used in React for server actions.
  // https://github.com/facebook/react-native/blob/42dcfdd2cdb59fe545523cb57db6ee32a96b9298/packages/react-native/Libraries/Network/FormData.js#L1
  // https://github.com/facebook/react/blob/985747f81033833dca22f30b0c04704dd4bd3714/packages/react-client/src/ReactFlightReplyClient.js#L212

  function ensureMinArgCount(name, args, expected) {
    if (args.length < expected) {
      var argName = expected === 2 ? 'arguments' : 'argument';
      // Matches the errors in Chrome.
      throw new TypeError(`Failed to execute '${name}' on 'FormData': ${expected} ${argName} required, but only ${args.length} present.`);
    }
  }
  function normalizeArgs(name, value) {
    if (typeof value !== 'object') {
      value = String(value);
    }
    // TODO: Add Blob normalization in the future, right now this isn't supported to ensure parity with the rest of the FormData
    // implementation in React Native.
    // https://github.com/facebook/react-native/blob/42dcfdd2cdb59fe545523cb57db6ee32a96b9298/packages/react-native/Libraries/Network/FormData.js#L64

    return [String(name), value];
  }
  function installFormDataPatch(formData) {
    formData.prototype.append ??= function append() {
      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {
        props[_key] = arguments[_key];
      }
      ensureMinArgCount('append', props, 2);
      var name = props[0],
        value = props[1];
      this._parts.push(normalizeArgs(name, value));
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.set ??= function set() {
      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        props[_key2] = arguments[_key2];
      }
      ensureMinArgCount('set', props, 2);
      var name = props[0],
        value = props[1];
      var args = normalizeArgs(name, value);
      var replaced = false;
      for (var i = 0; i < this._parts.length; i++) {
        if (this._parts[i][0] === args[0]) {
          if (!replaced) {
            this._parts[i] = args;
            replaced = true;
          } else {
            this._parts.splice(i, 1);
            i--;
          }
        }
      }
      if (!replaced) {
        this._parts.push(args);
      }
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.delete ??= function () {
      for (var _len3 = arguments.length, props = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        props[_key3] = arguments[_key3];
      }
      ensureMinArgCount('delete', props, 1);
      var name = props[0];
      name = String(name);
      for (var i = 0; i < this._parts.length; i++) {
        if (this._parts[i][0] === name) {
          this._parts.splice(i, 1);
          i--;
        }
      }
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.get ??= function () {
      for (var _len4 = arguments.length, props = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        props[_key4] = arguments[_key4];
      }
      ensureMinArgCount('get', props, 1);
      var name = props[0];
      name = String(name);
      for (var part of this._parts) {
        if (part[0] === name) {
          // @ts-expect-error: We don't perform correct normalization when setting the args so the return value will
          // not be a normalized File object.
          return part[1];
        }
      }
      return null;
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.has ??= function () {
      for (var _len5 = arguments.length, props = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        props[_key5] = arguments[_key5];
      }
      ensureMinArgCount('has', props, 1);
      var name = props[0];
      name = String(name);
      for (var part of this._parts) {
        if (part[0] === name) {
          return true;
        }
      }
      return false;
    };

    // Required for RSC: https://github.com/facebook/react/blob/985747f81033833dca22f30b0c04704dd4bd3714/packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js#L1056
    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.forEach ??= function forEach() {
      for (var _len6 = arguments.length, props = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        props[_key6] = arguments[_key6];
      }
      ensureMinArgCount('forEach', props, 1);
      var callback = props[0],
        thisArg = props[1];
      if (typeof callback !== 'function') {
        throw new TypeError(`Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.`);
      }
      for (var part of this._parts) {
        callback.call(thisArg, part[1], part[0], this);
      }
    };

    // Required for RSC: https://github.com/facebook/react/blob/985747f81033833dca22f30b0c04704dd4bd3714/packages/react-server/src/ReactFlightServer.js#L2117
    formData.prototype.entries = function* entries() {
      for (var part of this._parts) {
        // @ts-expect-error: We don't perform correct normalization when setting the args so the return value will
        // not be a normalized File object.
        yield part;
      }
    };
    formData.prototype.keys ??= function* keys() {
      for (var part of this._parts) {
        yield part[0];
      }
    };
    formData.prototype.values ??= function* values() {
      for (var part of this._parts) {
        // @ts-expect-error: We don't perform correct normalization when setting the args so the return value will
        // not be a normalized File object.
        yield part[1];
      }
    };
    formData.prototype[Symbol.iterator] = formData.prototype.entries;
    return formData;
  }
},8,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TextDecoder = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  // A fork of text-encoding but with only UTF-8 decoder.
  // `TextEncoder` is in Hermes and we only need utf-8 decoder for React Server Components.
  //
  // https://github.com/inexorabletash/text-encoding/blob/3f330964c0e97e1ed344c2a3e963f4598610a7ad/lib/encoding.js#L1

  /**
   * Checks if a number is within a specified range.
   * @param a The number to test.
   * @param min The minimum value in the range, inclusive.
   * @param max The maximum value in the range, inclusive.
   * @returns `true` if a passed number is within the specified range.
   */
  function inRange(a, min, max) {
    return min <= a && a <= max;
  }

  /**
   * Converts an array of code points to a string.
   * @param codePoints Array of code points.
   * @returns The string representation of given array.
   */
  function codePointsToString(codePoints) {
    var s = '';
    for (var i = 0; i < codePoints.length; ++i) {
      var cp = codePoints[i];
      if (cp <= 0xffff) {
        s += String.fromCharCode(cp);
      } else {
        cp -= 0x10000;
        s += String.fromCharCode((cp >> 10) + 0xd800, (cp & 0x3ff) + 0xdc00);
      }
    }
    return s;
  }
  function normalizeBytes(input) {
    if (typeof input === 'object' && input instanceof ArrayBuffer) {
      return new Uint8Array(input);
    } else if (typeof input === 'object' && 'buffer' in input && input.buffer instanceof ArrayBuffer) {
      return new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
    }
    return new Uint8Array(0);
  }

  /**
   * End-of-stream is a special token that signifies no more tokens
   * are in the stream.
   */
  var END_OF_STREAM = -1;
  var FINISHED = -1;

  /**
   * A stream represents an ordered sequence of tokens.
   *
   * @constructor
   * @param {!(number[]|Uint8Array)} tokens Array of tokens that provide the stream.
   */
  var Stream = /*#__PURE__*/function () {
    function Stream(tokens) {
      (0, _classCallCheck2.default)(this, Stream);
      this.tokens = Array.prototype.slice.call(tokens);
      // Reversed as push/pop is more efficient than shift/unshift.
      this.tokens.reverse();
    }

    /**
     * @return {boolean} True if end-of-stream has been hit.
     */
    return (0, _createClass2.default)(Stream, [{
      key: "endOfStream",
      value: function endOfStream() {
        return !this.tokens.length;
      }

      /**
       * When a token is read from a stream, the first token in the
       * stream must be returned and subsequently removed, and
       * end-of-stream must be returned otherwise.
       *
       * @return {number} Get the next token from the stream, or
       * end_of_stream.
       */
    }, {
      key: "read",
      value: function read() {
        if (!this.tokens.length) return END_OF_STREAM;
        return this.tokens.pop();
      }

      /**
       * When one or more tokens are prepended to a stream, those tokens
       * must be inserted, in given order, before the first token in the
       * stream.
       *
       * @param token The token(s) to prepend to the stream.
       */
    }, {
      key: "prepend",
      value: function prepend(token) {
        if (Array.isArray(token)) {
          while (token.length) this.tokens.push(token.pop());
        } else {
          this.tokens.push(token);
        }
      }

      /**
       * When one or more tokens are pushed to a stream, those tokens
       * must be inserted, in given order, after the last token in the
       * stream.
       *
       * @param token The tokens(s) to push to the stream.
       */
    }, {
      key: "push",
      value: function push(token) {
        if (Array.isArray(token)) {
          while (token.length) this.tokens.unshift(token.shift());
        } else {
          this.tokens.unshift(token);
        }
      }
    }]);
  }();
  function decoderError(fatal, opt_code_point) {
    if (fatal) throw TypeError('Decoder error');
    return opt_code_point || 0xfffd;
  }
  var LABEL_ENCODING_MAP = {};
  function getEncoding(label) {
    label = label.trim().toLowerCase();
    if (label in LABEL_ENCODING_MAP) {
      return LABEL_ENCODING_MAP[label];
    }
    return null;
  }

  /** [Encodings table](https://encoding.spec.whatwg.org/encodings.json) (Incomplete as we only need TextDecoder utf8 in Expo RSC. A more complete implementation should be added to Hermes as native code.) */
  var ENCODING_MAP = [{
    encodings: [{
      labels: ['unicode-1-1-utf-8', 'unicode11utf8', 'unicode20utf8', 'utf-8', 'utf8', 'x-unicode20utf8'],
      name: 'UTF-8'
    }],
    heading: 'The Encoding'
  }];
  ENCODING_MAP.forEach(category => {
    category.encodings.forEach(encoding => {
      encoding.labels.forEach(label => {
        LABEL_ENCODING_MAP[label] = encoding;
      });
    });
  });

  // Registry of of encoder/decoder factories, by encoding name.
  var DECODERS = {
    'UTF-8': options => new UTF8Decoder(options)
  };

  // 9.1.1 utf-8 decoder
  var UTF8Decoder = /*#__PURE__*/function () {
    function UTF8Decoder(options) {
      (0, _classCallCheck2.default)(this, UTF8Decoder);
      this.options = options;
      // utf-8's decoder's has an associated utf-8 code point, utf-8
      // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
      // lower boundary (initially 0x80), and a utf-8 upper boundary
      // (initially 0xBF).
      this.utf8CodePoint = 0;
      this.utf8BytesSeen = 0;
      this.utf8BytesNeeded = 0;
      this.utf8LowerBoundary = 0x80;
      this.utf8UpperBoundary = 0xbf;
    }
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    return (0, _createClass2.default)(UTF8Decoder, [{
      key: "handler",
      value: function handler(stream, bite) {
        // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
        // set utf-8 bytes needed to 0 and return error.
        if (bite === END_OF_STREAM && this.utf8BytesNeeded !== 0) {
          this.utf8BytesNeeded = 0;
          return decoderError(this.options.fatal);
        }

        // 2. If byte is end-of-stream, return finished.
        if (bite === END_OF_STREAM) return FINISHED;

        // 3. If utf-8 bytes needed is 0, based on byte:
        if (this.utf8BytesNeeded === 0) {
          // 0x00 to 0x7F
          if (inRange(bite, 0x00, 0x7f)) {
            // Return a code point whose value is byte.
            return bite;
          }

          // 0xC2 to 0xDF
          else if (inRange(bite, 0xc2, 0xdf)) {
            // 1. Set utf-8 bytes needed to 1.
            this.utf8BytesNeeded = 1;

            // 2. Set UTF-8 code point to byte & 0x1F.
            this.utf8CodePoint = bite & 0x1f;
          }

          // 0xE0 to 0xEF
          else if (inRange(bite, 0xe0, 0xef)) {
            // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
            if (bite === 0xe0) this.utf8LowerBoundary = 0xa0;
            // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
            if (bite === 0xed) this.utf8UpperBoundary = 0x9f;
            // 3. Set utf-8 bytes needed to 2.
            this.utf8BytesNeeded = 2;
            // 4. Set UTF-8 code point to byte & 0xF.
            this.utf8CodePoint = bite & 0xf;
          }

          // 0xF0 to 0xF4
          else if (inRange(bite, 0xf0, 0xf4)) {
            // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
            if (bite === 0xf0) this.utf8LowerBoundary = 0x90;
            // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
            if (bite === 0xf4) this.utf8UpperBoundary = 0x8f;
            // 3. Set utf-8 bytes needed to 3.
            this.utf8BytesNeeded = 3;
            // 4. Set UTF-8 code point to byte & 0x7.
            this.utf8CodePoint = bite & 0x7;
          }

          // Otherwise
          else {
            // Return error.
            return decoderError(this.options.fatal);
          }

          // Return continue.
          return null;
        }

        // 4. If byte is not in the range utf-8 lower boundary to utf-8
        // upper boundary, inclusive, run these substeps:
        if (!inRange(bite, this.utf8LowerBoundary, this.utf8UpperBoundary)) {
          // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
          // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
          // utf-8 upper boundary to 0xBF.
          this.utf8CodePoint = 0;
          this.utf8BytesNeeded = 0;
          this.utf8BytesSeen = 0;
          this.utf8LowerBoundary = 0x80;
          this.utf8UpperBoundary = 0xbf;

          // 2. Prepend byte to stream.
          stream.prepend(bite);

          // 3. Return error.
          return decoderError(this.options.fatal);
        }

        // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
        // to 0xBF.
        this.utf8LowerBoundary = 0x80;
        this.utf8UpperBoundary = 0xbf;

        // 6. Set UTF-8 code point to (UTF-8 code point << 6) | (byte &
        // 0x3F)
        this.utf8CodePoint = this.utf8CodePoint << 6 | bite & 0x3f;

        // 7. Increase utf-8 bytes seen by one.
        this.utf8BytesSeen += 1;

        // 8. If utf-8 bytes seen is not equal to utf-8 bytes needed,
        // continue.
        if (this.utf8BytesSeen !== this.utf8BytesNeeded) return null;

        // 9. Let code point be utf-8 code point.
        var code_point = this.utf8CodePoint;

        // 10. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
        // seen to 0.
        this.utf8CodePoint = 0;
        this.utf8BytesNeeded = 0;
        this.utf8BytesSeen = 0;

        // 11. Return a code point whose value is code point.
        return code_point;
      }
    }]);
  }(); // 8.1 Interface TextDecoder
  // @docsMissing
  var TextDecoder = exports.TextDecoder = /*#__PURE__*/function () {
    function TextDecoder() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf-8';
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      (0, _classCallCheck2.default)(this, TextDecoder);
      this._BOMseen = false;
      this._doNotFlush = false;
      this._decoder = null;
      if (options != null && typeof options !== 'object') {
        throw new TypeError('Second argument of TextDecoder must be undefined or an object, e.g. { fatal: true }');
      }
      var normalizedLabel = String(label).trim().toLowerCase();
      var encoding = getEncoding(normalizedLabel);
      if (encoding === null || encoding.name === 'replacement') {
        throw new RangeError(`Unknown encoding: ${label} (normalized: ${normalizedLabel})`);
      }
      if (!DECODERS[encoding.name]) {
        throw new Error(`Decoder not present: ${encoding.name}`);
      }
      this._encoding = encoding;
      this._ignoreBOM = !!options.ignoreBOM;
      this._errorMode = options.fatal ? 'fatal' : 'replacement';
    }

    // Getter methods for encoding, fatal, and ignoreBOM
    return (0, _createClass2.default)(TextDecoder, [{
      key: "encoding",
      get: function () {
        return this._encoding?.name.toLowerCase() ?? '';
      }
    }, {
      key: "fatal",
      get: function () {
        return this._errorMode === 'fatal';
      }
    }, {
      key: "ignoreBOM",
      get: function () {
        return this._ignoreBOM;
      }
    }, {
      key: "decode",
      value: function decode(input) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var bytes = normalizeBytes(input);

        // 1. If the do not flush flag is unset, set decoder to a new
        // encoding's decoder, set stream to a new stream, and unset the
        // BOM seen flag.
        if (!this._doNotFlush) {
          this._decoder = DECODERS[this._encoding.name]({
            fatal: this.fatal
          });
          this._BOMseen = false;
        }

        // 2. If options's stream is true, set the do not flush flag, and
        // unset the do not flush flag otherwise.
        this._doNotFlush = Boolean(options['stream']);

        // 3. If input is given, push a copy of input to stream.
        // TODO: Align with spec algorithm - maintain stream on instance.
        var input_stream = new Stream(bytes);

        // 4. Let output be a new stream.
        var output = [];
        while (true) {
          var token = input_stream.read();
          if (token === END_OF_STREAM) break;
          var result = this._decoder.handler(input_stream, token);
          if (result === FINISHED) break;
          if (result !== null) {
            output.push(result);
          }
        }
        if (!this._doNotFlush) {
          do {
            var _result = this._decoder.handler(input_stream, input_stream.read());
            if (_result === FINISHED) break;
            if (_result === null) continue;
            if (Array.isArray(_result)) output.push(..._result);else output.push(_result);
          } while (!input_stream.endOfStream());
          this._decoder = null;
        }
        return this.serializeStream(output);
      }

      // serializeStream method for converting code points to a string
    }, {
      key: "serializeStream",
      value: function serializeStream(stream) {
        if (this._encoding.name === 'UTF-8') {
          if (!this._ignoreBOM && !this._BOMseen && stream[0] === 0xfeff) {
            // If BOM is detected at the start of the stream and we're not ignoring it
            this._BOMseen = true;
            stream.shift(); // Remove the BOM
          } else if (stream.length > 0) {
            this._BOMseen = true;
          }
        }

        // Convert the stream of code points to a string
        return codePointsToString(stream);
      }
    }]);
  }();
},9,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
},10,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var toPropertyKey = require(_dependencyMap[0]);
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: false
    }), e;
  }
  module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
},11,[12]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = require(_dependencyMap[0])["default"];
  var toPrimitive = require(_dependencyMap[1]);
  function toPropertyKey(t) {
    var i = toPrimitive(t, "string");
    return "symbol" == _typeof(i) ? i : i + "";
  }
  module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
},12,[13,14]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _typeof(o) {
    "@babel/helpers - typeof";

    return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
  }
  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
},13,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = require(_dependencyMap[0])["default"];
  function toPrimitive(t, r) {
    if ("object" != _typeof(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (undefined !== e) {
      var i = e.call(t, r || "default");
      if ("object" != _typeof(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
},14,[13]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "URL", {
    enumerable: true,
    get: function () {
      return _whatwgUrlWithoutUnicode.URL;
    }
  });
  Object.defineProperty(exports, "URLSearchParams", {
    enumerable: true,
    get: function () {
      return _whatwgUrlWithoutUnicode.URLSearchParams;
    }
  });
  var _whatwgUrlWithoutUnicode = require(_dependencyMap[0]);
  /**
   * Copyright © 2023-present 650 Industries, Inc. (aka Expo)
   * Copyright © Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  // This file should not import `react-native` in order to remain self-contained.

  var isSetup = false;
  var BLOB_URL_PREFIX = null;
  function getBlobUrlPrefix() {
    if (isSetup) return BLOB_URL_PREFIX;
    isSetup = true;
    // if iOS: let BLOB_URL_PREFIX = 'blob:'

    // Pull the blob module without importing React Native.
    var BlobModule = globalThis.RN$Bridgeless !== true ?
    // Legacy RN implementation
    globalThis.nativeModuleProxy['BlobModule'] :
    // Newer RN implementation
    globalThis.__turboModuleProxy('BlobModule');
    var constants = 'BLOB_URI_SCHEME' in BlobModule ? BlobModule : BlobModule.getConstants();
    if (constants && typeof constants.BLOB_URI_SCHEME === 'string') {
      BLOB_URL_PREFIX = encodeURIComponent(constants.BLOB_URI_SCHEME) + ':';
      if (typeof constants.BLOB_URI_HOST === 'string') {
        BLOB_URL_PREFIX += `//${encodeURIComponent(constants.BLOB_URI_HOST)}/`;
      }
    }
    return BLOB_URL_PREFIX;
  }

  /**
   * To allow Blobs be accessed via `content://` URIs,
   * you need to register `BlobProvider` as a ContentProvider in your app's `AndroidManifest.xml`:
   *
   * ```xml
   * <manifest>
   *   <application>
   *     <provider
   *       android:name="com.facebook.react.modules.blob.BlobProvider"
   *       android:authorities="@string/blob_provider_authority"
   *       android:exported="false"
   *     />
   *   </application>
   * </manifest>
   * ```
   * And then define the `blob_provider_authority` string in `res/values/strings.xml`.
   * Use a dotted name that's entirely unique to your app:
   *
   * ```xml
   * <resources>
   *   <string name="blob_provider_authority">your.app.package.blobs</string>
   * </resources>
   * ```
   */
  _whatwgUrlWithoutUnicode.URL.createObjectURL = function createObjectURL(blob) {
    if (getBlobUrlPrefix() == null) {
      throw new Error('Cannot create URL for blob');
    }
    return `${getBlobUrlPrefix()}${encodeURIComponent(blob.data.blobId)}?offset=${encodeURIComponent(blob.data.offset)}&size=${encodeURIComponent(blob.size)}`;
  };
  _whatwgUrlWithoutUnicode.URL.revokeObjectURL = function revokeObjectURL(url) {
    // Do nothing.
  };
  _whatwgUrlWithoutUnicode.URL.canParse = function canParse(url, base) {
    try {
      (0, _whatwgUrlWithoutUnicode.URL)(url, base);
      return true;
    } catch {
      return false;
    }
  };
},15,[16]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _require = require(_dependencyMap[0]),
    URL = _require.URL,
    URLSearchParams = _require.URLSearchParams;
  var urlStateMachine = require(_dependencyMap[1]);
  var urlEncoded = require(_dependencyMap[2]);
  var sharedGlobalObject = {};
  URL.install(sharedGlobalObject);
  URLSearchParams.install(sharedGlobalObject);
  exports.URL = sharedGlobalObject.URL;
  exports.URLSearchParams = sharedGlobalObject.URLSearchParams;
  exports.parseURL = urlStateMachine.parseURL;
  exports.basicURLParse = urlStateMachine.basicURLParse;
  exports.serializeURL = urlStateMachine.serializeURL;
  exports.serializeHost = urlStateMachine.serializeHost;
  exports.serializeInteger = urlStateMachine.serializeInteger;
  exports.serializeURLOrigin = urlStateMachine.serializeURLOrigin;
  exports.setTheUsername = urlStateMachine.setTheUsername;
  exports.setThePassword = urlStateMachine.setThePassword;
  exports.cannotHaveAUsernamePasswordPort = urlStateMachine.cannotHaveAUsernamePasswordPort;
  exports.percentDecode = urlEncoded.percentDecode;
},16,[17,22,28]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var URL = require(_dependencyMap[0]);
  var URLSearchParams = require(_dependencyMap[1]);
  exports.URL = URL;
  exports.URLSearchParams = URLSearchParams;
},17,[18,35]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var conversions = require(_dependencyMap[2]);
  var utils = require(_dependencyMap[3]);
  var impl = utils.implSymbol;
  var ctorRegistry = utils.ctorRegistrySymbol;
  var iface = {
    // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
    // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
    // implementing this mixin interface.
    _mixedIntoPredicates: [],
    is(obj) {
      if (obj) {
        if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
          return true;
        }
        for (var isMixedInto of module.exports._mixedIntoPredicates) {
          if (isMixedInto(obj)) {
            return true;
          }
        }
      }
      return false;
    },
    isImpl(obj) {
      if (obj) {
        if (obj instanceof Impl.implementation) {
          return true;
        }
        var wrapper = utils.wrapperForImpl(obj);
        for (var isMixedInto of module.exports._mixedIntoPredicates) {
          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      }
      return false;
    },
    convert(obj) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === undefined ? "The provided value" : _ref$context;
      if (module.exports.is(obj)) {
        return utils.implForWrapper(obj);
      }
      throw new TypeError(`${context} is not of type 'URL'.`);
    },
    create(globalObject, constructorArgs, privateData) {
      if (globalObject[ctorRegistry] === undefined) {
        throw new Error("Internal error: invalid global object");
      }
      var ctor = globalObject[ctorRegistry]["URL"];
      if (ctor === undefined) {
        throw new Error("Internal error: constructor URL is not installed on the passed global object");
      }
      var obj = Object.create(ctor.prototype);
      obj = iface.setup(obj, globalObject, constructorArgs, privateData);
      return obj;
    },
    createImpl(globalObject, constructorArgs, privateData) {
      var obj = iface.create(globalObject, constructorArgs, privateData);
      return utils.implForWrapper(obj);
    },
    _internalSetup(obj) {},
    setup(obj, globalObject) {
      var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      privateData.wrapper = obj;
      iface._internalSetup(obj);
      Object.defineProperty(obj, impl, {
        value: new Impl.implementation(globalObject, constructorArgs, privateData),
        configurable: true
      });
      obj[impl][utils.wrapperSymbol] = obj;
      if (Impl.init) {
        Impl.init(obj[impl], privateData);
      }
      return obj;
    },
    install(globalObject) {
      var URL = /*#__PURE__*/function () {
        function URL(url) {
          _classCallCheck(this, URL);
          if (arguments.length < 1) {
            throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
          }
          var args = [];
          {
            var curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to construct 'URL': parameter 1"
            });
            args.push(curArg);
          }
          {
            var _curArg = arguments[1];
            if (_curArg !== undefined) {
              _curArg = conversions["USVString"](_curArg, {
                context: "Failed to construct 'URL': parameter 2"
              });
            }
            args.push(_curArg);
          }
          return iface.setup(Object.create(this.constructor.prototype), globalObject, args);
        }
        return _createClass(URL, [{
          key: "toJSON",
          value: function toJSON() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl].toJSON();
          }
        }, {
          key: "href",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["href"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'href' property on 'URL': The provided value"
            });
            this[impl]["href"] = V;
          }
        }, {
          key: "toString",
          value: function toString() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["href"];
          }
        }, {
          key: "origin",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["origin"];
          }
        }, {
          key: "protocol",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["protocol"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'protocol' property on 'URL': The provided value"
            });
            this[impl]["protocol"] = V;
          }
        }, {
          key: "username",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["username"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'username' property on 'URL': The provided value"
            });
            this[impl]["username"] = V;
          }
        }, {
          key: "password",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["password"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'password' property on 'URL': The provided value"
            });
            this[impl]["password"] = V;
          }
        }, {
          key: "host",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["host"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'host' property on 'URL': The provided value"
            });
            this[impl]["host"] = V;
          }
        }, {
          key: "hostname",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["hostname"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'hostname' property on 'URL': The provided value"
            });
            this[impl]["hostname"] = V;
          }
        }, {
          key: "port",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["port"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'port' property on 'URL': The provided value"
            });
            this[impl]["port"] = V;
          }
        }, {
          key: "pathname",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["pathname"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'pathname' property on 'URL': The provided value"
            });
            this[impl]["pathname"] = V;
          }
        }, {
          key: "search",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["search"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'search' property on 'URL': The provided value"
            });
            this[impl]["search"] = V;
          }
        }, {
          key: "searchParams",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return utils.getSameObject(this, "searchParams", () => {
              return utils.tryWrapperForImpl(this[impl]["searchParams"]);
            });
          }
        }, {
          key: "hash",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["hash"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'hash' property on 'URL': The provided value"
            });
            this[impl]["hash"] = V;
          }
        }]);
      }();
      Object.defineProperties(URL.prototype, {
        toJSON: {
          enumerable: true
        },
        href: {
          enumerable: true
        },
        toString: {
          enumerable: true
        },
        origin: {
          enumerable: true
        },
        protocol: {
          enumerable: true
        },
        username: {
          enumerable: true
        },
        password: {
          enumerable: true
        },
        host: {
          enumerable: true
        },
        hostname: {
          enumerable: true
        },
        port: {
          enumerable: true
        },
        pathname: {
          enumerable: true
        },
        search: {
          enumerable: true
        },
        searchParams: {
          enumerable: true
        },
        hash: {
          enumerable: true
        },
        [Symbol.toStringTag]: {
          value: "URL",
          configurable: true
        }
      });
      if (globalObject[ctorRegistry] === undefined) {
        globalObject[ctorRegistry] = Object.create(null);
      }
      globalObject[ctorRegistry]["URL"] = URL;
      Object.defineProperty(globalObject, "URL", {
        configurable: true,
        writable: true,
        value: URL
      });
    }
  };
  // iface
  module.exports = iface;
  var Impl = require(_dependencyMap[4]);
},18,[10,11,19,20,21]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _(message, opts) {
    return `${opts && opts.context ? opts.context : "Value"} ${message}.`;
  }
  function type(V) {
    if (V === null) {
      return "Null";
    }
    switch (typeof V) {
      case "undefined":
        return "Undefined";
      case "boolean":
        return "Boolean";
      case "number":
        return "Number";
      case "string":
        return "String";
      case "symbol":
        return "Symbol";
      case "object":
      // Falls through
      case "function":
      // Falls through
      default:
        // Per ES spec, typeof returns an implemention-defined value that is not any of the existing ones for
        // uncallable non-standard exotic objects. Yet Type() which the Web IDL spec depends on returns Object for
        // such cases. So treat the default case as an object.
        return "Object";
    }
  }

  // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
  function evenRound(x) {
    // There are four cases for numbers with fractional part being .5:
    //
    // case |     x     | floor(x) | round(x) | expected | x <> 0 | x % 1 | x & 1 |   example
    //   1  |  2n + 0.5 |  2n      |  2n + 1  |  2n      |   >    |  0.5  |   0   |  0.5 ->  0
    //   2  |  2n + 1.5 |  2n + 1  |  2n + 2  |  2n + 2  |   >    |  0.5  |   1   |  1.5 ->  2
    //   3  | -2n - 0.5 | -2n - 1  | -2n      | -2n      |   <    | -0.5  |   0   | -0.5 ->  0
    //   4  | -2n - 1.5 | -2n - 2  | -2n - 1  | -2n - 2  |   <    | -0.5  |   1   | -1.5 -> -2
    // (where n is a non-negative integer)
    //
    // Branch here for cases 1 and 4
    if (x > 0 && x % 1 === 0.5 && (x & 1) === 0 || x < 0 && x % 1 === -0.5 && (x & 1) === 1) {
      return censorNegativeZero(Math.floor(x));
    }
    return censorNegativeZero(Math.round(x));
  }
  function integerPart(n) {
    return censorNegativeZero(Math.trunc(n));
  }
  function sign(x) {
    return x < 0 ? -1 : 1;
  }
  function modulo(x, y) {
    // https://tc39.github.io/ecma262/#eqn-modulo
    // Note that http://stackoverflow.com/a/4467559/3191 does NOT work for large modulos
    var signMightNotMatch = x % y;
    if (sign(y) !== sign(signMightNotMatch)) {
      return signMightNotMatch + y;
    }
    return signMightNotMatch;
  }
  function censorNegativeZero(x) {
    return x === 0 ? 0 : x;
  }
  function createIntegerConversion(bitLength, typeOpts) {
    var isSigned = !typeOpts.unsigned;
    var lowerBound;
    var upperBound;
    if (bitLength === 64) {
      upperBound = Math.pow(2, 53) - 1;
      lowerBound = !isSigned ? 0 : -Math.pow(2, 53) + 1;
    } else if (!isSigned) {
      lowerBound = 0;
      upperBound = Math.pow(2, bitLength) - 1;
    } else {
      lowerBound = -Math.pow(2, bitLength - 1);
      upperBound = Math.pow(2, bitLength - 1) - 1;
    }
    var twoToTheBitLength = Math.pow(2, bitLength);
    var twoToOneLessThanTheBitLength = Math.pow(2, bitLength - 1);
    return (V, opts) => {
      if (opts === undefined) {
        opts = {};
      }
      var x = +V;
      x = censorNegativeZero(x); // Spec discussion ongoing: https://github.com/heycam/webidl/issues/306

      if (opts.enforceRange) {
        if (!Number.isFinite(x)) {
          throw new TypeError(_("is not a finite number", opts));
        }
        x = integerPart(x);
        if (x < lowerBound || x > upperBound) {
          throw new TypeError(_(`is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`, opts));
        }
        return x;
      }
      if (!Number.isNaN(x) && opts.clamp) {
        x = Math.min(Math.max(x, lowerBound), upperBound);
        x = evenRound(x);
        return x;
      }
      if (!Number.isFinite(x) || x === 0) {
        return 0;
      }
      x = integerPart(x);

      // Math.pow(2, 64) is not accurately representable in JavaScript, so try to avoid these per-spec operations if
      // possible. Hopefully it's an optimization for the non-64-bitLength cases too.
      if (x >= lowerBound && x <= upperBound) {
        return x;
      }

      // These will not work great for bitLength of 64, but oh well. See the README for more details.
      x = modulo(x, twoToTheBitLength);
      if (isSigned && x >= twoToOneLessThanTheBitLength) {
        return x - twoToTheBitLength;
      }
      return x;
    };
  }
  exports.any = V => {
    return V;
  };
  exports.void = function () {
    return undefined;
  };
  exports.boolean = function (val) {
    return !!val;
  };
  exports.byte = createIntegerConversion(8, {
    unsigned: false
  });
  exports.octet = createIntegerConversion(8, {
    unsigned: true
  });
  exports.short = createIntegerConversion(16, {
    unsigned: false
  });
  exports["unsigned short"] = createIntegerConversion(16, {
    unsigned: true
  });
  exports.long = createIntegerConversion(32, {
    unsigned: false
  });
  exports["unsigned long"] = createIntegerConversion(32, {
    unsigned: true
  });
  exports["long long"] = createIntegerConversion(64, {
    unsigned: false
  });
  exports["unsigned long long"] = createIntegerConversion(64, {
    unsigned: true
  });
  exports.double = (V, opts) => {
    var x = +V;
    if (!Number.isFinite(x)) {
      throw new TypeError(_("is not a finite floating-point value", opts));
    }
    return x;
  };
  exports["unrestricted double"] = V => {
    var x = +V;
    return x;
  };
  exports.float = (V, opts) => {
    var x = +V;
    if (!Number.isFinite(x)) {
      throw new TypeError(_("is not a finite floating-point value", opts));
    }
    if (Object.is(x, -0)) {
      return x;
    }
    var y = Math.fround(x);
    if (!Number.isFinite(y)) {
      throw new TypeError(_("is outside the range of a single-precision floating-point value", opts));
    }
    return y;
  };
  exports["unrestricted float"] = V => {
    var x = +V;
    if (isNaN(x)) {
      return x;
    }
    if (Object.is(x, -0)) {
      return x;
    }
    return Math.fround(x);
  };
  exports.DOMString = function (V, opts) {
    if (opts === undefined) {
      opts = {};
    }
    if (opts.treatNullAsEmptyString && V === null) {
      return "";
    }
    if (typeof V === "symbol") {
      throw new TypeError(_("is a symbol, which cannot be converted to a string", opts));
    }
    return String(V);
  };
  exports.ByteString = (V, opts) => {
    var x = exports.DOMString(V, opts);
    var c;
    for (var i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
      if (c > 255) {
        throw new TypeError(_("is not a valid ByteString", opts));
      }
    }
    return x;
  };
  exports.USVString = (V, opts) => {
    var S = exports.DOMString(V, opts);
    var n = S.length;
    var U = [];
    for (var i = 0; i < n; ++i) {
      var c = S.charCodeAt(i);
      if (c < 0xD800 || c > 0xDFFF) {
        U.push(String.fromCodePoint(c));
      } else if (0xDC00 <= c && c <= 0xDFFF) {
        U.push(String.fromCodePoint(0xFFFD));
      } else if (i === n - 1) {
        U.push(String.fromCodePoint(0xFFFD));
      } else {
        var d = S.charCodeAt(i + 1);
        if (0xDC00 <= d && d <= 0xDFFF) {
          var a = c & 0x3FF;
          var b = d & 0x3FF;
          U.push(String.fromCodePoint(65536 + 1024 * a + b));
          ++i;
        } else {
          U.push(String.fromCodePoint(0xFFFD));
        }
      }
    }
    return U.join("");
  };
  exports.object = (V, opts) => {
    if (type(V) !== "Object") {
      throw new TypeError(_("is not an object", opts));
    }
    return V;
  };

  // Not exported, but used in Function and VoidFunction.

  // Neither Function nor VoidFunction is defined with [TreatNonObjectAsNull], so
  // handling for that is omitted.
  function convertCallbackFunction(V, opts) {
    if (typeof V !== "function") {
      throw new TypeError(_("is not a function", opts));
    }
    return V;
  }
  var abByteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
  function isArrayBuffer(V) {
    try {
      abByteLengthGetter.call(V);
      return true;
    } catch (e) {
      return false;
    }
  }

  // I don't think we can reliably detect detached ArrayBuffers.
  exports.ArrayBuffer = (V, opts) => {
    if (!isArrayBuffer(V)) {
      throw new TypeError(_("is not a view on an ArrayBuffer object", opts));
    }
    return V;
  };
  var dvByteLengthGetter = Object.getOwnPropertyDescriptor(DataView.prototype, "byteLength").get;
  exports.DataView = (V, opts) => {
    try {
      dvByteLengthGetter.call(V);
      return V;
    } catch (e) {
      throw new TypeError(_("is not a view on an DataView object", opts));
    }
  };
  [Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, Uint8ClampedArray, Float32Array, Float64Array].forEach(func => {
    var name = func.name;
    var article = /^[AEIOU]/.test(name) ? "an" : "a";
    exports[name] = (V, opts) => {
      if (!ArrayBuffer.isView(V) || V.constructor.name !== name) {
        throw new TypeError(_(`is not ${article} ${name} object`, opts));
      }
      return V;
    };
  });

  // Common definitions

  exports.ArrayBufferView = (V, opts) => {
    if (!ArrayBuffer.isView(V)) {
      throw new TypeError(_("is not a view on an ArrayBuffer object", opts));
    }
    return V;
  };
  exports.BufferSource = (V, opts) => {
    if (!ArrayBuffer.isView(V) && !isArrayBuffer(V)) {
      throw new TypeError(_("is not an ArrayBuffer object or a view on one", opts));
    }
    return V;
  };
  exports.DOMTimeStamp = exports["unsigned long long"];
  exports.Function = convertCallbackFunction;
  exports.VoidFunction = convertCallbackFunction;
},19,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  // Returns "Type(value) is Object" in ES terminology.
  function isObject(value) {
    return typeof value === "object" && value !== null || typeof value === "function";
  }
  function hasOwn(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  var wrapperSymbol = Symbol("wrapper");
  var implSymbol = Symbol("impl");
  var sameObjectCaches = Symbol("SameObject caches");
  var ctorRegistrySymbol = Symbol.for("[webidl2js]  constructor registry");
  function getSameObject(wrapper, prop, creator) {
    if (!wrapper[sameObjectCaches]) {
      wrapper[sameObjectCaches] = Object.create(null);
    }
    if (prop in wrapper[sameObjectCaches]) {
      return wrapper[sameObjectCaches][prop];
    }
    wrapper[sameObjectCaches][prop] = creator();
    return wrapper[sameObjectCaches][prop];
  }
  function wrapperForImpl(impl) {
    return impl ? impl[wrapperSymbol] : null;
  }
  function implForWrapper(wrapper) {
    return wrapper ? wrapper[implSymbol] : null;
  }
  function tryWrapperForImpl(impl) {
    var wrapper = wrapperForImpl(impl);
    return wrapper ? wrapper : impl;
  }
  function tryImplForWrapper(wrapper) {
    var impl = implForWrapper(wrapper);
    return impl ? impl : wrapper;
  }
  var iterInternalSymbol = Symbol("internal");
  var IteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
  function isArrayIndexPropName(P) {
    if (typeof P !== "string") {
      return false;
    }
    var i = P >>> 0;
    if (i === Math.pow(2, 32) - 1) {
      return false;
    }
    var s = `${i}`;
    if (P !== s) {
      return false;
    }
    return true;
  }
  var byteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
  function isArrayBuffer(value) {
    try {
      byteLengthGetter.call(value);
      return true;
    } catch (e) {
      return false;
    }
  }
  var supportsPropertyIndex = Symbol("supports property index");
  var supportedPropertyIndices = Symbol("supported property indices");
  var supportsPropertyName = Symbol("supports property name");
  var supportedPropertyNames = Symbol("supported property names");
  var indexedGet = Symbol("indexed property get");
  var indexedSetNew = Symbol("indexed property set new");
  var indexedSetExisting = Symbol("indexed property set existing");
  var namedGet = Symbol("named property get");
  var namedSetNew = Symbol("named property set new");
  var namedSetExisting = Symbol("named property set existing");
  var namedDelete = Symbol("named property delete");
  module.exports = exports = {
    isObject,
    hasOwn,
    wrapperSymbol,
    implSymbol,
    getSameObject,
    ctorRegistrySymbol,
    wrapperForImpl,
    implForWrapper,
    tryWrapperForImpl,
    tryImplForWrapper,
    iterInternalSymbol,
    IteratorPrototype,
    isArrayBuffer,
    isArrayIndexPropName,
    supportsPropertyIndex,
    supportedPropertyIndices,
    supportsPropertyName,
    supportedPropertyNames,
    indexedGet,
    indexedSetNew,
    indexedSetExisting,
    namedGet,
    namedSetNew,
    namedSetExisting,
    namedDelete
  };
},20,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var usm = require(_dependencyMap[2]);
  var urlencoded = require(_dependencyMap[3]);
  var URLSearchParams = require(_dependencyMap[4]);
  exports.implementation = /*#__PURE__*/function () {
    function URLImpl(globalObject, constructorArgs) {
      _classCallCheck(this, URLImpl);
      var url = constructorArgs[0];
      var base = constructorArgs[1];
      var parsedBase = null;
      if (base !== undefined) {
        parsedBase = usm.basicURLParse(base);
        if (parsedBase === null) {
          throw new TypeError(`Invalid base URL: ${base}`);
        }
      }
      var parsedURL = usm.basicURLParse(url, {
        baseURL: parsedBase
      });
      if (parsedURL === null) {
        throw new TypeError(`Invalid URL: ${url}`);
      }
      var query = parsedURL.query !== null ? parsedURL.query : "";
      this._url = parsedURL;

      // We cannot invoke the "new URLSearchParams object" algorithm without going through the constructor, which strips
      // question mark by default. Therefore the doNotStripQMark hack is used.
      this._query = URLSearchParams.createImpl(globalObject, [query], {
        doNotStripQMark: true
      });
      this._query._url = this;
    }
    return _createClass(URLImpl, [{
      key: "href",
      get: function () {
        return usm.serializeURL(this._url);
      },
      set: function (v) {
        var parsedURL = usm.basicURLParse(v);
        if (parsedURL === null) {
          throw new TypeError(`Invalid URL: ${v}`);
        }
        this._url = parsedURL;
        this._query._list.splice(0);
        var query = parsedURL.query;
        if (query !== null) {
          this._query._list = urlencoded.parseUrlencoded(query);
        }
      }
    }, {
      key: "origin",
      get: function () {
        return usm.serializeURLOrigin(this._url);
      }
    }, {
      key: "protocol",
      get: function () {
        return this._url.scheme + ":";
      },
      set: function (v) {
        usm.basicURLParse(v + ":", {
          url: this._url,
          stateOverride: "scheme start"
        });
      }
    }, {
      key: "username",
      get: function () {
        return this._url.username;
      },
      set: function (v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
    }, {
      key: "password",
      get: function () {
        return this._url.password;
      },
      set: function (v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
    }, {
      key: "host",
      get: function () {
        var url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      },
      set: function (v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, {
          url: this._url,
          stateOverride: "host"
        });
      }
    }, {
      key: "hostname",
      get: function () {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      },
      set: function (v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, {
          url: this._url,
          stateOverride: "hostname"
        });
      }
    }, {
      key: "port",
      get: function () {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      },
      set: function (v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, {
            url: this._url,
            stateOverride: "port"
          });
        }
      }
    }, {
      key: "pathname",
      get: function () {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      },
      set: function (v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, {
          url: this._url,
          stateOverride: "path start"
        });
      }
    }, {
      key: "search",
      get: function () {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      },
      set: function (v) {
        var url = this._url;
        if (v === "") {
          url.query = null;
          this._query._list = [];
          return;
        }
        var input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, {
          url,
          stateOverride: "query"
        });
        this._query._list = urlencoded.parseUrlencoded(input);
      }
    }, {
      key: "searchParams",
      get: function () {
        return this._query;
      }
    }, {
      key: "hash",
      get: function () {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      },
      set: function (v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        var input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, {
          url: this._url,
          stateOverride: "fragment"
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.href;
      }
    }]);
  }();
},21,[10,11,22,28,35]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _require = require(_dependencyMap[0]),
    Buffer = _require.Buffer;
  var punycode = require(_dependencyMap[1]);
  var infra = require(_dependencyMap[2]);
  var _require2 = require(_dependencyMap[3]),
    percentEncode = _require2.percentEncode,
    percentDecode = _require2.percentDecode;
  var specialSchemes = {
    ftp: 21,
    file: null,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };
  var failure = Symbol("failure");
  function countSymbols(str) {
    return punycode.ucs2.decode(str).length;
  }
  function at(input, idx) {
    var c = input[idx];
    return isNaN(c) ? undefined : String.fromCodePoint(c);
  }
  function isSingleDot(buffer) {
    return buffer === "." || buffer.toLowerCase() === "%2e";
  }
  function isDoubleDot(buffer) {
    buffer = buffer.toLowerCase();
    return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
  }
  function isWindowsDriveLetterCodePoints(cp1, cp2) {
    return infra.isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
  }
  function isWindowsDriveLetterString(string) {
    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
  }
  function isNormalizedWindowsDriveLetterString(string) {
    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
  }
  function containsForbiddenHostCodePoint(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function containsForbiddenHostCodePointExcludingPercent(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function isSpecialScheme(scheme) {
    return specialSchemes[scheme] !== undefined;
  }
  function isSpecial(url) {
    return isSpecialScheme(url.scheme);
  }
  function isNotSpecial(url) {
    return !isSpecialScheme(url.scheme);
  }
  function defaultPort(scheme) {
    return specialSchemes[scheme];
  }
  function utf8PercentEncode(c) {
    var buf = Buffer.from(c);
    var str = "";
    for (var i = 0; i < buf.length; ++i) {
      str += percentEncode(buf[i]);
    }
    return str;
  }
  function isC0ControlPercentEncode(c) {
    return c <= 0x1F || c > 0x7E;
  }
  var extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
  function isUserinfoPercentEncode(c) {
    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
  }
  var extraFragmentPercentEncodeSet = new Set([32, 34, 60, 62, 96]);
  function isFragmentPercentEncode(c) {
    return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);
  }
  var extraPathPercentEncodeSet = new Set([35, 63, 123, 125]);
  function isPathPercentEncode(c) {
    return isFragmentPercentEncode(c) || extraPathPercentEncodeSet.has(c);
  }
  function percentEncodeChar(c, encodeSetPredicate) {
    var cStr = String.fromCodePoint(c);
    if (encodeSetPredicate(c)) {
      return utf8PercentEncode(cStr);
    }
    return cStr;
  }
  function parseIPv4Number(input) {
    var R = 10;
    if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
      input = input.substring(2);
      R = 16;
    } else if (input.length >= 2 && input.charAt(0) === "0") {
      input = input.substring(1);
      R = 8;
    }
    if (input === "") {
      return 0;
    }
    var regex = /[^0-7]/;
    if (R === 10) {
      regex = /[^0-9]/;
    }
    if (R === 16) {
      regex = /[^0-9A-Fa-f]/;
    }
    if (regex.test(input)) {
      return failure;
    }
    return parseInt(input, R);
  }
  function parseIPv4(input) {
    var parts = input.split(".");
    if (parts[parts.length - 1] === "") {
      if (parts.length > 1) {
        parts.pop();
      }
    }
    if (parts.length > 4) {
      return input;
    }
    var numbers = [];
    for (var part of parts) {
      if (part === "") {
        return input;
      }
      var n = parseIPv4Number(part);
      if (n === failure) {
        return input;
      }
      numbers.push(n);
    }
    for (var i = 0; i < numbers.length - 1; ++i) {
      if (numbers[i] > 255) {
        return failure;
      }
    }
    if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
      return failure;
    }
    var ipv4 = numbers.pop();
    var counter = 0;
    for (var _n of numbers) {
      ipv4 += _n * Math.pow(256, 3 - counter);
      ++counter;
    }
    return ipv4;
  }
  function serializeIPv4(address) {
    var output = "";
    var n = address;
    for (var i = 1; i <= 4; ++i) {
      output = String(n % 256) + output;
      if (i !== 4) {
        output = "." + output;
      }
      n = Math.floor(n / 256);
    }
    return output;
  }
  function parseIPv6(input) {
    var address = [0, 0, 0, 0, 0, 0, 0, 0];
    var pieceIndex = 0;
    var compress = null;
    var pointer = 0;
    input = punycode.ucs2.decode(input);
    if (input[pointer] === 58) {
      if (input[pointer + 1] !== 58) {
        return failure;
      }
      pointer += 2;
      ++pieceIndex;
      compress = pieceIndex;
    }
    while (pointer < input.length) {
      if (pieceIndex === 8) {
        return failure;
      }
      if (input[pointer] === 58) {
        if (compress !== null) {
          return failure;
        }
        ++pointer;
        ++pieceIndex;
        compress = pieceIndex;
        continue;
      }
      var value = 0;
      var length = 0;
      while (length < 4 && infra.isASCIIHex(input[pointer])) {
        value = value * 0x10 + parseInt(at(input, pointer), 16);
        ++pointer;
        ++length;
      }
      if (input[pointer] === 46) {
        if (length === 0) {
          return failure;
        }
        pointer -= length;
        if (pieceIndex > 6) {
          return failure;
        }
        var numbersSeen = 0;
        while (input[pointer] !== undefined) {
          var ipv4Piece = null;
          if (numbersSeen > 0) {
            if (input[pointer] === 46 && numbersSeen < 4) {
              ++pointer;
            } else {
              return failure;
            }
          }
          if (!infra.isASCIIDigit(input[pointer])) {
            return failure;
          }
          while (infra.isASCIIDigit(input[pointer])) {
            var number = parseInt(at(input, pointer));
            if (ipv4Piece === null) {
              ipv4Piece = number;
            } else if (ipv4Piece === 0) {
              return failure;
            } else {
              ipv4Piece = ipv4Piece * 10 + number;
            }
            if (ipv4Piece > 255) {
              return failure;
            }
            ++pointer;
          }
          address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;
          ++numbersSeen;
          if (numbersSeen === 2 || numbersSeen === 4) {
            ++pieceIndex;
          }
        }
        if (numbersSeen !== 4) {
          return failure;
        }
        break;
      } else if (input[pointer] === 58) {
        ++pointer;
        if (input[pointer] === undefined) {
          return failure;
        }
      } else if (input[pointer] !== undefined) {
        return failure;
      }
      address[pieceIndex] = value;
      ++pieceIndex;
    }
    if (compress !== null) {
      var swaps = pieceIndex - compress;
      pieceIndex = 7;
      while (pieceIndex !== 0 && swaps > 0) {
        var temp = address[compress + swaps - 1];
        address[compress + swaps - 1] = address[pieceIndex];
        address[pieceIndex] = temp;
        --pieceIndex;
        --swaps;
      }
    } else if (compress === null && pieceIndex !== 8) {
      return failure;
    }
    return address;
  }
  function serializeIPv6(address) {
    var output = "";
    var seqResult = findLongestZeroSequence(address);
    var compress = seqResult.idx;
    var ignore0 = false;
    for (var pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
      if (ignore0 && address[pieceIndex] === 0) {
        continue;
      } else if (ignore0) {
        ignore0 = false;
      }
      if (compress === pieceIndex) {
        var separator = pieceIndex === 0 ? "::" : ":";
        output += separator;
        ignore0 = true;
        continue;
      }
      output += address[pieceIndex].toString(16);
      if (pieceIndex !== 7) {
        output += ":";
      }
    }
    return output;
  }
  function parseHost(input) {
    var isNotSpecialArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (input[0] === "[") {
      if (input[input.length - 1] !== "]") {
        return failure;
      }
      return parseIPv6(input.substring(1, input.length - 1));
    }
    if (isNotSpecialArg) {
      return parseOpaqueHost(input);
    }
    var domain = percentDecode(Buffer.from(input)).toString();
    var asciiDomain = domainToASCII(domain);
    if (asciiDomain === failure) {
      return failure;
    }
    if (containsForbiddenHostCodePoint(asciiDomain)) {
      return failure;
    }
    var ipv4Host = parseIPv4(asciiDomain);
    if (typeof ipv4Host === "number" || ipv4Host === failure) {
      return ipv4Host;
    }
    return asciiDomain;
  }
  function parseOpaqueHost(input) {
    if (containsForbiddenHostCodePointExcludingPercent(input)) {
      return failure;
    }
    var output = "";
    var decoded = punycode.ucs2.decode(input);
    for (var i = 0; i < decoded.length; ++i) {
      output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
    }
    return output;
  }
  function findLongestZeroSequence(arr) {
    var maxIdx = null;
    var maxLen = 1; // only find elements > 1
    var currStart = null;
    var currLen = 0;
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] !== 0) {
        if (currLen > maxLen) {
          maxIdx = currStart;
          maxLen = currLen;
        }
        currStart = null;
        currLen = 0;
      } else {
        if (currStart === null) {
          currStart = i;
        }
        ++currLen;
      }
    }

    // if trailing zeros
    if (currLen > maxLen) {
      maxIdx = currStart;
      maxLen = currLen;
    }
    return {
      idx: maxIdx,
      len: maxLen
    };
  }
  function serializeHost(host) {
    if (typeof host === "number") {
      return serializeIPv4(host);
    }

    // IPv6 serializer
    if (host instanceof Array) {
      return "[" + serializeIPv6(host) + "]";
    }
    return host;
  }
  function domainToASCII(domain) {
    var result = domain;
    if (result === null) {
      return failure;
    }
    return result;
  }
  function trimControlChars(url) {
    return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
  }
  function trimTabAndNewline(url) {
    return url.replace(/\u0009|\u000A|\u000D/g, "");
  }
  function shortenPath(url) {
    var path = url.path;
    if (path.length === 0) {
      return;
    }
    if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
      return;
    }
    path.pop();
  }
  function includesCredentials(url) {
    return url.username !== "" || url.password !== "";
  }
  function cannotHaveAUsernamePasswordPort(url) {
    return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
  }
  function isNormalizedWindowsDriveLetter(string) {
    return /^[A-Za-z]:$/.test(string);
  }
  function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
    this.pointer = 0;
    this.input = input;
    this.base = base || null;
    this.encodingOverride = encodingOverride || "utf-8";
    this.stateOverride = stateOverride;
    this.url = url;
    this.failure = false;
    this.parseError = false;
    if (!this.url) {
      this.url = {
        scheme: "",
        username: "",
        password: "",
        host: null,
        port: null,
        path: [],
        query: null,
        fragment: null,
        cannotBeABaseURL: false
      };
      var _res = trimControlChars(this.input);
      if (_res !== this.input) {
        this.parseError = true;
      }
      this.input = _res;
    }
    var res = trimTabAndNewline(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;
    this.state = stateOverride || "scheme start";
    this.buffer = "";
    this.atFlag = false;
    this.arrFlag = false;
    this.passwordTokenSeenFlag = false;
    this.input = punycode.ucs2.decode(this.input);
    for (; this.pointer <= this.input.length; ++this.pointer) {
      var c = this.input[this.pointer];
      var cStr = isNaN(c) ? undefined : String.fromCodePoint(c);

      // exec state machine
      var ret = this["parse " + this.state](c, cStr);
      if (!ret) {
        break; // terminate algorithm
      } else if (ret === failure) {
        this.failure = true;
        break;
      }
    }
  }
  URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
    if (infra.isASCIIAlpha(c)) {
      this.buffer += cStr.toLowerCase();
      this.state = "scheme";
    } else if (!this.stateOverride) {
      this.state = "no scheme";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
    if (infra.isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
      this.buffer += cStr.toLowerCase();
    } else if (c === 58) {
      if (this.stateOverride) {
        if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
          return false;
        }
        if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
          return false;
        }
        if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
          return false;
        }
        if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
          return false;
        }
      }
      this.url.scheme = this.buffer;
      if (this.stateOverride) {
        if (this.url.port === defaultPort(this.url.scheme)) {
          this.url.port = null;
        }
        return false;
      }
      this.buffer = "";
      if (this.url.scheme === "file") {
        if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
          this.parseError = true;
        }
        this.state = "file";
      } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
        this.state = "special relative or authority";
      } else if (isSpecial(this.url)) {
        this.state = "special authority slashes";
      } else if (this.input[this.pointer + 1] === 47) {
        this.state = "path or authority";
        ++this.pointer;
      } else {
        this.url.cannotBeABaseURL = true;
        this.url.path.push("");
        this.state = "cannot-be-a-base-URL path";
      }
    } else if (!this.stateOverride) {
      this.buffer = "";
      this.state = "no scheme";
      this.pointer = -1;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
    if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
      return failure;
    } else if (this.base.cannotBeABaseURL && c === 35) {
      this.url.scheme = this.base.scheme;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.url.cannotBeABaseURL = true;
      this.state = "fragment";
    } else if (this.base.scheme === "file") {
      this.state = "file";
      --this.pointer;
    } else {
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
    if (c === 47) {
      this.state = "authority";
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
    this.url.scheme = this.base.scheme;
    if (isNaN(c)) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
    } else if (c === 47) {
      this.state = "relative slash";
    } else if (c === 63) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else if (isSpecial(this.url) && c === 92) {
      this.parseError = true;
      this.state = "relative slash";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice(0, this.base.path.length - 1);
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
    if (isSpecial(this.url) && (c === 47 || c === 92)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "special authority ignore slashes";
    } else if (c === 47) {
      this.state = "authority";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "special authority ignore slashes";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
    if (c !== 47 && c !== 92) {
      this.state = "authority";
      --this.pointer;
    } else {
      this.parseError = true;
    }
    return true;
  };
  URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
    if (c === 64) {
      this.parseError = true;
      if (this.atFlag) {
        this.buffer = "%40" + this.buffer;
      }
      this.atFlag = true;

      // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars
      var len = countSymbols(this.buffer);
      for (var pointer = 0; pointer < len; ++pointer) {
        var codePoint = this.buffer.codePointAt(pointer);
        if (codePoint === 58 && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = true;
          continue;
        }
        var encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
        if (this.passwordTokenSeenFlag) {
          this.url.password += encodedCodePoints;
        } else {
          this.url.username += encodedCodePoints;
        }
      }
      this.buffer = "";
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
      if (this.atFlag && this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      this.pointer -= countSymbols(this.buffer) + 1;
      this.buffer = "";
      this.state = "host";
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
    if (this.stateOverride && this.url.scheme === "file") {
      --this.pointer;
      this.state = "file host";
    } else if (c === 58 && !this.arrFlag) {
      if (this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      var host = parseHost(this.buffer, isNotSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "port";
      if (this.stateOverride === "hostname") {
        return false;
      }
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
      --this.pointer;
      if (isSpecial(this.url) && this.buffer === "") {
        this.parseError = true;
        return failure;
      } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
        this.parseError = true;
        return false;
      }
      var _host = parseHost(this.buffer, isNotSpecial(this.url));
      if (_host === failure) {
        return failure;
      }
      this.url.host = _host;
      this.buffer = "";
      this.state = "path start";
      if (this.stateOverride) {
        return false;
      }
    } else {
      if (c === 91) {
        this.arrFlag = true;
      } else if (c === 93) {
        this.arrFlag = false;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
    if (infra.isASCIIDigit(c)) {
      this.buffer += cStr;
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
      if (this.buffer !== "") {
        var port = parseInt(this.buffer);
        if (port > Math.pow(2, 16) - 1) {
          this.parseError = true;
          return failure;
        }
        this.url.port = port === defaultPort(this.url.scheme) ? null : port;
        this.buffer = "";
      }
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  var fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);
  function startsWithWindowsDriveLetter(input, pointer) {
    var length = input.length - pointer;
    return length >= 2 && isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) && (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));
  }
  URLStateMachine.prototype["parse file"] = function parseFile(c) {
    this.url.scheme = "file";
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file slash";
    } else if (this.base !== null && this.base.scheme === "file") {
      if (isNaN(c)) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 63) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          shortenPath(this.url);
        } else {
          this.parseError = true;
        }
        this.state = "path";
        --this.pointer;
      }
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file host";
    } else {
      if (this.base !== null && this.base.scheme === "file" && !startsWithWindowsDriveLetter(this.input, this.pointer)) {
        if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
          this.url.path.push(this.base.path[0]);
        } else {
          this.url.host = this.base.host;
        }
      }
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
    if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
      --this.pointer;
      if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
        this.parseError = true;
        this.state = "path";
      } else if (this.buffer === "") {
        this.url.host = "";
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
      } else {
        var host = parseHost(this.buffer, isNotSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        if (host === "localhost") {
          host = "";
        }
        this.url.host = host;
        if (this.stateOverride) {
          return false;
        }
        this.buffer = "";
        this.state = "path start";
      }
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
    if (isSpecial(this.url)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "path";
      if (c !== 47 && c !== 92) {
        --this.pointer;
      }
    } else if (!this.stateOverride && c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (!this.stateOverride && c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else if (c !== undefined) {
      this.state = "path";
      if (c !== 47) {
        --this.pointer;
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse path"] = function parsePath(c) {
    if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
      if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
      }
      if (isDoubleDot(this.buffer)) {
        shortenPath(this.url);
        if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        }
      } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
        this.url.path.push("");
      } else if (!isSingleDot(this.buffer)) {
        if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
          if (this.url.host !== "" && this.url.host !== null) {
            this.parseError = true;
            this.url.host = "";
          }
          this.buffer = this.buffer[0] + ":";
        }
        this.url.path.push(this.buffer);
      }
      this.buffer = "";
      if (this.url.scheme === "file" && (c === undefined || c === 63 || c === 35)) {
        while (this.url.path.length > 1 && this.url.path[0] === "") {
          this.parseError = true;
          this.url.path.shift();
        }
      }
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      }
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      // TODO: If c is not a URL code point and not "%", parse error.

      if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += percentEncodeChar(c, isPathPercentEncode);
    }
    return true;
  };
  URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      // TODO: Add: not a URL code point
      if (!isNaN(c) && c !== 37) {
        this.parseError = true;
      }
      if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      if (!isNaN(c)) {
        this.url.path[0] += percentEncodeChar(c, isC0ControlPercentEncode);
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
    if (isNaN(c) || !this.stateOverride && c === 35) {
      if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
        this.encodingOverride = "utf-8";
      }
      var buffer = Buffer.from(this.buffer); // TODO: Use encoding override instead
      for (var i = 0; i < buffer.length; ++i) {
        if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 || buffer[i] === 0x3C || buffer[i] === 0x3E || buffer[i] === 0x27 && isSpecial(this.url)) {
          this.url.query += percentEncode(buffer[i]);
        } else {
          this.url.query += String.fromCodePoint(buffer[i]);
        }
      }
      this.buffer = "";
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      // TODO: If c is not a URL code point and not "%", parse error.
      if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
    if (isNaN(c)) {// do nothing
    } else if (c === 0x0) {
      this.parseError = true;
    } else {
      // TODO: If c is not a URL code point and not "%", parse error.
      if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.url.fragment += percentEncodeChar(c, isFragmentPercentEncode);
    }
    return true;
  };
  function serializeURL(url, excludeFragment) {
    var output = url.scheme + ":";
    if (url.host !== null) {
      output += "//";
      if (url.username !== "" || url.password !== "") {
        output += url.username;
        if (url.password !== "") {
          output += ":" + url.password;
        }
        output += "@";
      }
      output += serializeHost(url.host);
      if (url.port !== null) {
        output += ":" + url.port;
      }
    } else if (url.host === null && url.scheme === "file") {
      output += "//";
    }
    if (url.cannotBeABaseURL) {
      output += url.path[0];
    } else {
      for (var string of url.path) {
        output += "/" + string;
      }
    }
    if (url.query !== null) {
      output += "?" + url.query;
    }
    if (!excludeFragment && url.fragment !== null) {
      output += "#" + url.fragment;
    }
    return output;
  }
  function serializeOrigin(tuple) {
    var result = tuple.scheme + "://";
    result += serializeHost(tuple.host);
    if (tuple.port !== null) {
      result += ":" + tuple.port;
    }
    return result;
  }
  module.exports.serializeURL = serializeURL;
  module.exports.serializeURLOrigin = function (url) {
    // https://url.spec.whatwg.org/#concept-url-origin
    switch (url.scheme) {
      case "blob":
        try {
          return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
        } catch (e) {
          // serializing an opaque origin returns "null"
          return "null";
        }
      case "ftp":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return serializeOrigin({
          scheme: url.scheme,
          host: url.host,
          port: url.port
        });
      case "file":
        // The spec says:
        // > Unfortunate as it is, this is left as an exercise to the reader. When in doubt, return a new opaque origin.
        // Browsers tested so far:
        // - Chrome says "file://", but treats file: URLs as cross-origin for most (all?) purposes; see e.g.
        //   https://bugs.chromium.org/p/chromium/issues/detail?id=37586
        // - Firefox says "null", but treats file: URLs as same-origin sometimes based on directory stuff; see
        //   https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs
        return "null";
      default:
        // serializing an opaque origin returns "null"
        return "null";
    }
  };
  module.exports.basicURLParse = function (input, options) {
    if (options === undefined) {
      options = {};
    }
    var usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
    if (usm.failure) {
      return null;
    }
    return usm.url;
  };
  module.exports.setTheUsername = function (url, username) {
    url.username = "";
    var decoded = punycode.ucs2.decode(username);
    for (var i = 0; i < decoded.length; ++i) {
      url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module.exports.setThePassword = function (url, password) {
    url.password = "";
    var decoded = punycode.ucs2.decode(password);
    for (var i = 0; i < decoded.length; ++i) {
      url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module.exports.serializeHost = serializeHost;
  module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
  module.exports.serializeInteger = function (integer) {
    return String(integer);
  };
  module.exports.parseURL = function (input, options) {
    if (options === undefined) {
      options = {};
    }

    // We don't handle blobs, so this just delegates:
    return module.exports.basicURLParse(input, {
      baseURL: options.baseURL,
      encodingOverride: options.encodingOverride
    });
  };
},22,[23,26,27,28]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */

  'use strict';

  var base64 = require(_dependencyMap[0]);
  var ieee754 = require(_dependencyMap[1]);
  var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
  ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
  : null;
  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  var K_MAX_LENGTH = 0x7fffffff;
  exports.kMaxLength = K_MAX_LENGTH;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  }
  function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
      var arr = new Uint8Array(1);
      var proto = {
        foo: function () {
          return 42;
        }
      };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new TypeError('The "string" argument must be of type string. Received type number');
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer.poolSize = 8192; // not used by this implementation

  function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value);
    }
    if (value == null) {
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    }
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    }
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length);
    }
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
      return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    }
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  };

  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148
  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer, Uint8Array);
  function assertSize(size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(size);
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpreted as a start offset.
      return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size);
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size);
  };
  function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }
    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      var copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    var buf;
    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array);
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }

    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0;
      var buf = createBuffer(len);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len);
      return buf;
    }
    if (obj.length !== undefined) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      // eslint-disable-line eqeqeq
      length = 0;
    }
    return Buffer.alloc(+length);
  }
  Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
  };
  Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };
  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;
      default:
        return false;
    }
  };
  Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer.alloc(0);
    }
    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer.length) {
          Buffer.from(buf).copy(buffer, pos);
        } else {
          Uint8Array.prototype.set.call(buffer, buf, pos);
        }
      } else if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer, pos);
      }
      pos += buf.length;
    }
    return buffer;
  };
  function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length;
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }
    if (typeof string !== 'string') {
      throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    }
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len;
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;
        case 'hex':
          return len >>> 1;
        case 'base64':
          return base64ToBytes(string).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
          }
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;
  function slowToString(encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return '';
    }
    if (end === undefined || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return '';
    }

    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return '';
    }
    if (!encoding) encoding = 'utf8';
    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);
        case 'ascii':
          return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end);
        case 'base64':
          return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the `buffer` package.
  // See: https://github.com/feross/buffer/issues/154
  Buffer.prototype._isBuffer = true;
  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }
  Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits');
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this;
  };
  Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits');
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this;
  };
  Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits');
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this;
  };
  Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer.prototype.toLocaleString = Buffer.prototype.toString;
  Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
  };
  Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
  };
  if (customInspectSymbol) {
    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
  }
  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength);
    }
    if (!Buffer.isBuffer(target)) {
      throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    }
    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index');
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset; // Coerce to Number.
    if (numberIsNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : buffer.length - 1;
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1;else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;else return -1;
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i) {
      if (indexSize === 1) {
        return buf[i];
      } else {
        return buf.readUInt16BE(i * indexSize);
      }
    }
    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }
        if (found) return i;
      }
    }
    return -1;
  }
  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    var strLen = string.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (numberIsNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }
    return i;
  }
  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }
  Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
      // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    } else {
      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds');
    }
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
          return asciiWrite(this, string, offset, length);
        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }
      res.push(codePoint);
      i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;
  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for (var i = start; i < end; ++i) {
      out += hexSliceLookupTable[buf[i]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for (var i = 0; i < bytes.length - 1; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }
  Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }
    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }
  Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    return val;
  };
  Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }
    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }
    return val;
  };
  Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };
  Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };
  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };
  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };
  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };
  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };
  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };
  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };
  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };
  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
  }
  Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
  };
  Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };
  Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
  };
  Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };
  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };
  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };
  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
  };
  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };
  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157e+308);
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
      // Use built-in when available, missing from IE11
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }
    return len;
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string');
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
          // Fast path: If `val` fits into a single byte, use that numeric value.
          val = code;
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    } else if (typeof val === 'boolean') {
      val = Number(val);
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index');
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
      var len = bytes.length;
      if (len === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }
    return this;
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str;
  }
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          }

          // valid lead
          leadSurrogate = codePoint;
          continue;
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }
      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }
    return i;
  }

  // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  // the `instanceof` check but they should be treated as of that type.
  // See: https://github.com/feross/buffer/issues/166
  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj; // eslint-disable-line no-self-compare
  }

  // Create lookup table for `toString('hex')`
  // See: https://github.com/feross/buffer/issues/219
  var hexSliceLookupTable = function () {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for (var i = 0; i < 16; ++i) {
      var i16 = i * 16;
      for (var j = 0; j < 16; ++j) {
        table[i16 + j] = alphabet[i] + alphabet[j];
      }
    }
    return table;
  }();
},23,[24,25]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  // Support decoding URL-safe base64 strings, as Node.js does.
  // See: https://en.wikipedia.org/wiki/Base64#URL_applications
  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
  function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }

  // base64 is 4/3 + up to two characters of the original data
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;

    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for (i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 0xFF;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }
    return output.join('');
  }
  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
  }
},24,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
    buffer[offset + i - d] |= s * 128;
  };
},25,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  /** Highest positive signed 32-bit float value */
  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80
  var delimiter = '-'; // '\x2D'

  /** Regular expressions */
  var regexPunycode = /^xn--/;
  var regexNonASCII = /[^\0-\x7F]/; // Note: U+007F DEL is excluded too.
  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */
  var errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };

  /** Convenience shortcuts */
  var baseMinusTMin = 35;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error(type) {
    throw new RangeError(errors[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map(array, callback) {
    var result = [];
    var length = array.length;
    while (length--) {
      result[length] = callback(array[length]);
    }
    return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {String} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(domain, callback) {
    var parts = domain.split('@');
    var result = '';
    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      domain = parts[1];
    }
    // Avoid `split(regex)` for IE8 compatibility. See #17.
    domain = domain.replace(regexSeparators, '\x2E');
    var labels = domain.split('.');
    var encoded = map(labels, callback).join('.');
    return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
    var output = [];
    var counter = 0;
    var length = string.length;
    while (counter < length) {
      var value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // It's a high surrogate, and there is a next character.
        var extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) {
          // Low surrogate.
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // It's an unmatched surrogate; only append this code unit, in case the
          // next code unit is the high surrogate of a surrogate pair.
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }

  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */
  var ucs2encode = codePoints => String.fromCodePoint(...codePoints);

  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */
  var basicToDigit = function (codePoint) {
    if (codePoint >= 0x30 && codePoint < 0x3A) {
      return 26 + (codePoint - 0x30);
    }
    if (codePoint >= 0x41 && codePoint < 0x5B) {
      return codePoint - 0x41;
    }
    if (codePoint >= 0x61 && codePoint < 0x7B) {
      return codePoint - 0x61;
    }
    return base;
  };

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  var digitToBasic = function (digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  };

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  var adapt = function (delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for /* no initialization */
    (; delta > 455; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + 36 * delta / (delta + skew));
  };

  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */
  var decode = function (input) {
    // Don't use UCS-2.
    var output = [];
    var inputLength = input.length;
    var i = 0;
    var n = initialN;
    var bias = initialBias;

    // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    var basic = input.lastIndexOf(delimiter);
    if (basic < 0) {
      basic = 0;
    }
    for (var j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }
      output.push(input.charCodeAt(j));
    }

    // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.

    for /* no final expression */
    (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      var oldi = i;
      for /* no condition */
      (var w = 1, k = base;; k += base) {
        if (index >= inputLength) {
          error('invalid-input');
        }
        var digit = basicToDigit(input.charCodeAt(index++));
        if (digit >= base) {
          error('invalid-input');
        }
        if (digit > floor((maxInt - i) / w)) {
          error('overflow');
        }
        i += digit * w;
        var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
        if (digit < t) {
          break;
        }
        var baseMinusT = base - t;
        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }
        w *= baseMinusT;
      }
      var out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0);

      // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:
      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }
      n += floor(i / out);
      i %= out;

      // Insert `n` at position `i` of the output.
      output.splice(i++, 0, n);
    }
    return String.fromCodePoint(...output);
  };

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  var encode = function (input) {
    var output = [];

    // Convert the input in UCS-2 to an array of Unicode code points.
    input = ucs2decode(input);

    // Cache the length.
    var inputLength = input.length;

    // Initialize the state.
    var n = initialN;
    var delta = 0;
    var bias = initialBias;

    // Handle the basic code points.
    for (var currentValue of input) {
      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }
    var basicLength = output.length;
    var handledCPCount = basicLength;

    // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.

    // Finish the basic string with a delimiter unless it's empty.
    if (basicLength) {
      output.push(delimiter);
    }

    // Main encoding loop:
    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      var m = maxInt;
      for (var _currentValue of input) {
        if (_currentValue >= n && _currentValue < m) {
          m = _currentValue;
        }
      }

      // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow.
      var handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }
      delta += (m - n) * handledCPCountPlusOne;
      n = m;
      for (var _currentValue2 of input) {
        if (_currentValue2 < n && ++delta > maxInt) {
          error('overflow');
        }
        if (_currentValue2 === n) {
          // Represent delta as a generalized variable-length integer.
          var q = delta;
          for /* no condition */
          (var k = base;; k += base) {
            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (q < t) {
              break;
            }
            var qMinusT = q - t;
            var baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }
          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }
      ++delta;
      ++n;
    }
    return output.join('');
  };

  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */
  var toUnicode = function (input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  };

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  var toASCII = function (input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  };

  /*--------------------------------------------------------------------------*/

  /** Define the public API */
  var punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '2.3.1',
    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  module.exports = punycode;
},26,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function isASCIIDigit(c) {
    return c >= 0x30 && c <= 0x39;
  }
  function isASCIIAlpha(c) {
    return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A;
  }
  function isASCIIAlphanumeric(c) {
    return isASCIIAlpha(c) || isASCIIDigit(c);
  }
  function isASCIIHex(c) {
    return isASCIIDigit(c) || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;
  }
  module.exports = {
    isASCIIDigit,
    isASCIIAlpha,
    isASCIIAlphanumeric,
    isASCIIHex
  };
},27,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _slicedToArray = require(_dependencyMap[0]);
  var _require = require(_dependencyMap[1]),
    Buffer = _require.Buffer;
  var _require2 = require(_dependencyMap[2]),
    isASCIIHex = _require2.isASCIIHex;
  function strictlySplitByteSequence(buf, cp) {
    var list = [];
    var last = 0;
    var i = buf.indexOf(cp);
    while (i >= 0) {
      list.push(buf.slice(last, i));
      last = i + 1;
      i = buf.indexOf(cp, last);
    }
    if (last !== buf.length) {
      list.push(buf.slice(last));
    }
    return list;
  }
  function replaceByteInByteSequence(buf, from, to) {
    var i = buf.indexOf(from);
    while (i >= 0) {
      buf[i] = to;
      i = buf.indexOf(from, i + 1);
    }
    return buf;
  }
  function percentEncode(c) {
    var hex = c.toString(16).toUpperCase();
    if (hex.length === 1) {
      hex = "0" + hex;
    }
    return "%" + hex;
  }
  function percentDecode(input) {
    var output = Buffer.alloc(input.byteLength);
    var ptr = 0;
    for (var i = 0; i < input.length; ++i) {
      if (input[i] !== 37 || !isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2])) {
        output[ptr++] = input[i];
      } else {
        output[ptr++] = parseInt(input.slice(i + 1, i + 3).toString(), 16);
        i += 2;
      }
    }
    return output.slice(0, ptr);
  }
  function parseUrlencoded(input) {
    var sequences = strictlySplitByteSequence(input, 38);
    var output = [];
    for (var bytes of sequences) {
      if (bytes.length === 0) {
        continue;
      }
      var name = undefined;
      var value = undefined;
      var indexOfEqual = bytes.indexOf(61);
      if (indexOfEqual >= 0) {
        name = bytes.slice(0, indexOfEqual);
        value = bytes.slice(indexOfEqual + 1);
      } else {
        name = bytes;
        value = Buffer.alloc(0);
      }
      name = replaceByteInByteSequence(Buffer.from(name), 43, 32);
      value = replaceByteInByteSequence(Buffer.from(value), 43, 32);
      output.push([percentDecode(name).toString(), percentDecode(value).toString()]);
    }
    return output;
  }
  function serializeUrlencodedByte(input) {
    var output = "";
    for (var byte of input) {
      if (byte === 32) {
        output += "+";
      } else if (byte === 42 || byte === 45 || byte === 46 || byte >= 48 && byte <= 57 || byte >= 65 && byte <= 90 || byte === 95 || byte >= 97 && byte <= 122) {
        output += String.fromCodePoint(byte);
      } else {
        output += percentEncode(byte);
      }
    }
    return output;
  }
  function serializeUrlencoded(tuples) {
    var encodingOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    var encoding = "utf-8";
    if (encodingOverride !== undefined) {
      encoding = encodingOverride;
    }
    var output = "";
    for (var _ref of tuples.entries()) {
      var _ref2 = _slicedToArray(_ref, 2);
      var i = _ref2[0];
      var tuple = _ref2[1];
      // TODO: handle encoding override
      var name = serializeUrlencodedByte(Buffer.from(tuple[0]));
      var value = tuple[1];
      if (tuple.length > 2 && tuple[2] !== undefined) {
        if (tuple[2] === "hidden" && name === "_charset_") {
          value = encoding;
        } else if (tuple[2] === "file") {
          // value is a File object
          value = value.name;
        }
      }
      value = serializeUrlencodedByte(Buffer.from(value));
      if (i !== 0) {
        output += "&";
      }
      output += `${name}=${value}`;
    }
    return output;
  }
  module.exports = {
    percentEncode,
    percentDecode,
    // application/x-www-form-urlencoded string parser
    parseUrlencoded(input) {
      return parseUrlencoded(Buffer.from(input));
    },
    // application/x-www-form-urlencoded serializer
    serializeUrlencoded
  };
},28,[29,23,27]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithHoles = require(_dependencyMap[0]);
  var iterableToArrayLimit = require(_dependencyMap[1]);
  var unsupportedIterableToArray = require(_dependencyMap[2]);
  var nonIterableRest = require(_dependencyMap[3]);
  function _slicedToArray(r, e) {
    return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();
  }
  module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},29,[30,31,32,34]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},30,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = false;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
},31,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayLikeToArray = require(_dependencyMap[0]);
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : undefined;
    }
  }
  module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},32,[33]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},33,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
},34,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var _slicedToArray = require(_dependencyMap[2]);
  var conversions = require(_dependencyMap[3]);
  var utils = require(_dependencyMap[4]);
  var impl = utils.implSymbol;
  var ctorRegistry = utils.ctorRegistrySymbol;
  var IteratorPrototype = Object.create(utils.IteratorPrototype, {
    next: {
      value: function next() {
        var internal = this[utils.iterInternalSymbol];
        var target = internal.target,
          kind = internal.kind,
          index = internal.index;
        var values = Array.from(target[impl]);
        var len = values.length;
        if (index >= len) {
          return {
            value: undefined,
            done: true
          };
        }
        var pair = values[index];
        internal.index = index + 1;
        var _pair$map = pair.map(utils.tryWrapperForImpl),
          _pair$map2 = _slicedToArray(_pair$map, 2),
          key = _pair$map2[0],
          value = _pair$map2[1];
        var result;
        switch (kind) {
          case "key":
            result = key;
            break;
          case "value":
            result = value;
            break;
          case "key+value":
            result = [key, value];
            break;
        }
        return {
          value: result,
          done: false
        };
      },
      writable: true,
      enumerable: true,
      configurable: true
    },
    [Symbol.toStringTag]: {
      value: "URLSearchParams Iterator",
      configurable: true
    }
  });
  var iface = {
    // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
    // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
    // implementing this mixin interface.
    _mixedIntoPredicates: [],
    is(obj) {
      if (obj) {
        if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
          return true;
        }
        for (var isMixedInto of module.exports._mixedIntoPredicates) {
          if (isMixedInto(obj)) {
            return true;
          }
        }
      }
      return false;
    },
    isImpl(obj) {
      if (obj) {
        if (obj instanceof Impl.implementation) {
          return true;
        }
        var wrapper = utils.wrapperForImpl(obj);
        for (var isMixedInto of module.exports._mixedIntoPredicates) {
          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      }
      return false;
    },
    convert(obj) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === undefined ? "The provided value" : _ref$context;
      if (module.exports.is(obj)) {
        return utils.implForWrapper(obj);
      }
      throw new TypeError(`${context} is not of type 'URLSearchParams'.`);
    },
    createDefaultIterator(target, kind) {
      var iterator = Object.create(IteratorPrototype);
      Object.defineProperty(iterator, utils.iterInternalSymbol, {
        value: {
          target,
          kind,
          index: 0
        },
        configurable: true
      });
      return iterator;
    },
    create(globalObject, constructorArgs, privateData) {
      if (globalObject[ctorRegistry] === undefined) {
        throw new Error("Internal error: invalid global object");
      }
      var ctor = globalObject[ctorRegistry]["URLSearchParams"];
      if (ctor === undefined) {
        throw new Error("Internal error: constructor URLSearchParams is not installed on the passed global object");
      }
      var obj = Object.create(ctor.prototype);
      obj = iface.setup(obj, globalObject, constructorArgs, privateData);
      return obj;
    },
    createImpl(globalObject, constructorArgs, privateData) {
      var obj = iface.create(globalObject, constructorArgs, privateData);
      return utils.implForWrapper(obj);
    },
    _internalSetup(obj) {},
    setup(obj, globalObject) {
      var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      privateData.wrapper = obj;
      iface._internalSetup(obj);
      Object.defineProperty(obj, impl, {
        value: new Impl.implementation(globalObject, constructorArgs, privateData),
        configurable: true
      });
      obj[impl][utils.wrapperSymbol] = obj;
      if (Impl.init) {
        Impl.init(obj[impl], privateData);
      }
      return obj;
    },
    install(globalObject) {
      var URLSearchParams = /*#__PURE__*/function () {
        function URLSearchParams() {
          _classCallCheck(this, URLSearchParams);
          var args = [];
          {
            var curArg = arguments[0];
            if (curArg !== undefined) {
              if (utils.isObject(curArg)) {
                if (curArg[Symbol.iterator] !== undefined) {
                  if (!utils.isObject(curArg)) {
                    throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence is not an iterable object.");
                  } else {
                    var V = [];
                    var tmp = curArg;
                    for (var nextItem of tmp) {
                      if (!utils.isObject(nextItem)) {
                        throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence's element is not an iterable object.");
                      } else {
                        var _V = [];
                        var _tmp = nextItem;
                        for (var _nextItem of _tmp) {
                          _nextItem = conversions["USVString"](_nextItem, {
                            context: "Failed to construct 'URLSearchParams': parameter 1 sequence's element's element"
                          });
                          _V.push(_nextItem);
                        }
                        nextItem = _V;
                      }
                      V.push(nextItem);
                    }
                    curArg = V;
                  }
                } else {
                  if (!utils.isObject(curArg)) {
                    throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 record is not an object.");
                  } else {
                    var result = Object.create(null);
                    for (var key of Reflect.ownKeys(curArg)) {
                      var desc = Object.getOwnPropertyDescriptor(curArg, key);
                      if (desc && desc.enumerable) {
                        var typedKey = key;
                        typedKey = conversions["USVString"](typedKey, {
                          context: "Failed to construct 'URLSearchParams': parameter 1 record's key"
                        });
                        var typedValue = curArg[key];
                        typedValue = conversions["USVString"](typedValue, {
                          context: "Failed to construct 'URLSearchParams': parameter 1 record's value"
                        });
                        result[typedKey] = typedValue;
                      }
                    }
                    curArg = result;
                  }
                }
              } else {
                curArg = conversions["USVString"](curArg, {
                  context: "Failed to construct 'URLSearchParams': parameter 1"
                });
              }
            } else {
              curArg = "";
            }
            args.push(curArg);
          }
          return iface.setup(Object.create(this.constructor.prototype), globalObject, args);
        }
        return _createClass(URLSearchParams, [{
          key: "append",
          value: function append(name, value) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 2) {
              throw new TypeError("Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'append' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            {
              var _curArg = arguments[1];
              _curArg = conversions["USVString"](_curArg, {
                context: "Failed to execute 'append' on 'URLSearchParams': parameter 2"
              });
              args.push(_curArg);
            }
            return this[impl].append(...args);
          }
        }, {
          key: "delete",
          value: function _delete(name) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'delete' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            return this[impl].delete(...args);
          }
        }, {
          key: "get",
          value: function get(name) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'get' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            return this[impl].get(...args);
          }
        }, {
          key: "getAll",
          value: function getAll(name) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'getAll' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            return utils.tryWrapperForImpl(this[impl].getAll(...args));
          }
        }, {
          key: "has",
          value: function has(name) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'has' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            return this[impl].has(...args);
          }
        }, {
          key: "set",
          value: function set(name, value) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 2) {
              throw new TypeError("Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'set' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            {
              var _curArg2 = arguments[1];
              _curArg2 = conversions["USVString"](_curArg2, {
                context: "Failed to execute 'set' on 'URLSearchParams': parameter 2"
              });
              args.push(_curArg2);
            }
            return this[impl].set(...args);
          }
        }, {
          key: "sort",
          value: function sort() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl].sort();
          }
        }, {
          key: "toString",
          value: function toString() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl].toString();
          }
        }, {
          key: "keys",
          value: function keys() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return module.exports.createDefaultIterator(this, "key");
          }
        }, {
          key: "values",
          value: function values() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return module.exports.createDefaultIterator(this, "value");
          }
        }, {
          key: "entries",
          value: function entries() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return module.exports.createDefaultIterator(this, "key+value");
          }
        }, {
          key: "forEach",
          value: function forEach(callback) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.");
            }
            if (typeof callback !== "function") {
              throw new TypeError("Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1 is not a function.");
            }
            var thisArg = arguments[1];
            var pairs = Array.from(this[impl]);
            var i = 0;
            while (i < pairs.length) {
              var _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),
                _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),
                key = _pairs$i$map2[0],
                value = _pairs$i$map2[1];
              callback.call(thisArg, value, key, this);
              pairs = Array.from(this[impl]);
              i++;
            }
          }
        }]);
      }();
      Object.defineProperties(URLSearchParams.prototype, {
        append: {
          enumerable: true
        },
        delete: {
          enumerable: true
        },
        get: {
          enumerable: true
        },
        getAll: {
          enumerable: true
        },
        has: {
          enumerable: true
        },
        set: {
          enumerable: true
        },
        sort: {
          enumerable: true
        },
        toString: {
          enumerable: true
        },
        keys: {
          enumerable: true
        },
        values: {
          enumerable: true
        },
        entries: {
          enumerable: true
        },
        forEach: {
          enumerable: true
        },
        [Symbol.toStringTag]: {
          value: "URLSearchParams",
          configurable: true
        },
        [Symbol.iterator]: {
          value: URLSearchParams.prototype.entries,
          configurable: true,
          writable: true
        }
      });
      if (globalObject[ctorRegistry] === undefined) {
        globalObject[ctorRegistry] = Object.create(null);
      }
      globalObject[ctorRegistry]["URLSearchParams"] = URLSearchParams;
      Object.defineProperty(globalObject, "URLSearchParams", {
        configurable: true,
        writable: true,
        value: URLSearchParams
      });
    }
  };
  // iface
  module.exports = iface;
  var Impl = require(_dependencyMap[5]);
},35,[10,11,29,19,20,36]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var urlencoded = require(_dependencyMap[2]);
  function stableSortBy(arr, compare) {
    return arr.map((item, index) => ({
      item,
      index
    })).sort((a, b) => compare(a.item, b.item) || a.index - b.index).map(_ref => {
      var item = _ref.item;
      return item;
    });
  }
  exports.implementation = /*#__PURE__*/function () {
    function URLSearchParamsImpl(globalObject, constructorArgs, _ref2) {
      var _ref2$doNotStripQMark = _ref2.doNotStripQMark,
        doNotStripQMark = _ref2$doNotStripQMark === undefined ? false : _ref2$doNotStripQMark;
      _classCallCheck(this, URLSearchParamsImpl);
      var init = constructorArgs[0];
      this._list = [];
      this._url = null;
      if (!doNotStripQMark && typeof init === "string" && init[0] === "?") {
        init = init.slice(1);
      }
      if (Array.isArray(init)) {
        for (var pair of init) {
          if (pair.length !== 2) {
            throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence's element does not contain exactly two elements.");
          }
          this._list.push([pair[0], pair[1]]);
        }
      } else if (typeof init === "object" && Object.getPrototypeOf(init) === null) {
        for (var name of Object.keys(init)) {
          var value = init[name];
          this._list.push([name, value]);
        }
      } else {
        this._list = urlencoded.parseUrlencoded(init);
      }
    }
    return _createClass(URLSearchParamsImpl, [{
      key: "_updateSteps",
      value: function _updateSteps() {
        if (this._url !== null) {
          var query = urlencoded.serializeUrlencoded(this._list);
          if (query === "") {
            query = null;
          }
          this._url._url.query = query;
        }
      }
    }, {
      key: "append",
      value: function append(name, value) {
        this._list.push([name, value]);
        this._updateSteps();
      }
    }, {
      key: "delete",
      value: function _delete(name) {
        var i = 0;
        while (i < this._list.length) {
          if (this._list[i][0] === name) {
            this._list.splice(i, 1);
          } else {
            i++;
          }
        }
        this._updateSteps();
      }
    }, {
      key: "get",
      value: function get(name) {
        for (var tuple of this._list) {
          if (tuple[0] === name) {
            return tuple[1];
          }
        }
        return null;
      }
    }, {
      key: "getAll",
      value: function getAll(name) {
        var output = [];
        for (var tuple of this._list) {
          if (tuple[0] === name) {
            output.push(tuple[1]);
          }
        }
        return output;
      }
    }, {
      key: "has",
      value: function has(name) {
        for (var tuple of this._list) {
          if (tuple[0] === name) {
            return true;
          }
        }
        return false;
      }
    }, {
      key: "set",
      value: function set(name, value) {
        var found = false;
        var i = 0;
        while (i < this._list.length) {
          if (this._list[i][0] === name) {
            if (found) {
              this._list.splice(i, 1);
            } else {
              found = true;
              this._list[i][1] = value;
              i++;
            }
          } else {
            i++;
          }
        }
        if (!found) {
          this._list.push([name, value]);
        }
        this._updateSteps();
      }
    }, {
      key: "sort",
      value: function sort() {
        this._list = stableSortBy(this._list, (a, b) => a[0] > b[0]);
        this._updateSteps();
      }
    }, {
      key: Symbol.iterator,
      value: function () {
        return this._list[Symbol.iterator]();
      }
    }, {
      key: "toString",
      value: function toString() {
        return urlencoded.serializeUrlencoded(this._list);
      }
    }]);
  }();
},36,[10,11,28]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  require(_dependencyMap[0]);
  var _Asset2 = require(_dependencyMap[1]);
  Object.keys(_Asset2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _Asset2[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _Asset2[key];
      }
    });
  });
  var _AssetHooks = require(_dependencyMap[2]);
  Object.keys(_AssetHooks).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _AssetHooks[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _AssetHooks[key];
      }
    });
  });
},37,[38,39,499]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _Asset = require(_dependencyMap[0]);
  var _PlatformUtils = require(_dependencyMap[1]);
  var _resolveAssetSource = require(_dependencyMap[2]);
  // Override React Native's asset resolution for `Image` components in contexts where it matters
  if (_PlatformUtils.IS_ENV_WITH_LOCAL_ASSETS) {
    (0, _resolveAssetSource.setCustomSourceTransformer)(resolver => {
      try {
        // Bundler is using the hashAssetFiles plugin if and only if the fileHashes property exists
        if (resolver.asset.fileHashes) {
          var asset = _Asset.Asset.fromMetadata(resolver.asset);
          return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);
        } else {
          return resolver.defaultAsset();
        }
      } catch {
        return resolver.defaultAsset();
      }
    });
  }
},38,[39,490,498]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Asset = undefined;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _registry = require(_dependencyMap[4]);
  var _expoModulesCore = require(_dependencyMap[5]);
  var _AssetSources = require(_dependencyMap[6]);
  var AssetUris = _interopRequireWildcard(require(_dependencyMap[7]));
  var _ExpoAsset = require(_dependencyMap[8]);
  var ImageAssets = _interopRequireWildcard(require(_dependencyMap[9]));
  var _LocalAssets = require(_dependencyMap[10]);
  var _PlatformUtils = require(_dependencyMap[11]);
  var _resolveAssetSource2 = _interopRequireDefault(require(_dependencyMap[12]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its
   * name and type) and provides facilities to load the asset data.
   */
  var Asset = exports.Asset = /*#__PURE__*/function () {
    function Asset(_ref) {
      var name = _ref.name,
        type = _ref.type,
        _ref$hash = _ref.hash,
        hash = _ref$hash === undefined ? null : _ref$hash,
        uri = _ref.uri,
        width = _ref.width,
        height = _ref.height;
      (0, _classCallCheck2.default)(this, Asset);
      /**
       * The MD5 hash of the asset's data.
       */
      this.hash = null;
      /**
       * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the
       * `file://` URI pointing to the local file on the device that contains the asset data.
       */
      this.localUri = null;
      /**
       * If the asset is an image, the width of the image data divided by the scale factor. The scale
       * factor is the number after `@` in the filename, or `1` if not present.
       */
      this.width = null;
      /**
       * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.
       */
      this.height = null;
      this.downloading = false;
      /**
       * Whether the asset has finished downloading from a call to [`downloadAsync()`](#downloadasync).
       */
      this.downloaded = false;
      this._downloadCallbacks = [];
      this.name = name;
      this.type = type;
      this.hash = hash;
      this.uri = uri;
      if (typeof width === 'number') {
        this.width = width;
      }
      if (typeof height === 'number') {
        this.height = height;
      }
      if (hash) {
        this.localUri = (0, _LocalAssets.getLocalAssetUri)(hash, type);
        if (this.localUri) {
          this.downloaded = true;
        }
      }
    }
    // @needsAudit
    /**
     * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.
     * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be
     * just one module or URL without an Array.
     * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been
     * saved to disk.
     * @example
     * ```ts
     * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));
     * ```
     */
    return (0, _createClass2.default)(Asset, [{
      key: "downloadAsync",
      value: // @needsAudit
      /**
       * Downloads the asset data to a local file in the device's cache directory. Once the returned
       * promise is fulfilled without error, the [`localUri`](#localuri) field of this asset points
       * to a local file containing the asset data. The asset is only downloaded if an up-to-date local
       * file for the asset isn't already present due to an earlier download. The downloaded `Asset`
       * will be returned when the promise is resolved.
       * @return Returns a Promise which fulfills with an `Asset` instance.
       */
      function () {
        var _downloadAsync2 = (0, _asyncToGenerator2.default)(function* () {
          if (this.downloaded) {
            return this;
          }
          if (this.downloading) {
            yield new Promise((resolve, reject) => {
              this._downloadCallbacks.push({
                resolve,
                reject
              });
            });
            return this;
          }
          this.downloading = true;
          try {
            this.localUri = yield (0, _ExpoAsset.downloadAsync)(this.uri, this.hash, this.type);
            this.downloaded = true;
            this._downloadCallbacks.forEach(_ref2 => {
              var resolve = _ref2.resolve;
              return resolve();
            });
          } catch (e) {
            this._downloadCallbacks.forEach(_ref3 => {
              var reject = _ref3.reject;
              return reject(e);
            });
            throw e;
          } finally {
            this.downloading = false;
            this._downloadCallbacks = [];
          }
          return this;
        });
        function downloadAsync() {
          return _downloadAsync2.apply(this, arguments);
        }
        return downloadAsync;
      }()
    }], [{
      key: "loadAsync",
      value: function loadAsync(moduleId) {
        var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];
        return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));
      }
      // @needsAudit
      /**
       * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.
       * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external
       * network URL
       * @return The [`Asset`](#asset) instance for the asset.
       */
    }, {
      key: "fromModule",
      value: function fromModule(virtualAssetModule) {
        if (typeof virtualAssetModule === 'string') {
          return Asset.fromURI(virtualAssetModule);
        }
        if (typeof virtualAssetModule === 'object' && 'uri' in virtualAssetModule && typeof virtualAssetModule.uri === 'string') {
          var extension = AssetUris.getFileExtension(virtualAssetModule.uri);
          return new Asset({
            name: '',
            type: extension.startsWith('.') ? extension.substring(1) : extension,
            hash: null,
            uri: virtualAssetModule.uri,
            width: virtualAssetModule.width,
            height: virtualAssetModule.height
          });
        }
        var meta = (0, _registry.getAssetByID)(virtualAssetModule);
        if (!meta) {
          throw new Error(`Module "${virtualAssetModule}" is missing from the asset registry`);
        }
        // Outside of the managed env we need the moduleId to initialize the asset
        // because resolveAssetSource depends on it
        if (!_PlatformUtils.IS_ENV_WITH_LOCAL_ASSETS) {
          // null-check is performed above with `getAssetByID`.
          var _resolveAssetSource = (0, _resolveAssetSource2.default)(virtualAssetModule),
            uri = _resolveAssetSource.uri;
          var asset = new Asset({
            name: meta.name,
            type: meta.type,
            hash: meta.hash,
            uri,
            width: meta.width,
            height: meta.height
          });
          // For images backward compatibility,
          // keeps localUri the same as uri for React Native's Image that
          // works fine with drawable resource names.

          Asset.byHash[meta.hash] = asset;
          return asset;
        }
        return Asset.fromMetadata(meta);
      }
      // @docsMissing
    }, {
      key: "fromMetadata",
      value: function fromMetadata(meta) {
        // The hash of the whole asset, not to be confused with the hash of a specific file returned
        // from `selectAssetSource`
        var metaHash = meta.hash;
        if (Asset.byHash[metaHash]) {
          return Asset.byHash[metaHash];
        }
        var _selectAssetSource = (0, _AssetSources.selectAssetSource)(meta),
          uri = _selectAssetSource.uri,
          hash = _selectAssetSource.hash;
        var asset = new Asset({
          name: meta.name,
          type: meta.type,
          hash,
          uri,
          width: meta.width,
          height: meta.height
        });
        Asset.byHash[metaHash] = asset;
        return asset;
      }
      // @docsMissing
    }, {
      key: "fromURI",
      value: function fromURI(uri) {
        if (Asset.byUri[uri]) {
          return Asset.byUri[uri];
        }
        // Possibly a Base64-encoded URI
        var type = '';
        if (uri.indexOf(';base64') > -1) {
          type = uri.split(';')[0].split('/')[1];
        } else {
          var extension = AssetUris.getFileExtension(uri);
          type = extension.startsWith('.') ? extension.substring(1) : extension;
        }
        var asset = new Asset({
          name: '',
          type,
          hash: null,
          uri
        });
        Asset.byUri[uri] = asset;
        return asset;
      }
    }]);
  }();
  Asset.byHash = {};
  Asset.byUri = {};
},39,[1,40,10,11,41,42,488,494,495,496,497,490,498]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
      var i = n[a](c),
        u = i.value;
    } catch (n) {
      return void e(n);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
  }
  function _asyncToGenerator(n) {
    return function () {
      var t = this,
        e = arguments;
      return new Promise(function (r, o) {
        var a = n.apply(t, e);
        function _next(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
        }
        function _throw(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
        }
        _next(undefined);
      });
    };
  }
  module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
},40,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assets = [];
  module.exports = {
    registerAsset: s => assets.push(s),
    getAssetByID: s => assets[s - 1]
  };
},41,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    EventEmitter: true,
    LegacyEventEmitter: true,
    NativeModule: true,
    NativeModulesProxy: true,
    ProxyNativeModule: true,
    requireNativeViewManager: true,
    Platform: true,
    SharedObject: true,
    SharedRef: true,
    CodedError: true,
    UnavailabilityError: true,
    uuid: true
  };
  Object.defineProperty(exports, "CodedError", {
    enumerable: true,
    get: function () {
      return _CodedError.CodedError;
    }
  });
  Object.defineProperty(exports, "EventEmitter", {
    enumerable: true,
    get: function () {
      return _EventEmitter.default;
    }
  });
  Object.defineProperty(exports, "LegacyEventEmitter", {
    enumerable: true,
    get: function () {
      return _LegacyEventEmitter.LegacyEventEmitter;
    }
  });
  Object.defineProperty(exports, "NativeModule", {
    enumerable: true,
    get: function () {
      return _NativeModule.default;
    }
  });
  Object.defineProperty(exports, "NativeModulesProxy", {
    enumerable: true,
    get: function () {
      return _NativeModulesProxy.default;
    }
  });
  Object.defineProperty(exports, "Platform", {
    enumerable: true,
    get: function () {
      return _Platform.default;
    }
  });
  Object.defineProperty(exports, "ProxyNativeModule", {
    enumerable: true,
    get: function () {
      return _NativeModulesProxy2.ProxyNativeModule;
    }
  });
  Object.defineProperty(exports, "SharedObject", {
    enumerable: true,
    get: function () {
      return _SharedObject.default;
    }
  });
  Object.defineProperty(exports, "SharedRef", {
    enumerable: true,
    get: function () {
      return _SharedRef.default;
    }
  });
  Object.defineProperty(exports, "UnavailabilityError", {
    enumerable: true,
    get: function () {
      return _UnavailabilityError.UnavailabilityError;
    }
  });
  Object.defineProperty(exports, "requireNativeViewManager", {
    enumerable: true,
    get: function () {
      return _NativeViewManagerAdapter.requireNativeViewManager;
    }
  });
  Object.defineProperty(exports, "uuid", {
    enumerable: true,
    get: function () {
      return _uuid.default;
    }
  });
  var _EventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _LegacyEventEmitter = require(_dependencyMap[2]);
  var _NativeModule = _interopRequireDefault(require(_dependencyMap[3]));
  var _NativeModulesProxy = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativeModulesProxy2 = require(_dependencyMap[5]);
  var _NativeViewManagerAdapter = require(_dependencyMap[6]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _SharedObject = _interopRequireDefault(require(_dependencyMap[8]));
  var _SharedRef = _interopRequireDefault(require(_dependencyMap[9]));
  var _CodedError = require(_dependencyMap[10]);
  var _UnavailabilityError = require(_dependencyMap[11]);
  require(_dependencyMap[12]);
  require(_dependencyMap[13]);
  var _uuid = _interopRequireDefault(require(_dependencyMap[14]));
  var _requireNativeModule = require(_dependencyMap[15]);
  Object.keys(_requireNativeModule).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _requireNativeModule[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _requireNativeModule[key];
      }
    });
  });
  var _registerWebModule = require(_dependencyMap[16]);
  Object.keys(_registerWebModule).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _registerWebModule[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _registerWebModule[key];
      }
    });
  });
  var _TypedArrays = require(_dependencyMap[17]);
  Object.keys(_TypedArrays).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _TypedArrays[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _TypedArrays[key];
      }
    });
  });
  var _PermissionsInterface = require(_dependencyMap[18]);
  Object.keys(_PermissionsInterface).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _PermissionsInterface[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _PermissionsInterface[key];
      }
    });
  });
  var _PermissionsHook = require(_dependencyMap[19]);
  Object.keys(_PermissionsHook).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _PermissionsHook[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _PermissionsHook[key];
      }
    });
  });
  var _Refs = require(_dependencyMap[20]);
  Object.keys(_Refs).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _Refs[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _Refs[key];
      }
    });
  });
  var _useReleasingSharedObject = require(_dependencyMap[21]);
  Object.keys(_useReleasingSharedObject).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _useReleasingSharedObject[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _useReleasingSharedObject[key];
      }
    });
  });
  var _reload = require(_dependencyMap[22]);
  Object.keys(_reload).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _reload[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _reload[key];
      }
    });
  });
},42,[1,43,463,464,465,466,467,469,471,472,473,474,475,462,477,468,481,482,483,484,485,486,487]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[0]);
  (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
  var _default = exports.default = globalThis.expo.EventEmitter;
},43,[44]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ensureNativeModulesAreInstalled = ensureNativeModulesAreInstalled;
  var _reactNative = require(_dependencyMap[0]);
  var _index = require(_dependencyMap[1]);
  /**
   * Ensures that the native modules are installed in the current runtime.
   * Otherwise, it synchronously calls a native function that installs them.
   */
  function ensureNativeModulesAreInstalled() {
    if (globalThis.expo) {
      return;
    }
    try {
      {
        // TODO: ExpoModulesCore shouldn't be optional here,
        // but to keep backwards compatibility let's just ignore it in SDK 50.
        // In most cases the modules were already installed from the native side.
        _reactNative.NativeModules.ExpoModulesCore?.installModules();
      }
    } catch (error) {
      console.error(`Unable to install Expo modules: ${error}`);
    }
  }
},44,[45,462]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0]);
  var warnOnce = require(_dependencyMap[1]);
  module.exports = {
    get AccessibilityInfo() {
      return require(_dependencyMap[2]).default;
    },
    get ActivityIndicator() {
      return require(_dependencyMap[3]).default;
    },
    get Button() {
      return require(_dependencyMap[4]);
    },
    get DrawerLayoutAndroid() {
      return require(_dependencyMap[5]);
    },
    get FlatList() {
      return require(_dependencyMap[6]);
    },
    get Image() {
      return require(_dependencyMap[7]);
    },
    get ImageBackground() {
      return require(_dependencyMap[8]);
    },
    get InputAccessoryView() {
      return require(_dependencyMap[9]);
    },
    get KeyboardAvoidingView() {
      return require(_dependencyMap[10]).default;
    },
    get Modal() {
      return require(_dependencyMap[11]);
    },
    get Pressable() {
      return require(_dependencyMap[12]).default;
    },
    get ProgressBarAndroid() {
      warnOnce('progress-bar-android-moved', "ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. See https://github.com/react-native-progress-view/progress-bar-android");
      return require(_dependencyMap[13]);
    },
    get RefreshControl() {
      return require(_dependencyMap[14]);
    },
    get SafeAreaView() {
      return require(_dependencyMap[15]).default;
    },
    get ScrollView() {
      return require(_dependencyMap[16]);
    },
    get SectionList() {
      return require(_dependencyMap[17]).default;
    },
    get StatusBar() {
      return require(_dependencyMap[18]);
    },
    get Switch() {
      return require(_dependencyMap[19]).default;
    },
    get Text() {
      return require(_dependencyMap[20]);
    },
    get TextInput() {
      return require(_dependencyMap[21]);
    },
    get Touchable() {
      return require(_dependencyMap[22]);
    },
    get TouchableHighlight() {
      return require(_dependencyMap[23]);
    },
    get TouchableNativeFeedback() {
      return require(_dependencyMap[24]);
    },
    get TouchableOpacity() {
      return require(_dependencyMap[25]);
    },
    get TouchableWithoutFeedback() {
      return require(_dependencyMap[26]);
    },
    get View() {
      return require(_dependencyMap[27]);
    },
    get VirtualizedList() {
      return require(_dependencyMap[28]);
    },
    get VirtualizedSectionList() {
      return require(_dependencyMap[29]);
    },
    get ActionSheetIOS() {
      return require(_dependencyMap[30]);
    },
    get Alert() {
      return require(_dependencyMap[31]);
    },
    get Animated() {
      return require(_dependencyMap[32]).default;
    },
    get Appearance() {
      return require(_dependencyMap[33]);
    },
    get AppRegistry() {
      return require(_dependencyMap[34]);
    },
    get AppState() {
      return require(_dependencyMap[35]);
    },
    get BackHandler() {
      return require(_dependencyMap[36]);
    },
    get Clipboard() {
      warnOnce('clipboard-moved', "Clipboard has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. See https://github.com/react-native-clipboard/clipboard");
      return require(_dependencyMap[37]);
    },
    get DeviceInfo() {
      return require(_dependencyMap[38]);
    },
    get DevSettings() {
      return require(_dependencyMap[39]);
    },
    get Dimensions() {
      return require(_dependencyMap[40]).default;
    },
    get Easing() {
      return require(_dependencyMap[41]).default;
    },
    get findNodeHandle() {
      return require(_dependencyMap[42]).findNodeHandle;
    },
    get I18nManager() {
      return require(_dependencyMap[43]);
    },
    get InteractionManager() {
      return require(_dependencyMap[44]);
    },
    get Keyboard() {
      return require(_dependencyMap[45]);
    },
    get LayoutAnimation() {
      return require(_dependencyMap[46]);
    },
    get Linking() {
      return require(_dependencyMap[47]);
    },
    get LogBox() {
      return require(_dependencyMap[48]).default;
    },
    get NativeDialogManagerAndroid() {
      return require(_dependencyMap[49]).default;
    },
    get NativeEventEmitter() {
      return require(_dependencyMap[50]).default;
    },
    get Networking() {
      return require(_dependencyMap[51]).default;
    },
    get PanResponder() {
      return require(_dependencyMap[52]).default;
    },
    get PermissionsAndroid() {
      return require(_dependencyMap[53]);
    },
    get PixelRatio() {
      return require(_dependencyMap[54]).default;
    },
    get PushNotificationIOS() {
      warnOnce('pushNotificationIOS-moved', "PushNotificationIOS has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. See https://github.com/react-native-push-notification-ios/push-notification-ios");
      return require(_dependencyMap[55]);
    },
    get Settings() {
      return require(_dependencyMap[56]);
    },
    get Share() {
      return require(_dependencyMap[57]);
    },
    get StyleSheet() {
      return require(_dependencyMap[58]);
    },
    get Systrace() {
      return require(_dependencyMap[59]);
    },
    get ToastAndroid() {
      return require(_dependencyMap[60]);
    },
    get TurboModuleRegistry() {
      return require(_dependencyMap[61]);
    },
    get UIManager() {
      return require(_dependencyMap[62]);
    },
    get unstable_batchedUpdates() {
      return require(_dependencyMap[42]).unstable_batchedUpdates;
    },
    get useAnimatedValue() {
      return require(_dependencyMap[63]).default;
    },
    get useColorScheme() {
      return require(_dependencyMap[64]).default;
    },
    get useWindowDimensions() {
      return require(_dependencyMap[65]).default;
    },
    get UTFSequence() {
      return require(_dependencyMap[66]).default;
    },
    get Vibration() {
      return require(_dependencyMap[67]);
    },
    get YellowBox() {
      return require(_dependencyMap[68]);
    },
    get DeviceEventEmitter() {
      return require(_dependencyMap[69]).default;
    },
    get DynamicColorIOS() {
      return require(_dependencyMap[70]).DynamicColorIOS;
    },
    get NativeAppEventEmitter() {
      return require(_dependencyMap[71]);
    },
    get NativeModules() {
      return require(_dependencyMap[72]);
    },
    get Platform() {
      return require(_dependencyMap[73]);
    },
    get PlatformColor() {
      return require(_dependencyMap[74]).PlatformColor;
    },
    get processColor() {
      return require(_dependencyMap[75]).default;
    },
    get requireNativeComponent() {
      return require(_dependencyMap[76]).default;
    },
    get RootTagContext() {
      return require(_dependencyMap[77]).RootTagContext;
    },
    get unstable_enableLogBox() {
      return () => console.warn('LogBox is enabled by default so there is no need to call unstable_enableLogBox() anymore. This is a no op and will be removed in the next version.');
    },
    get ColorPropType() {
      console.error("ColorPropType will be removed from React Native, along with all other PropTypes. We recommend that you migrate away from PropTypes and switch to a type system like TypeScript. If you need to continue using ColorPropType, migrate to the 'deprecated-react-native-prop-types' package.");
      return require(_dependencyMap[78]).ColorPropType;
    },
    get EdgeInsetsPropType() {
      console.error("EdgeInsetsPropType will be removed from React Native, along with all other PropTypes. We recommend that you migrate away from PropTypes and switch to a type system like TypeScript. If you need to continue using EdgeInsetsPropType, migrate to the 'deprecated-react-native-prop-types' package.");
      return require(_dependencyMap[78]).EdgeInsetsPropType;
    },
    get PointPropType() {
      console.error("PointPropType will be removed from React Native, along with all other PropTypes. We recommend that you migrate away from PropTypes and switch to a type system like TypeScript. If you need to continue using PointPropType, migrate to the 'deprecated-react-native-prop-types' package.");
      return require(_dependencyMap[78]).PointPropType;
    },
    get ViewPropTypes() {
      console.error("ViewPropTypes will be removed from React Native, along with all other PropTypes. We recommend that you migrate away from PropTypes and switch to a type system like TypeScript. If you need to continue using ViewPropTypes, migrate to the 'deprecated-react-native-prop-types' package.");
      return require(_dependencyMap[78]).ViewPropTypes;
    }
  };
},45,[46,47,48,267,269,395,344,363,396,397,399,400,404,406,372,407,375,392,409,412,270,415,417,421,302,303,422,240,423,424,425,214,304,427,228,430,260,433,435,436,102,315,61,251,312,380,381,438,441,442,205,195,443,445,101,447,449,451,245,57,453,79,111,454,455,456,457,458,460,49,461,224,80,81,94,91,257,246,280]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  'use strict';

  /**
   * Use invariant() to assert state which your program assumes to be true.
   *
   * Provide sprintf-style format (only %s is supported) and arguments
   * to provide information about what broke and what you were
   * expecting.
   *
   * The invariant message will be stripped in production, but the invariant
   * will remain to ensure logic does not differ in production.
   */
  var invariant = function (condition, format, a, b, c, d, e, f) {
    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }
      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  };
  module.exports = invariant;
},46,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var warnedKeys = {};
  function warnOnce(key, message) {
    if (warnedKeys[key]) {
      return;
    }
    console.warn(message);
    warnedKeys[key] = true;
  }
  module.exports = warnOnce;
},47,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _RendererProxy = require(_dependencyMap[2]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _legacySendAccessibilityEvent = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativeAccessibilityInfo = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeAccessibilityManager = _interopRequireDefault(require(_dependencyMap[6]));
  var EventNames = new Map([['announcementFinished', 'announcementFinished'], ['boldTextChanged', 'boldTextChanged'], ['change', 'screenReaderChanged'], ['grayscaleChanged', 'grayscaleChanged'], ['invertColorsChanged', 'invertColorsChanged'], ['reduceMotionChanged', 'reduceMotionChanged'], ['reduceTransparencyChanged', 'reduceTransparencyChanged'], ['screenReaderChanged', 'screenReaderChanged']]);
  var AccessibilityInfo = {
    isBoldTextEnabled() {
      {
        return new Promise((resolve, reject) => {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentBoldTextState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    isGrayscaleEnabled() {
      {
        return new Promise((resolve, reject) => {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentGrayscaleState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    isInvertColorsEnabled() {
      {
        return new Promise((resolve, reject) => {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentInvertColorsState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    isReduceMotionEnabled() {
      return new Promise((resolve, reject) => {
        {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentReduceMotionState(resolve, reject);
          } else {
            reject(null);
          }
        }
      });
    },
    prefersCrossFadeTransitions() {
      return new Promise((resolve, reject) => {
        {
          if (_NativeAccessibilityManager.default?.getCurrentPrefersCrossFadeTransitionsState != null) {
            _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState(resolve, reject);
          } else {
            reject(null);
          }
        }
      });
    },
    isReduceTransparencyEnabled() {
      {
        return new Promise((resolve, reject) => {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentReduceTransparencyState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    isScreenReaderEnabled() {
      return new Promise((resolve, reject) => {
        {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentVoiceOverState(resolve, reject);
          } else {
            reject(null);
          }
        }
      });
    },
    isAccessibilityServiceEnabled() {
      return new Promise((resolve, reject) => {
        {
          reject(null);
        }
      });
    },
    addEventListener(eventName, handler) {
      var deviceEventName = EventNames.get(eventName);
      return deviceEventName == null ? {
        remove() {}
      } : _RCTDeviceEventEmitter.default.addListener(deviceEventName, handler);
    },
    setAccessibilityFocus(reactTag) {
      (0, _legacySendAccessibilityEvent.default)(reactTag, 'focus');
    },
    sendAccessibilityEvent(handle, eventType) {
      if (eventType === 'click') {
        return;
      }
      (0, _RendererProxy.sendAccessibilityEvent)(handle, eventType);
    },
    announceForAccessibility(announcement) {
      {
        _NativeAccessibilityManager.default?.announceForAccessibility(announcement);
      }
    },
    announceForAccessibilityWithOptions(announcement, options) {
      {
        if (_NativeAccessibilityManager.default?.announceForAccessibilityWithOptions) {
          _NativeAccessibilityManager.default?.announceForAccessibilityWithOptions(announcement, options);
        } else {
          _NativeAccessibilityManager.default?.announceForAccessibility(announcement);
        }
      }
    },
    getRecommendedTimeoutMillis(originalTimeout) {
      {
        return Promise.resolve(originalTimeout);
      }
    }
  };
  var _default = exports.default = AccessibilityInfo;
},48,[1,49,61,81,133,266,134]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Systrace = require(_dependencyMap[7]);
  var _EventEmitter2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var RCTDeviceEventEmitter = /*#__PURE__*/function (_EventEmitter) {
    function RCTDeviceEventEmitter() {
      (0, _classCallCheck2.default)(this, RCTDeviceEventEmitter);
      return _callSuper(this, RCTDeviceEventEmitter, arguments);
    }
    (0, _inherits2.default)(RCTDeviceEventEmitter, _EventEmitter);
    return (0, _createClass2.default)(RCTDeviceEventEmitter, [{
      key: "emit",
      value: function emit(eventType) {
        (0, _Systrace.beginEvent)(() => `RCTDeviceEventEmitter.emit#${eventType}`);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _superPropGet(RCTDeviceEventEmitter, "emit", this, 3)([eventType, ...args]);
        (0, _Systrace.endEvent)();
      }
    }]);
  }(_EventEmitter2.default);
  var instance = new RCTDeviceEventEmitter();
  Object.defineProperty(global, '__rctDeviceEventEmitter', {
    configurable: true,
    value: instance
  });
  var _default = exports.default = instance;
},49,[1,10,11,50,52,53,55,57,58]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = require(_dependencyMap[0])["default"];
  var assertThisInitialized = require(_dependencyMap[1]);
  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
    if (undefined !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return assertThisInitialized(t);
  }
  module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
},50,[13,51]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _assertThisInitialized(e) {
    if (undefined === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
},51,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _getPrototypeOf(t) {
    return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _getPrototypeOf(t);
  }
  module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},52,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var superPropBase = require(_dependencyMap[0]);
  function _get() {
    return module.exports = _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
      var p = superPropBase(e, t);
      if (p) {
        var n = Object.getOwnPropertyDescriptor(p, t);
        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
      }
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _get.apply(null, arguments);
  }
  module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
},53,[54]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = require(_dependencyMap[0]);
  function _superPropBase(t, o) {
    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = getPrototypeOf(t)););
    return t;
  }
  module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
},54,[52]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = require(_dependencyMap[0]);
  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: true,
        configurable: true
      }
    }), Object.defineProperty(t, "prototype", {
      writable: false
    }), e && setPrototypeOf(t, e);
  }
  module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
},55,[56]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _setPrototypeOf(t, e) {
    return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _setPrototypeOf(t, e);
  }
  module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},56,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.beginAsyncEvent = beginAsyncEvent;
  exports.beginEvent = beginEvent;
  exports.counterEvent = counterEvent;
  exports.endAsyncEvent = endAsyncEvent;
  exports.endEvent = endEvent;
  exports.isEnabled = isEnabled;
  exports.setEnabled = setEnabled;
  var TRACE_TAG_REACT_APPS = 131072;
  var _asyncCookie = 0;
  function isEnabled() {
    return global.nativeTraceIsTracing ? global.nativeTraceIsTracing(TRACE_TAG_REACT_APPS) : Boolean(global.__RCTProfileIsProfiling);
  }
  function setEnabled(_doEnable) {}
  function beginEvent(eventName, args) {
    if (isEnabled()) {
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);
    }
  }
  function endEvent(args) {
    if (isEnabled()) {
      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);
    }
  }
  function beginAsyncEvent(eventName, args) {
    var cookie = _asyncCookie;
    if (isEnabled()) {
      _asyncCookie++;
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);
    }
    return cookie;
  }
  function endAsyncEvent(eventName, cookie, args) {
    if (isEnabled()) {
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);
    }
  }
  function counterEvent(eventName, value) {
    if (isEnabled()) {
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);
    }
  }
},57,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _registry = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("registry");
  var EventEmitter = exports.default = /*#__PURE__*/function () {
    function EventEmitter() {
      (0, _classCallCheck2.default)(this, EventEmitter);
      Object.defineProperty(this, _registry, {
        writable: true,
        value: {}
      });
    }
    return (0, _createClass2.default)(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (typeof listener !== 'function') {
          throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');
        }
        var registrations = allocate((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], eventType);
        var registration = {
          context,
          listener,
          remove() {
            registrations.delete(registration);
          }
        };
        registrations.add(registration);
        return registration;
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var registrations = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
        if (registrations != null) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          for (var registration of Array.from(registrations)) {
            registration.listener.apply(registration.context, args);
          }
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        if (eventType == null) {
          (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry] = {};
        } else {
          delete (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
        }
      }
    }, {
      key: "listenerCount",
      value: function listenerCount(eventType) {
        var registrations = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
        return registrations == null ? 0 : registrations.size;
      }
    }]);
  }();
  function allocate(registry, eventType) {
    var registrations = registry[eventType];
    if (registrations == null) {
      registrations = new Set();
      registry[eventType] = registrations;
    }
    return registrations;
  }
},58,[1,10,11,59,60]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classPrivateFieldBase(e, t) {
    if (!{}.hasOwnProperty.call(e, t)) throw new TypeError("attempted to use private field on non-instance");
    return e;
  }
  module.exports = _classPrivateFieldBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
},59,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var id = 0;
  function _classPrivateFieldKey(e) {
    return "__private_" + id++ + "_" + e;
  }
  module.exports = _classPrivateFieldKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
},60,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _RendererImplementation = require(_dependencyMap[0]);
  Object.keys(_RendererImplementation).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _RendererImplementation[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _RendererImplementation[key];
      }
    });
  });
},61,[62]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dispatchCommand = dispatchCommand;
  exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
  exports.findNodeHandle = findNodeHandle;
  exports.isProfilingRenderer = isProfilingRenderer;
  exports.renderElement = renderElement;
  exports.sendAccessibilityEvent = sendAccessibilityEvent;
  exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;
  exports.unstable_batchedUpdates = unstable_batchedUpdates;
  function renderElement(_ref) {
    var element = _ref.element,
      rootTag = _ref.rootTag,
      useFabric = _ref.useFabric,
      useConcurrentRoot = _ref.useConcurrentRoot;
    if (useFabric) {
      require(_dependencyMap[0]).render(element, rootTag, null, useConcurrentRoot);
    } else {
      require(_dependencyMap[1]).render(element, rootTag);
    }
  }
  function findHostInstance_DEPRECATED(componentOrHandle) {
    return require(_dependencyMap[1]).findHostInstance_DEPRECATED(componentOrHandle);
  }
  function findNodeHandle(componentOrHandle) {
    return require(_dependencyMap[1]).findNodeHandle(componentOrHandle);
  }
  function dispatchCommand(handle, command, args) {
    if (global.RN$Bridgeless === true) {
      return require(_dependencyMap[0]).dispatchCommand(handle, command, args);
    } else {
      return require(_dependencyMap[1]).dispatchCommand(handle, command, args);
    }
  }
  function sendAccessibilityEvent(handle, eventType) {
    return require(_dependencyMap[1]).sendAccessibilityEvent(handle, eventType);
  }
  function unmountComponentAtNodeAndRemoveContainer(rootTag) {
    var rootTagAsNumber = rootTag;
    require(_dependencyMap[1]).unmountComponentAtNodeAndRemoveContainer(rootTagAsNumber);
  }
  function unstable_batchedUpdates(fn, bookkeeping) {
    return require(_dependencyMap[1]).unstable_batchedUpdates(fn, bookkeeping);
  }
  function isProfilingRenderer() {
    return Boolean(false);
  }
},62,[63,264]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ReactNativePrivateInterface = require(_dependencyMap[0]);
  var ReactFabric;
  {
    ReactFabric = require(_dependencyMap[1]);
  }
  global.RN$stopSurface = ReactFabric.stopSurface;
  if (global.RN$Bridgeless !== true) {
    _ReactNativePrivateInterface.BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);
  }
  module.exports = ReactFabric;
},63,[64,154]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get BatchedBridge() {
      return require(_dependencyMap[0]);
    },
    get ExceptionsManager() {
      return require(_dependencyMap[1]);
    },
    get Platform() {
      return require(_dependencyMap[2]);
    },
    get RCTEventEmitter() {
      return require(_dependencyMap[3]);
    },
    get ReactNativeViewConfigRegistry() {
      return require(_dependencyMap[4]);
    },
    get TextInputState() {
      return require(_dependencyMap[5]);
    },
    get UIManager() {
      return require(_dependencyMap[6]);
    },
    get deepDiffer() {
      return require(_dependencyMap[7]);
    },
    get deepFreezeAndThrowOnMutationInDev() {
      return require(_dependencyMap[8]);
    },
    get flattenStyle() {
      return require(_dependencyMap[9]);
    },
    get ReactFiberErrorDialog() {
      return require(_dependencyMap[10]).default;
    },
    get legacySendAccessibilityEvent() {
      return require(_dependencyMap[11]);
    },
    get RawEventEmitter() {
      return require(_dependencyMap[12]).default;
    },
    get CustomEvent() {
      return require(_dependencyMap[13]).default;
    },
    get createAttributePayload() {
      return require(_dependencyMap[14]).create;
    },
    get diffAttributePayloads() {
      return require(_dependencyMap[14]).diff;
    },
    get createPublicInstance() {
      return require(_dependencyMap[15]).createPublicInstance;
    },
    get createPublicTextInstance() {
      return require(_dependencyMap[15]).createPublicTextInstance;
    },
    get getNativeTagFromPublicInstance() {
      return require(_dependencyMap[15]).getNativeTagFromPublicInstance;
    },
    get getNodeFromPublicInstance() {
      return require(_dependencyMap[15]).getNodeFromPublicInstance;
    }
  };
},64,[65,70,81,83,84,85,111,130,67,131,132,133,135,136,138,139]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var MessageQueue = require(_dependencyMap[0]);
  var BatchedBridge = new MessageQueue();
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},65,[66]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var Systrace = require(_dependencyMap[2]);
  var deepFreezeAndThrowOnMutationInDev = require(_dependencyMap[3]);
  var stringifySafe = require(_dependencyMap[4]).default;
  var warnOnce = require(_dependencyMap[5]);
  var ErrorUtils = require(_dependencyMap[6]);
  var invariant = require(_dependencyMap[7]);
  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 131072;
  var DEBUG_INFO_LIMIT = 32;
  var MessageQueue = /*#__PURE__*/function () {
    function MessageQueue() {
      _classCallCheck(this, MessageQueue);
      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = new Map();
      this._failureCallbacks = new Map();
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = Date.now();
      this._reactNativeMicrotasksCallback = null;
      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }
    return _createClass(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        this.__guard(() => {
          this.__callFunction(module, method, args);
        });
        return this.flushedQueue();
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        this.__guard(() => {
          this.__invokeCallback(cbID, args);
        });
        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        this.__guard(() => {
          this.__callReactNativeMicrotasks();
        });
        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return Date.now() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = () => module;
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module;
        var getValue = factory;
        this._lazyCallableModules[name] = () => {
          if (getValue) {
            module = getValue();
            getValue = null;
          }
          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "callNativeSyncHook",
      value: function callNativeSyncHook(moduleID, methodID, params, onFail, onSucc) {
        this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
        return global.nativeCallSyncHook(moduleID, methodID, params);
      }
    }, {
      key: "processCallbacks",
      value: function processCallbacks(moduleID, methodID, params, onFail, onSucc) {
        if (onFail || onSucc) {
          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks.set(this._callID, onSucc);
          this._failureCallbacks.set(this._callID, onFail);
        }
        this._callID++;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
        this._queue[MODULE_IDS].push(moduleID);
        this._queue[METHOD_IDS].push(methodID);
        this._queue[PARAMS].push(params);
        var now = Date.now();
        if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }
        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);
        if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {}
    }, {
      key: "setReactNativeMicrotasksCallback",
      value: function setReactNativeMicrotasksCallback(fn) {
        this._reactNativeMicrotasksCallback = fn;
      }
    }, {
      key: "__guard",
      value: function __guard(fn) {
        if (this.__shouldPauseOnThrow()) {
          fn();
        } else {
          try {
            fn();
          } catch (error) {
            ErrorUtils.reportFatalError(error);
          }
        }
      }
    }, {
      key: "__shouldPauseOnThrow",
      value: function __shouldPauseOnThrow() {
        return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;
      }
    }, {
      key: "__callReactNativeMicrotasks",
      value: function __callReactNativeMicrotasks() {
        Systrace.beginEvent('JSTimers.callReactNativeMicrotasks()');
        try {
          if (this._reactNativeMicrotasksCallback != null) {
            this._reactNativeMicrotasksCallback();
          }
        } finally {
          Systrace.endEvent();
        }
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = Date.now();
        this._eventLoopStartTime = this._lastFlush;
        if (this.__spy) {
          Systrace.beginEvent(`${module}.${method}(${stringifySafe(args)})`);
        } else {
          Systrace.beginEvent(`${module}.${method}(...)`);
        }
        try {
          if (this.__spy) {
            this.__spy({
              type: TO_JS,
              module,
              method,
              args
            });
          }
          var moduleMethods = this.getCallableModule(module);
          if (!moduleMethods) {
            var callableModuleNames = Object.keys(this._lazyCallableModules);
            var n = callableModuleNames.length;
            var callableModuleNameList = callableModuleNames.join(', ');
            var isBridgelessMode = global.RN$Bridgeless === true ? 'true' : 'false';
            invariant(false, `Failed to call into JavaScript module method ${module}.${method}(). Module has not been registered as callable. Bridgeless Mode: ${isBridgelessMode}. Registered callable JavaScript modules (n = ${n}): ${callableModuleNameList}.
          A frequent cause of the error is that the application entry file path is incorrect. This can also happen when the JS bundle is corrupt or there is an early initialization error when loading React Native.`);
          }
          if (!moduleMethods[method]) {
            invariant(false, `Failed to call into JavaScript module method ${module}.${method}(). Module exists, but the method is undefined.`);
          }
          moduleMethods[method].apply(moduleMethods, args);
        } finally {
          Systrace.endEvent();
        }
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = Date.now();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks.get(callID) : this._failureCallbacks.get(callID);
        try {
          if (!callback) {
            return;
          }
          this._successCallbacks.delete(callID);
          this._failureCallbacks.delete(callID);
          callback(...args);
        } finally {}
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = info => {
            console.log(`${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` + `${info.module != null ? info.module + '.' : ''}${info.method}` + `(${JSON.stringify(info.args)})`);
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);
  }();
  module.exports = MessageQueue;
},66,[10,11,57,67,68,47,69,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function deepFreezeAndThrowOnMutationInDev(object) {
    return object;
  }
  module.exports = deepFreezeAndThrowOnMutationInDev;
},67,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createStringifySafeWithLimits = createStringifySafeWithLimits;
  exports.default = undefined;
  var _invariant = _interopRequireDefault(require(_dependencyMap[1]));
  function createStringifySafeWithLimits(limits) {
    var _limits$maxDepth = limits.maxDepth,
      maxDepth = _limits$maxDepth === undefined ? Number.POSITIVE_INFINITY : _limits$maxDepth,
      _limits$maxStringLimi = limits.maxStringLimit,
      maxStringLimit = _limits$maxStringLimi === undefined ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,
      _limits$maxArrayLimit = limits.maxArrayLimit,
      maxArrayLimit = _limits$maxArrayLimit === undefined ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,
      _limits$maxObjectKeys = limits.maxObjectKeysLimit,
      maxObjectKeysLimit = _limits$maxObjectKeys === undefined ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;
    var stack = [];
    function replacer(key, value) {
      while (stack.length && this !== stack[0]) {
        stack.shift();
      }
      if (typeof value === 'string') {
        var truncatedString = '...(truncated)...';
        if (value.length > maxStringLimit + truncatedString.length) {
          return value.substring(0, maxStringLimit) + truncatedString;
        }
        return value;
      }
      if (typeof value !== 'object' || value === null) {
        return value;
      }
      var retval = value;
      if (Array.isArray(value)) {
        if (stack.length >= maxDepth) {
          retval = `[ ... array with ${value.length} values ... ]`;
        } else if (value.length > maxArrayLimit) {
          retval = value.slice(0, maxArrayLimit).concat([`... extra ${value.length - maxArrayLimit} values truncated ...`]);
        }
      } else {
        (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');
        var keys = Object.keys(value);
        if (stack.length >= maxDepth) {
          retval = `{ ... object with ${keys.length} keys ... }`;
        } else if (keys.length > maxObjectKeysLimit) {
          retval = {};
          for (var k of keys.slice(0, maxObjectKeysLimit)) {
            retval[k] = value[k];
          }
          var truncatedKey = '...(truncated keys)...';
          retval[truncatedKey] = keys.length - maxObjectKeysLimit;
        }
      }
      stack.unshift(retval);
      return retval;
    }
    return function stringifySafe(arg) {
      if (arg === undefined) {
        return 'undefined';
      } else if (arg === null) {
        return 'null';
      } else if (typeof arg === 'function') {
        try {
          return arg.toString();
        } catch (e) {
          return '[function unknown]';
        }
      } else if (arg instanceof Error) {
        return arg.name + ': ' + arg.message;
      } else {
        try {
          var ret = JSON.stringify(arg, replacer);
          if (ret === undefined) {
            return '["' + typeof arg + '" failed to stringify]';
          }
          return ret;
        } catch (e) {
          if (typeof arg.toString === 'function') {
            try {
              return arg.toString();
            } catch (E) {}
          }
        }
      }
      return '["' + typeof arg + '" failed to stringify]';
    };
  }
  var stringifySafe = createStringifySafeWithLimits({
    maxDepth: 10,
    maxStringLimit: 100,
    maxArrayLimit: 50,
    maxObjectKeysLimit: 50
  });
  var _default = exports.default = stringifySafe;
},68,[1,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = global.ErrorUtils;
},69,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = require(_dependencyMap[0]);
  var _classCallCheck = require(_dependencyMap[1]);
  var _possibleConstructorReturn = require(_dependencyMap[2]);
  var _getPrototypeOf = require(_dependencyMap[3]);
  var _inherits = require(_dependencyMap[4]);
  var _wrapNativeSuper = require(_dependencyMap[5]);
  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var SyntheticError = /*#__PURE__*/function (_Error) {
    function SyntheticError() {
      var _this;
      _classCallCheck(this, SyntheticError);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, SyntheticError, [...args]);
      _this.name = '';
      return _this;
    }
    _inherits(SyntheticError, _Error);
    return _createClass(SyntheticError);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var userExceptionDecorator;
  var inUserExceptionDecorator = false;
  var decoratedExtraDataKey = Symbol('decoratedExtraDataKey');
  function unstable_setExceptionDecorator(exceptionDecorator) {
    userExceptionDecorator = exceptionDecorator;
  }
  function preprocessException(data) {
    if (userExceptionDecorator && !inUserExceptionDecorator) {
      inUserExceptionDecorator = true;
      try {
        return userExceptionDecorator(data);
      } catch {} finally {
        inUserExceptionDecorator = false;
      }
    }
    return data;
  }
  var exceptionID = 0;
  function reportException(e, isFatal, reportToConsole) {
    var parseErrorStack = require(_dependencyMap[6]);
    var stack = parseErrorStack(e?.stack);
    var currentExceptionID = ++exceptionID;
    var originalMessage = e.message || '';
    var message = originalMessage;
    if (e.componentStack != null) {
      message += `\n\nThis error is located at:${e.componentStack}`;
    }
    var namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;
    if (!message.startsWith(namePrefix)) {
      message = namePrefix + message;
    }
    message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;
    var extraData = {
      ...e[decoratedExtraDataKey],
      jsEngine: e.jsEngine,
      rawStack: e.stack
    };
    if (e.cause != null && typeof e.cause === 'object') {
      extraData.stackSymbols = e.cause.stackSymbols;
      extraData.stackReturnAddresses = e.cause.stackReturnAddresses;
      extraData.stackElements = e.cause.stackElements;
    }
    var data = preprocessException({
      message,
      originalMessage: message === originalMessage ? null : originalMessage,
      name: e.name == null || e.name === '' ? null : e.name,
      componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,
      stack,
      id: currentExceptionID,
      isFatal,
      extraData
    });
    if (reportToConsole) {
      console.error(data.message);
    }
    if (isFatal || e.type !== 'warn') {
      var NativeExceptionsManager = require(_dependencyMap[7]).default;
      if (NativeExceptionsManager) {
        NativeExceptionsManager.reportException(data);
      }
    }
  }
  var inExceptionHandler = false;
  function handleException(e, isFatal) {
    var error;
    if (e instanceof Error) {
      error = e;
    } else {
      error = new SyntheticError(e);
    }
    try {
      inExceptionHandler = true;
      reportException(error, isFatal, true);
    } finally {
      inExceptionHandler = false;
    }
  }
  function reactConsoleErrorHandler() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    console._errorOriginal(...args);
    if (!console.reportErrorsAsExceptions) {
      return;
    }
    if (inExceptionHandler) {
      return;
    }
    var error;
    var firstArg = args[0];
    if (firstArg?.stack) {
      error = firstArg;
    } else {
      var stringifySafe = require(_dependencyMap[8]).default;
      if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
        return;
      }
      var message = args.map(arg => typeof arg === 'string' ? arg : stringifySafe(arg)).join(' ');
      error = new SyntheticError(message);
      error.name = 'console.error';
    }
    reportException(error, false, false);
  }
  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }
    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;
    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }
  module.exports = {
    decoratedExtraDataKey,
    handleException,
    installConsoleErrorReporter,
    SyntheticError,
    unstable_setExceptionDecorator
  };
},70,[11,10,50,52,55,71,75,78,68]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = require(_dependencyMap[0]);
  var setPrototypeOf = require(_dependencyMap[1]);
  var isNativeFunction = require(_dependencyMap[2]);
  var construct = require(_dependencyMap[3]);
  function _wrapNativeSuper(t) {
    var r = "function" == typeof Map ? new Map() : undefined;
    return module.exports = _wrapNativeSuper = function _wrapNativeSuper(t) {
      if (null === t || !isNativeFunction(t)) return t;
      if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
      if (undefined !== r) {
        if (r.has(t)) return r.get(t);
        r.set(t, Wrapper);
      }
      function Wrapper() {
        return construct(t, arguments, getPrototypeOf(this).constructor);
      }
      return Wrapper.prototype = Object.create(t.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      }), setPrototypeOf(Wrapper, t);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _wrapNativeSuper(t);
  }
  module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
},71,[52,56,72,73]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeFunction(t) {
    try {
      return -1 !== Function.toString.call(t).indexOf("[native code]");
    } catch (n) {
      return "function" == typeof t;
    }
  }
  module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
},72,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isNativeReflectConstruct = require(_dependencyMap[0]);
  var setPrototypeOf = require(_dependencyMap[1]);
  function _construct(t, e, r) {
    if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return r && setPrototypeOf(p, r.prototype), p;
  }
  module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
},73,[74,56]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {
      return !!t;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
  }
  module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
},74,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var parseHermesStack = require(_dependencyMap[0]);
  function convertHermesStack(stack) {
    var frames = [];
    for (var entry of stack.entries) {
      if (entry.type !== 'FRAME') {
        continue;
      }
      var location = entry.location,
        functionName = entry.functionName;
      if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {
        continue;
      }
      frames.push({
        methodName: functionName,
        file: location.sourceUrl,
        lineNumber: location.line1Based,
        column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based
      });
    }
    return frames;
  }
  function parseErrorStack(errorStack) {
    if (errorStack == null) {
      return [];
    }
    var stacktraceParser = require(_dependencyMap[1]);
    var parsedStack = Array.isArray(errorStack) ? errorStack : global.HermesInternal ? convertHermesStack(parseHermesStack(errorStack)) : stacktraceParser.parse(errorStack).map(frame => ({
      ...frame,
      column: frame.column != null ? frame.column - 1 : null
    }));
    return parsedStack;
  }
  module.exports = parseErrorStack;
},75,[76,77]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var RE_FRAME = /^ {4}at (.+?)(?: \((native)\)?| \((address at )?(.*?):(\d+):(\d+)\))$/;
  var RE_SKIPPED = /^ {4}... skipping (\d+) frames$/;
  function isInternalBytecodeSourceUrl(sourceUrl) {
    return sourceUrl === 'InternalBytecode.js';
  }
  function parseLine(line) {
    var asFrame = line.match(RE_FRAME);
    if (asFrame) {
      return {
        type: 'FRAME',
        functionName: asFrame[1],
        location: asFrame[2] === 'native' ? {
          type: 'NATIVE'
        } : asFrame[3] === 'address at ' ? isInternalBytecodeSourceUrl(asFrame[4]) ? {
          type: 'INTERNAL_BYTECODE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          virtualOffset0Based: Number.parseInt(asFrame[6], 10)
        } : {
          type: 'BYTECODE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          virtualOffset0Based: Number.parseInt(asFrame[6], 10)
        } : {
          type: 'SOURCE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          column1Based: Number.parseInt(asFrame[6], 10)
        }
      };
    }
    var asSkipped = line.match(RE_SKIPPED);
    if (asSkipped) {
      return {
        type: 'SKIPPED',
        count: Number.parseInt(asSkipped[1], 10)
      };
    }
  }
  module.exports = function parseHermesStack(stack) {
    var lines = stack.split(/\n/);
    var entries = [];
    var lastMessageLine = -1;
    for (var i = 0; i < lines.length; ++i) {
      var line = lines[i];
      if (!line) {
        continue;
      }
      var entry = parseLine(line);
      if (entry) {
        entries.push(entry);
        continue;
      }
      lastMessageLine = i;
      entries = [];
    }
    var message = lines.slice(0, lastMessageLine + 1).join('\n');
    return {
      message,
      entries
    };
  };
},76,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var UNKNOWN_FUNCTION = '<unknown>';
  /**
   * This parses the different stack traces and puts them into one format
   * This borrows heavily from TraceKit (https://github.com/csnover/TraceKit)
   */

  function parse(stackString) {
    var lines = stackString.split('\n');
    return lines.reduce(function (stack, line) {
      var parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);
      if (parseResult) {
        stack.push(parseResult);
      }
      return stack;
    }, []);
  }
  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;
  function parseChrome(line) {
    var parts = chromeRe.exec(line);
    if (!parts) {
      return null;
    }
    var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line

    var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line

    var submatch = chromeEvalRe.exec(parts[2]);
    if (isEval && submatch != null) {
      // throw out eval line/column and use top-most line/column number
      parts[2] = submatch[1]; // url

      parts[3] = submatch[2]; // line

      parts[4] = submatch[3]; // column
    }
    return {
      file: !isNative ? parts[2] : null,
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: isNative ? [parts[2]] : [],
      lineNumber: parts[3] ? +parts[3] : null,
      column: parts[4] ? +parts[4] : null
    };
  }
  var winjsRe = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  function parseWinjs(line) {
    var parts = winjsRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }
  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  function parseGecko(line) {
    var parts = geckoRe.exec(line);
    if (!parts) {
      return null;
    }
    var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
    var submatch = geckoEvalRe.exec(parts[3]);
    if (isEval && submatch != null) {
      // throw out eval line/column and use top-most line number
      parts[3] = submatch[1];
      parts[4] = submatch[2];
      parts[5] = null; // no column when eval
    }
    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: parts[2] ? parts[2].split(',') : [],
      lineNumber: parts[4] ? +parts[4] : null,
      column: parts[5] ? +parts[5] : null
    };
  }
  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
  function parseJSC(line) {
    var parts = javaScriptCoreRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[4],
      column: parts[5] ? +parts[5] : null
    };
  }
  var nodeRe = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  function parseNode(line) {
    var parts = nodeRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }
  exports.parse = parse;
},77,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var Platform = require(_dependencyMap[1]);
  var NativeModule = TurboModuleRegistry.getEnforcing('ExceptionsManager');
  var ExceptionsManager = {
    reportFatalException(message, stack, exceptionId) {
      NativeModule.reportFatalException(message, stack, exceptionId);
    },
    reportSoftException(message, stack, exceptionId) {
      NativeModule.reportSoftException(message, stack, exceptionId);
    },
    updateExceptionMessage(message, stack, exceptionId) {
      NativeModule.updateExceptionMessage(message, stack, exceptionId);
    },
    dismissRedbox() {},
    reportException(data) {
      if (NativeModule.reportException) {
        NativeModule.reportException(data);
        return;
      }
      if (data.isFatal) {
        ExceptionsManager.reportFatalException(data.message, data.stack, data.id);
      } else {
        ExceptionsManager.reportSoftException(data.message, data.stack, data.id);
      }
    }
  };
  var _default = exports.default = ExceptionsManager;
},78,[79,81]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.get = get;
  exports.getEnforcing = getEnforcing;
  var _invariant = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeModules = require(_dependencyMap[2]);
  var turboModuleProxy = global.__turboModuleProxy;
  var moduleLoadHistory = {
    NativeModules: [],
    TurboModules: [],
    NotFound: []
  };
  function isBridgeless() {
    return global.RN$Bridgeless === true;
  }
  function isTurboModuleInteropEnabled() {
    return global.RN$TurboInterop === true;
  }
  function shouldReportDebugInfo() {
    return true;
  }
  function requireModule(name) {
    if (!isBridgeless() || isTurboModuleInteropEnabled()) {
      var legacyModule = NativeModules[name];
      if (legacyModule != null) {
        if (shouldReportDebugInfo()) {
          moduleLoadHistory.NativeModules.push(name);
        }
        return legacyModule;
      }
    }
    if (turboModuleProxy != null) {
      var module = turboModuleProxy(name);
      if (module != null) {
        if (shouldReportDebugInfo()) {
          moduleLoadHistory.TurboModules.push(name);
        }
        return module;
      }
    }
    if (shouldReportDebugInfo() && !moduleLoadHistory.NotFound.includes(name)) {
      moduleLoadHistory.NotFound.push(name);
    }
    return null;
  }
  function get(name) {
    return requireModule(name);
  }
  function getEnforcing(name) {
    var module = requireModule(name);
    var message = `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` + 'Verify that a module by this name is registered in the native binary.';
    if (shouldReportDebugInfo()) {
      message += 'Bridgeless mode: ' + (isBridgeless() ? 'true' : 'false') + '. ';
      message += 'TurboModule interop: ' + (isTurboModuleInteropEnabled() ? 'true' : 'false') + '. ';
      message += 'Modules loaded: ' + JSON.stringify(moduleLoadHistory);
    }
    (0, _invariant.default)(module != null, message);
    return module;
  }
},79,[1,46,80]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = require(_dependencyMap[0]);
  var BatchedBridge = require(_dependencyMap[1]);
  var invariant = require(_dependencyMap[2]);
  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }
    var _config = _slicedToArray(config, 5),
      moduleName = _config[0],
      constants = _config[1],
      methods = _config[2],
      promiseMethods = _config[3],
      syncMethods = _config[4];
    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), "Module name prefixes should've been stripped by the native side but wasn't for " + moduleName);
    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }
    var module = {};
    methods && methods.forEach((methodName, methodID) => {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID) || false;
      var isSync = syncMethods && arrayContains(syncMethods, methodID) || false;
      invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });
    Object.assign(module, constants);
    if (module.getConstants == null) {
      module.getConstants = () => constants || Object.freeze({});
    } else {
      console.warn(`Unable to define method 'getConstants()' on NativeModule '${moduleName}'. NativeModule '${moduleName}' already has a constant or method called 'getConstants'. Please remove it.`);
    }
    return {
      name: moduleName,
      module
    };
  }
  global.__fbGenNativeModule = genModule;
  function loadModule(name, moduleID) {
    invariant(global.nativeRequireModuleConfig, "Can't lazily create module without nativeRequireModuleConfig");
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }
  function genMethod(moduleID, methodID, type) {
    var fn = null;
    if (type === 'promise') {
      fn = function promiseMethodWrapper() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var enqueueingFrameError = new Error();
        return new Promise((resolve, reject) => {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, args, data => resolve(data), errorData => reject(updateErrorWithErrorData(errorData, enqueueingFrameError)));
        });
      };
    } else {
      fn = function nonPromiseMethodWrapper() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        var newArgs = args.slice(0, args.length - callbackCount);
        if (type === 'sync') {
          return BatchedBridge.callNativeSyncHook(moduleID, methodID, newArgs, onFail, onSuccess);
        } else {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, newArgs, onFail, onSuccess);
        }
      };
    }
    fn.type = type;
    return fn;
  }
  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }
  function updateErrorWithErrorData(errorData, error) {
    return Object.assign(error, errorData || {});
  }
  var NativeModules = {};
  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else if (!global.nativeExtensions) {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');
    var defineLazyObjectProperty = require(_dependencyMap[3]);
    (bridgeConfig.remoteModuleConfig || []).forEach((config, moduleID) => {
      var info = genModule(config, moduleID);
      if (!info) {
        return;
      }
      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
        defineLazyObjectProperty(NativeModules, info.name, {
          get: () => loadModule(info.name, moduleID)
        });
      }
    });
  }
  module.exports = NativeModules;
},80,[29,65,46,7]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativePlatformConstantsIOS = _interopRequireDefault(require(_dependencyMap[1]));
  var Platform = {
    __constants: null,
    OS: 'ios',
    get Version() {
      return this.constants.osVersion;
    },
    get constants() {
      if (this.__constants == null) {
        this.__constants = _NativePlatformConstantsIOS.default.getConstants();
      }
      return this.__constants;
    },
    get isPad() {
      return this.constants.interfaceIdiom === 'pad';
    },
    get isTV() {
      return this.constants.interfaceIdiom === 'tv';
    },
    get isTesting() {
      return false;
    },
    get isDisableAnimations() {
      return this.constants.isDisableAnimations ?? this.isTesting;
    },
    select: spec => 'ios' in spec ? spec.ios : 'native' in spec ? spec.native : spec.default
  };
  module.exports = Platform;
},81,[1,82]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('PlatformConstants');
},82,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = require(_dependencyMap[0]);
  var RCTEventEmitter = {
    register(eventEmitter) {
      if (global.RN$Bridgeless) {
        global.RN$registerCallableModule('RCTEventEmitter', () => eventEmitter);
      } else {
        BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
      }
    }
  };
  module.exports = RCTEventEmitter;
},83,[65]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[1]));
  var customBubblingEventTypes = {};
  var customDirectEventTypes = {};
  exports.customBubblingEventTypes = customBubblingEventTypes;
  exports.customDirectEventTypes = customDirectEventTypes;
  var viewConfigCallbacks = new Map();
  var viewConfigs = new Map();
  function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;
    if (bubblingEventTypes != null) {
      for (var _topLevelType in bubblingEventTypes) {
        if (customBubblingEventTypes[_topLevelType] == null) {
          customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
        }
      }
    }
    if (directEventTypes != null) {
      for (var _topLevelType2 in directEventTypes) {
        if (customDirectEventTypes[_topLevelType2] == null) {
          customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
        }
      }
    }
  }
  exports.register = function (name, callback) {
    (0, _invariant.default)(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    (0, _invariant.default)(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);
    viewConfigCallbacks.set(name, callback);
    return name;
  };
  exports.get = function (name) {
    var viewConfig;
    if (!viewConfigs.has(name)) {
      var callback = viewConfigCallbacks.get(name);
      if (typeof callback !== 'function') {
        (0, _invariant.default)(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
      }
      viewConfig = callback();
      processEventTypes(viewConfig);
      viewConfigs.set(name, viewConfig);
      viewConfigCallbacks.set(name, null);
    } else {
      viewConfig = viewConfigs.get(name);
    }
    (0, _invariant.default)(viewConfig, 'View config not found for name %s', name);
    return viewConfig;
  };
},84,[1,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _AndroidTextInputNativeComponent = require(_dependencyMap[0]);
  var _RCTSingelineTextInputNativeComponent = require(_dependencyMap[1]);
  var _require = require(_dependencyMap[2]),
    findNodeHandle = _require.findNodeHandle;
  var Platform = require(_dependencyMap[3]);
  var React = require(_dependencyMap[4]);
  var currentlyFocusedInputRef = null;
  var inputs = new Set();
  function currentlyFocusedInput() {
    return currentlyFocusedInputRef;
  }
  function currentlyFocusedField() {
    return findNodeHandle(currentlyFocusedInputRef);
  }
  function focusInput(textField) {
    if (currentlyFocusedInputRef !== textField && textField != null) {
      currentlyFocusedInputRef = textField;
    }
  }
  function blurInput(textField) {
    if (currentlyFocusedInputRef === textField && textField != null) {
      currentlyFocusedInputRef = null;
    }
  }
  function focusField(textFieldID) {
    return;
  }
  function blurField(textFieldID) {
    return;
  }
  function focusTextInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    if (textField != null) {
      var fieldCanBeFocused = currentlyFocusedInputRef !== textField && textField.currentProps?.editable !== false;
      if (!fieldCanBeFocused) {
        return;
      }
      focusInput(textField);
      {
        _RCTSingelineTextInputNativeComponent.Commands.focus(textField);
      }
    }
  }
  function blurTextInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    if (currentlyFocusedInputRef === textField && textField != null) {
      blurInput(textField);
      {
        _RCTSingelineTextInputNativeComponent.Commands.blur(textField);
      }
    }
  }
  function registerInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    inputs.add(textField);
  }
  function unregisterInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    inputs.delete(textField);
  }
  function isTextInput(textField) {
    if (typeof textField === 'number') {
      return false;
    }
    return inputs.has(textField);
  }
  module.exports = {
    currentlyFocusedInput,
    focusInput,
    blurInput,
    currentlyFocusedField,
    focusField,
    blurField,
    focusTextInput,
    blurTextInput,
    registerInput,
    unregisterInput,
    isTextInput
  };
},85,[86,128,61,81,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidTextInput',
    bubblingEventTypes: {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTextInput: {
        phasedRegistrationNames: {
          bubbled: 'onTextInput',
          captured: 'onTextInputCapture'
        }
      }
    },
    directEventTypes: {
      topScroll: {
        registrationName: 'onScroll'
      }
    },
    validAttributes: {
      maxFontSizeMultiplier: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      autoFocus: true,
      placeholder: true,
      inlineImagePadding: true,
      contextMenuHidden: true,
      textShadowColor: {
        process: require(_dependencyMap[3]).default
      },
      maxLength: true,
      selectTextOnFocus: true,
      textShadowRadius: true,
      underlineColorAndroid: {
        process: require(_dependencyMap[3]).default
      },
      textDecorationLine: true,
      submitBehavior: true,
      textAlignVertical: true,
      fontStyle: true,
      textShadowOffset: true,
      selectionColor: {
        process: require(_dependencyMap[3]).default
      },
      placeholderTextColor: {
        process: require(_dependencyMap[3]).default
      },
      importantForAutofill: true,
      lineHeight: true,
      textTransform: true,
      returnKeyType: true,
      keyboardType: true,
      multiline: true,
      color: {
        process: require(_dependencyMap[3]).default
      },
      autoComplete: true,
      numberOfLines: true,
      letterSpacing: true,
      returnKeyLabel: true,
      fontSize: true,
      onKeyPress: true,
      cursorColor: {
        process: require(_dependencyMap[3]).default
      },
      text: true,
      showSoftInputOnFocus: true,
      textAlign: true,
      autoCapitalize: true,
      autoCorrect: true,
      caretHidden: true,
      secureTextEntry: true,
      textBreakStrategy: true,
      onScroll: true,
      onContentSizeChange: true,
      disableFullscreenUI: true,
      includeFontPadding: true,
      fontWeight: true,
      fontFamily: true,
      allowFontScaling: true,
      onSelectionChange: true,
      mostRecentEventCount: true,
      inlineImageLeft: true,
      editable: true,
      fontVariant: true,
      borderBottomRightRadius: true,
      borderBottomColor: {
        process: require(_dependencyMap[3]).default
      },
      borderRadius: true,
      borderRightColor: {
        process: require(_dependencyMap[3]).default
      },
      borderColor: {
        process: require(_dependencyMap[3]).default
      },
      borderTopRightRadius: true,
      borderStyle: true,
      borderBottomLeftRadius: true,
      borderLeftColor: {
        process: require(_dependencyMap[3]).default
      },
      borderTopLeftRadius: true,
      borderTopColor: {
        process: require(_dependencyMap[3]).default
      }
    }
  };
  var AndroidTextInputNativeComponent = NativeComponentRegistry.get('AndroidTextInput', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = AndroidTextInputNativeComponent;
},86,[1,87,127,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.get = get;
  exports.getWithFallback_DEPRECATED = getWithFallback_DEPRECATED;
  exports.setRuntimeConfigProvider = setRuntimeConfigProvider;
  exports.unstable_hasStaticViewConfig = unstable_hasStaticViewConfig;
  var _getNativeComponentAttributes = _interopRequireDefault(require(_dependencyMap[1]));
  var _UIManager = _interopRequireDefault(require(_dependencyMap[2]));
  var _ReactNativeViewConfigRegistry = _interopRequireDefault(require(_dependencyMap[3]));
  var _verifyComponentAttributeEquivalence = _interopRequireDefault(require(_dependencyMap[4]));
  var StaticViewConfigValidator = _interopRequireWildcard(require(_dependencyMap[5]));
  var _ViewConfig = require(_dependencyMap[6]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var getRuntimeConfig;
  function setRuntimeConfigProvider(runtimeConfigProvider) {
    if (getRuntimeConfig === undefined) {
      getRuntimeConfig = runtimeConfigProvider;
    }
  }
  function get(name, viewConfigProvider) {
    _ReactNativeViewConfigRegistry.default.register(name, () => {
      var _ref = getRuntimeConfig?.(name) ?? {
          native: !global.RN$Bridgeless,
          strict: false,
          verify: false
        },
        native = _ref.native,
        strict = _ref.strict,
        verify = _ref.verify;
      var viewConfig;
      if (native) {
        viewConfig = (0, _getNativeComponentAttributes.default)(name);
      } else {
        viewConfig = (0, _ViewConfig.createViewConfig)(viewConfigProvider());
        if (viewConfig == null) {
          viewConfig = (0, _getNativeComponentAttributes.default)(name);
        }
      }
      if (verify) {
        var nativeViewConfig = native ? viewConfig : (0, _getNativeComponentAttributes.default)(name);
        var staticViewConfig = native ? (0, _ViewConfig.createViewConfig)(viewConfigProvider()) : viewConfig;
        if (strict) {
          var validationOutput = StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);
          if (validationOutput.type === 'invalid') {
            console.error(StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));
          }
        } else {
          (0, _verifyComponentAttributeEquivalence.default)(nativeViewConfig, staticViewConfig);
        }
      }
      return viewConfig;
    });
    return name;
  }
  function getWithFallback_DEPRECATED(name, viewConfigProvider) {
    if (getRuntimeConfig == null) {
      if (hasNativeViewConfig(name)) {
        return get(name, viewConfigProvider);
      }
    } else {
      if (getRuntimeConfig(name) != null) {
        return get(name, viewConfigProvider);
      }
    }
    var FallbackNativeComponent = function (props) {
      return null;
    };
    FallbackNativeComponent.displayName = `Fallback(${name})`;
    return FallbackNativeComponent;
  }
  function hasNativeViewConfig(name) {
    (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');
    return _UIManager.default.getViewManagerConfig(name) != null;
  }
  function unstable_hasStaticViewConfig(name) {
    var _ref2 = getRuntimeConfig?.(name) ?? {
        native: true
      },
      native = _ref2.native;
    return !native;
  }
},87,[1,88,111,84,119,123,124,46,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = require(_dependencyMap[0]);
  var resolveAssetSource = require(_dependencyMap[1]);
  var processColor = require(_dependencyMap[2]).default;
  var processColorArray = require(_dependencyMap[3]);
  var insetsDiffer = require(_dependencyMap[4]);
  var matricesDiffer = require(_dependencyMap[5]);
  var pointsDiffer = require(_dependencyMap[6]);
  var sizesDiffer = require(_dependencyMap[7]);
  var UIManager = require(_dependencyMap[8]);
  var invariant = require(_dependencyMap[9]);
  function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
    invariant(viewConfig != null && viewConfig.NativeProps != null, 'requireNativeComponent: "%s" was not found in the UIManager.', uiViewClassName);
    var baseModuleName = viewConfig.baseModuleName,
      bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;
    bubblingEventTypes = bubblingEventTypes ?? {};
    directEventTypes = directEventTypes ?? {};
    while (baseModuleName) {
      var baseModule = UIManager.getViewManagerConfig(baseModuleName);
      if (!baseModule) {
        baseModuleName = null;
      } else {
        bubblingEventTypes = {
          ...baseModule.bubblingEventTypes,
          ...bubblingEventTypes
        };
        directEventTypes = {
          ...baseModule.directEventTypes,
          ...directEventTypes
        };
        nativeProps = {
          ...baseModule.NativeProps,
          ...nativeProps
        };
        baseModuleName = baseModule.baseModuleName;
      }
    }
    var validAttributes = {};
    for (var key in nativeProps) {
      var typeName = nativeProps[key];
      var diff = getDifferForType(typeName);
      var process = getProcessorForType(typeName);
      validAttributes[key] = diff == null ? process == null ? true : {
        process
      } : process == null ? {
        diff
      } : {
        diff,
        process
      };
    }
    validAttributes.style = ReactNativeStyleAttributes;
    Object.assign(viewConfig, {
      uiViewClassName,
      validAttributes,
      bubblingEventTypes,
      directEventTypes
    });
    attachDefaultEventTypes(viewConfig);
    return viewConfig;
  }
  function attachDefaultEventTypes(viewConfig) {
    var constants = UIManager.getConstants();
    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
      viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
    } else {
      viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
      viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
  }
  function merge(destination, source) {
    if (!source) {
      return destination;
    }
    if (!destination) {
      return source;
    }
    for (var key in source) {
      if (!source.hasOwnProperty(key)) {
        continue;
      }
      var sourceValue = source[key];
      if (destination.hasOwnProperty(key)) {
        var destinationValue = destination[key];
        if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
          sourceValue = merge(destinationValue, sourceValue);
        }
      }
      destination[key] = sourceValue;
    }
    return destination;
  }
  function getDifferForType(typeName) {
    switch (typeName) {
      case 'CATransform3D':
        return matricesDiffer;
      case 'CGPoint':
        return pointsDiffer;
      case 'CGSize':
        return sizesDiffer;
      case 'UIEdgeInsets':
        return insetsDiffer;
      case 'Point':
        return pointsDiffer;
      case 'EdgeInsets':
        return insetsDiffer;
    }
    return null;
  }
  function getProcessorForType(typeName) {
    switch (typeName) {
      case 'CGColor':
      case 'UIColor':
        return processColor;
      case 'CGColorArray':
      case 'UIColorArray':
        return processColorArray;
      case 'CGImage':
      case 'UIImage':
      case 'RCTImageSource':
        return resolveAssetSource;
      case 'Color':
        return processColor;
      case 'ColorArray':
        return processColorArray;
      case 'ImageSource':
        return resolveAssetSource;
    }
    return null;
  }
  module.exports = getNativeComponentAttributes;
},88,[89,99,91,107,108,109,110,98,111,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _processAspectRatio = _interopRequireDefault(require(_dependencyMap[1]));
  var _processColor = _interopRequireDefault(require(_dependencyMap[2]));
  var _processFontVariant = _interopRequireDefault(require(_dependencyMap[3]));
  var _processTransform = _interopRequireDefault(require(_dependencyMap[4]));
  var _processTransformOrigin = _interopRequireDefault(require(_dependencyMap[5]));
  var _sizesDiffer = _interopRequireDefault(require(_dependencyMap[6]));
  var colorAttributes = {
    process: _processColor.default
  };
  var ReactNativeStyleAttributes = {
    alignContent: true,
    alignItems: true,
    alignSelf: true,
    aspectRatio: {
      process: _processAspectRatio.default
    },
    borderBottomWidth: true,
    borderEndWidth: true,
    borderLeftWidth: true,
    borderRightWidth: true,
    borderStartWidth: true,
    borderTopWidth: true,
    columnGap: true,
    borderWidth: true,
    bottom: true,
    direction: true,
    display: true,
    end: true,
    flex: true,
    flexBasis: true,
    flexDirection: true,
    flexGrow: true,
    flexShrink: true,
    flexWrap: true,
    gap: true,
    height: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    justifyContent: true,
    left: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true,
    overflow: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    position: true,
    right: true,
    rowGap: true,
    start: true,
    top: true,
    width: true,
    zIndex: true,
    elevation: true,
    shadowColor: colorAttributes,
    shadowOffset: {
      diff: _sizesDiffer.default
    },
    shadowOpacity: true,
    shadowRadius: true,
    transform: {
      process: _processTransform.default
    },
    transformOrigin: {
      process: _processTransformOrigin.default
    },
    backfaceVisibility: true,
    backgroundColor: colorAttributes,
    borderBlockColor: colorAttributes,
    borderBlockEndColor: colorAttributes,
    borderBlockStartColor: colorAttributes,
    borderBottomColor: colorAttributes,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderColor: colorAttributes,
    borderCurve: true,
    borderEndColor: colorAttributes,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderLeftColor: colorAttributes,
    borderRadius: true,
    borderRightColor: colorAttributes,
    borderStartColor: colorAttributes,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    borderStyle: true,
    borderTopColor: colorAttributes,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    opacity: true,
    pointerEvents: true,
    color: colorAttributes,
    fontFamily: true,
    fontSize: true,
    fontStyle: true,
    fontVariant: {
      process: _processFontVariant.default
    },
    fontWeight: true,
    includeFontPadding: true,
    letterSpacing: true,
    lineHeight: true,
    textAlign: true,
    textAlignVertical: true,
    textDecorationColor: colorAttributes,
    textDecorationLine: true,
    textDecorationStyle: true,
    textShadowColor: colorAttributes,
    textShadowOffset: true,
    textShadowRadius: true,
    textTransform: true,
    userSelect: true,
    verticalAlign: true,
    writingDirection: true,
    overlayColor: colorAttributes,
    resizeMode: true,
    tintColor: colorAttributes,
    objectFit: true
  };
  module.exports = ReactNativeStyleAttributes;
},89,[1,90,91,95,96,97,98]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0]);
  function processAspectRatio(aspectRatio) {
    if (typeof aspectRatio === 'number') {
      return aspectRatio;
    }
    if (typeof aspectRatio !== 'string') {
      return;
    }
    var matches = aspectRatio.split('/').map(s => s.trim());
    if (matches.includes('auto')) {
      return;
    }
    var hasNonNumericValues = matches.some(n => Number.isNaN(Number(n)));
    if (hasNonNumericValues) {
      return;
    }
    if (matches.length === 2) {
      return Number(matches[0]) / Number(matches[1]);
    }
    return Number(matches[0]);
  }
  module.exports = processAspectRatio;
},90,[46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var Platform = require(_dependencyMap[0]);
  var normalizeColor = require(_dependencyMap[1]);
  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }
    var normalizedColor = normalizeColor(color);
    if (normalizedColor === null || normalizedColor === undefined) {
      return undefined;
    }
    if (typeof normalizedColor === 'object') {
      var processColorObject = require(_dependencyMap[2]).processColorObject;
      var processedColorObj = processColorObject(normalizedColor);
      if (processedColorObj != null) {
        return processedColorObj;
      }
    }
    if (typeof normalizedColor !== 'number') {
      return null;
    }
    normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
    return normalizedColor;
  }
  var _default = exports.default = processColor;
},91,[81,92,94]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _normalizeColors = _interopRequireDefault(require(_dependencyMap[1]));
  function normalizeColor(color) {
    if (typeof color === 'object' && color != null) {
      var _require = require(_dependencyMap[2]),
        normalizeColorObject = _require.normalizeColorObject;
      var normalizedColor = normalizeColorObject(color);
      if (normalizedColor != null) {
        return normalizedColor;
      }
    }
    if (typeof color === 'string' || typeof color === 'number') {
      return (0, _normalizeColors.default)(color);
    }
  }
  module.exports = normalizeColor;
},92,[1,93,94]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /* eslint no-bitwise: 0 */

  'use strict';

  function normalizeColor(color) {
    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }
      return null;
    }
    if (typeof color !== 'string') {
      return null;
    }
    var matchers = getMatchers();
    var match;

    // Ordered based on occurrences on Facebook codebase
    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }
    var colorFromKeyword = normalizeKeyword(color);
    if (colorFromKeyword != null) {
      return colorFromKeyword;
    }
    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 |
      // r
      parse255(match[2]) << 16 |
      // g
      parse255(match[3]) << 8 |
      // b
      0x000000ff) >>>
      // a
      0;
    }
    if (match = matchers.rgba.exec(color)) {
      // rgba(R G B / A) notation
      if (match[6] !== undefined) {
        return (parse255(match[6]) << 24 |
        // r
        parse255(match[7]) << 16 |
        // g
        parse255(match[8]) << 8 |
        // b
        parse1(match[9])) >>>
        // a
        0;
      }

      // rgba(R, G, B, A) notation
      return (parse255(match[2]) << 24 |
      // r
      parse255(match[3]) << 16 |
      // g
      parse255(match[4]) << 8 |
      // b
      parse1(match[5])) >>>
      // a
      0;
    }
    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] +
      // r
      match[2] + match[2] +
      // g
      match[3] + match[3] +
      // b
      'ff',
      // a
      16) >>> 0;
    }

    // https://drafts.csswg.org/css-color-4/#hex-notation
    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }
    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] +
      // r
      match[2] + match[2] +
      // g
      match[3] + match[3] +
      // b
      match[4] + match[4],
      // a
      16) >>> 0;
    }
    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3]) // l
      ) | 0x000000ff) >>>
      // a
      0;
    }
    if (match = matchers.hsla.exec(color)) {
      // hsla(H S L / A) notation
      if (match[6] !== undefined) {
        return (hslToRgb(parse360(match[6]),
        // h
        parsePercentage(match[7]),
        // s
        parsePercentage(match[8]) // l
        ) | parse1(match[9])) >>>
        // a
        0;
      }

      // hsla(H, S, L, A) notation
      return (hslToRgb(parse360(match[2]),
      // h
      parsePercentage(match[3]),
      // s
      parsePercentage(match[4]) // l
      ) | parse1(match[5])) >>>
      // a
      0;
    }
    if (match = matchers.hwb.exec(color)) {
      return (hwbToRgb(parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // w
      parsePercentage(match[3]) // b
      ) | 0x000000ff) >>>
      // a
      0;
    }
    return null;
  }
  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }
    if (t > 1) {
      t -= 1;
    }
    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }
    if (t < 0.5) {
      return q;
    }
    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }
    return p;
  }
  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }
  function hwbToRgb(h, w, b) {
    if (w + b >= 1) {
      var gray = Math.round(w * 255 / (w + b));
      return gray << 24 | gray << 16 | gray << 8;
    }
    var red = hue2rgb(0, 1, h + 0.3333333333333333) * (1 - w - b) + w;
    var green = hue2rgb(0, 1, h) * (1 - w - b) + w;
    var blue = hue2rgb(0, 1, h - 0.3333333333333333) * (1 - w - b) + w;
    return Math.round(red * 255) << 24 | Math.round(green * 255) << 16 | Math.round(blue * 255) << 8;
  }
  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";
  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return '\\(\\s*(' + args.join(')\\s*,?\\s*(') + ')\\s*\\)';
  }
  function callWithSlashSeparator() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return '\\(\\s*(' + args.slice(0, args.length - 1).join(')\\s*,?\\s*(') + ')\\s*/\\s*(' + args[args.length - 1] + ')\\s*\\)';
  }
  function commaSeparatedCall() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }
  var cachedMatchers;
  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp('rgba(' + commaSeparatedCall(NUMBER, NUMBER, NUMBER, NUMBER) + '|' + callWithSlashSeparator(NUMBER, NUMBER, NUMBER, NUMBER) + ')'),
        hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp('hsla(' + commaSeparatedCall(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + '|' + callWithSlashSeparator(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + ')'),
        hwb: new RegExp('hwb' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }
    return cachedMatchers;
  }
  function parse255(str) {
    var int = parseInt(str, 10);
    if (int < 0) {
      return 0;
    }
    if (int > 255) {
      return 255;
    }
    return int;
  }
  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }
  function parse1(str) {
    var num = parseFloat(str);
    if (num < 0) {
      return 0;
    }
    if (num > 1) {
      return 255;
    }
    return Math.round(num * 255);
  }
  function parsePercentage(str) {
    // parseFloat conveniently ignores the final %
    var int = parseFloat(str);
    if (int < 0) {
      return 0;
    }
    if (int > 100) {
      return 1;
    }
    return int / 100;
  }
  function normalizeKeyword(name) {
    // prettier-ignore
    switch (name) {
      case 'transparent':
        return 0x00000000;
      // http://www.w3.org/TR/css3-color/#svg-color
      case 'aliceblue':
        return 0xf0f8ffff;
      case 'antiquewhite':
        return 0xfaebd7ff;
      case 'aqua':
        return 0x00ffffff;
      case 'aquamarine':
        return 0x7fffd4ff;
      case 'azure':
        return 0xf0ffffff;
      case 'beige':
        return 0xf5f5dcff;
      case 'bisque':
        return 0xffe4c4ff;
      case 'black':
        return 0x000000ff;
      case 'blanchedalmond':
        return 0xffebcdff;
      case 'blue':
        return 0x0000ffff;
      case 'blueviolet':
        return 0x8a2be2ff;
      case 'brown':
        return 0xa52a2aff;
      case 'burlywood':
        return 0xdeb887ff;
      case 'burntsienna':
        return 0xea7e5dff;
      case 'cadetblue':
        return 0x5f9ea0ff;
      case 'chartreuse':
        return 0x7fff00ff;
      case 'chocolate':
        return 0xd2691eff;
      case 'coral':
        return 0xff7f50ff;
      case 'cornflowerblue':
        return 0x6495edff;
      case 'cornsilk':
        return 0xfff8dcff;
      case 'crimson':
        return 0xdc143cff;
      case 'cyan':
        return 0x00ffffff;
      case 'darkblue':
        return 0x00008bff;
      case 'darkcyan':
        return 0x008b8bff;
      case 'darkgoldenrod':
        return 0xb8860bff;
      case 'darkgray':
        return 0xa9a9a9ff;
      case 'darkgreen':
        return 0x006400ff;
      case 'darkgrey':
        return 0xa9a9a9ff;
      case 'darkkhaki':
        return 0xbdb76bff;
      case 'darkmagenta':
        return 0x8b008bff;
      case 'darkolivegreen':
        return 0x556b2fff;
      case 'darkorange':
        return 0xff8c00ff;
      case 'darkorchid':
        return 0x9932ccff;
      case 'darkred':
        return 0x8b0000ff;
      case 'darksalmon':
        return 0xe9967aff;
      case 'darkseagreen':
        return 0x8fbc8fff;
      case 'darkslateblue':
        return 0x483d8bff;
      case 'darkslategray':
        return 0x2f4f4fff;
      case 'darkslategrey':
        return 0x2f4f4fff;
      case 'darkturquoise':
        return 0x00ced1ff;
      case 'darkviolet':
        return 0x9400d3ff;
      case 'deeppink':
        return 0xff1493ff;
      case 'deepskyblue':
        return 0x00bfffff;
      case 'dimgray':
        return 0x696969ff;
      case 'dimgrey':
        return 0x696969ff;
      case 'dodgerblue':
        return 0x1e90ffff;
      case 'firebrick':
        return 0xb22222ff;
      case 'floralwhite':
        return 0xfffaf0ff;
      case 'forestgreen':
        return 0x228b22ff;
      case 'fuchsia':
        return 0xff00ffff;
      case 'gainsboro':
        return 0xdcdcdcff;
      case 'ghostwhite':
        return 0xf8f8ffff;
      case 'gold':
        return 0xffd700ff;
      case 'goldenrod':
        return 0xdaa520ff;
      case 'gray':
        return 0x808080ff;
      case 'green':
        return 0x008000ff;
      case 'greenyellow':
        return 0xadff2fff;
      case 'grey':
        return 0x808080ff;
      case 'honeydew':
        return 0xf0fff0ff;
      case 'hotpink':
        return 0xff69b4ff;
      case 'indianred':
        return 0xcd5c5cff;
      case 'indigo':
        return 0x4b0082ff;
      case 'ivory':
        return 0xfffff0ff;
      case 'khaki':
        return 0xf0e68cff;
      case 'lavender':
        return 0xe6e6faff;
      case 'lavenderblush':
        return 0xfff0f5ff;
      case 'lawngreen':
        return 0x7cfc00ff;
      case 'lemonchiffon':
        return 0xfffacdff;
      case 'lightblue':
        return 0xadd8e6ff;
      case 'lightcoral':
        return 0xf08080ff;
      case 'lightcyan':
        return 0xe0ffffff;
      case 'lightgoldenrodyellow':
        return 0xfafad2ff;
      case 'lightgray':
        return 0xd3d3d3ff;
      case 'lightgreen':
        return 0x90ee90ff;
      case 'lightgrey':
        return 0xd3d3d3ff;
      case 'lightpink':
        return 0xffb6c1ff;
      case 'lightsalmon':
        return 0xffa07aff;
      case 'lightseagreen':
        return 0x20b2aaff;
      case 'lightskyblue':
        return 0x87cefaff;
      case 'lightslategray':
        return 0x778899ff;
      case 'lightslategrey':
        return 0x778899ff;
      case 'lightsteelblue':
        return 0xb0c4deff;
      case 'lightyellow':
        return 0xffffe0ff;
      case 'lime':
        return 0x00ff00ff;
      case 'limegreen':
        return 0x32cd32ff;
      case 'linen':
        return 0xfaf0e6ff;
      case 'magenta':
        return 0xff00ffff;
      case 'maroon':
        return 0x800000ff;
      case 'mediumaquamarine':
        return 0x66cdaaff;
      case 'mediumblue':
        return 0x0000cdff;
      case 'mediumorchid':
        return 0xba55d3ff;
      case 'mediumpurple':
        return 0x9370dbff;
      case 'mediumseagreen':
        return 0x3cb371ff;
      case 'mediumslateblue':
        return 0x7b68eeff;
      case 'mediumspringgreen':
        return 0x00fa9aff;
      case 'mediumturquoise':
        return 0x48d1ccff;
      case 'mediumvioletred':
        return 0xc71585ff;
      case 'midnightblue':
        return 0x191970ff;
      case 'mintcream':
        return 0xf5fffaff;
      case 'mistyrose':
        return 0xffe4e1ff;
      case 'moccasin':
        return 0xffe4b5ff;
      case 'navajowhite':
        return 0xffdeadff;
      case 'navy':
        return 0x000080ff;
      case 'oldlace':
        return 0xfdf5e6ff;
      case 'olive':
        return 0x808000ff;
      case 'olivedrab':
        return 0x6b8e23ff;
      case 'orange':
        return 0xffa500ff;
      case 'orangered':
        return 0xff4500ff;
      case 'orchid':
        return 0xda70d6ff;
      case 'palegoldenrod':
        return 0xeee8aaff;
      case 'palegreen':
        return 0x98fb98ff;
      case 'paleturquoise':
        return 0xafeeeeff;
      case 'palevioletred':
        return 0xdb7093ff;
      case 'papayawhip':
        return 0xffefd5ff;
      case 'peachpuff':
        return 0xffdab9ff;
      case 'peru':
        return 0xcd853fff;
      case 'pink':
        return 0xffc0cbff;
      case 'plum':
        return 0xdda0ddff;
      case 'powderblue':
        return 0xb0e0e6ff;
      case 'purple':
        return 0x800080ff;
      case 'rebeccapurple':
        return 0x663399ff;
      case 'red':
        return 0xff0000ff;
      case 'rosybrown':
        return 0xbc8f8fff;
      case 'royalblue':
        return 0x4169e1ff;
      case 'saddlebrown':
        return 0x8b4513ff;
      case 'salmon':
        return 0xfa8072ff;
      case 'sandybrown':
        return 0xf4a460ff;
      case 'seagreen':
        return 0x2e8b57ff;
      case 'seashell':
        return 0xfff5eeff;
      case 'sienna':
        return 0xa0522dff;
      case 'silver':
        return 0xc0c0c0ff;
      case 'skyblue':
        return 0x87ceebff;
      case 'slateblue':
        return 0x6a5acdff;
      case 'slategray':
        return 0x708090ff;
      case 'slategrey':
        return 0x708090ff;
      case 'snow':
        return 0xfffafaff;
      case 'springgreen':
        return 0x00ff7fff;
      case 'steelblue':
        return 0x4682b4ff;
      case 'tan':
        return 0xd2b48cff;
      case 'teal':
        return 0x008080ff;
      case 'thistle':
        return 0xd8bfd8ff;
      case 'tomato':
        return 0xff6347ff;
      case 'turquoise':
        return 0x40e0d0ff;
      case 'violet':
        return 0xee82eeff;
      case 'wheat':
        return 0xf5deb3ff;
      case 'white':
        return 0xffffffff;
      case 'whitesmoke':
        return 0xf5f5f5ff;
      case 'yellow':
        return 0xffff00ff;
      case 'yellowgreen':
        return 0x9acd32ff;
    }
    return null;
  }
  module.exports = normalizeColor;
},93,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.processColorObject = exports.normalizeColorObject = exports.PlatformColor = exports.DynamicColorIOSPrivate = undefined;
  var PlatformColor = function () {
    for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
      names[_key] = arguments[_key];
    }
    return {
      semantic: names
    };
  };
  exports.PlatformColor = PlatformColor;
  var DynamicColorIOSPrivate = tuple => {
    return {
      dynamic: {
        light: tuple.light,
        dark: tuple.dark,
        highContrastLight: tuple.highContrastLight,
        highContrastDark: tuple.highContrastDark
      }
    };
  };
  exports.DynamicColorIOSPrivate = DynamicColorIOSPrivate;
  var _normalizeColorObject = color => {
    if ('semantic' in color) {
      return color;
    } else if ('dynamic' in color && color.dynamic !== undefined) {
      var normalizeColor = require(_dependencyMap[0]);
      var dynamic = color.dynamic;
      var dynamicColor = {
        dynamic: {
          light: normalizeColor(dynamic.light),
          dark: normalizeColor(dynamic.dark),
          highContrastLight: normalizeColor(dynamic.highContrastLight),
          highContrastDark: normalizeColor(dynamic.highContrastDark)
        }
      };
      return dynamicColor;
    }
    return null;
  };
  var normalizeColorObject = exports.normalizeColorObject = _normalizeColorObject;
  var _processColorObject = color => {
    if ('dynamic' in color && color.dynamic != null) {
      var processColor = require(_dependencyMap[1]).default;
      var dynamic = color.dynamic;
      var dynamicColor = {
        dynamic: {
          light: processColor(dynamic.light),
          dark: processColor(dynamic.dark),
          highContrastLight: processColor(dynamic.highContrastLight),
          highContrastDark: processColor(dynamic.highContrastDark)
        }
      };
      return dynamicColor;
    }
    return color;
  };
  var processColorObject = exports.processColorObject = _processColorObject;
},94,[92,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function processFontVariant(fontVariant) {
    if (Array.isArray(fontVariant)) {
      return fontVariant;
    }
    var match = fontVariant.split(' ').filter(Boolean);
    return match;
  }
  module.exports = processFontVariant;
},95,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var stringifySafe = require(_dependencyMap[0]).default;
  var invariant = require(_dependencyMap[1]);
  function processTransform(transform) {
    if (typeof transform === 'string') {
      var regex = new RegExp(/(\w+)\(([^)]+)\)/g);
      var transformArray = [];
      var matches;
      while (matches = regex.exec(transform)) {
        var _getKeyAndValueFromCS = _getKeyAndValueFromCSSTransform(matches[1], matches[2]),
          _key = _getKeyAndValueFromCS.key,
          value = _getKeyAndValueFromCS.value;
        if (value !== undefined) {
          transformArray.push({
            [_key]: value
          });
        }
      }
      transform = transformArray;
    }
    return transform;
  }
  var _getKeyAndValueFromCSSTransform = (key, args) => {
    var argsWithUnitsRegex = new RegExp(/([+-]?\d+(\.\d+)?)([a-zA-Z]+)?/g);
    switch (key) {
      case 'matrix':
        return {
          key,
          value: args.match(/[+-]?\d+(\.\d+)?/g)?.map(Number)
        };
      case 'translate':
      case 'translate3d':
        var parsedArgs = [];
        var missingUnitOfMeasurement = false;
        var matches;
        while (matches = argsWithUnitsRegex.exec(args)) {
          var _value = Number(matches[1]);
          var _unitOfMeasurement = matches[3];
          if (_value !== 0 && !_unitOfMeasurement) {
            missingUnitOfMeasurement = true;
          }
          parsedArgs.push(_value);
        }
        if (parsedArgs?.length === 1) {
          parsedArgs.push(0);
        }
        return {
          key: 'translate',
          value: parsedArgs
        };
      case 'translateX':
      case 'translateY':
      case 'perspective':
        var argMatches = argsWithUnitsRegex.exec(args);
        if (!argMatches?.length) {
          return {
            key,
            value: undefined
          };
        }
        var value = Number(argMatches[1]);
        var unitOfMeasurement = argMatches[3];
        return {
          key,
          value
        };
      default:
        return {
          key,
          value: !isNaN(args) ? Number(args) : args
        };
    }
  };
  module.exports = processTransform;
},96,[68,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = processTransformOrigin;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[2]));
  var INDEX_X = 0;
  var INDEX_Y = 1;
  var INDEX_Z = 2;
  function processTransformOrigin(transformOrigin) {
    if (typeof transformOrigin === 'string') {
      var transformOriginString = transformOrigin;
      var regex = /(top|bottom|left|right|center|\d+(?:%|px)|0)/gi;
      var transformOriginArray = ['50%', '50%', 0];
      var index = INDEX_X;
      var matches;
      outer: while (matches = regex.exec(transformOriginString)) {
        var nextIndex = index + 1;
        var value = matches[0];
        var valueLower = value.toLowerCase();
        switch (valueLower) {
          case 'left':
          case 'right':
            {
              (0, _invariant.default)(index === INDEX_X, 'Transform-origin %s can only be used for x-position', value);
              transformOriginArray[INDEX_X] = valueLower === 'left' ? 0 : '100%';
              break;
            }
          case 'top':
          case 'bottom':
            {
              (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin %s can only be used for y-position', value);
              transformOriginArray[INDEX_Y] = valueLower === 'top' ? 0 : '100%';
              if (index === INDEX_X) {
                var horizontal = regex.exec(transformOriginString);
                if (horizontal == null) {
                  break outer;
                }
                switch (horizontal[0].toLowerCase()) {
                  case 'left':
                    transformOriginArray[INDEX_X] = 0;
                    break;
                  case 'right':
                    transformOriginArray[INDEX_X] = '100%';
                    break;
                  case 'center':
                    transformOriginArray[INDEX_X] = '50%';
                    break;
                  default:
                    (0, _invariant.default)(false, 'Could not parse transform-origin: %s', transformOriginString);
                }
                nextIndex = INDEX_Z;
              }
              break;
            }
          case 'center':
            {
              (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin value %s cannot be used for z-position', value);
              transformOriginArray[index] = '50%';
              break;
            }
          default:
            {
              if (value.endsWith('%')) {
                transformOriginArray[index] = value;
              } else {
                transformOriginArray[index] = parseFloat(value);
              }
              break;
            }
        }
        index = nextIndex;
      }
      transformOrigin = transformOriginArray;
    }
    return transformOrigin;
  }
},97,[1,29,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };
  var sizesDiffer = function (one, two) {
    var defaultedOne = one || dummySize;
    var defaultedTwo = two || dummySize;
    return defaultedOne !== defaultedTwo && (defaultedOne.width !== defaultedTwo.width || defaultedOne.height !== defaultedTwo.height);
  };
  module.exports = sizesDiffer;
},98,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var AssetSourceResolver = require(_dependencyMap[0]);
  var _require = require(_dependencyMap[1]),
    pickScale = _require.pickScale;
  var AssetRegistry = require(_dependencyMap[2]);
  var _customSourceTransformer, _serverURL, _scriptURL;
  var _sourceCodeScriptURL;
  function getSourceCodeScriptURL() {
    if (_sourceCodeScriptURL) {
      return _sourceCodeScriptURL;
    }
    var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;
    if (!sourceCode) {
      sourceCode = require(_dependencyMap[3]).default;
    }
    _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;
    return _sourceCodeScriptURL;
  }
  function getDevServerURL() {
    if (_serverURL === undefined) {
      var sourceCodeScriptURL = getSourceCodeScriptURL();
      var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);
      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }
    return _serverURL;
  }
  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        return null;
      }
      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);
      if (!scriptURL.includes('://')) {
        scriptURL = 'file://' + scriptURL;
      }
    }
    return scriptURL;
  }
  function getScriptURL() {
    if (_scriptURL === undefined) {
      _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
    }
    return _scriptURL;
  }
  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }
  function resolveAssetSource(source) {
    if (typeof source === 'object') {
      return source;
    }
    var asset = AssetRegistry.getAssetByID(source);
    if (!asset) {
      return null;
    }
    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);
    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }
    return resolver.defaultAsset();
  }
  resolveAssetSource.pickScale = pickScale;
  resolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;
  module.exports = resolveAssetSource;
},99,[100,104,41,106]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var PixelRatio = require(_dependencyMap[2]).default;
  var Platform = require(_dependencyMap[3]);
  var _require = require(_dependencyMap[4]),
    pickScale = _require.pickScale;
  var _require2 = require(_dependencyMap[5]),
    getAndroidResourceFolderName = _require2.getAndroidResourceFolderName,
    getAndroidResourceIdentifier = _require2.getAndroidResourceIdentifier,
    getBasePath = _require2.getBasePath;
  var invariant = require(_dependencyMap[6]);
  function getScaledAssetPath(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }
  function getAssetPathInDrawableFolder(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var drawableFolder = getAndroidResourceFolderName(asset, scale);
    var fileName = getAndroidResourceIdentifier(asset);
    return drawableFolder + '/' + fileName + '.' + asset.type;
  }
  var AssetSourceResolver = /*#__PURE__*/function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      _classCallCheck(this, AssetSourceResolver);
      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }
    return _createClass(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }
        {
          return this.scaledAssetURLNearBundle();
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        invariant(!!this.serverUrl, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + "ios" + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        invariant(false, 'resource identifiers work on Android');
        return this.fromSource(getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: pickScale(this.asset.scales, PixelRatio.get())
        };
      }
    }]);
  }();
  AssetSourceResolver.pickScale = pickScale;
  module.exports = AssetSourceResolver;
},100,[10,11,101,81,104,105,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var Dimensions = require(_dependencyMap[3]).default;
  var PixelRatio = /*#__PURE__*/function () {
    function PixelRatio() {
      (0, _classCallCheck2.default)(this, PixelRatio);
    }
    return (0, _createClass2.default)(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return Dimensions.get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);
  }();
  var _default = exports.default = PixelRatio;
},101,[1,10,11,102]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[3]));
  var _EventEmitter = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativeDeviceInfo = _interopRequireDefault(require(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[6]));
  var eventEmitter = new _EventEmitter.default();
  var dimensionsInitialized = false;
  var dimensions;
  var Dimensions = /*#__PURE__*/function () {
    function Dimensions() {
      (0, _classCallCheck2.default)(this, Dimensions);
    }
    return (0, _createClass2.default)(Dimensions, null, [{
      key: "get",
      value: function get(dim) {
        (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "set",
      value: function set(dims) {
        var screen = dims.screen,
          window = dims.window;
        var windowPhysicalPixels = dims.windowPhysicalPixels;
        if (windowPhysicalPixels) {
          window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };
        }
        var screenPhysicalPixels = dims.screenPhysicalPixels;
        if (screenPhysicalPixels) {
          screen = {
            width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
            height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
            scale: screenPhysicalPixels.scale,
            fontScale: screenPhysicalPixels.fontScale
          };
        } else if (screen == null) {
          screen = window;
        }
        dimensions = {
          window,
          screen
        };
        if (dimensionsInitialized) {
          eventEmitter.emit('change', dimensions);
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        return eventEmitter.addListener(type, handler);
      }
    }]);
  }();
  var initialDims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;
  if (!initialDims) {
    _RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', update => {
      Dimensions.set(update);
    });
    initialDims = _NativeDeviceInfo.default.getConstants().Dimensions;
  }
  Dimensions.set(initialDims);
  var _default = exports.default = Dimensions;
},102,[1,10,11,49,58,103,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeModule = TurboModuleRegistry.getEnforcing('DeviceInfo');
  var constants = null;
  var NativeDeviceInfo = {
    getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    }
  };
  var _default = exports.default = NativeDeviceInfo;
},103,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getUrlCacheBreaker = getUrlCacheBreaker;
  exports.pickScale = pickScale;
  exports.setUrlCacheBreaker = setUrlCacheBreaker;
  var _PixelRatio = _interopRequireDefault(require(_dependencyMap[1]));
  var cacheBreaker;
  var warnIfCacheBreakerUnset = true;
  function pickScale(scales, deviceScale) {
    if (deviceScale == null) {
      deviceScale = _PixelRatio.default.get();
    }
    for (var i = 0; i < scales.length; i++) {
      if (scales[i] >= deviceScale) {
        return scales[i];
      }
    }
    return scales[scales.length - 1] || 1;
  }
  function setUrlCacheBreaker(appendage) {
    cacheBreaker = appendage;
  }
  function getUrlCacheBreaker() {
    if (cacheBreaker == null) {
      return '';
    }
    return cacheBreaker;
  }
},104,[1,101]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var androidScaleSuffix = {
    '0.75': 'ldpi',
    '1': 'mdpi',
    '1.5': 'hdpi',
    '2': 'xhdpi',
    '3': 'xxhdpi',
    '4': 'xxxhdpi'
  };
  var ANDROID_BASE_DENSITY = 160;
  function getAndroidAssetSuffix(scale) {
    if (scale.toString() in androidScaleSuffix) {
      return androidScaleSuffix[scale.toString()];
    }
    if (Number.isFinite(scale) && scale > 0) {
      return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';
    }
    throw new Error('no such scale ' + scale.toString());
  }
  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'ktx', 'png', 'svg', 'webp', 'xml']);
  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }
    var suffix = getAndroidAssetSuffix(scale);
    if (!suffix) {
      throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
    }
    return 'drawable-' + suffix;
  }
  function getAndroidResourceIdentifier(asset) {
    return (getBasePath(asset) + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }
  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;
    return basePath.startsWith('/') ? basePath.slice(1) : basePath;
  }
  module.exports = {
    getAndroidResourceFolderName,
    getAndroidResourceIdentifier,
    getBasePath
  };
},105,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeModule = TurboModuleRegistry.getEnforcing('SourceCode');
  var constants = null;
  var NativeSourceCode = {
    getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    }
  };
  var _default = exports.default = NativeSourceCode;
},106,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _processColor = _interopRequireDefault(require(_dependencyMap[1]));
  var TRANSPARENT = 0;
  function processColorArray(colors) {
    return colors == null ? null : colors.map(processColorElement);
  }
  function processColorElement(color) {
    var value = (0, _processColor.default)(color);
    if (value == null) {
      console.error('Invalid value in color array:', color);
      return TRANSPARENT;
    }
    return value;
  }
  module.exports = processColorArray;
},107,[1,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };
  var insetsDiffer = function (one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };
  module.exports = insetsDiffer;
},108,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var matricesDiffer = function (one, two) {
    if (one === two) {
      return false;
    }
    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[0] !== two[0] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };
  module.exports = matricesDiffer;
},109,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };
  var pointsDiffer = function (one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };
  module.exports = pointsDiffer;
},110,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _FabricUIManager = require(_dependencyMap[1]);
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[2]));
  function isFabricReactTag(reactTag) {
    return reactTag % 2 === 0;
  }
  var UIManagerImpl = global.RN$Bridgeless === true ? require(_dependencyMap[3]) : require(_dependencyMap[4]);
  var UIManager = {
    ...UIManagerImpl,
    measure(reactTag, callback) {
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          FabricUIManager.measure(shadowNode, callback);
        } else {
          console.warn(`measure cannot find view with tag #${reactTag}`);
          callback();
        }
      } else {
        UIManagerImpl.measure(reactTag, callback);
      }
    },
    measureInWindow(reactTag, callback) {
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          FabricUIManager.measureInWindow(shadowNode, callback);
        } else {
          console.warn(`measure cannot find view with tag #${reactTag}`);
          callback();
        }
      } else {
        UIManagerImpl.measureInWindow(reactTag, callback);
      }
    },
    measureLayout(reactTag, ancestorReactTag, errorCallback, callback) {
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
        if (!shadowNode || !ancestorShadowNode) {
          return;
        }
        FabricUIManager.measureLayout(shadowNode, ancestorShadowNode, errorCallback, callback);
      } else {
        UIManagerImpl.measureLayout(reactTag, ancestorReactTag, errorCallback, callback);
      }
    },
    measureLayoutRelativeToParent(reactTag, errorCallback, callback) {
      if (isFabricReactTag(reactTag)) {
        console.warn('RCTUIManager.measureLayoutRelativeToParent method is deprecated and it will not be implemented in newer versions of RN (Fabric) - T47686450');
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          FabricUIManager.measure(shadowNode, (left, top, width, height, pageX, pageY) => {
            callback(left, top, width, height);
          });
        }
      } else {
        UIManagerImpl.measureLayoutRelativeToParent(reactTag, errorCallback, callback);
      }
    },
    dispatchViewManagerCommand(reactTag, commandName, commandArgs) {
      if (typeof reactTag !== 'number') {
        throw new Error('dispatchViewManagerCommand: found null reactTag');
      }
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          commandName = `${commandName}`;
          FabricUIManager.dispatchCommand(shadowNode, commandName, commandArgs);
        }
      } else {
        UIManagerImpl.dispatchViewManagerCommand(reactTag, commandName, commandArgs);
      }
    }
  };
  module.exports = UIManager;
},111,[1,112,113,114,116]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getFabricUIManager = getFabricUIManager;
  var _defineLazyObjectProperty = _interopRequireDefault(require(_dependencyMap[1]));
  var nativeFabricUIManagerProxy;
  var CACHED_PROPERTIES = ['createNode', 'cloneNode', 'cloneNodeWithNewChildren', 'cloneNodeWithNewProps', 'cloneNodeWithNewChildrenAndProps', 'createChildSet', 'appendChild', 'appendChildToSet', 'completeRoot', 'measure', 'measureInWindow', 'measureLayout', 'configureNextLayoutAnimation', 'sendAccessibilityEvent', 'findShadowNodeByTag_DEPRECATED', 'setNativeProps', 'dispatchCommand', 'getParentNode', 'getChildNodes', 'isConnected', 'compareDocumentPosition', 'getTextContent', 'getBoundingClientRect', 'getOffset', 'getScrollPosition', 'getScrollSize', 'getInnerSize', 'getBorderSize', 'getTagName', 'hasPointerCapture', 'setPointerCapture', 'releasePointerCapture'];
  function getFabricUIManager() {
    if (nativeFabricUIManagerProxy == null && global.nativeFabricUIManager != null) {
      nativeFabricUIManagerProxy = createProxyWithCachedProperties(global.nativeFabricUIManager, CACHED_PROPERTIES);
    }
    return nativeFabricUIManagerProxy;
  }
  function createProxyWithCachedProperties(implementation, propertiesToCache) {
    var proxy = Object.create(implementation);
    var _loop = function (propertyName) {
      (0, _defineLazyObjectProperty.default)(proxy, propertyName, {
        get: () => implementation[propertyName]
      });
    };
    for (var propertyName of propertiesToCache) {
      _loop(propertyName);
    }
    return proxy;
  }
},112,[1,7]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function nullthrows(x, message) {
    if (x != null) {
      return x;
    }
    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1; // Skip nullthrows's own stack frame.
    throw error;
  }
  module.exports = nullthrows;
  module.exports.default = nullthrows;
  Object.defineProperty(module.exports, '__esModule', {
    value: true
  });
},113,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeComponentRegistryUnstable = require(_dependencyMap[0]);
  var cachedConstants = null;
  var errorMessageForMethod = methodName => "[ReactNative Architecture][JS] '" + methodName + "' is not available in the new React Native architecture.";
  function nativeViewConfigsInBridgelessModeEnabled() {
    return global.RN$LegacyInterop_UIManager_getConstants !== undefined;
  }
  function getCachedConstants() {
    if (!cachedConstants) {
      cachedConstants = global.RN$LegacyInterop_UIManager_getConstants();
    }
    return cachedConstants;
  }
  var UIManagerJS = {
    getViewManagerConfig: viewManagerName => {
      if (nativeViewConfigsInBridgelessModeEnabled()) {
        return getCachedConstants()[viewManagerName];
      } else {
        console.error(errorMessageForMethod('getViewManagerConfig') + 'Use hasViewManagerConfig instead. viewManagerName: ' + viewManagerName);
        return null;
      }
    },
    hasViewManagerConfig: viewManagerName => {
      return (0, _NativeComponentRegistryUnstable.unstable_hasComponent)(viewManagerName);
    },
    getConstants: () => {
      if (nativeViewConfigsInBridgelessModeEnabled()) {
        return getCachedConstants();
      } else {
        console.error(errorMessageForMethod('getConstants'));
        return null;
      }
    },
    getConstantsForViewManager: viewManagerName => {
      console.error(errorMessageForMethod('getConstantsForViewManager'));
      return {};
    },
    getDefaultEventTypes: () => {
      console.error(errorMessageForMethod('getDefaultEventTypes'));
      return [];
    },
    lazilyLoadView: name => {
      console.error(errorMessageForMethod('lazilyLoadView'));
      return {};
    },
    createView: (reactTag, viewName, rootTag, props) => console.error(errorMessageForMethod('createView')),
    updateView: (reactTag, viewName, props) => console.error(errorMessageForMethod('updateView')),
    focus: reactTag => console.error(errorMessageForMethod('focus')),
    blur: reactTag => console.error(errorMessageForMethod('blur')),
    findSubviewIn: (reactTag, point, callback) => console.error(errorMessageForMethod('findSubviewIn')),
    dispatchViewManagerCommand: (reactTag, commandID, commandArgs) => console.error(errorMessageForMethod('dispatchViewManagerCommand')),
    measure: (reactTag, callback) => console.error(errorMessageForMethod('measure')),
    measureInWindow: (reactTag, callback) => console.error(errorMessageForMethod('measureInWindow')),
    viewIsDescendantOf: (reactTag, ancestorReactTag, callback) => console.error(errorMessageForMethod('viewIsDescendantOf')),
    measureLayout: (reactTag, ancestorReactTag, errorCallback, callback) => console.error(errorMessageForMethod('measureLayout')),
    measureLayoutRelativeToParent: (reactTag, errorCallback, callback) => console.error(errorMessageForMethod('measureLayoutRelativeToParent')),
    setJSResponder: (reactTag, blockNativeResponder) => console.error(errorMessageForMethod('setJSResponder')),
    clearJSResponder: () => {},
    configureNextLayoutAnimation: (config, callback, errorCallback) => console.error(errorMessageForMethod('configureNextLayoutAnimation')),
    removeSubviewsFromContainerWithID: containerID => console.error(errorMessageForMethod('removeSubviewsFromContainerWithID')),
    replaceExistingNonRootView: (reactTag, newReactTag) => console.error(errorMessageForMethod('replaceExistingNonRootView')),
    setChildren: (containerTag, reactTags) => console.error(errorMessageForMethod('setChildren')),
    manageChildren: (containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices) => console.error(errorMessageForMethod('manageChildren')),
    setLayoutAnimationEnabledExperimental: enabled => {
      console.error(errorMessageForMethod('setLayoutAnimationEnabledExperimental'));
    },
    sendAccessibilityEvent: (reactTag, eventType) => console.error(errorMessageForMethod('sendAccessibilityEvent')),
    showPopupMenu: (reactTag, items, error, success) => console.error(errorMessageForMethod('showPopupMenu')),
    dismissPopupMenu: () => console.error(errorMessageForMethod('dismissPopupMenu'))
  };
  if (nativeViewConfigsInBridgelessModeEnabled()) {
    Object.keys(getCachedConstants()).forEach(viewConfigName => {
      UIManagerJS[viewConfigName] = getCachedConstants()[viewConfigName];
    });
  }
  module.exports = UIManagerJS;
},114,[115]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.unstable_hasComponent = unstable_hasComponent;
  var componentNameToExists = new Map();
  function unstable_hasComponent(name) {
    var hasNativeComponent = componentNameToExists.get(name);
    if (hasNativeComponent == null) {
      if (global.__nativeComponentRegistry__hasComponent) {
        hasNativeComponent = global.__nativeComponentRegistry__hasComponent(name);
        componentNameToExists.set(name, hasNativeComponent);
      } else {
        throw `unstable_hasComponent('${name}'): Global function is not registered`;
      }
    }
    return hasNativeComponent;
  }
},115,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeUIManager = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeModules = require(_dependencyMap[2]);
  var defineLazyObjectProperty = require(_dependencyMap[3]);
  var Platform = require(_dependencyMap[4]);
  var UIManagerProperties = require(_dependencyMap[5]);
  var viewManagerConfigs = {};
  var triedLoadingConfig = new Set();
  var NativeUIManagerConstants = {};
  var isNativeUIManagerConstantsSet = false;
  function getConstants() {
    if (!isNativeUIManagerConstantsSet) {
      NativeUIManagerConstants = _NativeUIManager.default.getConstants();
      isNativeUIManagerConstantsSet = true;
    }
    return NativeUIManagerConstants;
  }
  function getViewManagerConfig(viewManagerName) {
    if (viewManagerConfigs[viewManagerName] === undefined && global.nativeCallSyncHook && _NativeUIManager.default.getConstantsForViewManager) {
      try {
        viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
      } catch (e) {
        console.error("NativeUIManager.getConstantsForViewManager('" + viewManagerName + "') threw an exception.", e);
        viewManagerConfigs[viewManagerName] = null;
      }
    }
    var config = viewManagerConfigs[viewManagerName];
    if (config) {
      return config;
    }
    if (!global.nativeCallSyncHook) {
      return config;
    }
    if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
      var result = _NativeUIManager.default.lazilyLoadView(viewManagerName);
      triedLoadingConfig.add(viewManagerName);
      if (result != null && result.viewConfig != null) {
        getConstants()[viewManagerName] = result.viewConfig;
        lazifyViewManagerConfig(viewManagerName);
      }
    }
    return viewManagerConfigs[viewManagerName];
  }
  var UIManagerJS = {
    ..._NativeUIManager.default,
    createView(reactTag, viewName, rootTag, props) {
      if (viewManagerConfigs[viewName] === undefined) {
        getViewManagerConfig(viewName);
      }
      _NativeUIManager.default.createView(reactTag, viewName, rootTag, props);
    },
    getConstants() {
      return getConstants();
    },
    getViewManagerConfig(viewManagerName) {
      return getViewManagerConfig(viewManagerName);
    },
    hasViewManagerConfig(viewManagerName) {
      return getViewManagerConfig(viewManagerName) != null;
    }
  };
  _NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;
  function lazifyViewManagerConfig(viewName) {
    var viewConfig = getConstants()[viewName];
    viewManagerConfigs[viewName] = viewConfig;
    if (viewConfig.Manager) {
      defineLazyObjectProperty(viewConfig, 'Constants', {
        get: () => {
          var viewManager = NativeModules[viewConfig.Manager];
          var constants = {};
          viewManager && Object.keys(viewManager).forEach(key => {
            var value = viewManager[key];
            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });
      defineLazyObjectProperty(viewConfig, 'Commands', {
        get: () => {
          var viewManager = NativeModules[viewConfig.Manager];
          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(key => {
            var value = viewManager[key];
            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  }
  {
    Object.keys(getConstants()).forEach(viewName => {
      lazifyViewManagerConfig(viewName);
    });
  }
  if (!global.nativeCallSyncHook) {
    Object.keys(getConstants()).forEach(viewManagerName => {
      if (!UIManagerProperties.includes(viewManagerName)) {
        if (!viewManagerConfigs[viewManagerName]) {
          viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];
        }
        defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
          get: () => {
            console.warn(`Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` + `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`);
            return UIManagerJS.getViewManagerConfig(viewManagerName);
          }
        });
      }
    });
  }
  module.exports = UIManagerJS;
},116,[1,117,80,7,81,118]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('UIManager');
},117,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = ['clearJSResponder', 'configureNextLayoutAnimation', 'createView', 'dismissPopupMenu', 'dispatchViewManagerCommand', 'findSubviewIn', 'getConstantsForViewManager', 'getDefaultEventTypes', 'manageChildren', 'measure', 'measureInWindow', 'measureLayout', 'measureLayoutRelativeToParent', 'removeRootView', 'removeSubviewsFromContainerWithID', 'replaceExistingNonRootView', 'sendAccessibilityEvent', 'setChildren', 'setJSResponder', 'setLayoutAnimationEnabledExperimental', 'showPopupMenu', 'updateView', 'viewIsDescendantOf', 'PopupMenu', 'LazyViewManagersEnabled', 'ViewManagerNames', 'StyleConstants', 'AccessibilityEventTypes', 'UIView', 'getViewManagerConfig', 'hasViewManagerConfig', 'blur', 'focus', 'genericBubblingEventTypes', 'genericDirectEventTypes', 'lazilyLoadView'];
},118,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = verifyComponentAttributeEquivalence;
  exports.getConfigWithoutViewProps = getConfigWithoutViewProps;
  exports.stringifyViewConfig = stringifyViewConfig;
  var _PlatformBaseViewConfig = _interopRequireDefault(require(_dependencyMap[1]));
  var IGNORED_KEYS = ['transform', 'hitSlop'];
  function verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig) {
    for (var prop of ['validAttributes', 'bubblingEventTypes', 'directEventTypes']) {
      var diff = Object.keys(lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]));
      if (diff.length > 0) {
        var name = staticViewConfig.uiViewClassName ?? nativeViewConfig.uiViewClassName;
        console.error(`'${name}' has a view config that does not match native. ` + `'${prop}' is missing: ${diff.join(', ')}`);
      }
    }
  }
  function lefthandObjectDiff(leftObj, rightObj) {
    var differentKeys = {};
    function compare(leftItem, rightItem, key) {
      if (typeof leftItem !== typeof rightItem && leftItem != null) {
        differentKeys[key] = rightItem;
        return;
      }
      if (typeof leftItem === 'object') {
        var objDiff = lefthandObjectDiff(leftItem, rightItem);
        if (Object.keys(objDiff).length > 1) {
          differentKeys[key] = objDiff;
        }
        return;
      }
      if (leftItem !== rightItem) {
        differentKeys[key] = rightItem;
        return;
      }
    }
    for (var key in leftObj) {
      if (IGNORED_KEYS.includes(key)) {
        continue;
      }
      if (!rightObj) {
        differentKeys[key] = {};
      } else if (leftObj.hasOwnProperty(key)) {
        compare(leftObj[key], rightObj[key], key);
      }
    }
    return differentKeys;
  }
  function getConfigWithoutViewProps(viewConfig, propName) {
    if (!viewConfig[propName]) {
      return {};
    }
    return Object.keys(viewConfig[propName]).filter(prop => !_PlatformBaseViewConfig.default[propName][prop]).reduce((obj, prop) => {
      obj[prop] = viewConfig[propName][prop];
      return obj;
    }, {});
  }
  function stringifyViewConfig(viewConfig) {
    return JSON.stringify(viewConfig, (key, val) => {
      if (typeof val === 'function') {
        return `ƒ ${val.name}`;
      }
      return val;
    }, 2);
  }
},119,[1,120]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _BaseViewConfig = _interopRequireDefault(require(_dependencyMap[1]));
  var PlatformBaseViewConfig = _BaseViewConfig.default;
  var _default = exports.default = PlatformBaseViewConfig;
},120,[1,121]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ReactNativeStyleAttributes = _interopRequireDefault(require(_dependencyMap[1]));
  var _ViewConfigIgnore = require(_dependencyMap[2]);
  var bubblingEventTypes = {
    topPress: {
      phasedRegistrationNames: {
        bubbled: 'onPress',
        captured: 'onPressCapture'
      }
    },
    topChange: {
      phasedRegistrationNames: {
        bubbled: 'onChange',
        captured: 'onChangeCapture'
      }
    },
    topFocus: {
      phasedRegistrationNames: {
        bubbled: 'onFocus',
        captured: 'onFocusCapture'
      }
    },
    topBlur: {
      phasedRegistrationNames: {
        bubbled: 'onBlur',
        captured: 'onBlurCapture'
      }
    },
    topSubmitEditing: {
      phasedRegistrationNames: {
        bubbled: 'onSubmitEditing',
        captured: 'onSubmitEditingCapture'
      }
    },
    topEndEditing: {
      phasedRegistrationNames: {
        bubbled: 'onEndEditing',
        captured: 'onEndEditingCapture'
      }
    },
    topKeyPress: {
      phasedRegistrationNames: {
        bubbled: 'onKeyPress',
        captured: 'onKeyPressCapture'
      }
    },
    topTouchStart: {
      phasedRegistrationNames: {
        bubbled: 'onTouchStart',
        captured: 'onTouchStartCapture'
      }
    },
    topTouchMove: {
      phasedRegistrationNames: {
        bubbled: 'onTouchMove',
        captured: 'onTouchMoveCapture'
      }
    },
    topTouchCancel: {
      phasedRegistrationNames: {
        bubbled: 'onTouchCancel',
        captured: 'onTouchCancelCapture'
      }
    },
    topTouchEnd: {
      phasedRegistrationNames: {
        bubbled: 'onTouchEnd',
        captured: 'onTouchEndCapture'
      }
    },
    topClick: {
      phasedRegistrationNames: {
        captured: 'onClickCapture',
        bubbled: 'onClick'
      }
    },
    topPointerCancel: {
      phasedRegistrationNames: {
        captured: 'onPointerCancelCapture',
        bubbled: 'onPointerCancel'
      }
    },
    topPointerDown: {
      phasedRegistrationNames: {
        captured: 'onPointerDownCapture',
        bubbled: 'onPointerDown'
      }
    },
    topPointerMove: {
      phasedRegistrationNames: {
        captured: 'onPointerMoveCapture',
        bubbled: 'onPointerMove'
      }
    },
    topPointerUp: {
      phasedRegistrationNames: {
        captured: 'onPointerUpCapture',
        bubbled: 'onPointerUp'
      }
    },
    topPointerEnter: {
      phasedRegistrationNames: {
        captured: 'onPointerEnterCapture',
        bubbled: 'onPointerEnter',
        skipBubbling: true
      }
    },
    topPointerLeave: {
      phasedRegistrationNames: {
        captured: 'onPointerLeaveCapture',
        bubbled: 'onPointerLeave',
        skipBubbling: true
      }
    },
    topPointerOver: {
      phasedRegistrationNames: {
        captured: 'onPointerOverCapture',
        bubbled: 'onPointerOver'
      }
    },
    topPointerOut: {
      phasedRegistrationNames: {
        captured: 'onPointerOutCapture',
        bubbled: 'onPointerOut'
      }
    },
    topGotPointerCapture: {
      phasedRegistrationNames: {
        captured: 'onGotPointerCaptureCapture',
        bubbled: 'onGotPointerCapture'
      }
    },
    topLostPointerCapture: {
      phasedRegistrationNames: {
        captured: 'onLostPointerCaptureCapture',
        bubbled: 'onLostPointerCapture'
      }
    }
  };
  var directEventTypes = {
    topAccessibilityAction: {
      registrationName: 'onAccessibilityAction'
    },
    topAccessibilityTap: {
      registrationName: 'onAccessibilityTap'
    },
    topMagicTap: {
      registrationName: 'onMagicTap'
    },
    topAccessibilityEscape: {
      registrationName: 'onAccessibilityEscape'
    },
    topLayout: {
      registrationName: 'onLayout'
    },
    onGestureHandlerEvent: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
      registrationName: 'onGestureHandlerEvent'
    }),
    onGestureHandlerStateChange: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
      registrationName: 'onGestureHandlerStateChange'
    })
  };
  var validAttributesForNonEventProps = {
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityHint: true,
    accessibilityLanguage: true,
    accessibilityValue: true,
    accessibilityViewIsModal: true,
    accessibilityElementsHidden: true,
    accessibilityIgnoresInvertColors: true,
    testID: true,
    backgroundColor: {
      process: require(_dependencyMap[3]).default
    },
    backfaceVisibility: true,
    opacity: true,
    shadowColor: {
      process: require(_dependencyMap[3]).default
    },
    shadowOffset: {
      diff: require(_dependencyMap[4])
    },
    shadowOpacity: true,
    shadowRadius: true,
    needsOffscreenAlphaCompositing: true,
    overflow: true,
    shouldRasterizeIOS: true,
    transform: {
      diff: require(_dependencyMap[5])
    },
    transformOrigin: true,
    accessibilityRole: true,
    accessibilityState: true,
    nativeID: true,
    pointerEvents: true,
    removeClippedSubviews: true,
    role: true,
    borderRadius: true,
    borderColor: {
      process: require(_dependencyMap[3]).default
    },
    borderCurve: true,
    borderWidth: true,
    borderStyle: true,
    hitSlop: {
      diff: require(_dependencyMap[6])
    },
    collapsable: true,
    borderTopWidth: true,
    borderTopColor: {
      process: require(_dependencyMap[3]).default
    },
    borderRightWidth: true,
    borderRightColor: {
      process: require(_dependencyMap[3]).default
    },
    borderBottomWidth: true,
    borderBottomColor: {
      process: require(_dependencyMap[3]).default
    },
    borderLeftWidth: true,
    borderLeftColor: {
      process: require(_dependencyMap[3]).default
    },
    borderStartWidth: true,
    borderStartColor: {
      process: require(_dependencyMap[3]).default
    },
    borderEndWidth: true,
    borderEndColor: {
      process: require(_dependencyMap[3]).default
    },
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    borderTopEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderBottomEndRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    display: true,
    zIndex: true,
    top: true,
    right: true,
    start: true,
    end: true,
    bottom: true,
    left: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    width: true,
    height: true,
    minWidth: true,
    maxWidth: true,
    minHeight: true,
    maxHeight: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    flex: true,
    flexGrow: true,
    rowGap: true,
    columnGap: true,
    gap: true,
    flexShrink: true,
    flexBasis: true,
    flexDirection: true,
    flexWrap: true,
    justifyContent: true,
    alignItems: true,
    alignSelf: true,
    alignContent: true,
    position: true,
    aspectRatio: true,
    direction: true,
    style: _ReactNativeStyleAttributes.default,
    experimental_layoutConformance: true
  };
  var validAttributesForEventProps = (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
    onLayout: true,
    onMagicTap: true,
    onAccessibilityAction: true,
    onAccessibilityEscape: true,
    onAccessibilityTap: true,
    onMoveShouldSetResponder: true,
    onMoveShouldSetResponderCapture: true,
    onStartShouldSetResponder: true,
    onStartShouldSetResponderCapture: true,
    onResponderGrant: true,
    onResponderReject: true,
    onResponderStart: true,
    onResponderEnd: true,
    onResponderRelease: true,
    onResponderMove: true,
    onResponderTerminate: true,
    onResponderTerminationRequest: true,
    onShouldBlockNativeResponder: true,
    onTouchStart: true,
    onTouchMove: true,
    onTouchEnd: true,
    onTouchCancel: true,
    onClick: true,
    onPointerUp: true,
    onPointerDown: true,
    onPointerCancel: true,
    onPointerEnter: true,
    onPointerMove: true,
    onPointerLeave: true,
    onPointerOver: true,
    onPointerOut: true,
    onGotPointerCapture: true,
    onLostPointerCapture: true
  });
  var PlatformBaseViewConfigIos = {
    bubblingEventTypes,
    directEventTypes,
    validAttributes: {
      ...validAttributesForNonEventProps,
      ...validAttributesForEventProps
    }
  };
  var _default = exports.default = PlatformBaseViewConfigIos;
},121,[1,89,122,91,98,109,108]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConditionallyIgnoredEventHandlers = ConditionallyIgnoredEventHandlers;
  exports.DynamicallyInjectedByGestureHandler = DynamicallyInjectedByGestureHandler;
  exports.isIgnored = isIgnored;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  var ignoredViewConfigProps = new WeakSet();
  function DynamicallyInjectedByGestureHandler(object) {
    ignoredViewConfigProps.add(object);
    return object;
  }
  function ConditionallyIgnoredEventHandlers(value) {
    {
      return value;
    }
    return undefined;
  }
  function isIgnored(value) {
    if (typeof value === 'object' && value != null) {
      return ignoredViewConfigProps.has(value);
    }
    return false;
  }
},122,[1,81]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.stringifyValidationResult = stringifyValidationResult;
  exports.validate = validate;
  var _ViewConfigIgnore = require(_dependencyMap[0]);
  function validate(name, nativeViewConfig, staticViewConfig) {
    var differences = [];
    accumulateDifferences(differences, [], {
      bubblingEventTypes: nativeViewConfig.bubblingEventTypes,
      directEventTypes: nativeViewConfig.directEventTypes,
      uiViewClassName: nativeViewConfig.uiViewClassName,
      validAttributes: nativeViewConfig.validAttributes
    }, {
      bubblingEventTypes: staticViewConfig.bubblingEventTypes,
      directEventTypes: staticViewConfig.directEventTypes,
      uiViewClassName: staticViewConfig.uiViewClassName,
      validAttributes: staticViewConfig.validAttributes
    });
    if (differences.length === 0) {
      return {
        type: 'valid'
      };
    }
    return {
      type: 'invalid',
      differences
    };
  }
  function stringifyValidationResult(name, validationResult) {
    var differences = validationResult.differences;
    return [`StaticViewConfigValidator: Invalid static view config for '${name}'.`, '', ...differences.map(difference => {
      var type = difference.type,
        path = difference.path;
      switch (type) {
        case 'missing':
          return `- '${path.join('.')}' is missing.`;
        case 'unequal':
          return `- '${path.join('.')}' is the wrong value.`;
        case 'unexpected':
          return `- '${path.join('.')}' is present but not expected to be.`;
      }
    }), ''].join('\n');
  }
  function accumulateDifferences(differences, path, nativeObject, staticObject) {
    for (var nativeKey in nativeObject) {
      var nativeValue = nativeObject[nativeKey];
      if (!staticObject.hasOwnProperty(nativeKey)) {
        differences.push({
          path: [...path, nativeKey],
          type: 'missing',
          nativeValue
        });
        continue;
      }
      var staticValue = staticObject[nativeKey];
      var nativeValueIfObject = ifObject(nativeValue);
      if (nativeValueIfObject != null) {
        var staticValueIfObject = ifObject(staticValue);
        if (staticValueIfObject != null) {
          path.push(nativeKey);
          accumulateDifferences(differences, path, nativeValueIfObject, staticValueIfObject);
          path.pop();
          continue;
        }
      }
      if (nativeValue !== staticValue) {
        differences.push({
          path: [...path, nativeKey],
          type: 'unequal',
          nativeValue,
          staticValue
        });
      }
    }
    for (var staticKey in staticObject) {
      if (!nativeObject.hasOwnProperty(staticKey) && !(0, _ViewConfigIgnore.isIgnored)(staticObject[staticKey])) {
        differences.push({
          path: [...path, staticKey],
          type: 'unexpected',
          staticValue: staticObject[staticKey]
        });
      }
    }
  }
  function ifObject(value) {
    return typeof value === 'object' && !Array.isArray(value) ? value : null;
  }
},123,[122]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createViewConfig = createViewConfig;
  var _PlatformBaseViewConfig = _interopRequireDefault(require(_dependencyMap[1]));
  function createViewConfig(partialViewConfig) {
    return {
      uiViewClassName: partialViewConfig.uiViewClassName,
      Commands: {},
      bubblingEventTypes: composeIndexers(_PlatformBaseViewConfig.default.bubblingEventTypes, partialViewConfig.bubblingEventTypes),
      directEventTypes: composeIndexers(_PlatformBaseViewConfig.default.directEventTypes, partialViewConfig.directEventTypes),
      validAttributes: composeIndexers(_PlatformBaseViewConfig.default.validAttributes, partialViewConfig.validAttributes)
    };
  }
  function composeIndexers(maybeA, maybeB) {
    return maybeA == null || maybeB == null ? maybeA ?? maybeB ?? {} : {
      ...maybeA,
      ...maybeB
    };
  }
},124,[1,120]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = require(_dependencyMap[0]);
  }
},125,[126]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var l = Symbol.for("react.element"),
    n = Symbol.for("react.portal"),
    p = Symbol.for("react.fragment"),
    q = Symbol.for("react.strict_mode"),
    r = Symbol.for("react.profiler"),
    t = Symbol.for("react.provider"),
    u = Symbol.for("react.context"),
    v = Symbol.for("react.forward_ref"),
    w = Symbol.for("react.suspense"),
    x = Symbol.for("react.memo"),
    y = Symbol.for("react.lazy"),
    z = Symbol.iterator;
  function A(a) {
    if (null === a || "object" !== typeof a) return null;
    a = z && a[z] || a["@@iterator"];
    return "function" === typeof a ? a : null;
  }
  var B = {
      isMounted: function () {
        return false;
      },
      enqueueForceUpdate: function () {},
      enqueueReplaceState: function () {},
      enqueueSetState: function () {}
    },
    C = Object.assign,
    D = {};
  function E(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = e || B;
  }
  E.prototype.isReactComponent = {};
  E.prototype.setState = function (a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, a, b, "setState");
  };
  E.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };
  function F() {}
  F.prototype = E.prototype;
  function G(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = e || B;
  }
  var H = G.prototype = new F();
  H.constructor = G;
  C(H, E.prototype);
  H.isPureReactComponent = true;
  var I = Array.isArray,
    J = Object.prototype.hasOwnProperty,
    K = {
      current: null
    },
    L = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
  function M(a, b, e) {
    var d,
      c = {},
      k = null,
      h = null;
    if (null != b) for (d in undefined !== b.ref && (h = b.ref), undefined !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
    var g = arguments.length - 2;
    if (1 === g) c.children = e;else if (1 < g) {
      for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
      c.children = f;
    }
    if (a && a.defaultProps) for (d in g = a.defaultProps, g) undefined === c[d] && (c[d] = g[d]);
    return {
      $$typeof: l,
      type: a,
      key: k,
      ref: h,
      props: c,
      _owner: K.current
    };
  }
  function N(a, b) {
    return {
      $$typeof: l,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    };
  }
  function O(a) {
    return "object" === typeof a && null !== a && a.$$typeof === l;
  }
  function escape(a) {
    var b = {
      "=": "=0",
      ":": "=2"
    };
    return "$" + a.replace(/[=:]/g, function (a) {
      return b[a];
    });
  }
  var P = /\/+/g;
  function Q(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
  }
  function R(a, b, e, d, c) {
    var k = typeof a;
    if ("undefined" === k || "boolean" === k) a = null;
    var h = false;
    if (null === a) h = true;else switch (k) {
      case "string":
      case "number":
        h = true;
        break;
      case "object":
        switch (a.$$typeof) {
          case l:
          case n:
            h = true;
        }
    }
    if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function (a) {
      return a;
    })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
    h = 0;
    d = "" === d ? "." : d + ":";
    if (I(a)) for (var g = 0; g < a.length; g++) {
      k = a[g];
      var f = d + Q(k, g);
      h += R(k, b, e, f, c);
    } else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
    return h;
  }
  function S(a, b, e) {
    if (null == a) return a;
    var d = [],
      c = 0;
    R(a, d, "", "", function (a) {
      return b.call(e, a, c++);
    });
    return d;
  }
  function T(a) {
    if (-1 === a._status) {
      var b = a._result;
      b = b();
      b.then(function (b) {
        if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
      }, function (b) {
        if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
      });
      -1 === a._status && (a._status = 0, a._result = b);
    }
    if (1 === a._status) return a._result.default;
    throw a._result;
  }
  var U = {
      current: null
    },
    V = {
      transition: null
    },
    W = {
      ReactCurrentDispatcher: U,
      ReactCurrentBatchConfig: V,
      ReactCurrentOwner: K
    };
  exports.Children = {
    map: S,
    forEach: function (a, b, e) {
      S(a, function () {
        b.apply(this, arguments);
      }, e);
    },
    count: function (a) {
      var b = 0;
      S(a, function () {
        b++;
      });
      return b;
    },
    toArray: function (a) {
      return S(a, function (a) {
        return a;
      }) || [];
    },
    only: function (a) {
      if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
      return a;
    }
  };
  exports.Component = E;
  exports.Fragment = p;
  exports.Profiler = r;
  exports.PureComponent = G;
  exports.StrictMode = q;
  exports.Suspense = w;
  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
  exports.cloneElement = function (a, b, e) {
    if (null === a || undefined === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
    var d = C({}, a.props),
      c = a.key,
      k = a.ref,
      h = a._owner;
    if (null != b) {
      undefined !== b.ref && (k = b.ref, h = K.current);
      undefined !== b.key && (c = "" + b.key);
      if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
      for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = undefined === b[f] && undefined !== g ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;else if (1 < f) {
      g = Array(f);
      for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
      d.children = g;
    }
    return {
      $$typeof: l,
      type: a.type,
      key: c,
      ref: k,
      props: d,
      _owner: h
    };
  };
  exports.createContext = function (a) {
    a = {
      $$typeof: u,
      _currentValue: a,
      _currentValue2: a,
      _threadCount: 0,
      Provider: null,
      Consumer: null,
      _defaultValue: null,
      _globalName: null
    };
    a.Provider = {
      $$typeof: t,
      _context: a
    };
    return a.Consumer = a;
  };
  exports.createElement = M;
  exports.createFactory = function (a) {
    var b = M.bind(null, a);
    b.type = a;
    return b;
  };
  exports.createRef = function () {
    return {
      current: null
    };
  };
  exports.forwardRef = function (a) {
    return {
      $$typeof: v,
      render: a
    };
  };
  exports.isValidElement = O;
  exports.lazy = function (a) {
    return {
      $$typeof: y,
      _payload: {
        _status: -1,
        _result: a
      },
      _init: T
    };
  };
  exports.memo = function (a, b) {
    return {
      $$typeof: x,
      type: a,
      compare: undefined === b ? null : b
    };
  };
  exports.startTransition = function (a) {
    var b = V.transition;
    V.transition = {};
    try {
      a();
    } finally {
      V.transition = b;
    }
  };
  exports.unstable_act = function () {
    throw Error("act(...) is not supported in production builds of React.");
  };
  exports.useCallback = function (a, b) {
    return U.current.useCallback(a, b);
  };
  exports.useContext = function (a) {
    return U.current.useContext(a);
  };
  exports.useDebugValue = function () {};
  exports.useDeferredValue = function (a) {
    return U.current.useDeferredValue(a);
  };
  exports.useEffect = function (a, b) {
    return U.current.useEffect(a, b);
  };
  exports.useId = function () {
    return U.current.useId();
  };
  exports.useImperativeHandle = function (a, b, e) {
    return U.current.useImperativeHandle(a, b, e);
  };
  exports.useInsertionEffect = function (a, b) {
    return U.current.useInsertionEffect(a, b);
  };
  exports.useLayoutEffect = function (a, b) {
    return U.current.useLayoutEffect(a, b);
  };
  exports.useMemo = function (a, b) {
    return U.current.useMemo(a, b);
  };
  exports.useReducer = function (a, b, e) {
    return U.current.useReducer(a, b, e);
  };
  exports.useRef = function (a) {
    return U.current.useRef(a);
  };
  exports.useState = function (a) {
    return U.current.useState(a);
  };
  exports.useSyncExternalStore = function (a, b, e) {
    return U.current.useSyncExternalStore(a, b, e);
  };
  exports.useTransition = function () {
    return U.current.useTransition();
  };
  exports.version = "18.2.0";
},126,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _require = require(_dependencyMap[0]),
    dispatchCommand = _require.dispatchCommand;
  function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach(command => {
      commandObj[command] = function (ref) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        dispatchCommand(ref, command, args);
      };
    });
    return commandObj;
  }
  var _default = exports.default = codegenNativeCommands;
},127,[61]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[2]));
  var _RCTTextInputViewConfig = _interopRequireDefault(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTSinglelineTextInputView',
    ..._RCTTextInputViewConfig.default
  };
  var SinglelineTextInputNativeComponent = NativeComponentRegistry.get('RCTSinglelineTextInputView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = SinglelineTextInputNativeComponent;
},128,[1,87,127,129]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _ViewConfigIgnore = require(_dependencyMap[0]);
  var RCTTextInputViewConfig = {
    bubblingEventTypes: {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topChange: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        }
      },
      topContentSizeChange: {
        phasedRegistrationNames: {
          captured: 'onContentSizeChangeCapture',
          bubbled: 'onContentSizeChange'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTouchCancel: {
        phasedRegistrationNames: {
          bubbled: 'onTouchCancel',
          captured: 'onTouchCancelCapture'
        }
      },
      topTouchEnd: {
        phasedRegistrationNames: {
          bubbled: 'onTouchEnd',
          captured: 'onTouchEndCapture'
        }
      },
      topTouchMove: {
        phasedRegistrationNames: {
          bubbled: 'onTouchMove',
          captured: 'onTouchMoveCapture'
        }
      }
    },
    directEventTypes: {
      topTextInput: {
        registrationName: 'onTextInput'
      },
      topKeyPressSync: {
        registrationName: 'onKeyPressSync'
      },
      topScroll: {
        registrationName: 'onScroll'
      },
      topSelectionChange: {
        registrationName: 'onSelectionChange'
      },
      topChangeSync: {
        registrationName: 'onChangeSync'
      }
    },
    validAttributes: {
      fontSize: true,
      fontWeight: true,
      fontVariant: true,
      textShadowOffset: {
        diff: require(_dependencyMap[1])
      },
      allowFontScaling: true,
      fontStyle: true,
      textTransform: true,
      textAlign: true,
      fontFamily: true,
      lineHeight: true,
      isHighlighted: true,
      writingDirection: true,
      textDecorationLine: true,
      textShadowRadius: true,
      letterSpacing: true,
      textDecorationStyle: true,
      textDecorationColor: {
        process: require(_dependencyMap[2]).default
      },
      color: {
        process: require(_dependencyMap[2]).default
      },
      maxFontSizeMultiplier: true,
      textShadowColor: {
        process: require(_dependencyMap[2]).default
      },
      editable: true,
      inputAccessoryViewID: true,
      caretHidden: true,
      enablesReturnKeyAutomatically: true,
      placeholderTextColor: {
        process: require(_dependencyMap[2]).default
      },
      clearButtonMode: true,
      keyboardType: true,
      selection: true,
      returnKeyType: true,
      submitBehavior: true,
      mostRecentEventCount: true,
      scrollEnabled: true,
      selectionColor: {
        process: require(_dependencyMap[2]).default
      },
      contextMenuHidden: true,
      secureTextEntry: true,
      placeholder: true,
      autoCorrect: true,
      multiline: true,
      textContentType: true,
      maxLength: true,
      autoCapitalize: true,
      keyboardAppearance: true,
      passwordRules: true,
      spellCheck: true,
      selectTextOnFocus: true,
      text: true,
      clearTextOnFocus: true,
      showSoftInputOnFocus: true,
      autoFocus: true,
      lineBreakStrategyIOS: true,
      smartInsertDelete: true,
      ...(0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onChange: true,
        onSelectionChange: true,
        onContentSizeChange: true,
        onScroll: true,
        onChangeSync: true,
        onKeyPressSync: true,
        onTextInput: true
      })
    }
  };
  module.exports = RCTTextInputViewConfig;
},129,[122,98,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var logListeners;
  function unstable_setLogListeners(listeners) {
    logListeners = listeners;
  }
  var deepDiffer = function (one, two) {
    var maxDepthOrOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
    var maybeOptions = arguments.length > 3 ? arguments[3] : undefined;
    var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
    var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;
    if (maxDepth === 0) {
      return true;
    }
    if (one === two) {
      return false;
    }
    if (typeof one === 'function' && typeof two === 'function') {
      var unsafelyIgnoreFunctions = options?.unsafelyIgnoreFunctions;
      if (unsafelyIgnoreFunctions == null) {
        if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
          logListeners.onDifferentFunctionsIgnored(one.name, two.name);
        }
        unsafelyIgnoreFunctions = true;
      }
      return !unsafelyIgnoreFunctions;
    }
    if (typeof one !== 'object' || one === null) {
      return one !== two;
    }
    if (typeof two !== 'object' || two === null) {
      return true;
    }
    if (one.constructor !== two.constructor) {
      return true;
    }
    if (Array.isArray(one)) {
      var len = one.length;
      if (two.length !== len) {
        return true;
      }
      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
          return true;
        }
      }
      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }
    return false;
  };
  deepDiffer.unstable_setLogListeners = unstable_setLogListeners;
  module.exports = deepDiffer;
},130,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
      return undefined;
    }
    if (!Array.isArray(style)) {
      return style;
    }
    var result = {};
    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);
      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }
    return result;
  }
  module.exports = flattenStyle;
},131,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ExceptionsManager = require(_dependencyMap[0]);
  var ReactFiberErrorDialog = {
    showErrorDialog(_ref) {
      var componentStack = _ref.componentStack,
        errorValue = _ref.error;
      var error;
      if (errorValue instanceof Error) {
        error = errorValue;
      } else if (typeof errorValue === 'string') {
        error = new _ExceptionsManager.SyntheticError(errorValue);
      } else {
        error = new _ExceptionsManager.SyntheticError('Unspecified error');
      }
      try {
        error.componentStack = componentStack;
        error.isComponentError = true;
      } catch {}
      (0, _ExceptionsManager.handleException)(error, false);
      return false;
    }
  };
  var _default = exports.default = ReactFiberErrorDialog;
},132,[70]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeAccessibilityManager = _interopRequireDefault(require(_dependencyMap[1]));
  function legacySendAccessibilityEvent(reactTag, eventType) {
    if (eventType === 'focus' && _NativeAccessibilityManager.default) {
      _NativeAccessibilityManager.default.setAccessibilityFocus(reactTag);
    }
  }
  module.exports = legacySendAccessibilityEvent;
},133,[1,134]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('AccessibilityManager');
},134,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _EventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var RawEventEmitter = new _EventEmitter.default();
  var _default = exports.default = RawEventEmitter;
},135,[1,58]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _EventPolyfill2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var CustomEvent = /*#__PURE__*/function (_EventPolyfill) {
    function CustomEvent(typeArg, options) {
      var _this;
      (0, _classCallCheck2.default)(this, CustomEvent);
      var bubbles = options.bubbles,
        cancelable = options.cancelable,
        composed = options.composed;
      _this = _callSuper(this, CustomEvent, [typeArg, {
        bubbles,
        cancelable,
        composed
      }]);
      _this.detail = options.detail;
      return _this;
    }
    (0, _inherits2.default)(CustomEvent, _EventPolyfill);
    return (0, _createClass2.default)(CustomEvent);
  }(_EventPolyfill2.default);
  var _default = exports.default = CustomEvent;
},136,[1,11,10,50,52,55,137]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var EventPolyfill = /*#__PURE__*/function () {
    function EventPolyfill(type, eventInitDict) {
      (0, _classCallCheck2.default)(this, EventPolyfill);
      this.type = type;
      this.bubbles = !!(eventInitDict?.bubbles || false);
      this.cancelable = !!(eventInitDict?.cancelable || false);
      this.composed = !!(eventInitDict?.composed || false);
      this.scoped = !!(eventInitDict?.scoped || false);
      this.isTrusted = false;
      this.timeStamp = Date.now();
      this.defaultPrevented = false;
      this.NONE = 0;
      this.AT_TARGET = 1;
      this.BUBBLING_PHASE = 2;
      this.CAPTURING_PHASE = 3;
      this.eventPhase = this.NONE;
      this.currentTarget = null;
      this.target = null;
      this.srcElement = null;
    }
    return (0, _createClass2.default)(EventPolyfill, [{
      key: "composedPath",
      value: function composedPath() {
        throw new Error('TODO: not yet implemented');
      }
    }, {
      key: "preventDefault",
      value: function preventDefault() {
        this.defaultPrevented = true;
        if (this._syntheticEvent != null) {
          this._syntheticEvent.preventDefault();
        }
      }
    }, {
      key: "initEvent",
      value: function initEvent(type, bubbles, cancelable) {
        throw new Error('TODO: not yet implemented. This method is also deprecated.');
      }
    }, {
      key: "stopImmediatePropagation",
      value: function stopImmediatePropagation() {
        throw new Error('TODO: not yet implemented');
      }
    }, {
      key: "stopPropagation",
      value: function stopPropagation() {
        if (this._syntheticEvent != null) {
          this._syntheticEvent.stopPropagation();
        }
      }
    }, {
      key: "setSyntheticEvent",
      value: function setSyntheticEvent(value) {
        this._syntheticEvent = value;
      }
    }]);
  }();
  global.Event = EventPolyfill;
  var _default = exports.default = EventPolyfill;
},137,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.diff = diff;
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[1]));
  var _deepDiffer = _interopRequireDefault(require(_dependencyMap[2]));
  var emptyObject = {};
  var removedKeys = null;
  var removedKeyCount = 0;
  var deepDifferOptions = {
    unsafelyIgnoreFunctions: true
  };
  function defaultDiffer(prevProp, nextProp) {
    if (typeof nextProp !== 'object' || nextProp === null) {
      return true;
    } else {
      return (0, _deepDiffer.default)(prevProp, nextProp, deepDifferOptions);
    }
  }
  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) {
      var i = node.length;
      while (i-- && removedKeyCount > 0) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
      }
    } else if (node && removedKeyCount > 0) {
      var obj = node;
      for (var propKey in removedKeys) {
        if (!removedKeys[propKey]) {
          continue;
        }
        var nextProp = obj[propKey];
        if (nextProp === undefined) {
          continue;
        }
        var attributeConfig = validAttributes[propKey];
        if (!attributeConfig) {
          continue;
        }
        if (typeof nextProp === 'function') {
          nextProp = true;
        }
        if (typeof nextProp === 'undefined') {
          nextProp = null;
        }
        if (typeof attributeConfig !== 'object') {
          updatePayload[propKey] = nextProp;
        } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
          var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
          updatePayload[propKey] = nextValue;
        }
        removedKeys[propKey] = false;
        removedKeyCount--;
      }
    }
  }
  function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    var i;
    for (i = 0; i < minLength; i++) {
      updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }
    for (; i < prevArray.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }
    for (; i < nextArray.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }
    return updatePayload;
  }
  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) {
      return updatePayload;
    }
    if (!prevProp || !nextProp) {
      if (nextProp) {
        return addNestedProperty(updatePayload, nextProp, validAttributes);
      }
      if (prevProp) {
        return clearNestedProperty(updatePayload, prevProp, validAttributes);
      }
      return updatePayload;
    }
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
      return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    }
    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
    }
    if (Array.isArray(prevProp)) {
      return diffProperties(updatePayload, (0, _flattenStyle.default)(prevProp), nextProp, validAttributes);
    }
    return diffProperties(updatePayload, prevProp, (0, _flattenStyle.default)(nextProp), validAttributes);
  }
  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) {
      return updatePayload;
    }
    if (!Array.isArray(nextProp)) {
      return addProperties(updatePayload, nextProp, validAttributes);
    }
    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }
    return updatePayload;
  }
  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) {
      return updatePayload;
    }
    if (!Array.isArray(prevProp)) {
      return clearProperties(updatePayload, prevProp, validAttributes);
    }
    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }
    return updatePayload;
  }
  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig;
    var nextProp;
    var prevProp;
    for (var propKey in nextProps) {
      attributeConfig = validAttributes[propKey];
      if (!attributeConfig) {
        continue;
      }
      prevProp = prevProps[propKey];
      nextProp = nextProps[propKey];
      if (typeof nextProp === 'function') {
        nextProp = true;
        if (typeof prevProp === 'function') {
          prevProp = true;
        }
      }
      if (typeof nextProp === 'undefined') {
        nextProp = null;
        if (typeof prevProp === 'undefined') {
          prevProp = null;
        }
      }
      if (removedKeys) {
        removedKeys[propKey] = false;
      }
      if (updatePayload && updatePayload[propKey] !== undefined) {
        if (typeof attributeConfig !== 'object') {
          updatePayload[propKey] = nextProp;
        } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
          var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
          updatePayload[propKey] = nextValue;
        }
        continue;
      }
      if (prevProp === nextProp) {
        continue;
      }
      if (typeof attributeConfig !== 'object') {
        if (defaultDiffer(prevProp, nextProp)) {
          (updatePayload || (updatePayload = {}))[propKey] = nextProp;
        }
      } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
        var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === 'function' ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
        if (shouldUpdate) {
          var _nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
          (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
        }
      } else {
        removedKeys = null;
        removedKeyCount = 0;
        updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);
        if (removedKeyCount > 0 && updatePayload) {
          restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
          removedKeys = null;
        }
      }
    }
    for (var _propKey in prevProps) {
      if (nextProps[_propKey] !== undefined) {
        continue;
      }
      attributeConfig = validAttributes[_propKey];
      if (!attributeConfig) {
        continue;
      }
      if (updatePayload && updatePayload[_propKey] !== undefined) {
        continue;
      }
      prevProp = prevProps[_propKey];
      if (prevProp === undefined) {
        continue;
      }
      if (typeof attributeConfig !== 'object' || typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
        (updatePayload || (updatePayload = {}))[_propKey] = null;
        if (!removedKeys) {
          removedKeys = {};
        }
        if (!removedKeys[_propKey]) {
          removedKeys[_propKey] = true;
          removedKeyCount++;
        }
      } else {
        updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
      }
    }
    return updatePayload;
  }
  function addProperties(updatePayload, props, validAttributes) {
    return diffProperties(updatePayload, emptyObject, props, validAttributes);
  }
  function clearProperties(updatePayload, prevProps, validAttributes) {
    return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
  }
  function create(props, validAttributes) {
    return addProperties(null, props, validAttributes);
  }
  function diff(prevProps, nextProps, validAttributes) {
    return diffProperties(null, prevProps, nextProps, validAttributes);
  }
},138,[1,131,130]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createPublicInstance = createPublicInstance;
  exports.createPublicTextInstance = createPublicTextInstance;
  exports.getNativeTagFromPublicInstance = getNativeTagFromPublicInstance;
  exports.getNodeFromPublicInstance = getNodeFromPublicInstance;
  var _ReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[1]));
  var PublicInstanceClass;
  var ReadOnlyTextClass;
  var ReactFabric;
  function createPublicInstance(tag, viewConfig, internalInstanceHandle) {
    if (PublicInstanceClass == null) {
      if (_ReactNativeFeatureFlags.default.enableAccessToHostTreeInFabric()) {
        PublicInstanceClass = require(_dependencyMap[2]).default;
      } else {
        PublicInstanceClass = require(_dependencyMap[3]).default;
      }
    }
    return new PublicInstanceClass(tag, viewConfig, internalInstanceHandle);
  }
  function createPublicTextInstance(internalInstanceHandle) {
    if (ReadOnlyTextClass == null) {
      ReadOnlyTextClass = require(_dependencyMap[4]).default;
    }
    return new ReadOnlyTextClass(internalInstanceHandle);
  }
  function getNativeTagFromPublicInstance(publicInstance) {
    return publicInstance.__nativeTag;
  }
  function getNodeFromPublicInstance(publicInstance) {
    if (publicInstance.__internalInstanceHandle == null) {
      return null;
    }
    if (ReactFabric == null) {
      ReactFabric = require(_dependencyMap[5]);
    }
    return ReactFabric.getNodeFromInternalInstanceHandle(publicInstance.__internalInstanceHandle);
  }
},139,[1,140,141,151,152,63]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ReactNativeFeatureFlags = {
    isLayoutAnimationEnabled: () => true,
    shouldEmitW3CPointerEvents: () => false,
    shouldPressibilityUseW3CPointerEventsForHover: () => false,
    animatedShouldDebounceQueueFlush: () => false,
    animatedShouldUseSingleOp: () => false,
    isGlobalWebPerformanceLoggerEnabled: () => undefined,
    enableAccessToHostTreeInFabric: () => false,
    shouldUseAnimatedObjectForTransform: () => false,
    shouldUseSetNativePropsInFabric: () => false,
    shouldForceUnflattenForElevation: () => false
  };
  module.exports = ReactNativeFeatureFlags;
},140,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _TextInputState = _interopRequireDefault(require(_dependencyMap[6]));
  var _FabricUIManager = require(_dependencyMap[7]);
  var _ReactNativeAttributePayload = require(_dependencyMap[8]);
  var _warnForStyleProps = _interopRequireDefault(require(_dependencyMap[9]));
  var _ReadOnlyElement2 = _interopRequireWildcard(require(_dependencyMap[10]));
  var _ReadOnlyNode = _interopRequireWildcard(require(_dependencyMap[11]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[12]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var noop = () => {};
  var ReactNativeElement = exports.default = /*#__PURE__*/function (_ReadOnlyElement) {
    function ReactNativeElement(tag, viewConfig, internalInstanceHandle) {
      var _this;
      (0, _classCallCheck2.default)(this, ReactNativeElement);
      _this = _callSuper(this, ReactNativeElement, [internalInstanceHandle]);
      _this.__nativeTag = tag;
      _this.__internalInstanceHandle = internalInstanceHandle;
      _this._viewConfig = viewConfig;
      return _this;
    }
    (0, _inherits2.default)(ReactNativeElement, _ReadOnlyElement);
    return (0, _createClass2.default)(ReactNativeElement, [{
      key: "offsetHeight",
      get: function () {
        return Math.round((0, _ReadOnlyElement2.getBoundingClientRect)(this, {
          includeTransform: false
        }).height);
      }
    }, {
      key: "offsetLeft",
      get: function () {
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null) {
          var offset = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getOffset(node);
          if (offset != null) {
            return Math.round(offset[2]);
          }
        }
        return 0;
      }
    }, {
      key: "offsetParent",
      get: function () {
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null) {
          var offset = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getOffset(node);
          if (offset != null && offset[0] != null) {
            var offsetParentInstanceHandle = offset[0];
            var offsetParent = (0, _ReadOnlyNode.getPublicInstanceFromInternalInstanceHandle)(offsetParentInstanceHandle);
            var offsetParentElement = offsetParent;
            return offsetParentElement;
          }
        }
        return null;
      }
    }, {
      key: "offsetTop",
      get: function () {
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null) {
          var offset = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getOffset(node);
          if (offset != null) {
            return Math.round(offset[1]);
          }
        }
        return 0;
      }
    }, {
      key: "offsetWidth",
      get: function () {
        return Math.round((0, _ReadOnlyElement2.getBoundingClientRect)(this, {
          includeTransform: false
        }).width);
      }
    }, {
      key: "blur",
      value: function blur() {
        _TextInputState.default.blurTextInput(this);
      }
    }, {
      key: "focus",
      value: function focus() {
        _TextInputState.default.focusTextInput(this);
      }
    }, {
      key: "measure",
      value: function measure(callback) {
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null) {
          (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).measure(node, callback);
        }
      }
    }, {
      key: "measureInWindow",
      value: function measureInWindow(callback) {
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null) {
          (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).measureInWindow(node, callback);
        }
      }
    }, {
      key: "measureLayout",
      value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        if (!(relativeToNativeNode instanceof _ReadOnlyNode.default)) {
          return;
        }
        var toStateNode = (0, _ReadOnlyNode.getShadowNode)(this);
        var fromStateNode = (0, _ReadOnlyNode.getShadowNode)(relativeToNativeNode);
        if (toStateNode != null && fromStateNode != null) {
          (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).measureLayout(toStateNode, fromStateNode, onFail != null ? onFail : noop, onSuccess != null ? onSuccess : noop);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        var updatePayload = (0, _ReactNativeAttributePayload.create)(nativeProps, this._viewConfig.validAttributes);
        var node = (0, _ReadOnlyNode.getShadowNode)(this);
        if (node != null && updatePayload != null) {
          (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).setNativeProps(node, updatePayload);
        }
      }
    }]);
  }(_ReadOnlyElement2.default);
},141,[1,10,11,50,52,55,85,112,138,142,143,148,113]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = warnForStyleProps;
  function warnForStyleProps(props, validAttributes) {}
},142,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.getBoundingClientRect = _getBoundingClientRect;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _FabricUIManager = require(_dependencyMap[6]);
  var _DOMRect = _interopRequireDefault(require(_dependencyMap[7]));
  var _HTMLCollection = require(_dependencyMap[8]);
  var _ReadOnlyNode2 = _interopRequireWildcard(require(_dependencyMap[9]));
  var _Traversal = require(_dependencyMap[10]);
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[11]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ReadOnlyElement = exports.default = /*#__PURE__*/function (_ReadOnlyNode) {
    function ReadOnlyElement() {
      (0, _classCallCheck2.default)(this, ReadOnlyElement);
      return _callSuper(this, ReadOnlyElement, arguments);
    }
    (0, _inherits2.default)(ReadOnlyElement, _ReadOnlyNode);
    return (0, _createClass2.default)(ReadOnlyElement, [{
      key: "childElementCount",
      get: function () {
        return getChildElements(this).length;
      }
    }, {
      key: "children",
      get: function () {
        return (0, _HTMLCollection.createHTMLCollection)(getChildElements(this));
      }
    }, {
      key: "clientHeight",
      get: function () {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var innerSize = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getInnerSize(node);
          if (innerSize != null) {
            return innerSize[1];
          }
        }
        return 0;
      }
    }, {
      key: "clientLeft",
      get: function () {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var borderSize = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getBorderSize(node);
          if (borderSize != null) {
            return borderSize[3];
          }
        }
        return 0;
      }
    }, {
      key: "clientTop",
      get: function () {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var borderSize = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getBorderSize(node);
          if (borderSize != null) {
            return borderSize[0];
          }
        }
        return 0;
      }
    }, {
      key: "clientWidth",
      get: function () {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var innerSize = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getInnerSize(node);
          if (innerSize != null) {
            return innerSize[0];
          }
        }
        return 0;
      }
    }, {
      key: "firstElementChild",
      get: function () {
        var childElements = getChildElements(this);
        if (childElements.length === 0) {
          return null;
        }
        return childElements[0];
      }
    }, {
      key: "id",
      get: function () {
        var instanceHandle = (0, _ReadOnlyNode2.getInstanceHandle)(this);
        var props = instanceHandle?.stateNode?.canonical?.currentProps;
        return props?.id ?? props?.nativeID ?? '';
      }
    }, {
      key: "lastElementChild",
      get: function () {
        var childElements = getChildElements(this);
        if (childElements.length === 0) {
          return null;
        }
        return childElements[childElements.length - 1];
      }
    }, {
      key: "nextElementSibling",
      get: function () {
        return (0, _Traversal.getElementSibling)(this, 'next');
      }
    }, {
      key: "nodeName",
      get: function () {
        return this.tagName;
      }
    }, {
      key: "nodeType",
      get: function () {
        return _ReadOnlyNode2.default.ELEMENT_NODE;
      }
    }, {
      key: "nodeValue",
      get: function () {
        return null;
      },
      set: function (value) {}
    }, {
      key: "previousElementSibling",
      get: function () {
        return (0, _Traversal.getElementSibling)(this, 'previous');
      }
    }, {
      key: "scrollHeight",
      get: function () {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var scrollSize = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getScrollSize(node);
          if (scrollSize != null) {
            return scrollSize[1];
          }
        }
        return 0;
      }
    }, {
      key: "scrollLeft",
      get: function () {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var scrollPosition = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getScrollPosition(node);
          if (scrollPosition != null) {
            return scrollPosition[0];
          }
        }
        return 0;
      }
    }, {
      key: "scrollTop",
      get: function () {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var scrollPosition = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getScrollPosition(node);
          if (scrollPosition != null) {
            return scrollPosition[1];
          }
        }
        return 0;
      }
    }, {
      key: "scrollWidth",
      get: function () {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          var scrollSize = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getScrollSize(node);
          if (scrollSize != null) {
            return scrollSize[0];
          }
        }
        return 0;
      }
    }, {
      key: "tagName",
      get: function () {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          return (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getTagName(node);
        }
        return '';
      }
    }, {
      key: "textContent",
      get: function () {
        var shadowNode = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (shadowNode != null) {
          return (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getTextContent(shadowNode);
        }
        return '';
      }
    }, {
      key: "getBoundingClientRect",
      value: function getBoundingClientRect() {
        return _getBoundingClientRect(this, {
          includeTransform: true
        });
      }
    }, {
      key: "hasPointerCapture",
      value: function hasPointerCapture(pointerId) {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          return (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).hasPointerCapture(node, pointerId);
        }
        return false;
      }
    }, {
      key: "setPointerCapture",
      value: function setPointerCapture(pointerId) {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).setPointerCapture(node, pointerId);
        }
      }
    }, {
      key: "releasePointerCapture",
      value: function releasePointerCapture(pointerId) {
        var node = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (node != null) {
          (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).releasePointerCapture(node, pointerId);
        }
      }
    }]);
  }(_ReadOnlyNode2.default);
  function getChildElements(node) {
    return (0, _ReadOnlyNode2.getChildNodes)(node).filter(childNode => childNode instanceof ReadOnlyElement);
  }
  function _getBoundingClientRect(node, _ref) {
    var includeTransform = _ref.includeTransform;
    var shadowNode = (0, _ReadOnlyNode2.getShadowNode)(node);
    if (shadowNode != null) {
      var rect = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getBoundingClientRect(shadowNode, includeTransform);
      if (rect) {
        return new _DOMRect.default(rect[0], rect[1], rect[2], rect[3]);
      }
    }
    return new _DOMRect.default(0, 0, 0, 0);
  }
},143,[1,10,11,50,52,55,112,144,146,148,150,113]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _DOMRectReadOnly2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var DOMRect = exports.default = /*#__PURE__*/function (_DOMRectReadOnly) {
    function DOMRect() {
      (0, _classCallCheck2.default)(this, DOMRect);
      return _callSuper(this, DOMRect, arguments);
    }
    (0, _inherits2.default)(DOMRect, _DOMRectReadOnly);
    return (0, _createClass2.default)(DOMRect, [{
      key: "x",
      get: function () {
        return this.__getInternalX();
      },
      set: function (x) {
        this.__setInternalX(x);
      }
    }, {
      key: "y",
      get: function () {
        return this.__getInternalY();
      },
      set: function (y) {
        this.__setInternalY(y);
      }
    }, {
      key: "width",
      get: function () {
        return this.__getInternalWidth();
      },
      set: function (width) {
        this.__setInternalWidth(width);
      }
    }, {
      key: "height",
      get: function () {
        return this.__getInternalHeight();
      },
      set: function (height) {
        this.__setInternalHeight(height);
      }
    }], [{
      key: "fromRect",
      value: function fromRect(rect) {
        if (!rect) {
          return new DOMRect();
        }
        return new DOMRect(rect.x, rect.y, rect.width, rect.height);
      }
    }]);
  }(_DOMRectReadOnly2.default);
},144,[1,10,11,50,52,55,145]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  function castToNumber(value) {
    return value ? Number(value) : 0;
  }
  var DOMRectReadOnly = exports.default = /*#__PURE__*/function () {
    function DOMRectReadOnly(x, y, width, height) {
      (0, _classCallCheck2.default)(this, DOMRectReadOnly);
      this.__setInternalX(x);
      this.__setInternalY(y);
      this.__setInternalWidth(width);
      this.__setInternalHeight(height);
    }
    return (0, _createClass2.default)(DOMRectReadOnly, [{
      key: "x",
      get: function () {
        return this._x;
      }
    }, {
      key: "y",
      get: function () {
        return this._y;
      }
    }, {
      key: "width",
      get: function () {
        return this._width;
      }
    }, {
      key: "height",
      get: function () {
        return this._height;
      }
    }, {
      key: "top",
      get: function () {
        var height = this._height;
        var y = this._y;
        if (height < 0) {
          return y + height;
        }
        return y;
      }
    }, {
      key: "right",
      get: function () {
        var width = this._width;
        var x = this._x;
        if (width < 0) {
          return x;
        }
        return x + width;
      }
    }, {
      key: "bottom",
      get: function () {
        var height = this._height;
        var y = this._y;
        if (height < 0) {
          return y;
        }
        return y + height;
      }
    }, {
      key: "left",
      get: function () {
        var width = this._width;
        var x = this._x;
        if (width < 0) {
          return x + width;
        }
        return x;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var x = this.x,
          y = this.y,
          width = this.width,
          height = this.height,
          top = this.top,
          left = this.left,
          bottom = this.bottom,
          right = this.right;
        return {
          x,
          y,
          width,
          height,
          top,
          left,
          bottom,
          right
        };
      }
    }, {
      key: "__getInternalX",
      value: function __getInternalX() {
        return this._x;
      }
    }, {
      key: "__getInternalY",
      value: function __getInternalY() {
        return this._y;
      }
    }, {
      key: "__getInternalWidth",
      value: function __getInternalWidth() {
        return this._width;
      }
    }, {
      key: "__getInternalHeight",
      value: function __getInternalHeight() {
        return this._height;
      }
    }, {
      key: "__setInternalX",
      value: function __setInternalX(x) {
        this._x = castToNumber(x);
      }
    }, {
      key: "__setInternalY",
      value: function __setInternalY(y) {
        this._y = castToNumber(y);
      }
    }, {
      key: "__setInternalWidth",
      value: function __setInternalWidth(width) {
        this._width = castToNumber(width);
      }
    }, {
      key: "__setInternalHeight",
      value: function __setInternalHeight(height) {
        this._height = castToNumber(height);
      }
    }], [{
      key: "fromRect",
      value: function fromRect(rect) {
        if (!rect) {
          return new DOMRectReadOnly();
        }
        return new DOMRectReadOnly(rect.x, rect.y, rect.width, rect.height);
      }
    }]);
  }();
},145,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createHTMLCollection = createHTMLCollection;
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _ArrayLikeUtils = require(_dependencyMap[3]);
  var HTMLCollection = exports.default = /*#__PURE__*/function () {
    function HTMLCollection(elements) {
      (0, _classCallCheck2.default)(this, HTMLCollection);
      for (var i = 0; i < elements.length; i++) {
        Object.defineProperty(this, i, {
          value: elements[i],
          enumerable: true,
          configurable: false,
          writable: false
        });
      }
      this._length = elements.length;
    }
    return (0, _createClass2.default)(HTMLCollection, [{
      key: "length",
      get: function () {
        return this._length;
      }
    }, {
      key: "item",
      value: function item(index) {
        if (index < 0 || index >= this._length) {
          return null;
        }
        var arrayLike = this;
        return arrayLike[index];
      }
    }, {
      key: "namedItem",
      value: function namedItem(name) {
        return null;
      }
    }, {
      key: Symbol.iterator,
      value: function () {
        return (0, _ArrayLikeUtils.createValueIterator)(this);
      }
    }]);
  }();
  function createHTMLCollection(elements) {
    return new HTMLCollection(elements);
  }
},146,[1,10,11,147]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createEntriesIterator = createEntriesIterator;
  exports.createKeyIterator = createKeyIterator;
  exports.createValueIterator = createValueIterator;
  function* createValueIterator(arrayLike) {
    for (var i = 0; i < arrayLike.length; i++) {
      yield arrayLike[i];
    }
  }
  function* createKeyIterator(arrayLike) {
    for (var i = 0; i < arrayLike.length; i++) {
      yield i;
    }
  }
  function* createEntriesIterator(arrayLike) {
    for (var i = 0; i < arrayLike.length; i++) {
      yield [i, arrayLike[i]];
    }
  }
},147,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.getChildNodes = getChildNodes;
  exports.getInstanceHandle = getInstanceHandle;
  exports.getPublicInstanceFromInternalInstanceHandle = getPublicInstanceFromInternalInstanceHandle;
  exports.getShadowNode = getShadowNode;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _FabricUIManager = require(_dependencyMap[4]);
  var _ReactFabric = _interopRequireDefault(require(_dependencyMap[5]));
  var _NodeList = require(_dependencyMap[6]);
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[7]));
  var ReadOnlyElementClass;
  var ReadOnlyNode = exports.default = /*#__PURE__*/function () {
    function ReadOnlyNode(internalInstanceHandle) {
      (0, _classCallCheck2.default)(this, ReadOnlyNode);
      setInstanceHandle(this, internalInstanceHandle);
    }
    return (0, _createClass2.default)(ReadOnlyNode, [{
      key: "childNodes",
      get: function () {
        var childNodes = getChildNodes(this);
        return (0, _NodeList.createNodeList)(childNodes);
      }
    }, {
      key: "firstChild",
      get: function () {
        var childNodes = getChildNodes(this);
        if (childNodes.length === 0) {
          return null;
        }
        return childNodes[0];
      }
    }, {
      key: "isConnected",
      get: function () {
        var shadowNode = getShadowNode(this);
        if (shadowNode == null) {
          return false;
        }
        return (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).isConnected(shadowNode);
      }
    }, {
      key: "lastChild",
      get: function () {
        var childNodes = getChildNodes(this);
        if (childNodes.length === 0) {
          return null;
        }
        return childNodes[childNodes.length - 1];
      }
    }, {
      key: "nextSibling",
      get: function () {
        var _getNodeSiblingsAndPo = getNodeSiblingsAndPosition(this),
          _getNodeSiblingsAndPo2 = (0, _slicedToArray2.default)(_getNodeSiblingsAndPo, 2),
          siblings = _getNodeSiblingsAndPo2[0],
          position = _getNodeSiblingsAndPo2[1];
        if (position === siblings.length - 1) {
          return null;
        }
        return siblings[position + 1];
      }
    }, {
      key: "nodeName",
      get: function () {
        throw new TypeError('`nodeName` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }
    }, {
      key: "nodeType",
      get: function () {
        throw new TypeError('`nodeType` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }
    }, {
      key: "nodeValue",
      get: function () {
        throw new TypeError('`nodeValue` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }
    }, {
      key: "parentElement",
      get: function () {
        var parentNode = this.parentNode;
        if (ReadOnlyElementClass == null) {
          ReadOnlyElementClass = require(_dependencyMap[8]).default;
        }
        if (parentNode instanceof ReadOnlyElementClass) {
          return parentNode;
        }
        return null;
      }
    }, {
      key: "parentNode",
      get: function () {
        var shadowNode = getShadowNode(this);
        if (shadowNode == null) {
          return null;
        }
        var parentInstanceHandle = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getParentNode(shadowNode);
        if (parentInstanceHandle == null) {
          return null;
        }
        return getPublicInstanceFromInternalInstanceHandle(parentInstanceHandle);
      }
    }, {
      key: "previousSibling",
      get: function () {
        var _getNodeSiblingsAndPo3 = getNodeSiblingsAndPosition(this),
          _getNodeSiblingsAndPo4 = (0, _slicedToArray2.default)(_getNodeSiblingsAndPo3, 2),
          siblings = _getNodeSiblingsAndPo4[0],
          position = _getNodeSiblingsAndPo4[1];
        if (position === 0) {
          return null;
        }
        return siblings[position - 1];
      }
    }, {
      key: "textContent",
      get: function () {
        throw new TypeError('`textContent` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }
    }, {
      key: "compareDocumentPosition",
      value: function compareDocumentPosition(otherNode) {
        if (otherNode === this) {
          return 0;
        }
        var shadowNode = getShadowNode(this);
        var otherShadowNode = getShadowNode(otherNode);
        if (shadowNode == null || otherShadowNode == null) {
          return ReadOnlyNode.DOCUMENT_POSITION_DISCONNECTED;
        }
        return (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).compareDocumentPosition(shadowNode, otherShadowNode);
      }
    }, {
      key: "contains",
      value: function contains(otherNode) {
        if (otherNode === this) {
          return true;
        }
        var position = this.compareDocumentPosition(otherNode);
        return (position & ReadOnlyNode.DOCUMENT_POSITION_CONTAINED_BY) !== 0;
      }
    }, {
      key: "getRootNode",
      value: function getRootNode() {
        var lastKnownParent = this;
        var nextPossibleParent = this.parentNode;
        while (nextPossibleParent != null) {
          lastKnownParent = nextPossibleParent;
          nextPossibleParent = nextPossibleParent.parentNode;
        }
        return lastKnownParent;
      }
    }, {
      key: "hasChildNodes",
      value: function hasChildNodes() {
        return getChildNodes(this).length > 0;
      }
    }]);
  }();
  ReadOnlyNode.ELEMENT_NODE = 1;
  ReadOnlyNode.ATTRIBUTE_NODE = 2;
  ReadOnlyNode.TEXT_NODE = 3;
  ReadOnlyNode.CDATA_SECTION_NODE = 4;
  ReadOnlyNode.ENTITY_REFERENCE_NODE = 5;
  ReadOnlyNode.ENTITY_NODE = 6;
  ReadOnlyNode.PROCESSING_INSTRUCTION_NODE = 7;
  ReadOnlyNode.COMMENT_NODE = 8;
  ReadOnlyNode.DOCUMENT_NODE = 9;
  ReadOnlyNode.DOCUMENT_TYPE_NODE = 10;
  ReadOnlyNode.DOCUMENT_FRAGMENT_NODE = 11;
  ReadOnlyNode.NOTATION_NODE = 12;
  ReadOnlyNode.DOCUMENT_POSITION_DISCONNECTED = 1;
  ReadOnlyNode.DOCUMENT_POSITION_PRECEDING = 2;
  ReadOnlyNode.DOCUMENT_POSITION_FOLLOWING = 4;
  ReadOnlyNode.DOCUMENT_POSITION_CONTAINS = 8;
  ReadOnlyNode.DOCUMENT_POSITION_CONTAINED_BY = 16;
  ReadOnlyNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
  var INSTANCE_HANDLE_KEY = Symbol('internalInstanceHandle');
  function getInstanceHandle(node) {
    return node[INSTANCE_HANDLE_KEY];
  }
  function setInstanceHandle(node, instanceHandle) {
    node[INSTANCE_HANDLE_KEY] = instanceHandle;
  }
  function getShadowNode(node) {
    return _ReactFabric.default.getNodeFromInternalInstanceHandle(getInstanceHandle(node));
  }
  function getChildNodes(node) {
    var shadowNode = getShadowNode(node);
    if (shadowNode == null) {
      return [];
    }
    var childNodeInstanceHandles = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getChildNodes(shadowNode);
    return childNodeInstanceHandles.map(instanceHandle => getPublicInstanceFromInternalInstanceHandle(instanceHandle));
  }
  function getNodeSiblingsAndPosition(node) {
    var parent = node.parentNode;
    if (parent == null) {
      return [[node], 0];
    }
    var siblings = getChildNodes(parent);
    var position = siblings.indexOf(node);
    if (position === -1) {
      throw new TypeError("Missing node in parent's child node list");
    }
    return [siblings, position];
  }
  function getPublicInstanceFromInternalInstanceHandle(instanceHandle) {
    var mixedPublicInstance = _ReactFabric.default.getPublicInstanceFromInternalInstanceHandle(instanceHandle);
    return mixedPublicInstance;
  }
},148,[1,29,10,11,112,63,149,113,143]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createNodeList = createNodeList;
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _ArrayLikeUtils = require(_dependencyMap[3]);
  var NodeList = exports.default = /*#__PURE__*/function () {
    function NodeList(elements) {
      (0, _classCallCheck2.default)(this, NodeList);
      for (var i = 0; i < elements.length; i++) {
        Object.defineProperty(this, i, {
          value: elements[i],
          writable: false
        });
      }
      this._length = elements.length;
    }
    return (0, _createClass2.default)(NodeList, [{
      key: "length",
      get: function () {
        return this._length;
      }
    }, {
      key: "item",
      value: function item(index) {
        if (index < 0 || index >= this._length) {
          return null;
        }
        var arrayLike = this;
        return arrayLike[index];
      }
    }, {
      key: "entries",
      value: function entries() {
        return (0, _ArrayLikeUtils.createEntriesIterator)(this);
      }
    }, {
      key: "forEach",
      value: function forEach(callbackFn, thisArg) {
        var arrayLike = this;
        for (var _index = 0; _index < this._length; _index++) {
          if (thisArg == null) {
            callbackFn(arrayLike[_index], _index, this);
          } else {
            callbackFn.call(thisArg, arrayLike[_index], _index, this);
          }
        }
      }
    }, {
      key: "keys",
      value: function keys() {
        return (0, _ArrayLikeUtils.createKeyIterator)(this);
      }
    }, {
      key: "values",
      value: function values() {
        return (0, _ArrayLikeUtils.createValueIterator)(this);
      }
    }, {
      key: Symbol.iterator,
      value: function () {
        return (0, _ArrayLikeUtils.createValueIterator)(this);
      }
    }]);
  }();
  function createNodeList(elements) {
    return new NodeList(elements);
  }
},149,[1,10,11,147]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getElementSibling = getElementSibling;
  var _ReadOnlyNode = require(_dependencyMap[0]);
  var ReadOnlyElementClass;
  function getElementSibling(node, direction) {
    var parent = node.parentNode;
    if (parent == null) {
      return null;
    }
    var childNodes = (0, _ReadOnlyNode.getChildNodes)(parent);
    var startPosition = childNodes.indexOf(node);
    if (startPosition === -1) {
      return null;
    }
    var increment = direction === 'next' ? 1 : -1;
    var position = startPosition + increment;
    if (ReadOnlyElementClass == null) {
      ReadOnlyElementClass = require(_dependencyMap[1]).default;
    }
    while (childNodes[position] != null && !(childNodes[position] instanceof ReadOnlyElementClass)) {
      position = position + increment;
    }
    return childNodes[position] ?? null;
  }
},150,[148,143]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _TextInputState = _interopRequireDefault(require(_dependencyMap[3]));
  var _ReactFabric = require(_dependencyMap[4]);
  var _FabricUIManager = require(_dependencyMap[5]);
  var _ReactNativeAttributePayload = require(_dependencyMap[6]);
  var _warnForStyleProps = _interopRequireDefault(require(_dependencyMap[7]));
  var _nullthrows2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _nullthrows = (0, _nullthrows2.default)((0, _FabricUIManager.getFabricUIManager)()),
    fabricMeasure = _nullthrows.measure,
    fabricMeasureInWindow = _nullthrows.measureInWindow,
    fabricMeasureLayout = _nullthrows.measureLayout,
    fabricGetBoundingClientRect = _nullthrows.getBoundingClientRect,
    _setNativeProps = _nullthrows.setNativeProps;
  var noop = () => {};
  var ReactFabricHostComponent = exports.default = /*#__PURE__*/function () {
    function ReactFabricHostComponent(tag, viewConfig, internalInstanceHandle) {
      (0, _classCallCheck2.default)(this, ReactFabricHostComponent);
      this.__nativeTag = tag;
      this._viewConfig = viewConfig;
      this.__internalInstanceHandle = internalInstanceHandle;
    }
    return (0, _createClass2.default)(ReactFabricHostComponent, [{
      key: "blur",
      value: function blur() {
        _TextInputState.default.blurTextInput(this);
      }
    }, {
      key: "focus",
      value: function focus() {
        _TextInputState.default.focusTextInput(this);
      }
    }, {
      key: "measure",
      value: function measure(callback) {
        var node = (0, _ReactFabric.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null) {
          fabricMeasure(node, callback);
        }
      }
    }, {
      key: "measureInWindow",
      value: function measureInWindow(callback) {
        var node = (0, _ReactFabric.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null) {
          fabricMeasureInWindow(node, callback);
        }
      }
    }, {
      key: "measureLayout",
      value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        if (typeof relativeToNativeNode === 'number' || !(relativeToNativeNode instanceof ReactFabricHostComponent)) {
          return;
        }
        var toStateNode = (0, _ReactFabric.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        var fromStateNode = (0, _ReactFabric.getNodeFromInternalInstanceHandle)(relativeToNativeNode.__internalInstanceHandle);
        if (toStateNode != null && fromStateNode != null) {
          fabricMeasureLayout(toStateNode, fromStateNode, onFail != null ? onFail : noop, onSuccess != null ? onSuccess : noop);
        }
      }
    }, {
      key: "unstable_getBoundingClientRect",
      value: function unstable_getBoundingClientRect() {
        var node = (0, _ReactFabric.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null) {
          var rect = fabricGetBoundingClientRect(node, true);
          if (rect) {
            return new DOMRect(rect[0], rect[1], rect[2], rect[3]);
          }
        }
        return new DOMRect(0, 0, 0, 0);
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        var updatePayload = (0, _ReactNativeAttributePayload.create)(nativeProps, this._viewConfig.validAttributes);
        var node = (0, _ReactFabric.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null && updatePayload != null) {
          _setNativeProps(node, updatePayload);
        }
      }
    }]);
  }();
},151,[1,10,11,85,63,112,138,142,113]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _ReadOnlyCharacterData = _interopRequireDefault(require(_dependencyMap[6]));
  var _ReadOnlyNode = _interopRequireDefault(require(_dependencyMap[7]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ReadOnlyText = exports.default = /*#__PURE__*/function (_ReadOnlyCharacterDat) {
    function ReadOnlyText() {
      (0, _classCallCheck2.default)(this, ReadOnlyText);
      return _callSuper(this, ReadOnlyText, arguments);
    }
    (0, _inherits2.default)(ReadOnlyText, _ReadOnlyCharacterDat);
    return (0, _createClass2.default)(ReadOnlyText, [{
      key: "nodeName",
      get: function () {
        return '#text';
      }
    }, {
      key: "nodeType",
      get: function () {
        return _ReadOnlyNode.default.TEXT_NODE;
      }
    }]);
  }(_ReadOnlyCharacterData.default);
},152,[1,10,11,50,52,55,153,148]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _FabricUIManager = require(_dependencyMap[6]);
  var _ReadOnlyNode2 = _interopRequireWildcard(require(_dependencyMap[7]));
  var _Traversal = require(_dependencyMap[8]);
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[9]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ReadOnlyCharacterData = exports.default = /*#__PURE__*/function (_ReadOnlyNode) {
    function ReadOnlyCharacterData() {
      (0, _classCallCheck2.default)(this, ReadOnlyCharacterData);
      return _callSuper(this, ReadOnlyCharacterData, arguments);
    }
    (0, _inherits2.default)(ReadOnlyCharacterData, _ReadOnlyNode);
    return (0, _createClass2.default)(ReadOnlyCharacterData, [{
      key: "nextElementSibling",
      get: function () {
        return (0, _Traversal.getElementSibling)(this, 'next');
      }
    }, {
      key: "previousElementSibling",
      get: function () {
        return (0, _Traversal.getElementSibling)(this, 'previous');
      }
    }, {
      key: "data",
      get: function () {
        var shadowNode = (0, _ReadOnlyNode2.getShadowNode)(this);
        if (shadowNode != null) {
          return (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).getTextContent(shadowNode);
        }
        return '';
      }
    }, {
      key: "length",
      get: function () {
        return this.data.length;
      }
    }, {
      key: "textContent",
      get: function () {
        return this.data;
      }
    }, {
      key: "nodeValue",
      get: function () {
        return this.data;
      }
    }, {
      key: "substringData",
      value: function substringData(offset, count) {
        var data = this.data;
        if (offset < 0) {
          throw new TypeError(`Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is negative.`);
        }
        if (offset > data.length) {
          throw new TypeError(`Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is greater than the node's length (${data.length}).`);
        }
        var adjustedCount = count < 0 || count > data.length ? data.length : count;
        return data.slice(offset, offset + adjustedCount);
      }
    }]);
  }(_ReadOnlyNode2.default);
},153,[1,10,11,50,52,55,112,148,150,113]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @nolint
   * @providesModule ReactFabric-prod
   * @preventMunge
   * @generated SignedSource<<fd9d50d45a1497af23e636e66fa0284b>>
   */

  "use strict";

  require(_dependencyMap[0]);
  var ReactNativePrivateInterface = require(_dependencyMap[1]),
    React = require(_dependencyMap[2]),
    Scheduler = require(_dependencyMap[3]);
  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }
  var hasError = false,
    caughtError = null,
    hasRethrowError = false,
    rethrowError = null,
    reporter = {
      onError: function (error) {
        hasError = true;
        caughtError = error;
      }
    };
  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }
  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);
    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }
  var isArrayImpl = Array.isArray,
    getFiberCurrentPropsFromNode = null,
    getInstanceFromNode = null,
    getNodeFromInstance = null;
  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }
  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
      dispatchInstance = event._dispatchInstances;
    if (isArrayImpl(dispatchListener)) throw Error("executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }
  var assign = Object.assign;
  function functionThatReturnsTrue() {
    return true;
  }
  function functionThatReturnsFalse() {
    return false;
  }
  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    this._dispatchInstances = this._dispatchListeners = null;
    dispatchConfig = this.constructor.Interface;
    for (var propName in dispatchConfig) dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }
  assign(SyntheticEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function () {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function () {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function () {
      var Interface = this.constructor.Interface,
        propName;
      for (propName in Interface) this[propName] = null;
      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });
  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function () {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  SyntheticEvent.extend = function (Interface) {
    function E() {}
    function Class() {
      return Super.apply(this, arguments);
    }
    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };
  addEventPoolingTo(SyntheticEvent);
  function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }
    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }
  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }
  function addEventPoolingTo(EventConstructor) {
    EventConstructor.getPooled = createOrGetPooledEvent;
    EventConstructor.eventPool = [];
    EventConstructor.release = releasePooledEvent;
  }
  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function () {
      return null;
    }
  });
  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }
  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }
  var startDependencies = ["topTouchStart"],
    moveDependencies = ["topTouchMove"],
    endDependencies = ["topTouchCancel", "topTouchEnd"],
    touchBank = [],
    touchHistory = {
      touchBank: touchBank,
      numberActiveTouches: 0,
      indexOfSingleActiveTouch: -1,
      mostRecentTimeStamp: 0
    };
  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }
  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
  }
  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
      touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }
  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  var instrumentationCallback,
    ResponderTouchHistoryStore = {
      instrument: function (callback) {
        instrumentationCallback = callback;
      },
      recordTouchTrack: function (topLevelType, nativeEvent) {
        null != instrumentationCallback && instrumentationCallback(topLevelType, nativeEvent);
        if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      },
      touchHistory: touchHistory
    };
  function accumulate(current, next) {
    if (null == next) throw Error("accumulate(...): Accumulated items must not be null or undefined.");
    return null == current ? next : isArrayImpl(current) ? current.concat(next) : isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function accumulateInto(current, next) {
    if (null == next) throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;
    if (isArrayImpl(current)) {
      if (isArrayImpl(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }
    return isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }
  var responderInst = null,
    trackedTouchCount = 0;
  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }
  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  };
  function getParent(inst) {
    do inst = inst.return; while (inst && 5 !== inst.tag);
    return inst ? inst : null;
  }
  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) path.push(inst), inst = getParent(inst);
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function getListener(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
  }
  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }
  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
  var ResponderEventPlugin = {
      _getResponder: function () {
        return responderInst;
      },
      eventTypes: eventTypes,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return null;
        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
          var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
          if (responderInst) b: {
            var JSCompiler_temp = responderInst;
            for (var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent(tempA)) depthA++;
            tempA = 0;
            for (var tempB = targetInst; tempB; tempB = getParent(tempB)) tempA++;
            for (; 0 < depthA - tempA;) JSCompiler_temp = getParent(JSCompiler_temp), depthA--;
            for (; 0 < tempA - depthA;) targetInst = getParent(targetInst), tempA--;
            for (; depthA--;) {
              if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
              JSCompiler_temp = getParent(JSCompiler_temp);
              targetInst = getParent(targetInst);
            }
            JSCompiler_temp = null;
          } else JSCompiler_temp = targetInst;
          targetInst = JSCompiler_temp;
          JSCompiler_temp = targetInst === responderInst;
          shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, targetInst, nativeEvent, nativeEventTarget);
          shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory;
          JSCompiler_temp ? forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingle);
          b: {
            JSCompiler_temp = shouldSetEventType._dispatchListeners;
            targetInst = shouldSetEventType._dispatchInstances;
            if (isArrayImpl(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !shouldSetEventType.isPropagationStopped(); depthA++) {
              if (JSCompiler_temp[depthA](shouldSetEventType, targetInst[depthA])) {
                JSCompiler_temp = targetInst[depthA];
                break b;
              }
            } else if (JSCompiler_temp && JSCompiler_temp(shouldSetEventType, targetInst)) {
              JSCompiler_temp = targetInst;
              break b;
            }
            JSCompiler_temp = null;
          }
          shouldSetEventType._dispatchInstances = null;
          shouldSetEventType._dispatchListeners = null;
          shouldSetEventType.isPersistent() || shouldSetEventType.constructor.release(shouldSetEventType);
          if (JSCompiler_temp && JSCompiler_temp !== responderInst) {
            if (shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), targetInst = true === executeDirectDispatch(shouldSetEventType), responderInst) {
              if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
                depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                forEachAccumulated(depthA, accumulateDirectDispatchesSingle);
                var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [shouldSetEventType, depthA]);
                changeResponder(JSCompiler_temp, targetInst);
              } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
            } else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType), changeResponder(JSCompiler_temp, targetInst);
          } else JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = null;
        shouldSetEventType = responderInst && isStartish(topLevelType);
        JSCompiler_temp = responderInst && isMoveish(topLevelType);
        targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
        if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
        shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
        if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
          if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++) if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && undefined !== targetInst && 0 !== targetInst) {
            depthA = getInstanceFromNode(targetInst);
            b: {
              for (targetInst = responderInst; depthA;) {
                if (targetInst === depthA || targetInst === depthA.alternate) {
                  targetInst = true;
                  break b;
                }
                depthA = getParent(depthA);
              }
              targetInst = false;
            }
            if (targetInst) {
              topLevelType = false;
              break a;
            }
          }
          topLevelType = true;
        }
        if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
        return JSCompiler_temp$jscomp$0;
      },
      GlobalResponderHandler: null,
      injection: {
        injectGlobalResponderHandler: function (GlobalResponderHandler) {
          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
      }
    },
    eventPluginOrder = null,
    namesToPlugins = {};
  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
        pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (-1 >= pluginIndex) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + (pluginName + "`."));
      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + (pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;
        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
            eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + (eventName$jscomp$0 + "`."));
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule, eventName$jscomp$0);
            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;
          if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
        }
      }
    }
  }
  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + (registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }
  var plugins = [],
    eventNameDispatchConfigs = {},
    registrationNameModules = {};
  function getListeners(inst, registrationName, phase, dispatchToImperativeListeners) {
    var stateNode = inst.stateNode;
    if (null === stateNode) return null;
    inst = getFiberCurrentPropsFromNode(stateNode);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    if (!(dispatchToImperativeListeners && stateNode.canonical && stateNode.canonical._eventListeners)) return inst;
    var listeners = [];
    inst && listeners.push(inst);
    var requestedPhaseIsCapture = "captured" === phase,
      mangledImperativeRegistrationName = requestedPhaseIsCapture ? "rn:" + registrationName.replace(/Capture$/, "") : "rn:" + registrationName;
    stateNode.canonical._eventListeners[mangledImperativeRegistrationName] && 0 < stateNode.canonical._eventListeners[mangledImperativeRegistrationName].length && stateNode.canonical._eventListeners[mangledImperativeRegistrationName].forEach(function (listenerObj) {
      if ((null != listenerObj.options.capture && listenerObj.options.capture) === requestedPhaseIsCapture) {
        var listenerFnWrapper = function (syntheticEvent) {
          var eventInst = new ReactNativePrivateInterface.CustomEvent(mangledImperativeRegistrationName, {
            detail: syntheticEvent.nativeEvent
          });
          eventInst.isTrusted = true;
          eventInst.setSyntheticEvent(syntheticEvent);
          for (var _len = arguments.length, args = Array(1 < _len ? _len - 1 : 0), _key = 1; _key < _len; _key++) args[_key - 1] = arguments[_key];
          listenerObj.listener.apply(listenerObj, [eventInst].concat(args));
        };
        listenerObj.options.once ? listeners.push(function () {
          stateNode.canonical.removeEventListener_unstable(mangledImperativeRegistrationName, listenerObj.listener, listenerObj.capture);
          listenerObj.invalidated || (listenerObj.invalidated = true, listenerObj.listener.apply(listenerObj, arguments));
        }) : listeners.push(listenerFnWrapper);
      }
    });
    return 0 === listeners.length ? null : 1 === listeners.length ? listeners[0] : listeners;
  }
  var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
    customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
  function accumulateListenersAndInstances(inst, event, listeners) {
    var listenersLength = listeners ? isArrayImpl(listeners) ? listeners.length : 1 : 0;
    if (0 < listenersLength) if (event._dispatchListeners = accumulateInto(event._dispatchListeners, listeners), null == event._dispatchInstances && 1 === listenersLength) event._dispatchInstances = inst;else for (event._dispatchInstances = event._dispatchInstances || [], isArrayImpl(event._dispatchInstances) || (event._dispatchInstances = [event._dispatchInstances]), listeners = 0; listeners < listenersLength; listeners++) event._dispatchInstances.push(inst);
  }
  function accumulateDirectionalDispatches$1(inst, phase, event) {
    phase = getListeners(inst, event.dispatchConfig.phasedRegistrationNames[phase], phase, true);
    accumulateListenersAndInstances(inst, event, phase);
  }
  function traverseTwoPhase$1(inst, fn, arg, skipBubbling) {
    for (var path = []; inst;) {
      path.push(inst);
      do inst = inst.return; while (inst && 5 !== inst.tag);
      inst = inst ? inst : null;
    }
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    if (skipBubbling) fn(path[0], "bubbled", arg);else for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function accumulateTwoPhaseDispatchesSingle$1(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event, false);
  }
  function accumulateDirectDispatchesSingle$1(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listeners = getListeners(inst, event.dispatchConfig.registrationName, "bubbled", false);
        accumulateListenersAndInstances(inst, event, listeners);
      }
    }
  }
  if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
  eventPluginOrder = Array.prototype.slice.call(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  recomputePluginOrdering();
  var injectedNamesToPlugins$jscomp$inline_223 = {
      ResponderEventPlugin: ResponderEventPlugin,
      ReactNativeBridgeEventPlugin: {
        eventTypes: {},
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (null == targetInst) return null;
          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
          if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
          topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
          if (bubbleDispatchConfig) null != topLevelType && null != topLevelType.dispatchConfig.phasedRegistrationNames && topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling ? topLevelType && topLevelType.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(topLevelType._targetInst, accumulateDirectionalDispatches$1, topLevelType, true) : forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle$1);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle$1);else return null;
          return topLevelType;
        }
      }
    },
    isOrderingDirty$jscomp$inline_224 = false,
    pluginName$jscomp$inline_225;
  for (pluginName$jscomp$inline_225 in injectedNamesToPlugins$jscomp$inline_223) if (injectedNamesToPlugins$jscomp$inline_223.hasOwnProperty(pluginName$jscomp$inline_225)) {
    var pluginModule$jscomp$inline_226 = injectedNamesToPlugins$jscomp$inline_223[pluginName$jscomp$inline_225];
    if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_225) || namesToPlugins[pluginName$jscomp$inline_225] !== pluginModule$jscomp$inline_226) {
      if (namesToPlugins[pluginName$jscomp$inline_225]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + (pluginName$jscomp$inline_225 + "`."));
      namesToPlugins[pluginName$jscomp$inline_225] = pluginModule$jscomp$inline_226;
      isOrderingDirty$jscomp$inline_224 = true;
    }
  }
  isOrderingDirty$jscomp$inline_224 && recomputePluginOrdering();
  function getInstanceFromInstance(instanceHandle) {
    return instanceHandle;
  }
  getFiberCurrentPropsFromNode = function (inst) {
    return inst.canonical.currentProps;
  };
  getInstanceFromNode = getInstanceFromInstance;
  getNodeFromInstance = function (inst) {
    inst = inst.stateNode.canonical;
    if (!inst._nativeTag) throw Error("All native instances should have a tag.");
    return inst;
  };
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function (from, to, blockNativeResponder) {
      var fromOrTo = from || to;
      (fromOrTo = fromOrTo && fromOrTo.stateNode) && fromOrTo.canonical._internalInstanceHandle ? (from && nativeFabricUIManager.setIsJSResponder(from.stateNode.node, false, blockNativeResponder || false), to && nativeFabricUIManager.setIsJSResponder(to.stateNode.node, true, blockNativeResponder || false)) : null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode.canonical._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    REACT_ELEMENT_TYPE = Symbol.for("react.element"),
    REACT_PORTAL_TYPE = Symbol.for("react.portal"),
    REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
    REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
    REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
    REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
    REACT_CONTEXT_TYPE = Symbol.for("react.context"),
    REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
    REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
    REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
    REACT_MEMO_TYPE = Symbol.for("react.memo"),
    REACT_LAZY_TYPE = Symbol.for("react.lazy");
  Symbol.for("react.scope");
  Symbol.for("react.debug_trace_mode");
  var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
  Symbol.for("react.legacy_hidden");
  Symbol.for("react.cache");
  Symbol.for("react.tracing_marker");
  var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }
  function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";
      case REACT_PORTAL_TYPE:
        return "Portal";
      case REACT_PROFILER_TYPE:
        return "Profiler";
      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";
      case REACT_SUSPENSE_TYPE:
        return "Suspense";
      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }
    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return (type.displayName || "Context") + ".Consumer";
      case REACT_PROVIDER_TYPE:
        return (type._context.displayName || "Context") + ".Provider";
      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        type = type.displayName;
        type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
        return type;
      case REACT_MEMO_TYPE:
        return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
      case REACT_LAZY_TYPE:
        innerType = type._payload;
        type = type._init;
        try {
          return getComponentNameFromType(type(innerType));
        } catch (x) {}
    }
    return null;
  }
  function getComponentNameFromFiber(fiber) {
    var type = fiber.type;
    switch (fiber.tag) {
      case 24:
        return "Cache";
      case 9:
        return (type.displayName || "Context") + ".Consumer";
      case 10:
        return (type._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return type;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return getComponentNameFromType(type);
      case 8:
        return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if ("function" === typeof type) return type.displayName || type.name || null;
        if ("string" === typeof type) return type;
    }
    return null;
  }
  function getNearestMountedFiber(fiber) {
    var node = fiber,
      nearestMounted = fiber;
    if (fiber.alternate) for (; node.return;) node = node.return;else {
      fiber = node;
      do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return; while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
  }
  function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
  }
  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
      alternate = getNearestMountedFiber(fiber);
      if (null === alternate) throw Error("Unable to find node on an unmounted component.");
      return alternate !== fiber ? null : fiber;
    }
    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;
      if (null === parentB) {
        b = parentA.return;
        if (null !== b) {
          a = b;
          continue;
        }
        break;
      }
      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }
        throw Error("Unable to find node on an unmounted component.");
      }
      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, child$0 = parentA.child; child$0;) {
          if (child$0 === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }
          if (child$0 === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }
          child$0 = child$0.sibling;
        }
        if (!didFindChild) {
          for (child$0 = parentB.child; child$0;) {
            if (child$0 === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }
            if (child$0 === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }
            child$0 = child$0.sibling;
          }
          if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }
    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }
  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    return null !== parent ? findCurrentHostFiberImpl(parent) : null;
  }
  function findCurrentHostFiberImpl(node) {
    if (5 === node.tag || 6 === node.tag) return node;
    for (node = node.child; null !== node;) {
      var match = findCurrentHostFiberImpl(node);
      if (null !== match) return match;
      node = node.sibling;
    }
    return null;
  }
  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }
  var emptyObject = {},
    removedKeys = null,
    removedKeyCount = 0,
    deepDifferOptions = {
      unsafelyIgnoreFunctions: true
    };
  function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? true : ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
  }
  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (isArrayImpl(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);else if (node && 0 < removedKeyCount) for (i in removedKeys) if (removedKeys[i]) {
      var nextProp = node[i];
      if (undefined !== nextProp) {
        var attributeConfig = validAttributes[i];
        if (attributeConfig) {
          "function" === typeof nextProp && (nextProp = true);
          "undefined" === typeof nextProp && (nextProp = null);
          if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
          removedKeys[i] = false;
          removedKeyCount--;
        }
      }
    }
  }
  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
        i;
      for (i = 0; i < minLength; i++) updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      for (; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      for (; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      return updatePayload;
    }
    return isArrayImpl(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
  }
  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!isArrayImpl(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);
    for (var i = 0; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    return updatePayload;
  }
  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!isArrayImpl(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);
    for (var i = 0; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    return updatePayload;
  }
  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;
    for (propKey in nextProps) if (attributeConfig = validAttributes[propKey]) {
      var prevProp = prevProps[propKey];
      var nextProp = nextProps[propKey];
      "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
      "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
      removedKeys && (removedKeys[propKey] = false);
      if (updatePayload && undefined !== updatePayload[propKey]) {
        if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
          if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
        }
      } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
        if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
      } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }
    for (var propKey$2 in prevProps) undefined === nextProps[propKey$2] && (!(attributeConfig = validAttributes[propKey$2]) || updatePayload && undefined !== updatePayload[propKey$2] || (prevProp = prevProps[propKey$2], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey$2] = null, removedKeys || (removedKeys = {}), removedKeys[propKey$2] || (removedKeys[propKey$2] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    return updatePayload;
  }
  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }
  var isInsideEventHandler = false;
  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;
    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      isInsideEventHandler = false;
    }
  }
  var eventQueue = null;
  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
        dispatchInstances = e._dispatchInstances;
      if (isArrayImpl(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }
  function dispatchEvent(target, topLevelType, nativeEvent) {
    var eventTarget = null;
    if (null != target) {
      var stateNode = target.stateNode;
      null != stateNode && (eventTarget = stateNode.canonical);
    }
    batchedUpdates(function () {
      var event = {
        eventName: topLevelType,
        nativeEvent: nativeEvent
      };
      ReactNativePrivateInterface.RawEventEmitter.emit(topLevelType, event);
      ReactNativePrivateInterface.RawEventEmitter.emit("*", event);
      event = eventTarget;
      for (var events = null, legacyPlugins = plugins, i = 0; i < legacyPlugins.length; i++) {
        var possiblePlugin = legacyPlugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, event)) && (events = accumulateInto(events, possiblePlugin));
      }
      event = events;
      null !== event && (eventQueue = accumulateInto(eventQueue, event));
      event = eventQueue;
      eventQueue = null;
      if (event) {
        forEachAccumulated(event, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        if (hasRethrowError) throw event = rethrowError, hasRethrowError = false, rethrowError = null, event;
      }
    });
  }
  var scheduleCallback = Scheduler.unstable_scheduleCallback,
    cancelCallback = Scheduler.unstable_cancelCallback,
    shouldYield = Scheduler.unstable_shouldYield,
    requestPaint = Scheduler.unstable_requestPaint,
    now = Scheduler.unstable_now,
    ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    NormalPriority = Scheduler.unstable_NormalPriority,
    IdlePriority = Scheduler.unstable_IdlePriority,
    rendererID = null,
    injectedHook = null;
  function onCommitRoot(root) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
      injectedHook.onCommitFiberRoot(rendererID, root, undefined, 128 === (root.current.flags & 128));
    } catch (err) {}
  }
  var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
    log = Math.log,
    LN2 = Math.LN2;
  function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
  }
  var nextTransitionLane = 64,
    nextRetryLane = 4194304;
  function getHighestPriorityLanes(lanes) {
    switch (lanes & -lanes) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return lanes & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return lanes & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return lanes;
    }
  }
  function getNextLanes(root, wipLanes) {
    var pendingLanes = root.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0,
      suspendedLanes = root.suspendedLanes,
      pingedLanes = root.pingedLanes,
      nonIdlePendingLanes = pendingLanes & 268435455;
    if (0 !== nonIdlePendingLanes) {
      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
      0 !== nonIdleUnblockedLanes ? nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes && (nextLanes = getHighestPriorityLanes(pingedLanes)));
    } else nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes && (nextLanes = getHighestPriorityLanes(pingedLanes));
    if (0 === nextLanes) return 0;
    if (0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, pingedLanes = wipLanes & -wipLanes, suspendedLanes >= pingedLanes || 16 === suspendedLanes && 0 !== (pingedLanes & 4194240))) return wipLanes;
    0 !== (nextLanes & 4) && (nextLanes |= pendingLanes & 16);
    wipLanes = root.entangledLanes;
    if (0 !== wipLanes) for (root = root.entanglements, wipLanes &= nextLanes; 0 < wipLanes;) pendingLanes = 31 - clz32(wipLanes), suspendedLanes = 1 << pendingLanes, nextLanes |= root[pendingLanes], wipLanes &= ~suspendedLanes;
    return nextLanes;
  }
  function computeExpirationTime(lane, currentTime) {
    switch (lane) {
      case 1:
      case 2:
      case 4:
        return currentTime + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return currentTime + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function getLanesToRetrySynchronouslyOnError(root) {
    root = root.pendingLanes & -1073741825;
    return 0 !== root ? root : root & 1073741824 ? 1073741824 : 0;
  }
  function claimNextTransitionLane() {
    var lane = nextTransitionLane;
    nextTransitionLane <<= 1;
    0 === (nextTransitionLane & 4194240) && (nextTransitionLane = 64);
    return lane;
  }
  function createLaneMap(initial) {
    for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
    return laneMap;
  }
  function markRootUpdated(root, updateLane, eventTime) {
    root.pendingLanes |= updateLane;
    536870912 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0);
    root = root.eventTimes;
    updateLane = 31 - clz32(updateLane);
    root[updateLane] = eventTime;
  }
  function markRootFinished(root, remainingLanes) {
    var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
    root.pendingLanes = remainingLanes;
    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.mutableReadLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    remainingLanes = root.entanglements;
    var eventTimes = root.eventTimes;
    for (root = root.expirationTimes; 0 < noLongerPendingLanes;) {
      var index$7 = 31 - clz32(noLongerPendingLanes),
        lane = 1 << index$7;
      remainingLanes[index$7] = 0;
      eventTimes[index$7] = -1;
      root[index$7] = -1;
      noLongerPendingLanes &= ~lane;
    }
  }
  function markRootEntangled(root, entangledLanes) {
    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
    for (root = root.entanglements; rootEntangledLanes;) {
      var index$8 = 31 - clz32(rootEntangledLanes),
        lane = 1 << index$8;
      lane & entangledLanes | root[index$8] & entangledLanes && (root[index$8] |= entangledLanes);
      rootEntangledLanes &= ~lane;
    }
  }
  var currentUpdatePriority = 0;
  function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 1 < lanes ? 4 < lanes ? 0 !== (lanes & 268435455) ? 16 : 536870912 : 4 : 1;
  }
  function shim$1() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
  }
  var _nativeFabricUIManage = nativeFabricUIManager,
    createNode = _nativeFabricUIManage.createNode,
    cloneNode = _nativeFabricUIManage.cloneNode,
    cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren,
    cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps,
    cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps,
    createChildNodeSet = _nativeFabricUIManage.createChildSet,
    appendChildNode = _nativeFabricUIManage.appendChild,
    appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet,
    completeRoot = _nativeFabricUIManage.completeRoot,
    registerEventHandler = _nativeFabricUIManage.registerEventHandler,
    fabricMeasure = _nativeFabricUIManage.measure,
    fabricMeasureInWindow = _nativeFabricUIManage.measureInWindow,
    fabricMeasureLayout = _nativeFabricUIManage.measureLayout,
    FabricDiscretePriority = _nativeFabricUIManage.unstable_DiscreteEventPriority,
    fabricGetCurrentEventPriority = _nativeFabricUIManage.unstable_getCurrentEventPriority,
    _setNativeProps = _nativeFabricUIManage.setNativeProps,
    getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
    nextReactTag = 2;
  registerEventHandler && registerEventHandler(dispatchEvent);
  var ReactFabricHostComponent = function () {
    function ReactFabricHostComponent(tag, viewConfig, props, internalInstanceHandle) {
      this._nativeTag = tag;
      this.viewConfig = viewConfig;
      this.currentProps = props;
      this._internalInstanceHandle = internalInstanceHandle;
    }
    var _proto = ReactFabricHostComponent.prototype;
    _proto.blur = function () {
      ReactNativePrivateInterface.TextInputState.blurTextInput(this);
    };
    _proto.focus = function () {
      ReactNativePrivateInterface.TextInputState.focusTextInput(this);
    };
    _proto.measure = function (callback) {
      var stateNode = this._internalInstanceHandle.stateNode;
      null != stateNode && fabricMeasure(stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };
    _proto.measureInWindow = function (callback) {
      var stateNode = this._internalInstanceHandle.stateNode;
      null != stateNode && fabricMeasureInWindow(stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };
    _proto.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      if ("number" !== typeof relativeToNativeNode && relativeToNativeNode instanceof ReactFabricHostComponent) {
        var toStateNode = this._internalInstanceHandle.stateNode;
        relativeToNativeNode = relativeToNativeNode._internalInstanceHandle.stateNode;
        null != toStateNode && null != relativeToNativeNode && fabricMeasureLayout(toStateNode.node, relativeToNativeNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
      }
    };
    _proto.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
      var stateNode = this._internalInstanceHandle.stateNode;
      null != stateNode && null != nativeProps && _setNativeProps(stateNode.node, nativeProps);
    };
    _proto.addEventListener_unstable = function (eventType, listener, options) {
      if ("string" !== typeof eventType) throw Error("addEventListener_unstable eventType must be a string");
      if ("function" !== typeof listener) throw Error("addEventListener_unstable listener must be a function");
      var optionsObj = "object" === typeof options && null !== options ? options : {};
      options = ("boolean" === typeof options ? options : optionsObj.capture) || false;
      var once = optionsObj.once || false;
      optionsObj = optionsObj.passive || false;
      var eventListeners = this._eventListeners || {};
      null == this._eventListeners && (this._eventListeners = eventListeners);
      var namedEventListeners = eventListeners[eventType] || [];
      null == eventListeners[eventType] && (eventListeners[eventType] = namedEventListeners);
      namedEventListeners.push({
        listener: listener,
        invalidated: false,
        options: {
          capture: options,
          once: once,
          passive: optionsObj,
          signal: null
        }
      });
    };
    _proto.removeEventListener_unstable = function (eventType, listener, options) {
      var optionsObj = "object" === typeof options && null !== options ? options : {},
        capture = ("boolean" === typeof options ? options : optionsObj.capture) || false;
      (options = this._eventListeners) && (optionsObj = options[eventType]) && (options[eventType] = optionsObj.filter(function (listenerObj) {
        return !(listenerObj.listener === listener && listenerObj.options.capture === capture);
      }));
    };
    return ReactFabricHostComponent;
  }();
  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
      node: createNode(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      }, internalInstanceHandle)
    };
  }
  var scheduleTimeout = setTimeout,
    cancelTimeout = clearTimeout;
  function cloneHiddenInstance(instance) {
    var node = instance.node;
    var JSCompiler_inline_result = diffProperties(null, emptyObject, {
      style: {
        display: "none"
      }
    }, instance.canonical.viewConfig.validAttributes);
    return {
      node: cloneNodeWithNewProps(node, JSCompiler_inline_result),
      canonical: instance.canonical
    };
  }
  function describeComponentFrame(name, source, ownerName) {
    source = "";
    ownerName && (source = " (created by " + ownerName + ")");
    return "\n    in " + (name || "Unknown") + source;
  }
  function describeFunctionComponentFrame(fn, source) {
    return fn ? describeComponentFrame(fn.displayName || fn.name || null, source, null) : "";
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty,
    valueStack = [],
    index = -1;
  function createCursor(defaultValue) {
    return {
      current: defaultValue
    };
  }
  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }
  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }
  var emptyContextObject = {},
    contextStackCursor = createCursor(emptyContextObject),
    didPerformWorkStackCursor = createCursor(false),
    previousContext = emptyContextObject;
  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
      key;
    for (key in contextTypes) context[key] = unmaskedContext[key];
    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }
  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }
  function popContext() {
    pop(didPerformWorkStackCursor);
    pop(contextStackCursor);
  }
  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context);
    push(didPerformWorkStackCursor, didChange);
  }
  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    type = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();
    for (var contextKey in instance) if (!(contextKey in type)) throw Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
    return assign({}, parentContext, instance);
  }
  function pushContextProvider(workInProgress) {
    workInProgress = (workInProgress = workInProgress.stateNode) && workInProgress.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current);
    return true;
  }
  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
    didChange ? (workInProgress = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = workInProgress, pop(didPerformWorkStackCursor), pop(contextStackCursor), push(contextStackCursor, workInProgress)) : pop(didPerformWorkStackCursor);
    push(didPerformWorkStackCursor, didChange);
  }
  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var objectIs = "function" === typeof Object.is ? Object.is : is,
    syncQueue = null,
    includesLegacySyncCallbacks = false,
    isFlushingSyncQueue = false;
  function flushSyncCallbacks() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = true;
      var i = 0,
        previousUpdatePriority = currentUpdatePriority;
      try {
        var queue = syncQueue;
        for (currentUpdatePriority = 1; i < queue.length; i++) {
          var callback = queue[i];
          do callback = callback(true); while (null !== callback);
        }
        syncQueue = null;
        includesLegacySyncCallbacks = false;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), scheduleCallback(ImmediatePriority, flushSyncCallbacks), error;
      } finally {
        currentUpdatePriority = previousUpdatePriority, isFlushingSyncQueue = false;
      }
    }
    return null;
  }
  var forkStack = [],
    forkStackIndex = 0,
    treeForkProvider = null,
    idStack = [],
    idStackIndex = 0,
    treeContextProvider = null;
  function popTreeContext(workInProgress) {
    for (; workInProgress === treeForkProvider;) treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, --forkStackIndex, forkStack[forkStackIndex] = null;
    for (; workInProgress === treeContextProvider;) treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, --idStackIndex, idStack[idStackIndex] = null, --idStackIndex, idStack[idStackIndex] = null;
  }
  var hydrationErrors = null,
    ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
      keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for (keysB = 0; keysB < keysA.length; keysB++) {
      var currentKey = keysA[keysB];
      if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
    }
    return true;
  }
  function describeFiber(fiber) {
    switch (fiber.tag) {
      case 5:
        return describeComponentFrame(fiber.type, null, null);
      case 16:
        return describeComponentFrame("Lazy", null, null);
      case 13:
        return describeComponentFrame("Suspense", null, null);
      case 19:
        return describeComponentFrame("SuspenseList", null, null);
      case 0:
      case 2:
      case 15:
        return describeFunctionComponentFrame(fiber.type, null);
      case 11:
        return describeFunctionComponentFrame(fiber.type.render, null);
      case 1:
        return fiber = describeFunctionComponentFrame(fiber.type, null), fiber;
      default:
        return "";
    }
  }
  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = assign({}, baseProps);
      Component = Component.defaultProps;
      for (var propName in Component) undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      return baseProps;
    }
    return baseProps;
  }
  var valueCursor = createCursor(null),
    currentlyRenderingFiber = null,
    lastContextDependency = null,
    lastFullyObservedContext = null;
  function resetContextDependencies() {
    lastFullyObservedContext = lastContextDependency = currentlyRenderingFiber = null;
  }
  function popProvider(context) {
    var currentValue = valueCursor.current;
    pop(valueCursor);
    context._currentValue2 = currentValue;
  }
  function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
      if (parent === propagationRoot) break;
      parent = parent.return;
    }
  }
  function prepareToReadContext(workInProgress, renderLanes) {
    currentlyRenderingFiber = workInProgress;
    lastFullyObservedContext = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (0 !== (workInProgress.lanes & renderLanes) && (didReceiveUpdate = true), workInProgress.firstContext = null);
  }
  function readContext(context) {
    var value = context._currentValue2;
    if (lastFullyObservedContext !== context) if (context = {
      context: context,
      memoizedValue: value,
      next: null
    }, null === lastContextDependency) {
      if (null === currentlyRenderingFiber) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      lastContextDependency = context;
      currentlyRenderingFiber.dependencies = {
        lanes: 0,
        firstContext: context
      };
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
  }
  var concurrentQueues = null;
  function pushConcurrentUpdateQueue(queue) {
    null === concurrentQueues ? concurrentQueues = [queue] : concurrentQueues.push(queue);
  }
  function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    var interleaved = queue.interleaved;
    null === interleaved ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update);
    queue.interleaved = update;
    return markUpdateLaneFromFiberToRoot(fiber, lane);
  }
  function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    alternate = sourceFiber;
    for (sourceFiber = sourceFiber.return; null !== sourceFiber;) sourceFiber.childLanes |= lane, alternate = sourceFiber.alternate, null !== alternate && (alternate.childLanes |= lane), alternate = sourceFiber, sourceFiber = sourceFiber.return;
    return 3 === alternate.tag ? alternate.stateNode : null;
  }
  var hasForceUpdate = false;
  function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
      baseState: fiber.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: {
        pending: null,
        interleaved: null,
        lanes: 0
      },
      effects: null
    };
  }
  function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
      baseState: current.baseState,
      firstBaseUpdate: current.firstBaseUpdate,
      lastBaseUpdate: current.lastBaseUpdate,
      shared: current.shared,
      effects: current.effects
    });
  }
  function createUpdate(eventTime, lane) {
    return {
      eventTime: eventTime,
      lane: lane,
      tag: 0,
      payload: null,
      callback: null,
      next: null
    };
  }
  function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
      var pending = updateQueue.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      updateQueue.pending = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    pending = updateQueue.interleaved;
    null === pending ? (update.next = update, pushConcurrentUpdateQueue(updateQueue)) : (update.next = pending.next, pending.next = update);
    updateQueue.interleaved = update;
    return markUpdateLaneFromFiberToRoot(fiber, lane);
  }
  function entangleTransitions(root, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194240))) {
      var queueLanes = fiber.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      fiber.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    var queue = workInProgress.updateQueue,
      current = workInProgress.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
      var newFirst = null,
        newLast = null;
      queue = queue.firstBaseUpdate;
      if (null !== queue) {
        do {
          var clone = {
            eventTime: queue.eventTime,
            lane: queue.lane,
            tag: queue.tag,
            payload: queue.payload,
            callback: queue.callback,
            next: null
          };
          null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
          queue = queue.next;
        } while (null !== queue);
        null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
      } else newFirst = newLast = capturedUpdate;
      queue = {
        baseState: current.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: current.shared,
        effects: current.effects
      };
      workInProgress.updateQueue = queue;
      return;
    }
    workInProgress = queue.lastBaseUpdate;
    null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
  }
  function processUpdateQueue(workInProgress$jscomp$0, props, instance, renderLanes) {
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = false;
    var firstBaseUpdate = queue.firstBaseUpdate,
      lastBaseUpdate = queue.lastBaseUpdate,
      pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
      queue.shared.pending = null;
      var lastPendingUpdate = pendingQueue,
        firstPendingUpdate = lastPendingUpdate.next;
      lastPendingUpdate.next = null;
      null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
      lastBaseUpdate = lastPendingUpdate;
      var current = workInProgress$jscomp$0.alternate;
      null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
      var newState = queue.baseState;
      lastBaseUpdate = 0;
      current = firstPendingUpdate = lastPendingUpdate = null;
      pendingQueue = firstBaseUpdate;
      do {
        var updateLane = pendingQueue.lane,
          updateEventTime = pendingQueue.eventTime;
        if ((renderLanes & updateLane) === updateLane) {
          null !== current && (current = current.next = {
            eventTime: updateEventTime,
            lane: 0,
            tag: pendingQueue.tag,
            payload: pendingQueue.payload,
            callback: pendingQueue.callback,
            next: null
          });
          a: {
            var workInProgress = workInProgress$jscomp$0,
              update = pendingQueue;
            updateLane = props;
            updateEventTime = instance;
            switch (update.tag) {
              case 1:
                workInProgress = update.payload;
                if ("function" === typeof workInProgress) {
                  newState = workInProgress.call(updateEventTime, newState, updateLane);
                  break a;
                }
                newState = workInProgress;
                break a;
              case 3:
                workInProgress.flags = workInProgress.flags & -65537 | 128;
              case 0:
                workInProgress = update.payload;
                updateLane = "function" === typeof workInProgress ? workInProgress.call(updateEventTime, newState, updateLane) : workInProgress;
                if (null === updateLane || undefined === updateLane) break a;
                newState = assign({}, newState, updateLane);
                break a;
              case 2:
                hasForceUpdate = true;
            }
          }
          null !== pendingQueue.callback && 0 !== pendingQueue.lane && (workInProgress$jscomp$0.flags |= 64, updateLane = queue.effects, null === updateLane ? queue.effects = [pendingQueue] : updateLane.push(pendingQueue));
        } else updateEventTime = {
          eventTime: updateEventTime,
          lane: updateLane,
          tag: pendingQueue.tag,
          payload: pendingQueue.payload,
          callback: pendingQueue.callback,
          next: null
        }, null === current ? (firstPendingUpdate = current = updateEventTime, lastPendingUpdate = newState) : current = current.next = updateEventTime, lastBaseUpdate |= updateLane;
        pendingQueue = pendingQueue.next;
        if (null === pendingQueue) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;else updateLane = pendingQueue, pendingQueue = updateLane.next, updateLane.next = null, queue.lastBaseUpdate = updateLane, queue.shared.pending = null;
      } while (1);
      null === current && (lastPendingUpdate = newState);
      queue.baseState = lastPendingUpdate;
      queue.firstBaseUpdate = firstPendingUpdate;
      queue.lastBaseUpdate = current;
      props = queue.shared.interleaved;
      if (null !== props) {
        queue = props;
        do lastBaseUpdate |= queue.lane, queue = queue.next; while (queue !== props);
      } else null === firstBaseUpdate && (queue.shared.lanes = 0);
      workInProgressRootSkippedLanes |= lastBaseUpdate;
      workInProgress$jscomp$0.lanes = lastBaseUpdate;
      workInProgress$jscomp$0.memoizedState = newState;
    }
  }
  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    finishedWork = finishedQueue.effects;
    finishedQueue.effects = null;
    if (null !== finishedWork) for (finishedQueue = 0; finishedQueue < finishedWork.length; finishedQueue++) {
      var effect = finishedWork[finishedQueue],
        callback = effect.callback;
      if (null !== callback) {
        effect.callback = null;
        if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(instance);
      }
    }
  }
  var emptyRefsObject = new React.Component().refs;
  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
  }
  var classComponentUpdater = {
    isMounted: function (component) {
      return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : false;
    },
    enqueueSetState: function (inst, payload, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane, eventTime), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function (inst, payload, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.tag = 1;
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane, eventTime), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function (inst, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.tag = 2;
      undefined !== callback && null !== callback && (update.callback = callback);
      callback = enqueueUpdate(inst, update, lane);
      null !== callback && (scheduleUpdateOnFiber(callback, inst, lane, eventTime), entangleTransitions(callback, inst, lane));
    }
  };
  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }
  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
      unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternals = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }
  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
  function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderLanes), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4);
  }
  function coerceRef(returnFiber, current, element) {
    returnFiber = element.ref;
    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        if (element) {
          if (1 !== element.tag) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://react.dev/link/strict-mode-string-ref");
          var inst = element.stateNode;
        }
        if (!inst) throw Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue.");
        var resolvedInst = inst,
          stringRef = "" + returnFiber;
        if (null !== current && null !== current.ref && "function" === typeof current.ref && current.ref._stringRef === stringRef) return current.ref;
        current = function (value) {
          var refs = resolvedInst.refs;
          refs === emptyRefsObject && (refs = resolvedInst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };
        current._stringRef = stringRef;
        return current;
      }
      if ("string" !== typeof returnFiber) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
      if (!element._owner) throw Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://react.dev/link/refs-must-have-owner for more information.");
    }
    return returnFiber;
  }
  function throwOnInvalidObjectType(returnFiber, newChild) {
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
  }
  function resolveLazy(lazyType) {
    var init = lazyType._init;
    return init(lazyType._payload);
  }
  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var deletions = returnFiber.deletions;
        null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
      }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;
      for (; null !== currentFirstChild;) deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return null;
    }
    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return returnFiber;
    }
    function useFiber(fiber, pendingProps) {
      fiber = createWorkInProgress(fiber, pendingProps);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 2, lastPlacedIndex) : newIndex;
      newFiber.flags |= 2;
      return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 2);
      return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, textContent);
      current.return = returnFiber;
      return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
      var elementType = element.type;
      if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
      if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) return lanes = useFiber(current, element.props), lanes.ref = coerceRef(returnFiber, current, element), lanes.return = returnFiber, lanes;
      lanes = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
      lanes.ref = coerceRef(returnFiber, current, element);
      lanes.return = returnFiber;
      return lanes;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, portal.children || []);
      current.return = returnFiber;
      return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
      if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
      current = useFiber(current, fragment);
      current.return = returnFiber;
      return current;
    }
    function createChild(returnFiber, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), lanes.ref = coerceRef(returnFiber, null, newChild), lanes.return = returnFiber, lanes;
          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            return createChild(returnFiber, init(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_LAZY_TYPE:
            return key = newChild._init, updateSlot(returnFiber, oldFiber, key(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            return updateFromMap(existingChildren, returnFiber, newIdx, init(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        return resultingFirstChild;
      }
      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw Error("An iterable object provided no iterator.");
      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;
      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        return iteratorFn;
      }
      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }
    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            a: {
              for (var key = newChild.key, child = currentFirstChild; null !== child;) {
                if (child.key === key) {
                  key = newChild.type;
                  if (key === REACT_FRAGMENT_TYPE) {
                    if (7 === child.tag) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      currentFirstChild = useFiber(child, newChild.props.children);
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    }
                  } else if (child.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    currentFirstChild = useFiber(child, newChild.props);
                    currentFirstChild.ref = coerceRef(returnFiber, child, newChild);
                    currentFirstChild.return = returnFiber;
                    returnFiber = currentFirstChild;
                    break a;
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
              }
              newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), lanes.ref = coerceRef(returnFiber, currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes);
            }
            return placeSingleChild(returnFiber);
          case REACT_PORTAL_TYPE:
            a: {
              for (child = newChild.key; null !== currentFirstChild;) {
                if (currentFirstChild.key === child) {
                  if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    currentFirstChild = useFiber(currentFirstChild, newChild.children || []);
                    currentFirstChild.return = returnFiber;
                    returnFiber = currentFirstChild;
                    break a;
                  } else {
                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    break;
                  }
                } else deleteChild(returnFiber, currentFirstChild);
                currentFirstChild = currentFirstChild.sibling;
              }
              currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              currentFirstChild.return = returnFiber;
              returnFiber = currentFirstChild;
            }
            return placeSingleChild(returnFiber);
          case REACT_LAZY_TYPE:
            return child = newChild._init, reconcileChildFibers(returnFiber, currentFirstChild, child(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
        if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, lanes), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return reconcileChildFibers;
  }
  var reconcileChildFibers = ChildReconciler(true),
    mountChildFibers = ChildReconciler(false),
    NO_CONTEXT = {},
    contextStackCursor$1 = createCursor(NO_CONTEXT),
    contextFiberStackCursor = createCursor(NO_CONTEXT),
    rootInstanceStackCursor = createCursor(NO_CONTEXT);
  function requiredContext(c) {
    if (c === NO_CONTEXT) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    return c;
  }
  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor$1, NO_CONTEXT);
    pop(contextStackCursor$1);
    push(contextStackCursor$1, {
      isInAParentText: false
    });
  }
  function popHostContainer() {
    pop(contextStackCursor$1);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
  }
  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var JSCompiler_inline_result = fiber.type;
    JSCompiler_inline_result = "AndroidTextInput" === JSCompiler_inline_result || "RCTMultilineTextInputView" === JSCompiler_inline_result || "RCTSinglelineTextInputView" === JSCompiler_inline_result || "RCTText" === JSCompiler_inline_result || "RCTVirtualText" === JSCompiler_inline_result;
    JSCompiler_inline_result = context.isInAParentText !== JSCompiler_inline_result ? {
      isInAParentText: JSCompiler_inline_result
    } : context;
    context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor$1, JSCompiler_inline_result));
  }
  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1), pop(contextFiberStackCursor));
  }
  var suspenseStackCursor = createCursor(0);
  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        var state = node.memoizedState;
        if (null !== state && (null === state.dehydrated || shim$1() || shim$1())) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.flags & 128)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === row) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    return null;
  }
  var workInProgressSources = [];
  function resetWorkInProgressVersions() {
    for (var i = 0; i < workInProgressSources.length; i++) workInProgressSources[i]._workInProgressVersionSecondary = null;
    workInProgressSources.length = 0;
  }
  var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig,
    renderLanes = 0,
    currentlyRenderingFiber$1 = null,
    currentHook = null,
    workInProgressHook = null,
    didScheduleRenderPhaseUpdate = false,
    didScheduleRenderPhaseUpdateDuringThisPass = false,
    globalClientIdCounter = 0;
  function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
  }
  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;
    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) if (!objectIs(nextDeps[i], prevDeps[i])) return false;
    return true;
  }
  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = 0;
    ReactCurrentDispatcher$1.current = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    current = Component(props, secondArg);
    if (didScheduleRenderPhaseUpdateDuringThisPass) {
      nextRenderLanes = 0;
      do {
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        if (25 <= nextRenderLanes) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        nextRenderLanes += 1;
        workInProgressHook = currentHook = null;
        workInProgress.updateQueue = null;
        ReactCurrentDispatcher$1.current = HooksDispatcherOnRerender;
        current = Component(props, secondArg);
      } while (didScheduleRenderPhaseUpdateDuringThisPass);
    }
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    workInProgress = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = false;
    if (workInProgress) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    return current;
  }
  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }
  function updateWorkInProgressHook() {
    if (null === currentHook) {
      var nextCurrentHook = currentlyRenderingFiber$1.alternate;
      nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;else {
      if (null === nextCurrentHook) throw Error("Rendered more hooks than during the previous render.");
      currentHook = nextCurrentHook;
      nextCurrentHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };
      null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
  }
  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }
  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
      queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var current = currentHook,
      baseQueue = current.baseQueue,
      pendingQueue = queue.pending;
    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }
      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }
    if (null !== baseQueue) {
      pendingQueue = baseQueue.next;
      current = current.baseState;
      var newBaseQueueFirst = baseFirst = null,
        newBaseQueueLast = null,
        update = pendingQueue;
      do {
        var updateLane = update.lane;
        if ((renderLanes & updateLane) === updateLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
          lane: 0,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        }), current = update.hasEagerState ? update.eagerState : reducer(current, update.action);else {
          var clone = {
            lane: updateLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          };
          null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = clone, baseFirst = current) : newBaseQueueLast = newBaseQueueLast.next = clone;
          currentlyRenderingFiber$1.lanes |= updateLane;
          workInProgressRootSkippedLanes |= updateLane;
        }
        update = update.next;
      } while (null !== update && update !== pendingQueue);
      null === newBaseQueueLast ? baseFirst = current : newBaseQueueLast.next = newBaseQueueFirst;
      objectIs(current, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = current;
      hook.baseState = baseFirst;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = current;
    }
    reducer = queue.interleaved;
    if (null !== reducer) {
      baseQueue = reducer;
      do pendingQueue = baseQueue.lane, currentlyRenderingFiber$1.lanes |= pendingQueue, workInProgressRootSkippedLanes |= pendingQueue, baseQueue = baseQueue.next; while (baseQueue !== reducer);
    } else null === baseQueue && (queue.lanes = 0);
    return [hook.memoizedState, queue.dispatch];
  }
  function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(),
      queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch,
      lastRenderPhaseUpdate = queue.pending,
      newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
      queue.pending = null;
      var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      do newState = reducer(newState, update.action), update = update.next; while (update !== lastRenderPhaseUpdate);
      objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      null === hook.baseQueue && (hook.baseState = newState);
      queue.lastRenderedState = newState;
    }
    return [newState, dispatch];
  }
  function updateMutableSource() {}
  function updateSyncExternalStore(subscribe, getSnapshot) {
    var fiber = currentlyRenderingFiber$1,
      hook = updateWorkInProgressHook(),
      nextSnapshot = getSnapshot(),
      snapshotChanged = !objectIs(hook.memoizedState, nextSnapshot);
    snapshotChanged && (hook.memoizedState = nextSnapshot, didReceiveUpdate = true);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [subscribe]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
      fiber.flags |= 2048;
      pushEffect(9, updateStoreInstance.bind(null, fiber, hook, nextSnapshot, getSnapshot), undefined, null);
      if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
      0 !== (renderLanes & 30) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
    return nextSnapshot;
  }
  function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = {
      getSnapshot: getSnapshot,
      value: renderedSnapshot
    };
    getSnapshot = currentlyRenderingFiber$1.updateQueue;
    null === getSnapshot ? (getSnapshot = {
      lastEffect: null,
      stores: null
    }, currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
  }
  function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
  }
  function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function () {
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
  }
  function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
      var nextValue = latestGetSnapshot();
      return !objectIs(inst, nextValue);
    } catch (error) {
      return true;
    }
  }
  function forceStoreRerender(fiber) {
    var root = markUpdateLaneFromFiberToRoot(fiber, 1);
    null !== root && scheduleUpdateOnFiber(root, fiber, 1, -1);
  }
  function mountState(initialState) {
    var hook = mountWorkInProgressHook();
    "function" === typeof initialState && (initialState = initialState());
    hook.memoizedState = hook.baseState = initialState;
    initialState = {
      pending: null,
      interleaved: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    hook.queue = initialState;
    initialState = initialState.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, initialState);
    return [hook.memoizedState, initialState];
  }
  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create ? (create = {
      lastEffect: null,
      stores: null
    }, currentlyRenderingFiber$1.updateQueue = create, create.lastEffect = tag.next = tag) : (destroy = create.lastEffect, null === destroy ? create.lastEffect = tag.next = tag : (deps = destroy.next, destroy.next = tag, tag.next = deps, create.lastEffect = tag));
    return tag;
  }
  function updateRef() {
    return updateWorkInProgressHook().memoizedState;
  }
  function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, undefined, undefined === deps ? null : deps);
  }
  function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var destroy = undefined;
    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;
      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        hook.memoizedState = pushEffect(hookFlags, create, destroy, deps);
        return;
      }
    }
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, destroy, deps);
  }
  function mountEffect(create, deps) {
    return mountEffectImpl(8390656, 8, create, deps);
  }
  function updateEffect(create, deps) {
    return updateEffectImpl(2048, 8, create, deps);
  }
  function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
  }
  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
  }
  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }
  function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
    return updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
  }
  function mountDebugValue() {}
  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [callback, deps];
    return callback;
  }
  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    nextCreate = nextCreate();
    hook.memoizedState = [nextCreate, deps];
    return nextCreate;
  }
  function updateDeferredValueImpl(hook, prevValue, value) {
    if (0 === (renderLanes & 21)) return hook.baseState && (hook.baseState = false, didReceiveUpdate = true), hook.memoizedState = value;
    objectIs(value, prevValue) || (value = claimNextTransitionLane(), currentlyRenderingFiber$1.lanes |= value, workInProgressRootSkippedLanes |= value, hook.baseState = true);
    return prevValue;
  }
  function startTransition(setPending, callback) {
    var previousPriority = currentUpdatePriority;
    currentUpdatePriority = 0 !== previousPriority && 4 > previousPriority ? previousPriority : 4;
    setPending(true);
    var prevTransition = ReactCurrentBatchConfig$1.transition;
    ReactCurrentBatchConfig$1.transition = {};
    try {
      setPending(false), callback();
    } finally {
      currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$1.transition = prevTransition;
    }
  }
  function updateId() {
    return updateWorkInProgressHook().memoizedState;
  }
  function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    action = {
      lane: lane,
      action: action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, action);else if (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action) {
      var eventTime = requestEventTime();
      scheduleUpdateOnFiber(action, fiber, lane, eventTime);
      entangleTransitionUpdate(action, queue, lane);
    }
  }
  function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane(fiber),
      update = {
        lane: lane,
        action: action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);else {
      var alternate = fiber.alternate;
      if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
          eagerState = alternate(currentState, action);
        update.hasEagerState = true;
        update.eagerState = eagerState;
        if (objectIs(eagerState, currentState)) {
          var interleaved = queue.interleaved;
          null === interleaved ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update);
          queue.interleaved = update;
          return;
        }
      } catch (error) {} finally {}
      action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
      null !== action && (update = requestEventTime(), scheduleUpdateOnFiber(action, fiber, lane, update), entangleTransitionUpdate(action, queue, lane));
    }
  }
  function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
  }
  function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
  }
  function entangleTransitionUpdate(root, queue, lane) {
    if (0 !== (lane & 4194240)) {
      var queueLanes = queue.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      queue.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  var ContextOnlyDispatcher = {
      readContext: readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnMount = {
      readContext: readContext,
      useCallback: function (callback, deps) {
        mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
        return callback;
      },
      useContext: readContext,
      useEffect: mountEffect,
      useImperativeHandle: function (ref, create, deps) {
        deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
        return mountEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
      },
      useLayoutEffect: function (create, deps) {
        return mountEffectImpl(4, 4, create, deps);
      },
      useInsertionEffect: function (create, deps) {
        return mountEffectImpl(4, 2, create, deps);
      },
      useMemo: function (nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = undefined === deps ? null : deps;
        nextCreate = nextCreate();
        hook.memoizedState = [nextCreate, deps];
        return nextCreate;
      },
      useReducer: function (reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        initialArg = undefined !== init ? init(initialArg) : initialArg;
        hook.memoizedState = hook.baseState = initialArg;
        reducer = {
          pending: null,
          interleaved: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialArg
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
        return [hook.memoizedState, reducer];
      },
      useRef: function (initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = {
          current: initialValue
        };
        return hook.memoizedState = initialValue;
      },
      useState: mountState,
      useDebugValue: mountDebugValue,
      useDeferredValue: function (value) {
        return mountWorkInProgressHook().memoizedState = value;
      },
      useTransition: function () {
        var _mountState = mountState(false),
          isPending = _mountState[0];
        _mountState = startTransition.bind(null, _mountState[1]);
        mountWorkInProgressHook().memoizedState = _mountState;
        return [isPending, _mountState];
      },
      useMutableSource: function () {},
      useSyncExternalStore: function (subscribe, getSnapshot) {
        var fiber = currentlyRenderingFiber$1,
          hook = mountWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (renderLanes & 30) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot: getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
      },
      useId: function () {
        var hook = mountWorkInProgressHook(),
          identifierPrefix = workInProgressRoot.identifierPrefix,
          globalClientId = globalClientIdCounter++;
        identifierPrefix = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        return hook.memoizedState = identifierPrefix;
      },
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnUpdate = {
      readContext: readContext,
      useCallback: updateCallback,
      useContext: readContext,
      useEffect: updateEffect,
      useImperativeHandle: updateImperativeHandle,
      useInsertionEffect: updateInsertionEffect,
      useLayoutEffect: updateLayoutEffect,
      useMemo: updateMemo,
      useReducer: updateReducer,
      useRef: updateRef,
      useState: function () {
        return updateReducer(basicStateReducer);
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function (value) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(hook, currentHook.memoizedState, value);
      },
      useTransition: function () {
        var isPending = updateReducer(basicStateReducer)[0],
          start = updateWorkInProgressHook().memoizedState;
        return [isPending, start];
      },
      useMutableSource: updateMutableSource,
      useSyncExternalStore: updateSyncExternalStore,
      useId: updateId,
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnRerender = {
      readContext: readContext,
      useCallback: updateCallback,
      useContext: readContext,
      useEffect: updateEffect,
      useImperativeHandle: updateImperativeHandle,
      useInsertionEffect: updateInsertionEffect,
      useLayoutEffect: updateLayoutEffect,
      useMemo: updateMemo,
      useReducer: rerenderReducer,
      useRef: updateRef,
      useState: function () {
        return rerenderReducer(basicStateReducer);
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function (value) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? hook.memoizedState = value : updateDeferredValueImpl(hook, currentHook.memoizedState, value);
      },
      useTransition: function () {
        var isPending = rerenderReducer(basicStateReducer)[0],
          start = updateWorkInProgressHook().memoizedState;
        return [isPending, start];
      },
      useMutableSource: updateMutableSource,
      useSyncExternalStore: updateSyncExternalStore,
      useId: updateId,
      unstable_isNewReconciler: false
    };
  function createCapturedValueAtFiber(value, source) {
    try {
      var info = "",
        node = source;
      do info += describeFiber(node), node = node.return; while (node);
      var JSCompiler_inline_result = info;
    } catch (x) {
      JSCompiler_inline_result = "\nError generating stack: " + x.message + "\n" + x.stack;
    }
    return {
      value: value,
      source: source,
      stack: JSCompiler_inline_result,
      digest: null
    };
  }
  function createCapturedValue(value, digest, stack) {
    return {
      value: value,
      source: null,
      stack: null != stack ? stack : null,
      digest: null != digest ? digest : null
    };
  }
  if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
  function logCapturedError(boundary, errorInfo) {
    try {
      false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
        componentStack: null !== errorInfo.stack ? errorInfo.stack : "",
        error: errorInfo.value,
        errorBoundary: null !== boundary && 1 === boundary.tag ? boundary.stateNode : null
      }) && console.error(errorInfo.value);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;
  function createRootErrorUpdate(fiber, errorInfo, lane) {
    lane = createUpdate(-1, lane);
    lane.tag = 3;
    lane.payload = {
      element: null
    };
    var error = errorInfo.value;
    lane.callback = function () {
      hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error);
      logCapturedError(fiber, errorInfo);
    };
    return lane;
  }
  function createClassErrorUpdate(fiber, errorInfo, lane) {
    lane = createUpdate(-1, lane);
    lane.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;
      lane.payload = function () {
        return getDerivedStateFromError(error);
      };
      lane.callback = function () {
        logCapturedError(fiber, errorInfo);
      };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (lane.callback = function () {
      logCapturedError(fiber, errorInfo);
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return lane;
  }
  function attachPingListener(root, wakeable, lanes) {
    var pingCache = root.pingCache;
    if (null === pingCache) {
      pingCache = root.pingCache = new PossiblyWeakMap();
      var threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    } else threadIDs = pingCache.get(wakeable), undefined === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (threadIDs.add(lanes), root = pingSuspendedRoot.bind(null, root, wakeable, lanes), wakeable.then(root, root));
  }
  var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,
    didReceiveUpdate = false;
  function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
  function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderLanes);
    nextProps = renderWithHooks(current, workInProgress, Component, nextProps, ref, renderLanes);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.flags &= -2053, current.lanes &= ~renderLanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
  }
  function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null === current) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare && undefined === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes);
      current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return workInProgress.child = current;
    }
    type = current.child;
    if (0 === (current.lanes & renderLanes)) {
      var prevProps = type.memoizedProps;
      Component = Component.compare;
      Component = null !== Component ? Component : shallowEqual;
      if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    workInProgress.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
  }
  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null !== current) {
      var prevProps = current.memoizedProps;
      if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref) if (didReceiveUpdate = false, workInProgress.pendingProps = nextProps = prevProps, 0 !== (current.lanes & renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = true);else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
  }
  function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      nextChildren = nextProps.children,
      prevState = null !== current ? current.memoizedState : null;
    if ("hidden" === nextProps.mode) {
      if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = {
        baseLanes: 0,
        cachePool: null,
        transitions: null
      }, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= renderLanes;else {
        if (0 === (renderLanes & 1073741824)) return current = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, workInProgress.lanes = workInProgress.childLanes = 1073741824, workInProgress.memoizedState = {
          baseLanes: current,
          cachePool: null,
          transitions: null
        }, workInProgress.updateQueue = null, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= current, null;
        workInProgress.memoizedState = {
          baseLanes: 0,
          cachePool: null,
          transitions: null
        };
        nextProps = null !== prevState ? prevState.baseLanes : renderLanes;
        push(subtreeRenderLanesCursor, subtreeRenderLanes);
        subtreeRenderLanes |= nextProps;
      }
    } else null !== prevState ? (nextProps = prevState.baseLanes | renderLanes, workInProgress.memoizedState = null) : nextProps = renderLanes, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= nextProps;
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }
  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current && null !== ref || null !== current && current.ref !== ref) workInProgress.flags |= 512;
  }
  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderLanes);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.flags &= -2053, current.lanes &= ~renderLanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, Component, renderLanes);
    return workInProgress.child;
  }
  function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;
    prepareToReadContext(workInProgress, renderLanes);
    if (null === workInProgress.stateNode) resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), nextProps = true;else if (null === current) {
      var instance = workInProgress.stateNode,
        oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
        contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
        hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      oldContext = workInProgress.memoizedState;
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4), nextProps = false);
    } else {
      instance = workInProgress.stateNode;
      cloneUpdateQueue(current, workInProgress);
      oldProps = workInProgress.memoizedProps;
      contextType = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
      instance.props = contextType;
      hasNewLifecycles = workInProgress.pendingProps;
      oldState = instance.context;
      oldContext = Component.contextType;
      "object" === typeof oldContext && null !== oldContext ? oldContext = readContext(oldContext) : (oldContext = isContextProvider(Component) ? previousContext : contextStackCursor.current, oldContext = getMaskedContext(workInProgress, oldContext));
      var getDerivedStateFromProps$jscomp$0 = Component.getDerivedStateFromProps;
      (getDerivedStateFromProps = "function" === typeof getDerivedStateFromProps$jscomp$0 || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== hasNewLifecycles || oldState !== oldContext) && callComponentWillReceiveProps(workInProgress, instance, nextProps, oldContext);
      hasForceUpdate = false;
      oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      var newState = workInProgress.memoizedState;
      oldProps !== hasNewLifecycles || oldState !== newState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps$jscomp$0 && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps$jscomp$0, nextProps), newState = workInProgress.memoizedState), (contextType = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextType, nextProps, oldState, newState, oldContext) || false) ? (getDerivedStateFromProps || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, newState, oldContext), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, newState, oldContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), instance.props = nextProps, instance.state = newState, instance.context = oldContext, nextProps = contextType) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = false);
    }
    return finishClassComponent(current, workInProgress, Component, nextProps, hasContext, renderLanes);
  }
  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    markRef(current, workInProgress);
    var didCaptureError = 0 !== (workInProgress.flags & 128);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$1.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.flags |= 1;
    null !== current && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes)) : reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }
  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }
  var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
  };
  function mountSuspenseOffscreenState(renderLanes) {
    return {
      baseLanes: renderLanes,
      cachePool: null,
      transitions: null
    };
  }
  function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      suspenseContext = suspenseStackCursor.current,
      showFallback = false,
      didSuspend = 0 !== (workInProgress.flags & 128),
      JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? false : 0 !== (suspenseContext & 2));
    if (JSCompiler_temp) showFallback = true, workInProgress.flags &= -129;else if (null === current || null !== current.memoizedState) suspenseContext |= 1;
    push(suspenseStackCursor, suspenseContext & 1);
    if (null === current) {
      current = workInProgress.memoizedState;
      if (null !== current && null !== current.dehydrated) return 0 === (workInProgress.mode & 1) ? workInProgress.lanes = 1 : shim$1() ? workInProgress.lanes = 8 : workInProgress.lanes = 1073741824, null;
      didSuspend = nextProps.children;
      current = nextProps.fallback;
      return showFallback ? (nextProps = workInProgress.mode, showFallback = workInProgress.child, didSuspend = {
        mode: "hidden",
        children: didSuspend
      }, 0 === (nextProps & 1) && null !== showFallback ? (showFallback.childLanes = 0, showFallback.pendingProps = didSuspend) : showFallback = createFiberFromOffscreen(didSuspend, nextProps, 0, null), current = createFiberFromFragment(current, nextProps, renderLanes, null), showFallback.return = workInProgress, current.return = workInProgress, showFallback.sibling = current, workInProgress.child = showFallback, workInProgress.child.memoizedState = mountSuspenseOffscreenState(renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, current) : mountSuspensePrimaryChildren(workInProgress, didSuspend);
    }
    suspenseContext = current.memoizedState;
    if (null !== suspenseContext && (JSCompiler_temp = suspenseContext.dehydrated, null !== JSCompiler_temp)) return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, JSCompiler_temp, suspenseContext, renderLanes);
    if (showFallback) {
      showFallback = nextProps.fallback;
      didSuspend = workInProgress.mode;
      suspenseContext = current.child;
      JSCompiler_temp = suspenseContext.sibling;
      var primaryChildProps = {
        mode: "hidden",
        children: nextProps.children
      };
      0 === (didSuspend & 1) && workInProgress.child !== suspenseContext ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.deletions = null) : (nextProps = createWorkInProgress(suspenseContext, primaryChildProps), nextProps.subtreeFlags = suspenseContext.subtreeFlags & 14680064);
      null !== JSCompiler_temp ? showFallback = createWorkInProgress(JSCompiler_temp, showFallback) : (showFallback = createFiberFromFragment(showFallback, didSuspend, renderLanes, null), showFallback.flags |= 2);
      showFallback.return = workInProgress;
      nextProps.return = workInProgress;
      nextProps.sibling = showFallback;
      workInProgress.child = nextProps;
      nextProps = showFallback;
      showFallback = workInProgress.child;
      didSuspend = current.child.memoizedState;
      didSuspend = null === didSuspend ? mountSuspenseOffscreenState(renderLanes) : {
        baseLanes: didSuspend.baseLanes | renderLanes,
        cachePool: null,
        transitions: didSuspend.transitions
      };
      showFallback.memoizedState = didSuspend;
      showFallback.childLanes = current.childLanes & ~renderLanes;
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return nextProps;
    }
    showFallback = current.child;
    current = showFallback.sibling;
    nextProps = createWorkInProgress(showFallback, {
      mode: "visible",
      children: nextProps.children
    });
    0 === (workInProgress.mode & 1) && (nextProps.lanes = renderLanes);
    nextProps.return = workInProgress;
    nextProps.sibling = null;
    null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [current], workInProgress.flags |= 16) : renderLanes.push(current));
    workInProgress.child = nextProps;
    workInProgress.memoizedState = null;
    return nextProps;
  }
  function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
    primaryChildren = createFiberFromOffscreen({
      mode: "visible",
      children: primaryChildren
    }, workInProgress.mode, 0, null);
    primaryChildren.return = workInProgress;
    return workInProgress.child = primaryChildren;
  }
  function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
    null !== recoverableError && (null === hydrationErrors ? hydrationErrors = [recoverableError] : hydrationErrors.push(recoverableError));
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
    current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
    current.flags |= 2;
    workInProgress.memoizedState = null;
    return current;
  }
  function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
    if (didSuspend) {
      if (workInProgress.flags & 256) return workInProgress.flags &= -257, suspenseState = createCapturedValue(Error("There was an error while hydrating this Suspense boundary. Switched to client rendering.")), retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
      if (null !== workInProgress.memoizedState) return workInProgress.child = current.child, workInProgress.flags |= 128, null;
      suspenseState = nextProps.fallback;
      didSuspend = workInProgress.mode;
      nextProps = createFiberFromOffscreen({
        mode: "visible",
        children: nextProps.children
      }, didSuspend, 0, null);
      suspenseState = createFiberFromFragment(suspenseState, didSuspend, renderLanes, null);
      suspenseState.flags |= 2;
      nextProps.return = workInProgress;
      suspenseState.return = workInProgress;
      nextProps.sibling = suspenseState;
      workInProgress.child = nextProps;
      0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes);
      workInProgress.child.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return suspenseState;
    }
    if (0 === (workInProgress.mode & 1)) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);
    if (shim$1()) return suspenseState = shim$1().digest, suspenseState = createCapturedValue(Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), suspenseState, undefined), retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
    didSuspend = 0 !== (renderLanes & current.childLanes);
    if (didReceiveUpdate || didSuspend) {
      nextProps = workInProgressRoot;
      if (null !== nextProps) {
        switch (renderLanes & -renderLanes) {
          case 4:
            didSuspend = 2;
            break;
          case 16:
            didSuspend = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            didSuspend = 32;
            break;
          case 536870912:
            didSuspend = 268435456;
            break;
          default:
            didSuspend = 0;
        }
        didSuspend = 0 !== (didSuspend & (nextProps.suspendedLanes | renderLanes)) ? 0 : didSuspend;
        0 !== didSuspend && didSuspend !== suspenseState.retryLane && (suspenseState.retryLane = didSuspend, markUpdateLaneFromFiberToRoot(current, didSuspend), scheduleUpdateOnFiber(nextProps, current, didSuspend, -1));
      }
      renderDidSuspendDelayIfPossible();
      suspenseState = createCapturedValue(Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
    }
    if (shim$1()) return workInProgress.flags |= 128, workInProgress.child = current.child, retryDehydratedSuspenseBoundary.bind(null, current), shim$1(), null;
    current = mountSuspensePrimaryChildren(workInProgress, nextProps.children);
    current.flags |= 4096;
    return current;
  }
  function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
    fiber.lanes |= renderLanes;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
  }
  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
  }
  function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      revealOrder = nextProps.revealOrder,
      tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;else {
      if (null !== current && 0 !== (current.flags & 128)) a: for (current = workInProgress.child; null !== current;) {
        if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (null !== current.child) {
          current.child.return = current;
          current = current.child;
          continue;
        }
        if (current === workInProgress) break a;
        for (; null === current.sibling;) {
          if (null === current.return || current.return === workInProgress) break a;
          current = current.return;
        }
        current.sibling.return = current.return;
        current = current.sibling;
      }
      nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderLanes = workInProgress.child;
        for (revealOrder = null; null !== renderLanes;) current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
        renderLanes = revealOrder;
        null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderLanes, tailMode);
        break;
      case "backwards":
        renderLanes = null;
        revealOrder = workInProgress.child;
        for (workInProgress.child = null; null !== revealOrder;) {
          current = revealOrder.alternate;
          if (null !== current && null === findFirstSuspended(current)) {
            workInProgress.child = revealOrder;
            break;
          }
          current = revealOrder.sibling;
          revealOrder.sibling = renderLanes;
          renderLanes = revealOrder;
          revealOrder = current;
        }
        initSuspenseListRenderState(workInProgress, true, renderLanes, null, tailMode);
        break;
      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;
      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }
  function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
    0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
  }
  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress.lanes;
    if (0 === (renderLanes & workInProgress.childLanes)) return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
    if (null !== workInProgress.child) {
      current = workInProgress.child;
      renderLanes = createWorkInProgress(current, current.pendingProps);
      workInProgress.child = renderLanes;
      for (renderLanes.return = workInProgress; null !== current.sibling;) current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
      renderLanes.sibling = null;
    }
    return workInProgress.child;
  }
  function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
    switch (workInProgress.tag) {
      case 3:
        pushHostRootContext(workInProgress);
        break;
      case 5:
        pushHostContext(workInProgress);
        break;
      case 1:
        isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
        break;
      case 4:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
      case 10:
        var context = workInProgress.type._context,
          nextValue = workInProgress.memoizedProps.value;
        push(valueCursor, context._currentValue2);
        context._currentValue2 = nextValue;
        break;
      case 13:
        context = workInProgress.memoizedState;
        if (null !== context) {
          if (null !== context.dehydrated) return push(suspenseStackCursor, suspenseStackCursor.current & 1), workInProgress.flags |= 128, null;
          if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
          push(suspenseStackCursor, suspenseStackCursor.current & 1);
          current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          return null !== current ? current.sibling : null;
        }
        push(suspenseStackCursor, suspenseStackCursor.current & 1);
        break;
      case 19:
        context = 0 !== (renderLanes & workInProgress.childLanes);
        if (0 !== (current.flags & 128)) {
          if (context) return updateSuspenseListComponent(current, workInProgress, renderLanes);
          workInProgress.flags |= 128;
        }
        nextValue = workInProgress.memoizedState;
        null !== nextValue && (nextValue.rendering = null, nextValue.tail = null, nextValue.lastEffect = null);
        push(suspenseStackCursor, suspenseStackCursor.current);
        if (context) break;else return null;
      case 22:
      case 23:
        return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }
  function hadNoMutationsEffects(current, completedWork) {
    if (null !== current && current.child === completedWork.child) return true;
    if (0 !== (completedWork.flags & 16)) return false;
    for (current = completedWork.child; null !== current;) {
      if (0 !== (current.flags & 12854) || 0 !== (current.subtreeFlags & 12854)) return false;
      current = current.sibling;
    }
    return true;
  }
  var appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
        appendChildNode(parent.node, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNode(parent.node, instance.node);
      } else if (4 !== node.tag) if (22 === node.tag && null !== node.memoizedState) instance = node.child, null !== instance && (instance.return = node), appendAllChildren(parent, node, true, true);else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  };
  function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (4 !== node.tag) if (22 === node.tag && null !== node.memoizedState) instance = node.child, null !== instance && (instance.return = node), appendAllChildrenToContainer(containerChildSet, node, true, true);else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  updateHostContainer = function (current, workInProgress) {
    var portalOrRoot = workInProgress.stateNode;
    if (!hadNoMutationsEffects(current, workInProgress)) {
      current = portalOrRoot.containerInfo;
      var newChildSet = createChildNodeSet(current);
      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet;
      workInProgress.flags |= 4;
      completeRoot(current, newChildSet);
    }
  };
  updateHostComponent$1 = function (current, workInProgress, type, newProps) {
    type = current.stateNode;
    var oldProps = current.memoizedProps;
    if ((current = hadNoMutationsEffects(current, workInProgress)) && oldProps === newProps) workInProgress.stateNode = type;else {
      var recyclableInstance = workInProgress.stateNode;
      requiredContext(contextStackCursor$1.current);
      var updatePayload = null;
      oldProps !== newProps && (oldProps = diffProperties(null, oldProps, newProps, recyclableInstance.canonical.viewConfig.validAttributes), recyclableInstance.canonical.currentProps = newProps, updatePayload = oldProps);
      current && null === updatePayload ? workInProgress.stateNode = type : (newProps = updatePayload, oldProps = type.node, type = {
        node: current ? null !== newProps ? cloneNodeWithNewProps(oldProps, newProps) : cloneNode(oldProps) : null !== newProps ? cloneNodeWithNewChildrenAndProps(oldProps, newProps) : cloneNodeWithNewChildren(oldProps),
        canonical: type.canonical
      }, workInProgress.stateNode = type, current ? workInProgress.flags |= 4 : appendAllChildren(type, workInProgress, false, false));
    }
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    oldText !== newText ? (current = requiredContext(rootInstanceStackCursor.current), oldText = requiredContext(contextStackCursor$1.current), workInProgress.stateNode = createTextInstance(newText, current, oldText, workInProgress), workInProgress.flags |= 4) : workInProgress.stateNode = current.stateNode;
  };
  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;
        for (var lastTailNode = null; null !== hasRenderedATailFallback;) null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;
      case "collapsed":
        lastTailNode = renderState.tail;
        for (var lastTailNode$62 = null; null !== lastTailNode;) null !== lastTailNode.alternate && (lastTailNode$62 = lastTailNode), lastTailNode = lastTailNode.sibling;
        null === lastTailNode$62 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$62.sibling = null;
    }
  }
  function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child,
      newChildLanes = 0,
      subtreeFlags = 0;
    if (didBailout) for (var child$63 = completedWork.child; null !== child$63;) newChildLanes |= child$63.lanes | child$63.childLanes, subtreeFlags |= child$63.subtreeFlags & 14680064, subtreeFlags |= child$63.flags & 14680064, child$63.return = completedWork, child$63 = child$63.sibling;else for (child$63 = completedWork.child; null !== child$63;) newChildLanes |= child$63.lanes | child$63.childLanes, subtreeFlags |= child$63.subtreeFlags, subtreeFlags |= child$63.flags, child$63.return = completedWork, child$63 = child$63.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
  }
  function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;
    popTreeContext(workInProgress);
    switch (workInProgress.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return bubbleProperties(workInProgress), null;
      case 1:
        return isContextProvider(workInProgress.type) && popContext(), bubbleProperties(workInProgress), null;
      case 3:
        return renderLanes = workInProgress.stateNode, popHostContainer(), pop(didPerformWorkStackCursor), pop(contextStackCursor), resetWorkInProgressVersions(), renderLanes.pendingContext && (renderLanes.context = renderLanes.pendingContext, renderLanes.pendingContext = null), null !== current && null !== current.child || null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null)), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
      case 5:
        popHostContext(workInProgress);
        renderLanes = requiredContext(rootInstanceStackCursor.current);
        var type = workInProgress.type;
        if (null !== current && null != workInProgress.stateNode) updateHostComponent$1(current, workInProgress, type, newProps, renderLanes), current.ref !== workInProgress.ref && (workInProgress.flags |= 512);else {
          if (!newProps) {
            if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            bubbleProperties(workInProgress);
            return null;
          }
          requiredContext(contextStackCursor$1.current);
          current = nextReactTag;
          nextReactTag += 2;
          type = getViewConfigForType(type);
          var updatePayload = diffProperties(null, emptyObject, newProps, type.validAttributes);
          renderLanes = createNode(current, type.uiViewClassName, renderLanes, updatePayload, workInProgress);
          current = new ReactFabricHostComponent(current, type, newProps, workInProgress);
          current = {
            node: renderLanes,
            canonical: current
          };
          appendAllChildren(current, workInProgress, false, false);
          workInProgress.stateNode = current;
          null !== workInProgress.ref && (workInProgress.flags |= 512);
        }
        bubbleProperties(workInProgress);
        return null;
      case 6:
        if (current && null != workInProgress.stateNode) updateHostText$1(current, workInProgress, current.memoizedProps, newProps);else {
          if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
          current = requiredContext(rootInstanceStackCursor.current);
          renderLanes = requiredContext(contextStackCursor$1.current);
          workInProgress.stateNode = createTextInstance(newProps, current, renderLanes, workInProgress);
        }
        bubbleProperties(workInProgress);
        return null;
      case 13:
        pop(suspenseStackCursor);
        newProps = workInProgress.memoizedState;
        if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
          if (null !== newProps && null !== newProps.dehydrated) {
            if (null === current) {
              throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
            }
            0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null);
            workInProgress.flags |= 4;
            bubbleProperties(workInProgress);
            type = false;
          } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), type = true;
          if (!type) return workInProgress.flags & 65536 ? workInProgress : null;
        }
        if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, workInProgress;
        renderLanes = null !== newProps;
        renderLanes !== (null !== current && null !== current.memoizedState) && renderLanes && (workInProgress.child.flags |= 8192, 0 !== (workInProgress.mode & 1) && (null === current || 0 !== (suspenseStackCursor.current & 1) ? 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3) : renderDidSuspendDelayIfPossible()));
        null !== workInProgress.updateQueue && (workInProgress.flags |= 4);
        bubbleProperties(workInProgress);
        return null;
      case 4:
        return popHostContainer(), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
      case 10:
        return popProvider(workInProgress.type._context), bubbleProperties(workInProgress), null;
      case 17:
        return isContextProvider(workInProgress.type) && popContext(), bubbleProperties(workInProgress), null;
      case 19:
        pop(suspenseStackCursor);
        type = workInProgress.memoizedState;
        if (null === type) return bubbleProperties(workInProgress), null;
        newProps = 0 !== (workInProgress.flags & 128);
        updatePayload = type.rendering;
        if (null === updatePayload) {
          if (newProps) cutOffTailIfNeeded(type, false);else {
            if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128)) for (current = workInProgress.child; null !== current;) {
              updatePayload = findFirstSuspended(current);
              if (null !== updatePayload) {
                workInProgress.flags |= 128;
                cutOffTailIfNeeded(type, false);
                current = updatePayload.updateQueue;
                null !== current && (workInProgress.updateQueue = current, workInProgress.flags |= 4);
                workInProgress.subtreeFlags = 0;
                current = renderLanes;
                for (renderLanes = workInProgress.child; null !== renderLanes;) newProps = renderLanes, type = current, newProps.flags &= 14680066, updatePayload = newProps.alternate, null === updatePayload ? (newProps.childLanes = 0, newProps.lanes = type, newProps.child = null, newProps.subtreeFlags = 0, newProps.memoizedProps = null, newProps.memoizedState = null, newProps.updateQueue = null, newProps.dependencies = null, newProps.stateNode = null) : (newProps.childLanes = updatePayload.childLanes, newProps.lanes = updatePayload.lanes, newProps.child = updatePayload.child, newProps.subtreeFlags = 0, newProps.deletions = null, newProps.memoizedProps = updatePayload.memoizedProps, newProps.memoizedState = updatePayload.memoizedState, newProps.updateQueue = updatePayload.updateQueue, newProps.type = updatePayload.type, type = updatePayload.dependencies, newProps.dependencies = null === type ? null : {
                  lanes: type.lanes,
                  firstContext: type.firstContext
                }), renderLanes = renderLanes.sibling;
                push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                return workInProgress.child;
              }
              current = current.sibling;
            }
            null !== type.tail && now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
          }
        } else {
          if (!newProps) if (current = findFirstSuspended(updatePayload), null !== current) {
            if (workInProgress.flags |= 128, newProps = true, current = current.updateQueue, null !== current && (workInProgress.updateQueue = current, workInProgress.flags |= 4), cutOffTailIfNeeded(type, true), null === type.tail && "hidden" === type.tailMode && !updatePayload.alternate) return bubbleProperties(workInProgress), null;
          } else 2 * now() - type.renderingStartTime > workInProgressRootRenderTargetTime && 1073741824 !== renderLanes && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
          type.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = type.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, type.last = updatePayload);
        }
        if (null !== type.tail) return workInProgress = type.tail, type.rendering = workInProgress, type.tail = workInProgress.sibling, type.renderingStartTime = now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
        bubbleProperties(workInProgress);
        return null;
      case 22:
      case 23:
        return popRenderLanes(), renderLanes = null !== workInProgress.memoizedState, null !== current && null !== current.memoizedState !== renderLanes && (workInProgress.flags |= 8192), renderLanes && 0 !== (workInProgress.mode & 1) ? 0 !== (subtreeRenderLanes & 1073741824) && bubbleProperties(workInProgress) : bubbleProperties(workInProgress), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  }
  function unwindWork(current, workInProgress) {
    popTreeContext(workInProgress);
    switch (workInProgress.tag) {
      case 1:
        return isContextProvider(workInProgress.type) && popContext(), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 3:
        return popHostContainer(), pop(didPerformWorkStackCursor), pop(contextStackCursor), resetWorkInProgressVersions(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 5:
        return popHostContext(workInProgress), null;
      case 13:
        pop(suspenseStackCursor);
        current = workInProgress.memoizedState;
        if (null !== current && null !== current.dehydrated && null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
        current = workInProgress.flags;
        return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 19:
        return pop(suspenseStackCursor), null;
      case 4:
        return popHostContainer(), null;
      case 10:
        return popProvider(workInProgress.type._context), null;
      case 22:
      case 23:
        return popRenderLanes(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
    nextEffect = null;
  function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    } else ref.current = null;
  }
  function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
    try {
      destroy();
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
  }
  var shouldFireAfterActiveInstanceBlur = false;
  function commitBeforeMutationEffects(root, firstChild) {
    for (nextEffect = firstChild; null !== nextEffect;) if (root = nextEffect, firstChild = root.child, 0 !== (root.subtreeFlags & 1028) && null !== firstChild) firstChild.return = root, nextEffect = firstChild;else for (; null !== nextEffect;) {
      root = nextEffect;
      try {
        var current = root.alternate;
        if (0 !== (root.flags & 1024)) switch (root.tag) {
          case 0:
          case 11:
          case 15:
            break;
          case 1:
            if (null !== current) {
              var prevProps = current.memoizedProps,
                prevState = current.memoizedState,
                instance = root.stateNode,
                snapshot = instance.getSnapshotBeforeUpdate(root.elementType === root.type ? prevProps : resolveDefaultProps(root.type, prevProps), prevState);
              instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            }
            break;
          case 3:
            break;
          case 5:
          case 6:
          case 4:
          case 17:
            break;
          default:
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      } catch (error) {
        captureCommitPhaseError(root, root.return, error);
      }
      firstChild = root.sibling;
      if (null !== firstChild) {
        firstChild.return = root.return;
        nextEffect = firstChild;
        break;
      }
      nextEffect = root.return;
    }
    current = shouldFireAfterActiveInstanceBlur;
    shouldFireAfterActiveInstanceBlur = false;
    return current;
  }
  function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
    var updateQueue = finishedWork.updateQueue;
    updateQueue = null !== updateQueue ? updateQueue.lastEffect : null;
    if (null !== updateQueue) {
      var effect = updateQueue = updateQueue.next;
      do {
        if ((effect.tag & flags) === flags) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          undefined !== destroy && safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
        }
        effect = effect.next;
      } while (effect !== updateQueue);
    }
  }
  function commitHookEffectListMount(flags, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;
    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;
      do {
        if ((effect.tag & flags) === flags) {
          var create$75 = effect.create;
          effect.destroy = create$75();
        }
        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }
  function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
  }
  function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for (parent = parent.child; null !== parent;) commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
  }
  function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
    switch (deletedFiber.tag) {
      case 5:
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
      case 6:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 18:
        break;
      case 4:
        createChildNodeSet(deletedFiber.stateNode.containerInfo);
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        var updateQueue = deletedFiber.updateQueue;
        if (null !== updateQueue && (updateQueue = updateQueue.lastEffect, null !== updateQueue)) {
          var effect = updateQueue = updateQueue.next;
          do {
            var _effect = effect,
              destroy = _effect.destroy;
            _effect = _effect.tag;
            undefined !== destroy && (0 !== (_effect & 2) ? safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy) : 0 !== (_effect & 4) && safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy));
            effect = effect.next;
          } while (effect !== updateQueue);
        }
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 1:
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
        updateQueue = deletedFiber.stateNode;
        if ("function" === typeof updateQueue.componentWillUnmount) try {
          updateQueue.props = deletedFiber.memoizedProps, updateQueue.state = deletedFiber.memoizedState, updateQueue.componentWillUnmount();
        } catch (error) {
          captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
        }
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 21:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 22:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      default:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
    }
  }
  function attachSuspenseRetryListeners(finishedWork) {
    var wakeables = finishedWork.updateQueue;
    if (null !== wakeables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
      wakeables.forEach(function (wakeable) {
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
      });
    }
  }
  function recursivelyTraverseMutationEffects(root, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions) for (var i = 0; i < deletions.length; i++) {
      var childToDelete = deletions[i];
      try {
        commitDeletionEffectsOnFiber(root, parentFiber, childToDelete);
        var alternate = childToDelete.alternate;
        null !== alternate && (alternate.return = null);
        childToDelete.return = null;
      } catch (error) {
        captureCommitPhaseError(childToDelete, parentFiber, error);
      }
    }
    if (parentFiber.subtreeFlags & 12854) for (parentFiber = parentFiber.child; null !== parentFiber;) commitMutationEffectsOnFiber(parentFiber, root), parentFiber = parentFiber.sibling;
  }
  function commitMutationEffectsOnFiber(finishedWork, root) {
    var current = finishedWork.alternate,
      flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        if (flags & 4) {
          try {
            commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
          try {
            commitHookEffectListUnmount(5, finishedWork, finishedWork.return);
          } catch (error$79) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$79);
          }
        }
        break;
      case 1:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && null !== current && safelyDetachRef(current, current.return);
        break;
      case 5:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && null !== current && safelyDetachRef(current, current.return);
        break;
      case 6:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 3:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 4:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 13:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        root = finishedWork.child;
        root.flags & 8192 && (current = null !== root.memoizedState, root.stateNode.isHidden = current, !current || null !== root.alternate && null !== root.alternate.memoizedState || (globalMostRecentFallbackTime = now()));
        flags & 4 && attachSuspenseRetryListeners(finishedWork);
        break;
      case 22:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 8192 && (finishedWork.stateNode.isHidden = null !== finishedWork.memoizedState);
        break;
      case 19:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && attachSuspenseRetryListeners(finishedWork);
        break;
      case 21:
        break;
      default:
        recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
    }
  }
  function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    flags & 2 && (finishedWork.flags &= -3);
    flags & 4096 && (finishedWork.flags &= -4097);
  }
  function commitLayoutEffects(finishedWork) {
    for (nextEffect = finishedWork; null !== nextEffect;) {
      var fiber = nextEffect,
        firstChild = fiber.child;
      if (0 !== (fiber.subtreeFlags & 8772) && null !== firstChild) firstChild.return = fiber, nextEffect = firstChild;else for (fiber = finishedWork; null !== nextEffect;) {
        firstChild = nextEffect;
        if (0 !== (firstChild.flags & 8772)) {
          var current = firstChild.alternate;
          try {
            if (0 !== (firstChild.flags & 8772)) switch (firstChild.tag) {
              case 0:
              case 11:
              case 15:
                commitHookEffectListMount(5, firstChild);
                break;
              case 1:
                var instance = firstChild.stateNode;
                if (firstChild.flags & 4) if (null === current) instance.componentDidMount();else {
                  var prevProps = firstChild.elementType === firstChild.type ? current.memoizedProps : resolveDefaultProps(firstChild.type, current.memoizedProps);
                  instance.componentDidUpdate(prevProps, current.memoizedState, instance.__reactInternalSnapshotBeforeUpdate);
                }
                var updateQueue = firstChild.updateQueue;
                null !== updateQueue && commitUpdateQueue(firstChild, updateQueue, instance);
                break;
              case 3:
                var updateQueue$76 = firstChild.updateQueue;
                if (null !== updateQueue$76) {
                  current = null;
                  if (null !== firstChild.child) switch (firstChild.child.tag) {
                    case 5:
                      current = firstChild.child.stateNode.canonical;
                      break;
                    case 1:
                      current = firstChild.child.stateNode;
                  }
                  commitUpdateQueue(firstChild, updateQueue$76, current);
                }
                break;
              case 5:
                if (null === current && firstChild.flags & 4) throw Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue.");
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (firstChild.flags & 512) {
              current = undefined;
              var ref = firstChild.ref;
              if (null !== ref) {
                var instance$jscomp$0 = firstChild.stateNode;
                switch (firstChild.tag) {
                  case 5:
                    current = instance$jscomp$0.canonical;
                    break;
                  default:
                    current = instance$jscomp$0;
                }
                "function" === typeof ref ? ref(current) : ref.current = current;
              }
            }
          } catch (error) {
            captureCommitPhaseError(firstChild, firstChild.return, error);
          }
        }
        if (firstChild === fiber) {
          nextEffect = null;
          break;
        }
        current = firstChild.sibling;
        if (null !== current) {
          current.return = firstChild.return;
          nextEffect = current;
          break;
        }
        nextEffect = firstChild.return;
      }
    }
  }
  var ceil = Math.ceil,
    ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,
    executionContext = 0,
    workInProgressRoot = null,
    workInProgress = null,
    workInProgressRootRenderLanes = 0,
    subtreeRenderLanes = 0,
    subtreeRenderLanesCursor = createCursor(0),
    workInProgressRootExitStatus = 0,
    workInProgressRootFatalError = null,
    workInProgressRootSkippedLanes = 0,
    workInProgressRootInterleavedUpdatedLanes = 0,
    workInProgressRootPingedLanes = 0,
    workInProgressRootConcurrentErrors = null,
    workInProgressRootRecoverableErrors = null,
    globalMostRecentFallbackTime = 0,
    workInProgressRootRenderTargetTime = Infinity,
    workInProgressTransitions = null,
    hasUncaughtError = false,
    firstUncaughtError = null,
    legacyErrorBoundariesThatAlreadyFailed = null,
    rootDoesHavePassiveEffects = false,
    rootWithPendingPassiveEffects = null,
    pendingPassiveEffectsLanes = 0,
    nestedUpdateCount = 0,
    rootWithNestedUpdates = null,
    currentEventTime = -1,
    currentEventTransitionLane = 0;
  function requestEventTime() {
    return 0 !== (executionContext & 6) ? now() : -1 !== currentEventTime ? currentEventTime : currentEventTime = now();
  }
  function requestUpdateLane(fiber) {
    if (0 === (fiber.mode & 1)) return 1;
    if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes) return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
    if (null !== ReactCurrentBatchConfig.transition) return 0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane()), currentEventTransitionLane;
    fiber = currentUpdatePriority;
    if (0 === fiber) a: {
      fiber = fabricGetCurrentEventPriority ? fabricGetCurrentEventPriority() : null;
      if (null != fiber) switch (fiber) {
        case FabricDiscretePriority:
          fiber = 1;
          break a;
      }
      fiber = 16;
    }
    return fiber;
  }
  function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    markRootUpdated(root, lane, eventTime);
    if (0 === (executionContext & 2) || root !== workInProgressRoot) root === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended$1(root, workInProgressRootRenderLanes)), ensureRootIsScheduled(root, eventTime), 1 === lane && 0 === executionContext && 0 === (fiber.mode & 1) && (workInProgressRootRenderTargetTime = now() + 500, includesLegacySyncCallbacks && flushSyncCallbacks());
  }
  function ensureRootIsScheduled(root, currentTime) {
    for (var existingCallbackNode = root.callbackNode, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes; 0 < lanes;) {
      var index$5 = 31 - clz32(lanes),
        lane = 1 << index$5,
        expirationTime = expirationTimes[index$5];
      if (-1 === expirationTime) {
        if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index$5] = computeExpirationTime(lane, currentTime);
      } else expirationTime <= currentTime && (root.expiredLanes |= lane);
      lanes &= ~lane;
    }
    suspendedLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : 0);
    if (0 === suspendedLanes) null !== existingCallbackNode && cancelCallback(existingCallbackNode), root.callbackNode = null, root.callbackPriority = 0;else if (currentTime = suspendedLanes & -suspendedLanes, root.callbackPriority !== currentTime) {
      null != existingCallbackNode && cancelCallback(existingCallbackNode);
      if (1 === currentTime) 0 === root.tag ? (existingCallbackNode = performSyncWorkOnRoot.bind(null, root), includesLegacySyncCallbacks = true, null === syncQueue ? syncQueue = [existingCallbackNode] : syncQueue.push(existingCallbackNode)) : (existingCallbackNode = performSyncWorkOnRoot.bind(null, root), null === syncQueue ? syncQueue = [existingCallbackNode] : syncQueue.push(existingCallbackNode)), scheduleCallback(ImmediatePriority, flushSyncCallbacks), existingCallbackNode = null;else {
        switch (lanesToEventPriority(suspendedLanes)) {
          case 1:
            existingCallbackNode = ImmediatePriority;
            break;
          case 4:
            existingCallbackNode = UserBlockingPriority;
            break;
          case 16:
            existingCallbackNode = NormalPriority;
            break;
          case 536870912:
            existingCallbackNode = IdlePriority;
            break;
          default:
            existingCallbackNode = NormalPriority;
        }
        existingCallbackNode = scheduleCallback$1(existingCallbackNode, performConcurrentWorkOnRoot.bind(null, root));
      }
      root.callbackPriority = currentTime;
      root.callbackNode = existingCallbackNode;
    }
  }
  function performConcurrentWorkOnRoot(root, didTimeout) {
    currentEventTime = -1;
    currentEventTransitionLane = 0;
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var originalCallbackNode = root.callbackNode;
    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
    var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : 0);
    if (0 === lanes) return null;
    if (0 !== (lanes & 30) || 0 !== (lanes & root.expiredLanes) || didTimeout) didTimeout = renderRootSync(root, lanes);else {
      didTimeout = lanes;
      var prevExecutionContext = executionContext;
      executionContext |= 2;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== didTimeout) workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root, didTimeout);
      do try {
        workLoopConcurrent();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      } while (1);
      resetContextDependencies();
      ReactCurrentDispatcher$2.current = prevDispatcher;
      executionContext = prevExecutionContext;
      null !== workInProgress ? didTimeout = 0 : (workInProgressRoot = null, workInProgressRootRenderLanes = 0, didTimeout = workInProgressRootExitStatus);
    }
    if (0 !== didTimeout) {
      2 === didTimeout && (prevExecutionContext = getLanesToRetrySynchronouslyOnError(root), 0 !== prevExecutionContext && (lanes = prevExecutionContext, didTimeout = recoverFromConcurrentError(root, prevExecutionContext)));
      if (1 === didTimeout) throw originalCallbackNode = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, now()), originalCallbackNode;
      if (6 === didTimeout) markRootSuspended$1(root, lanes);else {
        prevExecutionContext = root.current.alternate;
        if (0 === (lanes & 30) && !isRenderConsistentWithExternalStores(prevExecutionContext) && (didTimeout = renderRootSync(root, lanes), 2 === didTimeout && (prevDispatcher = getLanesToRetrySynchronouslyOnError(root), 0 !== prevDispatcher && (lanes = prevDispatcher, didTimeout = recoverFromConcurrentError(root, prevDispatcher))), 1 === didTimeout)) throw originalCallbackNode = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, now()), originalCallbackNode;
        root.finishedWork = prevExecutionContext;
        root.finishedLanes = lanes;
        switch (didTimeout) {
          case 0:
          case 1:
            throw Error("Root did not complete. This is a bug in React.");
          case 2:
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 3:
            markRootSuspended$1(root, lanes);
            if ((lanes & 130023424) === lanes && (didTimeout = globalMostRecentFallbackTime + 500 - now(), 10 < didTimeout)) {
              if (0 !== getNextLanes(root, 0)) break;
              prevExecutionContext = root.suspendedLanes;
              if ((prevExecutionContext & lanes) !== lanes) {
                requestEventTime();
                root.pingedLanes |= root.suspendedLanes & prevExecutionContext;
                break;
              }
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), didTimeout);
              break;
            }
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 4:
            markRootSuspended$1(root, lanes);
            if ((lanes & 4194240) === lanes) break;
            didTimeout = root.eventTimes;
            for (prevExecutionContext = -1; 0 < lanes;) {
              var index$4 = 31 - clz32(lanes);
              prevDispatcher = 1 << index$4;
              index$4 = didTimeout[index$4];
              index$4 > prevExecutionContext && (prevExecutionContext = index$4);
              lanes &= ~prevDispatcher;
            }
            lanes = prevExecutionContext;
            lanes = now() - lanes;
            lanes = (120 > lanes ? 120 : 480 > lanes ? 480 : 1080 > lanes ? 1080 : 1920 > lanes ? 1920 : 3e3 > lanes ? 3e3 : 4320 > lanes ? 4320 : 1960 * ceil(lanes / 1960)) - lanes;
            if (10 < lanes) {
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), lanes);
              break;
            }
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 5:
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          default:
            throw Error("Unknown root exit status.");
        }
      }
    }
    ensureRootIsScheduled(root, now());
    return root.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root) : null;
  }
  function recoverFromConcurrentError(root, errorRetryLanes) {
    var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
    root.current.memoizedState.isDehydrated && (prepareFreshStack(root, errorRetryLanes).flags |= 256);
    root = renderRootSync(root, errorRetryLanes);
    2 !== root && (errorRetryLanes = workInProgressRootRecoverableErrors, workInProgressRootRecoverableErrors = errorsFromFirstAttempt, null !== errorRetryLanes && queueRecoverableErrors(errorRetryLanes));
    return root;
  }
  function queueRecoverableErrors(errors) {
    null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
  }
  function isRenderConsistentWithExternalStores(finishedWork) {
    for (var node = finishedWork;;) {
      if (node.flags & 16384) {
        var updateQueue = node.updateQueue;
        if (null !== updateQueue && (updateQueue = updateQueue.stores, null !== updateQueue)) for (var i = 0; i < updateQueue.length; i++) {
          var check = updateQueue[i],
            getSnapshot = check.getSnapshot;
          check = check.value;
          try {
            if (!objectIs(getSnapshot(), check)) return false;
          } catch (error) {
            return false;
          }
        }
      }
      updateQueue = node.child;
      if (node.subtreeFlags & 16384 && null !== updateQueue) updateQueue.return = node, node = updateQueue;else {
        if (node === finishedWork) break;
        for (; null === node.sibling;) {
          if (null === node.return || node.return === finishedWork) return true;
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    return true;
  }
  function markRootSuspended$1(root, suspendedLanes) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes;
    for (root = root.expirationTimes; 0 < suspendedLanes;) {
      var index$6 = 31 - clz32(suspendedLanes),
        lane = 1 << index$6;
      root[index$6] = -1;
      suspendedLanes &= ~lane;
    }
  }
  function performSyncWorkOnRoot(root) {
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    flushPassiveEffects();
    var lanes = getNextLanes(root, 0);
    if (0 === (lanes & 1)) return ensureRootIsScheduled(root, now()), null;
    var exitStatus = renderRootSync(root, lanes);
    if (0 !== root.tag && 2 === exitStatus) {
      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
      0 !== errorRetryLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root, errorRetryLanes));
    }
    if (1 === exitStatus) throw exitStatus = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, now()), exitStatus;
    if (6 === exitStatus) throw Error("Root did not complete. This is a bug in React.");
    root.finishedWork = root.current.alternate;
    root.finishedLanes = lanes;
    commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
    ensureRootIsScheduled(root, now());
    return null;
  }
  function popRenderLanes() {
    subtreeRenderLanes = subtreeRenderLanesCursor.current;
    pop(subtreeRenderLanesCursor);
  }
  function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case 1:
          interruptedWork = interruptedWork.type.childContextTypes;
          null !== interruptedWork && undefined !== interruptedWork && popContext();
          break;
        case 3:
          popHostContainer();
          pop(didPerformWorkStackCursor);
          pop(contextStackCursor);
          resetWorkInProgressVersions();
          break;
        case 5:
          popHostContext(interruptedWork);
          break;
        case 4:
          popHostContainer();
          break;
        case 13:
          pop(suspenseStackCursor);
          break;
        case 19:
          pop(suspenseStackCursor);
          break;
        case 10:
          popProvider(interruptedWork.type._context);
          break;
        case 22:
        case 23:
          popRenderLanes();
      }
      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = root = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
    workInProgressRootExitStatus = 0;
    workInProgressRootFatalError = null;
    workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    if (null !== concurrentQueues) {
      for (lanes = 0; lanes < concurrentQueues.length; lanes++) if (timeoutHandle = concurrentQueues[lanes], interruptedWork = timeoutHandle.interleaved, null !== interruptedWork) {
        timeoutHandle.interleaved = null;
        var firstInterleavedUpdate = interruptedWork.next,
          lastPendingUpdate = timeoutHandle.pending;
        if (null !== lastPendingUpdate) {
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = firstInterleavedUpdate;
          interruptedWork.next = firstPendingUpdate;
        }
        timeoutHandle.pending = interruptedWork;
      }
      concurrentQueues = null;
    }
    return root;
  }
  function handleError(root$jscomp$0, thrownValue) {
    do {
      var erroredWork = workInProgress;
      try {
        resetContextDependencies();
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          for (var hook = currentlyRenderingFiber$1.memoizedState; null !== hook;) {
            var queue = hook.queue;
            null !== queue && (queue.pending = null);
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = 0;
        workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        ReactCurrentOwner$2.current = null;
        if (null === erroredWork || null === erroredWork.return) {
          workInProgressRootExitStatus = 1;
          workInProgressRootFatalError = thrownValue;
          workInProgress = null;
          break;
        }
        a: {
          var root = root$jscomp$0,
            returnFiber = erroredWork.return,
            sourceFiber = erroredWork,
            value = thrownValue;
          thrownValue = workInProgressRootRenderLanes;
          sourceFiber.flags |= 32768;
          if (null !== value && "object" === typeof value && "function" === typeof value.then) {
            var wakeable = value,
              sourceFiber$jscomp$0 = sourceFiber,
              tag = sourceFiber$jscomp$0.tag;
            if (0 === (sourceFiber$jscomp$0.mode & 1) && (0 === tag || 11 === tag || 15 === tag)) {
              var currentSource = sourceFiber$jscomp$0.alternate;
              currentSource ? (sourceFiber$jscomp$0.updateQueue = currentSource.updateQueue, sourceFiber$jscomp$0.memoizedState = currentSource.memoizedState, sourceFiber$jscomp$0.lanes = currentSource.lanes) : (sourceFiber$jscomp$0.updateQueue = null, sourceFiber$jscomp$0.memoizedState = null);
            }
            b: {
              sourceFiber$jscomp$0 = returnFiber;
              do {
                var JSCompiler_temp;
                if (JSCompiler_temp = 13 === sourceFiber$jscomp$0.tag) {
                  var nextState = sourceFiber$jscomp$0.memoizedState;
                  JSCompiler_temp = null !== nextState ? null !== nextState.dehydrated ? true : false : true;
                }
                if (JSCompiler_temp) {
                  var suspenseBoundary = sourceFiber$jscomp$0;
                  break b;
                }
                sourceFiber$jscomp$0 = sourceFiber$jscomp$0.return;
              } while (null !== sourceFiber$jscomp$0);
              suspenseBoundary = null;
            }
            if (null !== suspenseBoundary) {
              suspenseBoundary.flags &= -257;
              value = suspenseBoundary;
              sourceFiber$jscomp$0 = thrownValue;
              if (0 === (value.mode & 1)) {
                if (value === returnFiber) value.flags |= 65536;else {
                  value.flags |= 128;
                  sourceFiber.flags |= 131072;
                  sourceFiber.flags &= -52805;
                  if (1 === sourceFiber.tag) if (null === sourceFiber.alternate) sourceFiber.tag = 17;else {
                    var update = createUpdate(-1, 1);
                    update.tag = 2;
                    enqueueUpdate(sourceFiber, update, 1);
                  }
                  sourceFiber.lanes |= 1;
                }
              } else value.flags |= 65536, value.lanes = sourceFiber$jscomp$0;
              suspenseBoundary.mode & 1 && attachPingListener(root, wakeable, thrownValue);
              thrownValue = suspenseBoundary;
              root = wakeable;
              var wakeables = thrownValue.updateQueue;
              if (null === wakeables) {
                var updateQueue = new Set();
                updateQueue.add(root);
                thrownValue.updateQueue = updateQueue;
              } else wakeables.add(root);
              break a;
            } else {
              if (0 === (thrownValue & 1)) {
                attachPingListener(root, wakeable, thrownValue);
                renderDidSuspendDelayIfPossible();
                break a;
              }
              value = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            }
          }
          root = value = createCapturedValueAtFiber(value, sourceFiber);
          4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
          null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [root] : workInProgressRootConcurrentErrors.push(root);
          root = returnFiber;
          do {
            switch (root.tag) {
              case 3:
                wakeable = value;
                root.flags |= 65536;
                thrownValue &= -thrownValue;
                root.lanes |= thrownValue;
                var update$jscomp$0 = createRootErrorUpdate(root, wakeable, thrownValue);
                enqueueCapturedUpdate(root, update$jscomp$0);
                break a;
              case 1:
                wakeable = value;
                var ctor = root.type,
                  instance = root.stateNode;
                if (0 === (root.flags & 128) && ("function" === typeof ctor.getDerivedStateFromError || null !== instance && "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance)))) {
                  root.flags |= 65536;
                  thrownValue &= -thrownValue;
                  root.lanes |= thrownValue;
                  var update$32 = createClassErrorUpdate(root, wakeable, thrownValue);
                  enqueueCapturedUpdate(root, update$32);
                  break a;
                }
            }
            root = root.return;
          } while (null !== root);
        }
        completeUnitOfWork(erroredWork);
      } catch (yetAnotherThrownValue) {
        thrownValue = yetAnotherThrownValue;
        workInProgress === erroredWork && null !== erroredWork && (workInProgress = erroredWork = erroredWork.return);
        continue;
      }
      break;
    } while (1);
  }
  function pushDispatcher() {
    var prevDispatcher = ReactCurrentDispatcher$2.current;
    ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
  }
  function renderDidSuspendDelayIfPossible() {
    if (0 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus || 2 === workInProgressRootExitStatus) workInProgressRootExitStatus = 4;
    null === workInProgressRoot || 0 === (workInProgressRootSkippedLanes & 268435455) && 0 === (workInProgressRootInterleavedUpdatedLanes & 268435455) || markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
  }
  function renderRootSync(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher();
    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) workInProgressTransitions = null, prepareFreshStack(root, lanes);
    do try {
      workLoopSync();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    } while (1);
    resetContextDependencies();
    executionContext = prevExecutionContext;
    ReactCurrentDispatcher$2.current = prevDispatcher;
    if (null !== workInProgress) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    return workInProgressRootExitStatus;
  }
  function workLoopSync() {
    for (; null !== workInProgress;) performUnitOfWork(workInProgress);
  }
  function workLoopConcurrent() {
    for (; null !== workInProgress && !shouldYield();) performUnitOfWork(workInProgress);
  }
  function performUnitOfWork(unitOfWork) {
    var next = beginWork$1(unitOfWork.alternate, unitOfWork, subtreeRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
    ReactCurrentOwner$2.current = null;
  }
  function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
      var current = completedWork.alternate;
      unitOfWork = completedWork.return;
      if (0 === (completedWork.flags & 32768)) {
        if (current = completeWork(current, completedWork, subtreeRenderLanes), null !== current) {
          workInProgress = current;
          return;
        }
      } else {
        current = unwindWork(current, completedWork);
        if (null !== current) {
          current.flags &= 32767;
          workInProgress = current;
          return;
        }
        if (null !== unitOfWork) unitOfWork.flags |= 32768, unitOfWork.subtreeFlags = 0, unitOfWork.deletions = null;else {
          workInProgressRootExitStatus = 6;
          workInProgress = null;
          return;
        }
      }
      completedWork = completedWork.sibling;
      if (null !== completedWork) {
        workInProgress = completedWork;
        return;
      }
      workInProgress = completedWork = unitOfWork;
    } while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
  }
  function commitRoot(root, recoverableErrors, transitions) {
    var previousUpdateLanePriority = currentUpdatePriority,
      prevTransition = ReactCurrentBatchConfig$2.transition;
    try {
      ReactCurrentBatchConfig$2.transition = null, currentUpdatePriority = 1, commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
    } finally {
      ReactCurrentBatchConfig$2.transition = prevTransition, currentUpdatePriority = previousUpdateLanePriority;
    }
    return null;
  }
  function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
    do flushPassiveEffects(); while (null !== rootWithPendingPassiveEffects);
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    transitions = root.finishedWork;
    var lanes = root.finishedLanes;
    if (null === transitions) return null;
    root.finishedWork = null;
    root.finishedLanes = 0;
    if (transitions === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root.callbackNode = null;
    root.callbackPriority = 0;
    var remainingLanes = transitions.lanes | transitions.childLanes;
    markRootFinished(root, remainingLanes);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    0 === (transitions.subtreeFlags & 2064) && 0 === (transitions.flags & 2064) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = true, scheduleCallback$1(NormalPriority, function () {
      flushPassiveEffects();
      return null;
    }));
    remainingLanes = 0 !== (transitions.flags & 15990);
    if (0 !== (transitions.subtreeFlags & 15990) || remainingLanes) {
      remainingLanes = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition = null;
      var previousPriority = currentUpdatePriority;
      currentUpdatePriority = 1;
      var prevExecutionContext = executionContext;
      executionContext |= 4;
      ReactCurrentOwner$2.current = null;
      commitBeforeMutationEffects(root, transitions);
      commitMutationEffectsOnFiber(transitions, root);
      root.current = transitions;
      commitLayoutEffects(transitions, root, lanes);
      requestPaint();
      executionContext = prevExecutionContext;
      currentUpdatePriority = previousPriority;
      ReactCurrentBatchConfig$2.transition = remainingLanes;
    } else root.current = transitions;
    rootDoesHavePassiveEffects && (rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = lanes);
    remainingLanes = root.pendingLanes;
    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
    onCommitRoot(transitions.stateNode, renderPriorityLevel);
    ensureRootIsScheduled(root, now());
    if (null !== recoverableErrors) for (renderPriorityLevel = root.onRecoverableError, transitions = 0; transitions < recoverableErrors.length; transitions++) lanes = recoverableErrors[transitions], renderPriorityLevel(lanes.value, {
      componentStack: lanes.stack,
      digest: lanes.digest
    });
    if (hasUncaughtError) throw hasUncaughtError = false, root = firstUncaughtError, firstUncaughtError = null, root;
    0 !== (pendingPassiveEffectsLanes & 1) && 0 !== root.tag && flushPassiveEffects();
    remainingLanes = root.pendingLanes;
    0 !== (remainingLanes & 1) ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    flushSyncCallbacks();
    return null;
  }
  function flushPassiveEffects() {
    if (null !== rootWithPendingPassiveEffects) {
      var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
        prevTransition = ReactCurrentBatchConfig$2.transition,
        previousPriority = currentUpdatePriority;
      try {
        ReactCurrentBatchConfig$2.transition = null;
        currentUpdatePriority = 16 > renderPriority ? 16 : renderPriority;
        if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = false;else {
          renderPriority = rootWithPendingPassiveEffects;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = 0;
          if (0 !== (executionContext & 6)) throw Error("Cannot flush passive effects while already rendering.");
          var prevExecutionContext = executionContext;
          executionContext |= 4;
          for (nextEffect = renderPriority.current; null !== nextEffect;) {
            var fiber = nextEffect,
              child = fiber.child;
            if (0 !== (nextEffect.flags & 16)) {
              var deletions = fiber.deletions;
              if (null !== deletions) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  for (nextEffect = fiberToDelete; null !== nextEffect;) {
                    var fiber$jscomp$0 = nextEffect;
                    switch (fiber$jscomp$0.tag) {
                      case 0:
                      case 11:
                      case 15:
                        commitHookEffectListUnmount(8, fiber$jscomp$0, fiber);
                    }
                    var child$jscomp$0 = fiber$jscomp$0.child;
                    if (null !== child$jscomp$0) child$jscomp$0.return = fiber$jscomp$0, nextEffect = child$jscomp$0;else for (; null !== nextEffect;) {
                      fiber$jscomp$0 = nextEffect;
                      var sibling = fiber$jscomp$0.sibling,
                        returnFiber = fiber$jscomp$0.return;
                      detachFiberAfterEffects(fiber$jscomp$0);
                      if (fiber$jscomp$0 === fiberToDelete) {
                        nextEffect = null;
                        break;
                      }
                      if (null !== sibling) {
                        sibling.return = returnFiber;
                        nextEffect = sibling;
                        break;
                      }
                      nextEffect = returnFiber;
                    }
                  }
                }
                var previousFiber = fiber.alternate;
                if (null !== previousFiber) {
                  var detachedChild = previousFiber.child;
                  if (null !== detachedChild) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (null !== detachedChild);
                  }
                }
                nextEffect = fiber;
              }
            }
            if (0 !== (fiber.subtreeFlags & 2064) && null !== child) child.return = fiber, nextEffect = child;else b: for (; null !== nextEffect;) {
              fiber = nextEffect;
              if (0 !== (fiber.flags & 2048)) switch (fiber.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectListUnmount(9, fiber, fiber.return);
              }
              var sibling$jscomp$0 = fiber.sibling;
              if (null !== sibling$jscomp$0) {
                sibling$jscomp$0.return = fiber.return;
                nextEffect = sibling$jscomp$0;
                break b;
              }
              nextEffect = fiber.return;
            }
          }
          var finishedWork = renderPriority.current;
          for (nextEffect = finishedWork; null !== nextEffect;) {
            child = nextEffect;
            var firstChild = child.child;
            if (0 !== (child.subtreeFlags & 2064) && null !== firstChild) firstChild.return = child, nextEffect = firstChild;else b: for (child = finishedWork; null !== nextEffect;) {
              deletions = nextEffect;
              if (0 !== (deletions.flags & 2048)) try {
                switch (deletions.tag) {
                  case 0:
                  case 11:
                  case 15:
                    commitHookEffectListMount(9, deletions);
                }
              } catch (error) {
                captureCommitPhaseError(deletions, deletions.return, error);
              }
              if (deletions === child) {
                nextEffect = null;
                break b;
              }
              var sibling$jscomp$1 = deletions.sibling;
              if (null !== sibling$jscomp$1) {
                sibling$jscomp$1.return = deletions.return;
                nextEffect = sibling$jscomp$1;
                break b;
              }
              nextEffect = deletions.return;
            }
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
            injectedHook.onPostCommitFiberRoot(rendererID, renderPriority);
          } catch (err) {}
          JSCompiler_inline_result = true;
        }
        return JSCompiler_inline_result;
      } finally {
        currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$2.transition = prevTransition;
      }
    }
    return false;
  }
  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 1);
    sourceFiber = requestEventTime();
    null !== rootFiber && (markRootUpdated(rootFiber, 1, sourceFiber), ensureRootIsScheduled(rootFiber, sourceFiber));
  }
  function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (nearestMountedAncestor = sourceFiber.return; null !== nearestMountedAncestor;) {
      if (3 === nearestMountedAncestor.tag) {
        captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
        break;
      } else if (1 === nearestMountedAncestor.tag) {
        var instance = nearestMountedAncestor.stateNode;
        if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(nearestMountedAncestor, sourceFiber, 1);
          nearestMountedAncestor = enqueueUpdate(nearestMountedAncestor, sourceFiber, 1);
          sourceFiber = requestEventTime();
          null !== nearestMountedAncestor && (markRootUpdated(nearestMountedAncestor, 1, sourceFiber), ensureRootIsScheduled(nearestMountedAncestor, sourceFiber));
          break;
        }
      }
      nearestMountedAncestor = nearestMountedAncestor.return;
    }
  }
  function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    wakeable = requestEventTime();
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
    workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 130023424) === workInProgressRootRenderLanes && 500 > now() - globalMostRecentFallbackTime ? prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes);
    ensureRootIsScheduled(root, wakeable);
  }
  function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (0 === (boundaryFiber.mode & 1) ? retryLane = 1 : (retryLane = nextRetryLane, nextRetryLane <<= 1, 0 === (nextRetryLane & 130023424) && (nextRetryLane = 4194304)));
    var eventTime = requestEventTime();
    boundaryFiber = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated(boundaryFiber, retryLane, eventTime), ensureRootIsScheduled(boundaryFiber, eventTime));
  }
  function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState,
      retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch (boundaryFiber.tag) {
      case 13:
        var retryCache = boundaryFiber.stateNode;
        var suspenseState = boundaryFiber.memoizedState;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        break;
      case 19:
        retryCache = boundaryFiber.stateNode;
        break;
      default:
        throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  var beginWork$1;
  beginWork$1 = function (current, workInProgress, renderLanes) {
    if (null !== current) {
      if (current.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = true;else {
        if (0 === (current.lanes & renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
        didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
      }
    } else didReceiveUpdate = false;
    workInProgress.lanes = 0;
    switch (workInProgress.tag) {
      case 2:
        var Component = workInProgress.type;
        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
        current = workInProgress.pendingProps;
        var context = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderLanes);
        context = renderWithHooks(null, workInProgress, Component, current, context, renderLanes);
        workInProgress.flags |= 1;
        if ("object" === typeof context && null !== context && "function" === typeof context.render && undefined === context.$$typeof) {
          workInProgress.tag = 1;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          if (isContextProvider(Component)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;
          workInProgress.memoizedState = null !== context.state && undefined !== context.state ? context.state : null;
          initializeUpdateQueue(workInProgress);
          context.updater = classComponentUpdater;
          workInProgress.stateNode = context;
          context._reactInternals = workInProgress;
          mountClassInstance(workInProgress, Component, current, renderLanes);
          workInProgress = finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, context, renderLanes), workInProgress = workInProgress.child;
        return workInProgress;
      case 16:
        Component = workInProgress.elementType;
        a: {
          resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
          current = workInProgress.pendingProps;
          context = Component._init;
          Component = context(Component._payload);
          workInProgress.type = Component;
          context = workInProgress.tag = resolveLazyComponentTag(Component);
          current = resolveDefaultProps(Component, current);
          switch (context) {
            case 0:
              workInProgress = updateFunctionComponent(null, workInProgress, Component, current, renderLanes);
              break a;
            case 1:
              workInProgress = updateClassComponent(null, workInProgress, Component, current, renderLanes);
              break a;
            case 11:
              workInProgress = updateForwardRef(null, workInProgress, Component, current, renderLanes);
              break a;
            case 14:
              workInProgress = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, current), renderLanes);
              break a;
          }
          throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function.");
        }
        return workInProgress;
      case 0:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateFunctionComponent(current, workInProgress, Component, context, renderLanes);
      case 1:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateClassComponent(current, workInProgress, Component, context, renderLanes);
      case 3:
        pushHostRootContext(workInProgress);
        if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
        context = workInProgress.pendingProps;
        Component = workInProgress.memoizedState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, context, null, renderLanes);
        context = workInProgress.memoizedState.element;
        context === Component ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) : (reconcileChildren(current, workInProgress, context, renderLanes), workInProgress = workInProgress.child);
        return workInProgress;
      case 5:
        return pushHostContext(workInProgress), Component = workInProgress.pendingProps.children, markRef(current, workInProgress), reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 6:
        return null;
      case 13:
        return updateSuspenseComponent(current, workInProgress, renderLanes);
      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), Component = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes) : reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 11:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateForwardRef(current, workInProgress, Component, context, renderLanes);
      case 7:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
      case 8:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 12:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 10:
        a: {
          Component = workInProgress.type._context;
          context = workInProgress.pendingProps;
          hasContext = workInProgress.memoizedProps;
          var newValue = context.value;
          push(valueCursor, Component._currentValue2);
          Component._currentValue2 = newValue;
          if (null !== hasContext) if (objectIs(hasContext.value, newValue)) {
            if (hasContext.children === context.children && !didPerformWorkStackCursor.current) {
              workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              break a;
            }
          } else for (hasContext = workInProgress.child, null !== hasContext && (hasContext.return = workInProgress); null !== hasContext;) {
            var list = hasContext.dependencies;
            if (null !== list) {
              newValue = hasContext.child;
              for (var dependency = list.firstContext; null !== dependency;) {
                if (dependency.context === Component) {
                  if (1 === hasContext.tag) {
                    dependency = createUpdate(-1, renderLanes & -renderLanes);
                    dependency.tag = 2;
                    var updateQueue = hasContext.updateQueue;
                    if (null !== updateQueue) {
                      updateQueue = updateQueue.shared;
                      var pending = updateQueue.pending;
                      null === pending ? dependency.next = dependency : (dependency.next = pending.next, pending.next = dependency);
                      updateQueue.pending = dependency;
                    }
                  }
                  hasContext.lanes |= renderLanes;
                  dependency = hasContext.alternate;
                  null !== dependency && (dependency.lanes |= renderLanes);
                  scheduleContextWorkOnParentPath(hasContext.return, renderLanes, workInProgress);
                  list.lanes |= renderLanes;
                  break;
                }
                dependency = dependency.next;
              }
            } else if (10 === hasContext.tag) newValue = hasContext.type === workInProgress.type ? null : hasContext.child;else if (18 === hasContext.tag) {
              newValue = hasContext.return;
              if (null === newValue) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              newValue.lanes |= renderLanes;
              list = newValue.alternate;
              null !== list && (list.lanes |= renderLanes);
              scheduleContextWorkOnParentPath(newValue, renderLanes, workInProgress);
              newValue = hasContext.sibling;
            } else newValue = hasContext.child;
            if (null !== newValue) newValue.return = hasContext;else for (newValue = hasContext; null !== newValue;) {
              if (newValue === workInProgress) {
                newValue = null;
                break;
              }
              hasContext = newValue.sibling;
              if (null !== hasContext) {
                hasContext.return = newValue.return;
                newValue = hasContext;
                break;
              }
              newValue = newValue.return;
            }
            hasContext = newValue;
          }
          reconcileChildren(current, workInProgress, context.children, renderLanes);
          workInProgress = workInProgress.child;
        }
        return workInProgress;
      case 9:
        return context = workInProgress.type, Component = workInProgress.pendingProps.children, prepareToReadContext(workInProgress, renderLanes), context = readContext(context), Component = Component(context), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 14:
        return Component = workInProgress.type, context = resolveDefaultProps(Component, workInProgress.pendingProps), context = resolveDefaultProps(Component.type, context), updateMemoComponent(current, workInProgress, Component, context, renderLanes);
      case 15:
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 17:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, isContextProvider(Component) ? (current = true, pushContextProvider(workInProgress)) : current = false, prepareToReadContext(workInProgress, renderLanes), constructClassInstance(workInProgress, Component, context), mountClassInstance(workInProgress, Component, context, renderLanes), finishClassComponent(null, workInProgress, Component, true, current, renderLanes);
      case 19:
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      case 22:
        return updateOffscreenComponent(current, workInProgress, renderLanes);
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  };
  function scheduleCallback$1(priorityLevel, callback) {
    return scheduleCallback(priorityLevel, callback);
  }
  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }
  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }
  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;
    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }
    return 2;
  }
  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
    workInProgress.flags = current.flags & 14680064;
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      lanes: pendingProps.lanes,
      firstContext: pendingProps.firstContext
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }
  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);
      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 8;
        break;
      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);
      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;
          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;
          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;
          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;
          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == type ? type : typeof type) + "."));
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
  }
  function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiber(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
  }
  function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    pendingProps = createFiber(22, pendingProps, key, mode);
    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
    pendingProps.lanes = lanes;
    pendingProps.stateNode = {
      isHidden: false
    };
    return pendingProps;
  }
  function createFiberFromText(content, mode, lanes) {
    content = createFiber(6, content, null, mode);
    content.lanes = lanes;
    return content;
  }
  function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.lanes = lanes;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }
  function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.pendingContext = this.context = null;
    this.callbackPriority = 0;
    this.eventTimes = createLaneMap(0);
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.identifierPrefix = identifierPrefix;
    this.onRecoverableError = onRecoverableError;
  }
  function createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }
  function findHostInstance(component) {
    var fiber = component._reactInternals;
    if (undefined === fiber) {
      if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
      component = Object.keys(component).join(",");
      throw Error("Argument appears to not be a ReactComponent. Keys: " + component);
    }
    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }
  function updateContainer(element, container, parentComponent, callback) {
    var current = container.current,
      eventTime = requestEventTime(),
      lane = requestUpdateLane(current);
    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternals;
      b: {
        if (getNearestMountedFiber(parentComponent) !== parentComponent || 1 !== parentComponent.tag) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var JSCompiler_inline_result = parentComponent;
        do {
          switch (JSCompiler_inline_result.tag) {
            case 3:
              JSCompiler_inline_result = JSCompiler_inline_result.stateNode.context;
              break b;
            case 1:
              if (isContextProvider(JSCompiler_inline_result.type)) {
                JSCompiler_inline_result = JSCompiler_inline_result.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }
          }
          JSCompiler_inline_result = JSCompiler_inline_result.return;
        } while (null !== JSCompiler_inline_result);
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;
        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, JSCompiler_inline_result);
          break a;
        }
      }
      parentComponent = JSCompiler_inline_result;
    } else parentComponent = emptyContextObject;
    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = createUpdate(eventTime, lane);
    container.payload = {
      element: element
    };
    callback = undefined === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(current, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, current, lane, eventTime), entangleTransitions(element, current, lane));
    return lane;
  }
  function emptyFindFiberByHostInstance() {
    return null;
  }
  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }
  function onRecoverableError(error) {
    console.error(error);
  }
  batchedUpdatesImpl = function (fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;
    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, 0 === executionContext && (workInProgressRootRenderTargetTime = now() + 500, includesLegacySyncCallbacks && flushSyncCallbacks());
    }
  };
  var roots = new Map(),
    devToolsConfig$jscomp$inline_938 = {
      findFiberByHostInstance: getInstanceFromInstance,
      bundleType: 0,
      version: "18.2.0-next-9e3b772b8-20220608",
      rendererPackageName: "react-native-renderer",
      rendererConfig: {
        getInspectorDataForViewTag: function () {
          throw Error("getInspectorDataForViewTag() is not available in production");
        },
        getInspectorDataForViewAtPoint: function () {
          throw Error("getInspectorDataForViewAtPoint() is not available in production.");
        }.bind(null, findNodeHandle)
      }
    };
  var internals$jscomp$inline_1180 = {
    bundleType: devToolsConfig$jscomp$inline_938.bundleType,
    version: devToolsConfig$jscomp$inline_938.version,
    rendererPackageName: devToolsConfig$jscomp$inline_938.rendererPackageName,
    rendererConfig: devToolsConfig$jscomp$inline_938.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setErrorHandler: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    },
    findFiberByHostInstance: devToolsConfig$jscomp$inline_938.findFiberByHostInstance || emptyFindFiberByHostInstance,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null,
    reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
  };
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_1181 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_1181.isDisabled && hook$jscomp$inline_1181.supportsFiber) try {
      rendererID = hook$jscomp$inline_1181.inject(internals$jscomp$inline_1180), injectedHook = hook$jscomp$inline_1181;
    } catch (err) {}
  }
  exports.createPortal = function (children, containerTag) {
    return createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
  };
  exports.dispatchCommand = function (handle, command, args) {
    null != handle._nativeTag && (null != handle._internalInstanceHandle ? (handle = handle._internalInstanceHandle.stateNode, null != handle && nativeFabricUIManager.dispatchCommand(handle.node, command, args)) : ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args));
  };
  exports.findHostInstance_DEPRECATED = function (componentOrHandle) {
    if (null == componentOrHandle) return null;
    if (componentOrHandle._nativeTag) return componentOrHandle;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical : componentOrHandle;
  };
  exports.findNodeHandle = findNodeHandle;
  exports.getInspectorDataForInstance = undefined;
  exports.render = function (element, containerTag, callback, concurrentRoot) {
    var root = roots.get(containerTag);
    root || (root = concurrentRoot ? 1 : 0, concurrentRoot = new FiberRootNode(containerTag, root, false, "", onRecoverableError), root = createFiber(3, null, null, 1 === root ? 1 : 0), concurrentRoot.current = root, root.stateNode = concurrentRoot, root.memoizedState = {
      element: null,
      isDehydrated: false,
      cache: null,
      transitions: null,
      pendingSuspenseBoundaries: null
    }, initializeUpdateQueue(root), root = concurrentRoot, roots.set(containerTag, root));
    updateContainer(element, root, null, callback);
    a: if (element = root.current, element.child) switch (element.child.tag) {
      case 5:
        element = element.child.stateNode.canonical;
        break a;
      default:
        element = element.child.stateNode;
    } else element = null;
    return element;
  };
  exports.sendAccessibilityEvent = function (handle, eventType) {
    null != handle._nativeTag && (null != handle._internalInstanceHandle ? (handle = handle._internalInstanceHandle.stateNode, null != handle && nativeFabricUIManager.sendAccessibilityEvent(handle.node, eventType)) : ReactNativePrivateInterface.legacySendAccessibilityEvent(handle._nativeTag, eventType));
  };
  exports.stopSurface = function (containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function () {
      roots.delete(containerTag);
    });
  };
  exports.unmountComponentAtNode = function (containerTag) {
    this.stopSurface(containerTag);
  };
},154,[155,64,125,262]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  require(_dependencyMap[0]);
},155,[156]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var start = Date.now();
  require(_dependencyMap[0]);
  require(_dependencyMap[1]);
  require(_dependencyMap[2]);
  require(_dependencyMap[3]);
  require(_dependencyMap[4]);
  require(_dependencyMap[5]);
  require(_dependencyMap[6]);
  require(_dependencyMap[7]);
  require(_dependencyMap[8]);
  require(_dependencyMap[9]);
  require(_dependencyMap[10]);
  require(_dependencyMap[11]);
  require(_dependencyMap[12]);
  var GlobalPerformanceLogger = require(_dependencyMap[13]);
  GlobalPerformanceLogger.markPoint('initializeCore_start', GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start));
  GlobalPerformanceLogger.markPoint('initializeCore_end');
},156,[157,158,159,171,172,177,180,185,213,217,218,226,228,192]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (global.window === undefined) {
    global.window = global;
  }
  if (global.self === undefined) {
    global.self = global;
  }
  global.process = global.process || {};
  global.process.env = global.process.env || {};
  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = 'production';
  }
},157,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _DOMRect = _interopRequireDefault(require(_dependencyMap[1]));
  var _DOMRectReadOnly = _interopRequireDefault(require(_dependencyMap[2]));
  global.DOMRect = _DOMRect.default;
  global.DOMRectReadOnly = _DOMRectReadOnly.default;
},158,[1,144,145]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativePerformance = _interopRequireDefault(require(_dependencyMap[1]));
  var _Performance = _interopRequireDefault(require(_dependencyMap[2]));
  if (_NativePerformance.default) {
    global.performance = new _Performance.default();
  } else {
    if (!global.performance) {
      global.performance = {
        now: function () {
          var performanceNow = global.nativePerformanceNow || Date.now;
          return performanceNow();
        }
      };
    }
  }
},159,[1,160,161]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('NativePerformanceCxx');
},160,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.PerformanceMeasure = exports.PerformanceMark = undefined;
  var _readOnlyError2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _warnOnce = _interopRequireDefault(require(_dependencyMap[7]));
  var _EventCounts = _interopRequireDefault(require(_dependencyMap[8]));
  var _MemoryInfo = _interopRequireDefault(require(_dependencyMap[9]));
  var _NativePerformance = _interopRequireDefault(require(_dependencyMap[10]));
  var _NativePerformanceObserver = _interopRequireDefault(require(_dependencyMap[11]));
  var _PerformanceEntry3 = require(_dependencyMap[12]);
  var _PerformanceObserver = require(_dependencyMap[13]);
  var _RawPerformanceEntry = require(_dependencyMap[14]);
  var _ReactNativeStartupTiming = _interopRequireDefault(require(_dependencyMap[15]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var getCurrentTimeStamp = global.nativePerformanceNow ? global.nativePerformanceNow : () => Date.now();
  if (_NativePerformanceObserver.default?.setIsBuffered) {
    _NativePerformanceObserver.default?.setIsBuffered(_PerformanceEntry3.ALWAYS_LOGGED_ENTRY_TYPES.map(_RawPerformanceEntry.performanceEntryTypeToRaw), true);
  }
  var PerformanceMark = exports.PerformanceMark = /*#__PURE__*/function (_PerformanceEntry) {
    function PerformanceMark(markName, markOptions) {
      var _this;
      (0, _classCallCheck2.default)(this, PerformanceMark);
      _this = _callSuper(this, PerformanceMark, [{
        name: markName,
        entryType: 'mark',
        startTime: markOptions?.startTime ?? getCurrentTimeStamp(),
        duration: 0
      }]);
      if (markOptions) {
        _this.detail = markOptions.detail;
      }
      return _this;
    }
    (0, _inherits2.default)(PerformanceMark, _PerformanceEntry);
    return (0, _createClass2.default)(PerformanceMark);
  }(_PerformanceEntry3.PerformanceEntry);
  var PerformanceMeasure = exports.PerformanceMeasure = /*#__PURE__*/function (_PerformanceEntry2) {
    function PerformanceMeasure(measureName, measureOptions) {
      var _this2;
      (0, _classCallCheck2.default)(this, PerformanceMeasure);
      _this2 = _callSuper(this, PerformanceMeasure, [{
        name: measureName,
        entryType: 'measure',
        startTime: 0,
        duration: measureOptions?.duration ?? 0
      }]);
      if (measureOptions) {
        _this2.detail = measureOptions.detail;
      }
      return _this2;
    }
    (0, _inherits2.default)(PerformanceMeasure, _PerformanceEntry2);
    return (0, _createClass2.default)(PerformanceMeasure);
  }(_PerformanceEntry3.PerformanceEntry);
  function warnNoNativePerformance() {
    (0, _warnOnce.default)('missing-native-performance', 'Missing native implementation of Performance');
  }
  var Performance = exports.default = /*#__PURE__*/function () {
    function Performance() {
      (0, _classCallCheck2.default)(this, Performance);
      this.eventCounts = new _EventCounts.default();
    }
    return (0, _createClass2.default)(Performance, [{
      key: "memory",
      get: function () {
        if (_NativePerformance.default?.getSimpleMemoryInfo) {
          var memoryInfo = _NativePerformance.default.getSimpleMemoryInfo();
          if (memoryInfo.hasOwnProperty('hermes_heapSize')) {
            var totalJSHeapSize = memoryInfo.hermes_heapSize,
              usedJSHeapSize = memoryInfo.hermes_allocatedBytes;
            return new _MemoryInfo.default({
              jsHeapSizeLimit: null,
              totalJSHeapSize,
              usedJSHeapSize
            });
          } else {
            return new _MemoryInfo.default();
          }
        }
        return new _MemoryInfo.default();
      }
    }, {
      key: "reactNativeStartupTiming",
      get: function () {
        if (_NativePerformance.default?.getReactNativeStartupTiming) {
          var _NativePerformance$ge = _NativePerformance.default.getReactNativeStartupTiming(),
            startTime = _NativePerformance$ge.startTime,
            endTime = _NativePerformance$ge.endTime,
            initializeRuntimeStart = _NativePerformance$ge.initializeRuntimeStart,
            initializeRuntimeEnd = _NativePerformance$ge.initializeRuntimeEnd,
            executeJavaScriptBundleEntryPointStart = _NativePerformance$ge.executeJavaScriptBundleEntryPointStart,
            executeJavaScriptBundleEntryPointEnd = _NativePerformance$ge.executeJavaScriptBundleEntryPointEnd;
          return new _ReactNativeStartupTiming.default({
            startTime,
            endTime,
            initializeRuntimeStart,
            initializeRuntimeEnd,
            executeJavaScriptBundleEntryPointStart,
            executeJavaScriptBundleEntryPointEnd
          });
        }
        return new _ReactNativeStartupTiming.default();
      }
    }, {
      key: "mark",
      value: function mark(markName, markOptions) {
        var mark = new PerformanceMark(markName, markOptions);
        if (_NativePerformance.default?.mark) {
          _NativePerformance.default.mark(markName, mark.startTime);
        } else {
          warnNoNativePerformance();
        }
        return mark;
      }
    }, {
      key: "clearMarks",
      value: function clearMarks(markName) {
        if (!_NativePerformanceObserver.default?.clearEntries) {
          (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
          return;
        }
        _NativePerformanceObserver.default?.clearEntries(_RawPerformanceEntry.RawPerformanceEntryTypeValues.MARK, markName);
      }
    }, {
      key: "measure",
      value: function measure(measureName, startMarkOrOptions, endMark) {
        var options;
        var startMarkName,
          endMarkName = endMark,
          duration,
          startTime = 0,
          endTime = 0;
        if (typeof startMarkOrOptions === 'string') {
          startMarkName = startMarkOrOptions;
        } else if (startMarkOrOptions !== undefined) {
          options = startMarkOrOptions;
          if (endMark !== undefined) {
            throw new TypeError("Performance.measure: Can't have both options and endMark");
          }
          if (options.start === undefined && options.end === undefined) {
            throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');
          }
          if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {
            throw new TypeError("Performance.measure: Can't have both start/end and duration explicitly in options");
          }
          if (typeof options.start === 'number') {
            startTime = options.start;
          } else {
            startMarkName = options.start;
          }
          if (typeof options.end === 'number') {
            endTime = options.end;
          } else {
            endMarkName = options.end;
          }
          duration = options.duration ?? duration;
        }
        var measure = new PerformanceMeasure(measureName, options);
        if (_NativePerformance.default?.measure) {
          _NativePerformance.default.measure(measureName, startTime, endTime, duration, startMarkName, endMarkName);
        } else {
          warnNoNativePerformance();
        }
        return measure;
      }
    }, {
      key: "clearMeasures",
      value: function clearMeasures(measureName) {
        if (!_NativePerformanceObserver.default?.clearEntries) {
          (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
          return;
        }
        _NativePerformanceObserver.default?.clearEntries(_RawPerformanceEntry.RawPerformanceEntryTypeValues.MEASURE, measureName);
      }
    }, {
      key: "now",
      value: function now() {
        return getCurrentTimeStamp();
      }
    }, {
      key: "getEntries",
      value: function getEntries() {
        if (!_NativePerformanceObserver.default?.getEntries) {
          (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
          return [];
        }
        return _NativePerformanceObserver.default.getEntries().map(_RawPerformanceEntry.rawToPerformanceEntry);
      }
    }, {
      key: "getEntriesByType",
      value: function getEntriesByType(entryType) {
        if (!_PerformanceEntry3.ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {
          console.warn(`Performance.getEntriesByType: Only valid for ${JSON.stringify(_PerformanceEntry3.ALWAYS_LOGGED_ENTRY_TYPES)} entry types, got ${entryType}`);
          return [];
        }
        if (!_NativePerformanceObserver.default?.getEntries) {
          (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
          return [];
        }
        return _NativePerformanceObserver.default.getEntries((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType)).map(_RawPerformanceEntry.rawToPerformanceEntry);
      }
    }, {
      key: "getEntriesByName",
      value: function getEntriesByName(entryName, entryType) {
        if (entryType !== undefined && !_PerformanceEntry3.ALWAYS_LOGGED_ENTRY_TYPES.includes(entryType)) {
          console.warn(`Performance.getEntriesByName: Only valid for ${JSON.stringify(_PerformanceEntry3.ALWAYS_LOGGED_ENTRY_TYPES)} entry types, got ${entryType}`);
          return [];
        }
        if (!_NativePerformanceObserver.default?.getEntries) {
          (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
          return [];
        }
        return _NativePerformanceObserver.default.getEntries(entryType != null ? (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType) : undefined, entryName).map(_RawPerformanceEntry.rawToPerformanceEntry);
      }
    }]);
  }();
},161,[1,162,11,10,50,52,55,47,163,169,160,164,166,165,167,170]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _readOnlyError(r) {
    throw new TypeError('"' + r + '" is read-only');
  }
  module.exports = _readOnlyError, module.exports.__esModule = true, module.exports["default"] = module.exports;
},162,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativePerformanceObserver = _interopRequireDefault(require(_dependencyMap[3]));
  var _PerformanceObserver = require(_dependencyMap[4]);
  var cachedEventCounts;
  function getCachedEventCounts() {
    if (cachedEventCounts) {
      return cachedEventCounts;
    }
    if (!_NativePerformanceObserver.default) {
      (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
      return new Map();
    }
    cachedEventCounts = new Map(_NativePerformanceObserver.default.getEventCounts());
    global.queueMicrotask(() => {
      cachedEventCounts = null;
    });
    return cachedEventCounts ?? new Map();
  }
  var EventCounts = exports.default = /*#__PURE__*/function () {
    function EventCounts() {
      (0, _classCallCheck2.default)(this, EventCounts);
    }
    return (0, _createClass2.default)(EventCounts, [{
      key: "size",
      get: function () {
        return getCachedEventCounts().size;
      }
    }, {
      key: "entries",
      value: function entries() {
        return getCachedEventCounts().entries();
      }
    }, {
      key: "forEach",
      value: function forEach(callback) {
        return getCachedEventCounts().forEach(callback);
      }
    }, {
      key: "get",
      value: function get(key) {
        return getCachedEventCounts().get(key);
      }
    }, {
      key: "has",
      value: function has(key) {
        return getCachedEventCounts().has(key);
      }
    }, {
      key: "keys",
      value: function keys() {
        return getCachedEventCounts().keys();
      }
    }, {
      key: "values",
      value: function values() {
        return getCachedEventCounts().values();
      }
    }]);
  }();
},163,[1,10,11,164,165]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('NativePerformanceObserverCxx');
},164,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.PerformanceObserverEntryList = undefined;
  exports.warnNoNativePerformanceObserver = warnNoNativePerformanceObserver;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _warnOnce = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativePerformanceObserver = _interopRequireDefault(require(_dependencyMap[5]));
  var _PerformanceEntry = require(_dependencyMap[6]);
  var _RawPerformanceEntry = require(_dependencyMap[7]);
  var PerformanceObserverEntryList = exports.PerformanceObserverEntryList = /*#__PURE__*/function () {
    function PerformanceObserverEntryList(entries) {
      (0, _classCallCheck2.default)(this, PerformanceObserverEntryList);
      this._entries = entries;
    }
    return (0, _createClass2.default)(PerformanceObserverEntryList, [{
      key: "getEntries",
      value: function getEntries() {
        return this._entries;
      }
    }, {
      key: "getEntriesByType",
      value: function getEntriesByType(type) {
        return this._entries.filter(entry => entry.entryType === type);
      }
    }, {
      key: "getEntriesByName",
      value: function getEntriesByName(name, type) {
        if (type === undefined) {
          return this._entries.filter(entry => entry.name === name);
        } else {
          return this._entries.filter(entry => entry.name === name && entry.entryType === type);
        }
      }
    }]);
  }();
  var observerCountPerEntryType = new Map();
  var registeredObservers = new Map();
  var isOnPerformanceEntryCallbackSet = false;
  var onPerformanceEntry = () => {
    if (!_NativePerformanceObserver.default) {
      return;
    }
    var entryResult = _NativePerformanceObserver.default.popPendingEntries();
    var rawEntries = entryResult?.entries ?? [];
    var droppedEntriesCount = entryResult?.droppedEntriesCount;
    if (rawEntries.length === 0) {
      return;
    }
    var entries = rawEntries.map(_RawPerformanceEntry.rawToPerformanceEntry);
    var _loop = function (observerConfig) {
      var entriesForObserver = entries.filter(entry => {
        if (!observerConfig.entryTypes.has(entry.entryType)) {
          return false;
        }
        var durationThreshold = observerConfig.entryTypes.get(entry.entryType);
        return entry.duration >= (durationThreshold ?? 0);
      });
      observerConfig.callback(new PerformanceObserverEntryList(entriesForObserver), _observer, droppedEntriesCount);
    };
    for (var _ref of registeredObservers.entries()) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
      var _observer = _ref2[0];
      var observerConfig = _ref2[1];
      _loop(observerConfig);
    }
  };
  function warnNoNativePerformanceObserver() {
    (0, _warnOnce.default)('missing-native-performance-observer', 'Missing native implementation of PerformanceObserver');
  }
  function applyDurationThresholds() {
    var durationThresholds = Array.from(registeredObservers.values()).map(config => config.entryTypes).reduce((accumulator, currentValue) => union(accumulator, currentValue), new Map());
    for (var _ref3 of durationThresholds) {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
      var entryType = _ref4[0];
      var durationThreshold = _ref4[1];
      _NativePerformanceObserver.default?.setDurationThreshold((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType), durationThreshold ?? 0);
    }
  }
  var PerformanceObserver = exports.default = /*#__PURE__*/function () {
    function PerformanceObserver(callback) {
      (0, _classCallCheck2.default)(this, PerformanceObserver);
      this._callback = callback;
    }
    return (0, _createClass2.default)(PerformanceObserver, [{
      key: "observe",
      value: function observe(options) {
        if (!_NativePerformanceObserver.default) {
          warnNoNativePerformanceObserver();
          return;
        }
        this._validateObserveOptions(options);
        var requestedEntryTypes;
        if (options.entryTypes) {
          this._type = 'multiple';
          requestedEntryTypes = new Map(options.entryTypes.map(t => [t, undefined]));
        } else {
          this._type = 'single';
          requestedEntryTypes = new Map([[options.type, options.durationThreshold]]);
        }
        var currentEntryTypes = registeredObservers.get(this)?.entryTypes;
        var nextEntryTypes = currentEntryTypes ? union(requestedEntryTypes, currentEntryTypes) : requestedEntryTypes;
        if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {
          return;
        }
        registeredObservers.set(this, {
          callback: this._callback,
          entryTypes: nextEntryTypes
        });
        if (!isOnPerformanceEntryCallbackSet) {
          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(onPerformanceEntry);
          isOnPerformanceEntryCallbackSet = true;
        }
        var newEntryTypes = currentEntryTypes ? difference(new Set(requestedEntryTypes.keys()), new Set(currentEntryTypes.keys())) : new Set(requestedEntryTypes.keys());
        for (var type of newEntryTypes) {
          if (!observerCountPerEntryType.has(type)) {
            var rawType = (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type);
            _NativePerformanceObserver.default.startReporting(rawType);
          }
          observerCountPerEntryType.set(type, (observerCountPerEntryType.get(type) ?? 0) + 1);
        }
        applyDurationThresholds();
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        if (!_NativePerformanceObserver.default) {
          warnNoNativePerformanceObserver();
          return;
        }
        var observerConfig = registeredObservers.get(this);
        if (!observerConfig) {
          return;
        }
        for (var type of observerConfig.entryTypes.keys()) {
          var numberOfObserversForThisType = observerCountPerEntryType.get(type) ?? 0;
          if (numberOfObserversForThisType === 1) {
            observerCountPerEntryType.delete(type);
            _NativePerformanceObserver.default.stopReporting((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type));
          } else if (numberOfObserversForThisType !== 0) {
            observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);
          }
        }
        registeredObservers.delete(this);
        if (registeredObservers.size === 0) {
          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(undefined);
          isOnPerformanceEntryCallbackSet = false;
        }
        applyDurationThresholds();
      }
    }, {
      key: "_validateObserveOptions",
      value: function _validateObserveOptions(options) {
        var type = options.type,
          entryTypes = options.entryTypes,
          durationThreshold = options.durationThreshold;
        if (!type && !entryTypes) {
          throw new TypeError("Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.");
        }
        if (entryTypes && type) {
          throw new TypeError("Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.");
        }
        if (this._type === 'multiple' && type) {
          throw new Error("Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})");
        }
        if (this._type === 'single' && entryTypes) {
          throw new Error("Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})");
        }
        if (entryTypes && durationThreshold !== undefined) {
          throw new TypeError("Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.");
        }
      }
    }]);
  }();
  PerformanceObserver.supportedEntryTypes = Object.freeze(['mark', 'measure', 'event']);
  function union(a, b) {
    var res = new Map();
    for (var _ref5 of a) {
      var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);
      var k = _ref6[0];
      var v = _ref6[1];
      if (!b.has(k)) {
        res.set(k, v);
      } else {
        res.set(k, Math.min(v ?? 0, b.get(k) ?? 0));
      }
    }
    return res;
  }
  function difference(a, b) {
    return new Set([...a].filter(x => !b.has(x)));
  }
},165,[1,29,10,11,47,164,166,167]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PerformanceEntry = exports.ALWAYS_LOGGED_ENTRY_TYPES = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var ALWAYS_LOGGED_ENTRY_TYPES = exports.ALWAYS_LOGGED_ENTRY_TYPES = ['mark', 'measure'];
  var PerformanceEntry = exports.PerformanceEntry = /*#__PURE__*/function () {
    function PerformanceEntry(init) {
      (0, _classCallCheck2.default)(this, PerformanceEntry);
      this.name = init.name;
      this.entryType = init.entryType;
      this.startTime = init.startTime;
      this.duration = init.duration;
    }
    return (0, _createClass2.default)(PerformanceEntry, [{
      key: "toJSON",
      value: function toJSON() {
        return {
          name: this.name,
          entryType: this.entryType,
          startTime: this.startTime,
          duration: this.duration
        };
      }
    }]);
  }();
},166,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawPerformanceEntryTypeValues = undefined;
  exports.performanceEntryTypeToRaw = performanceEntryTypeToRaw;
  exports.rawToPerformanceEntry = rawToPerformanceEntry;
  exports.rawToPerformanceEntryType = rawToPerformanceEntryType;
  var _PerformanceEntry = require(_dependencyMap[0]);
  var _PerformanceEventTiming = require(_dependencyMap[1]);
  var RawPerformanceEntryTypeValues = exports.RawPerformanceEntryTypeValues = {
    UNDEFINED: 0,
    MARK: 1,
    MEASURE: 2,
    EVENT: 3
  };
  function rawToPerformanceEntry(entry) {
    if (entry.entryType === RawPerformanceEntryTypeValues.EVENT) {
      return new _PerformanceEventTiming.PerformanceEventTiming({
        name: entry.name,
        startTime: entry.startTime,
        duration: entry.duration,
        processingStart: entry.processingStart,
        processingEnd: entry.processingEnd,
        interactionId: entry.interactionId
      });
    } else {
      return new _PerformanceEntry.PerformanceEntry({
        name: entry.name,
        entryType: rawToPerformanceEntryType(entry.entryType),
        startTime: entry.startTime,
        duration: entry.duration
      });
    }
  }
  function rawToPerformanceEntryType(type) {
    switch (type) {
      case RawPerformanceEntryTypeValues.MARK:
        return 'mark';
      case RawPerformanceEntryTypeValues.MEASURE:
        return 'measure';
      case RawPerformanceEntryTypeValues.EVENT:
        return 'event';
      case RawPerformanceEntryTypeValues.UNDEFINED:
        throw new TypeError("rawToPerformanceEntryType: UNDEFINED can't be cast to PerformanceEntryType");
      default:
        throw new TypeError(`rawToPerformanceEntryType: unexpected performance entry type received: ${type}`);
    }
  }
  function performanceEntryTypeToRaw(type) {
    switch (type) {
      case 'mark':
        return RawPerformanceEntryTypeValues.MARK;
      case 'measure':
        return RawPerformanceEntryTypeValues.MEASURE;
      case 'event':
        return RawPerformanceEntryTypeValues.EVENT;
      default:
        type;
        throw new TypeError(`performanceEntryTypeToRaw: unexpected performance entry type received: ${type}`);
    }
  }
},167,[166,168]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PerformanceEventTiming = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _PerformanceEntry2 = require(_dependencyMap[7]);
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var PerformanceEventTiming = exports.PerformanceEventTiming = /*#__PURE__*/function (_PerformanceEntry) {
    function PerformanceEventTiming(init) {
      var _this;
      (0, _classCallCheck2.default)(this, PerformanceEventTiming);
      _this = _callSuper(this, PerformanceEventTiming, [{
        name: init.name,
        entryType: 'event',
        startTime: init.startTime ?? 0,
        duration: init.duration ?? 0
      }]);
      _this.processingStart = init.processingStart ?? 0;
      _this.processingEnd = init.processingEnd ?? 0;
      _this.interactionId = init.interactionId ?? 0;
      return _this;
    }
    (0, _inherits2.default)(PerformanceEventTiming, _PerformanceEntry);
    return (0, _createClass2.default)(PerformanceEventTiming, [{
      key: "toJSON",
      value: function toJSON() {
        return {
          ..._superPropGet(PerformanceEventTiming, "toJSON", this, 3)([]),
          processingStart: this.processingStart,
          processingEnd: this.processingEnd,
          interactionId: this.interactionId
        };
      }
    }]);
  }(_PerformanceEntry2.PerformanceEntry);
},168,[1,10,11,50,52,53,55,166]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var MemoryInfo = exports.default = /*#__PURE__*/function () {
    function MemoryInfo(memoryInfo) {
      (0, _classCallCheck2.default)(this, MemoryInfo);
      if (memoryInfo != null) {
        this._jsHeapSizeLimit = memoryInfo.jsHeapSizeLimit;
        this._totalJSHeapSize = memoryInfo.totalJSHeapSize;
        this._usedJSHeapSize = memoryInfo.usedJSHeapSize;
      }
    }
    return (0, _createClass2.default)(MemoryInfo, [{
      key: "jsHeapSizeLimit",
      get: function () {
        return this._jsHeapSizeLimit;
      }
    }, {
      key: "totalJSHeapSize",
      get: function () {
        return this._totalJSHeapSize;
      }
    }, {
      key: "usedJSHeapSize",
      get: function () {
        return this._usedJSHeapSize;
      }
    }]);
  }();
},169,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var ReactNativeStartupTiming = exports.default = /*#__PURE__*/function () {
    function ReactNativeStartupTiming(startUpTiming) {
      (0, _classCallCheck2.default)(this, ReactNativeStartupTiming);
      if (startUpTiming != null) {
        this._startTime = startUpTiming.startTime;
        this._endTime = startUpTiming.endTime;
        this._initializeRuntimeStart = startUpTiming.initializeRuntimeStart;
        this._initializeRuntimeEnd = startUpTiming.initializeRuntimeEnd;
        this._executeJavaScriptBundleEntryPointStart = startUpTiming.executeJavaScriptBundleEntryPointStart;
        this._executeJavaScriptBundleEntryPointEnd = startUpTiming.executeJavaScriptBundleEntryPointEnd;
      }
    }
    return (0, _createClass2.default)(ReactNativeStartupTiming, [{
      key: "startTime",
      get: function () {
        return this._startTime;
      }
    }, {
      key: "endTime",
      get: function () {
        return this._endTime;
      }
    }, {
      key: "initializeRuntimeStart",
      get: function () {
        return this._initializeRuntimeStart;
      }
    }, {
      key: "initializeRuntimeEnd",
      get: function () {
        return this._initializeRuntimeEnd;
      }
    }, {
      key: "executeJavaScriptBundleEntryPointStart",
      get: function () {
        return this._executeJavaScriptBundleEntryPointStart;
      }
    }, {
      key: "executeJavaScriptBundleEntryPointEnd",
      get: function () {
        return this._executeJavaScriptBundleEntryPointEnd;
      }
    }]);
  }();
},170,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ExceptionsManager = require(_dependencyMap[0]);
  ExceptionsManager.installConsoleErrorReporter();
  if (!global.__fbDisableExceptionsManager) {
    var handleError = (e, isFatal) => {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };
    var ErrorUtils = require(_dependencyMap[1]);
    ErrorUtils.setGlobalHandler(handleError);
  }
},171,[70,69]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0]),
    polyfillGlobal = _require.polyfillGlobal;
  if (global?.HermesInternal?.hasPromise?.()) {
    var HermesPromise = global.Promise;
  } else {
    polyfillGlobal('Promise', () => require(_dependencyMap[1]));
  }
},172,[6,173]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0]);
  require(_dependencyMap[1]);
  module.exports = Promise;
},173,[174,176]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  //This file contains the ES6 extensions to the core Promises/A+ API
  var Promise = require(_dependencyMap[0]);
  module.exports = Promise;

  /* Static Functions */

  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');
  function valuePromise(value) {
    var p = new Promise(Promise._D);
    p._y = 1;
    p._z = value;
    return p;
  }
  Promise.resolve = function (value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;
    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;
        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      }
    }
    return valuePromise(value);
  };
  var iterableToArray = function (iterable) {
    if (typeof Array.from === 'function') {
      // ES2015+, iterables exist
      iterableToArray = Array.from;
      return Array.from(iterable);
    }

    // ES5, only arrays and array-likes exist
    iterableToArray = function (x) {
      return Array.prototype.slice.call(x);
    };
    return Array.prototype.slice.call(iterable);
  };
  Promise.all = function (arr) {
    var args = iterableToArray(arr);
    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;
      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._y === 3) {
              val = val._z;
            }
            if (val._y === 1) return res(i, val._z);
            if (val._y === 2) reject(val._z);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;
            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }
        args[i] = val;
        if (--remaining === 0) {
          resolve(args);
        }
      }
      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };
  function onSettledFulfill(value) {
    return {
      status: 'fulfilled',
      value: value
    };
  }
  function onSettledReject(reason) {
    return {
      status: 'rejected',
      reason: reason
    };
  }
  function mapAllSettled(item) {
    if (item && (typeof item === 'object' || typeof item === 'function')) {
      if (item instanceof Promise && item.then === Promise.prototype.then) {
        return item.then(onSettledFulfill, onSettledReject);
      }
      var then = item.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(item)).then(onSettledFulfill, onSettledReject);
      }
    }
    return onSettledFulfill(item);
  }
  Promise.allSettled = function (iterable) {
    return Promise.all(iterableToArray(iterable).map(mapAllSettled));
  };
  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };
  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      iterableToArray(values).forEach(function (value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };

  /* Prototype Methods */

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
  function getAggregateError(errors) {
    if (typeof AggregateError === 'function') {
      return new AggregateError(errors, 'All promises were rejected');
    }
    var error = new Error('All promises were rejected');
    error.name = 'AggregateError';
    error.errors = errors;
    return error;
  }
  Promise.any = function promiseAny(values) {
    return new Promise(function (resolve, reject) {
      var promises = iterableToArray(values);
      var hasResolved = false;
      var rejectionReasons = [];
      function resolveOnce(value) {
        if (!hasResolved) {
          hasResolved = true;
          resolve(value);
        }
      }
      function rejectionCheck(reason) {
        rejectionReasons.push(reason);
        if (rejectionReasons.length === promises.length) {
          reject(getAggregateError(rejectionReasons));
        }
      }
      if (promises.length === 0) {
        reject(getAggregateError(rejectionReasons));
      } else {
        promises.forEach(function (value) {
          Promise.resolve(value).then(resolveOnce, rejectionCheck);
        });
      }
    });
  };
},174,[175]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  // States:
  //
  // 0 - pending
  // 1 - fulfilled with _value
  // 2 - rejected with _value
  // 3 - adopted the state of another promise, _value
  //
  // once the state is no longer pending (0) it is immutable

  // All `_` prefixed properties will be reduced to `_{random number}`
  // at build time to obfuscate them and discourage their use.
  // We don't use symbols or Object.defineProperty to fully hide them
  // because the performance isn't good enough.

  // to avoid using try/catch inside critical functions, we
  // extract them to here.
  var LAST_ERROR = null;
  var IS_ERROR = {};
  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  module.exports = Promise;
  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }
    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }
    this._x = 0;
    this._y = 0;
    this._z = null;
    this._A = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }
  Promise._B = null;
  Promise._C = null;
  Promise._D = noop;
  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }
    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };
  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }
  function handle(self, deferred) {
    while (self._y === 3) {
      self = self._z;
    }
    if (Promise._B) {
      Promise._B(self);
    }
    if (self._y === 0) {
      if (self._x === 0) {
        self._x = 1;
        self._A = deferred;
        return;
      }
      if (self._x === 1) {
        self._x = 2;
        self._A = [self._A, deferred];
        return;
      }
      self._A.push(deferred);
      return;
    }
    handleResolved(self, deferred);
  }
  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._y === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        if (self._y === 1) {
          resolve(deferred.promise, self._z);
        } else {
          reject(deferred.promise, self._z);
        }
        return;
      }
      var ret = tryCallOne(cb, self._z);
      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }
  function resolve(self, newValue) {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }
    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);
      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }
      if (then === self.then && newValue instanceof Promise) {
        self._y = 3;
        self._z = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }
    self._y = 1;
    self._z = newValue;
    finale(self);
  }
  function reject(self, newValue) {
    self._y = 2;
    self._z = newValue;
    if (Promise._C) {
      Promise._C(self, newValue);
    }
    finale(self);
  }
  function finale(self) {
    if (self._x === 1) {
      handle(self, self._A);
      self._A = null;
    }
    if (self._x === 2) {
      for (var i = 0; i < self._A.length; i++) {
        handle(self, self._A[i]);
      }
      self._A = null;
    }
  }
  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });
    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},175,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0]);
  module.exports = Promise;
  Promise.prototype.finally = function (f) {
    return this.then(function (value) {
      return Promise.resolve(f()).then(function () {
        return value;
      });
    }, function (err) {
      return Promise.resolve(f()).then(function () {
        throw err;
      });
    });
  };
},176,[175]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0]),
    hasNativeConstructor = _require.hasNativeConstructor;
  var _require2 = require(_dependencyMap[1]),
    polyfillGlobal = _require2.polyfillGlobal;
  var hasNativeGenerator;
  try {
    hasNativeGenerator = hasNativeConstructor(function* () {}, 'GeneratorFunction');
  } catch {
    hasNativeGenerator = false;
  }
  if (!hasNativeGenerator) {
    polyfillGlobal('regeneratorRuntime', () => {
      delete global.regeneratorRuntime;
      return require(_dependencyMap[2]);
    });
  }
},177,[178,6,179]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function isNativeFunction(f) {
    return typeof f === 'function' && f.toString().indexOf('[native code]') > -1;
  }
  function hasNativeConstructor(o, expectedName) {
    var con = Object.getPrototypeOf(o).constructor;
    return con.name === expectedName && isNativeFunction(con);
  }
  module.exports = {
    isNativeFunction,
    hasNativeConstructor
  };
},178,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    };
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      });
      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: true
    });
    defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: true
    });
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction ||
      // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }
          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }
      var previousPromise;
      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
        // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      defineProperty(this, "_invoke", {
        value: enqueue
      });
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === undefined) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };
    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }
        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }
        context.method = method;
        context.arg = arg;
        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }
            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }
          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
            if (record.arg === ContinueSentinel) {
              continue;
            }
            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method;
      var method = delegate.iterator[methodName];
      if (method === undefined) {
        // A .throw or .return when the delegate iterator has no .throw
        // method, or a missing .next mehtod, always terminate the
        // yield* loop.
        context.delegate = null;

        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (methodName === "throw" && delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);
          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }
        if (methodName !== "return") {
          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method");
        }
        return ContinueSentinel;
      }
      var record = tryCatch(method, delegate.iterator, context.arg);
      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }
      var info = record.arg;
      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }
      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function () {
      return this;
    });
    define(Gp, "toString", function () {
      return "[object Generator]";
    });
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      if (1 in locs) {
        entry.catchLoc = locs[1];
      }
      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }
      this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }
    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }
    exports.keys = function (val) {
      var object = Object(val);
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }
        if (typeof iterable.next === "function") {
          return iterable;
        }
        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }
              next.value = undefined;
              next.done = true;
              return next;
            };
          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return {
        next: doneResult
      };
    }
    exports.values = values;
    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }
    Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);
        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function () {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) {
          throw exception;
        }
        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined;
          }
          return !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;
          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }
        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;
        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }
        return this.complete(record);
      },
      complete: function (record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }
        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
        return ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };
        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined;
        }
        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
  }(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {});
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
},179,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0]),
    isNativeFunction = _require.isNativeFunction;
  var _require2 = require(_dependencyMap[1]),
    polyfillGlobal = _require2.polyfillGlobal;
  var hasHermesPromiseQueuedToJSVM = global.HermesInternal?.hasPromise?.() === true && global.HermesInternal?.useEngineQueue?.() === true;
  var hasNativePromise = isNativeFunction(Promise);
  var hasPromiseQueuedToJSVM = hasNativePromise || hasHermesPromiseQueuedToJSVM;
  if (global.RN$Bridgeless !== true) {
    var defineLazyTimer = name => {
      polyfillGlobal(name, () => require(_dependencyMap[2])[name]);
    };
    defineLazyTimer('setTimeout');
    defineLazyTimer('clearTimeout');
    defineLazyTimer('setInterval');
    defineLazyTimer('clearInterval');
    defineLazyTimer('requestAnimationFrame');
    defineLazyTimer('cancelAnimationFrame');
    defineLazyTimer('requestIdleCallback');
    defineLazyTimer('cancelIdleCallback');
  }
  if (hasPromiseQueuedToJSVM) {
    polyfillGlobal('setImmediate', () => require(_dependencyMap[3]).setImmediate);
    polyfillGlobal('clearImmediate', () => require(_dependencyMap[3]).clearImmediate);
  } else {
    if (global.RN$Bridgeless !== true) {
      polyfillGlobal('setImmediate', () => require(_dependencyMap[2]).queueReactNativeMicrotask);
      polyfillGlobal('clearImmediate', () => require(_dependencyMap[2]).clearReactNativeMicrotask);
    }
  }
  if (hasHermesPromiseQueuedToJSVM) {
    polyfillGlobal('queueMicrotask', () => global.HermesInternal?.enqueueJob);
  } else {
    polyfillGlobal('queueMicrotask', () => require(_dependencyMap[4]).default);
  }
},180,[178,6,181,183,184]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeTiming = _interopRequireDefault(require(_dependencyMap[1]));
  var BatchedBridge = require(_dependencyMap[2]);
  var Systrace = require(_dependencyMap[3]);
  var invariant = require(_dependencyMap[4]);
  var FRAME_DURATION = 16.666666666666668;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var reactNativeMicrotasks = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var GUID = 1;
  var errors = [];
  var hasEmittedTimeDriftWarning = false;
  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);
    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }
    return freeIndex;
  }
  function _allocateCallback(func, type) {
    var id = GUID++;
    var freeIndex = _getFreeIndex();
    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;
    return id;
  }
  function _callTimer(timerID, frameTime, didTimeout) {
    if (timerID > GUID) {
      console.warn('Tried to call timer with ID %s but no such timer exists.', timerID);
    }
    var timerIndex = timerIDs.indexOf(timerID);
    if (timerIndex === -1) {
      return;
    }
    var type = types[timerIndex];
    var callback = callbacks[timerIndex];
    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }
    if (type !== 'setInterval') {
      _clearIndex(timerIndex);
    }
    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'queueReactNativeMicrotask') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(global.performance.now());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function () {
            return Math.max(0, FRAME_DURATION - (global.performance.now() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      errors.push(e);
    }
  }
  function _callReactNativeMicrotasksPass() {
    if (reactNativeMicrotasks.length === 0) {
      return false;
    }
    var passReactNativeMicrotasks = reactNativeMicrotasks;
    reactNativeMicrotasks = [];
    for (var i = 0; i < passReactNativeMicrotasks.length; ++i) {
      _callTimer(passReactNativeMicrotasks[i], 0);
    }
    return reactNativeMicrotasks.length > 0;
  }
  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
  }
  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }
    var index = timerIDs.indexOf(timerID);
    if (index !== -1) {
      var type = types[index];
      _clearIndex(index);
      if (type !== 'queueReactNativeMicrotask' && type !== 'requestIdleCallback') {
        deleteTimer(timerID);
      }
    }
  }
  var JSTimers = {
    setTimeout: function (func, duration) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
      var id = _allocateCallback(() => func.apply(undefined, args), 'setTimeout');
      createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function (func, duration) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }
      var id = _allocateCallback(() => func.apply(undefined, args), 'setInterval');
      createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    queueReactNativeMicrotask: function (func) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      var id = _allocateCallback(() => func.apply(undefined, args), 'queueReactNativeMicrotask');
      reactNativeMicrotasks.push(id);
      return id;
    },
    requestAnimationFrame: function (func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');
      createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function (func, options) {
      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(true);
      }
      var timeout = options && options.timeout;
      var id = _allocateCallback(timeout != null ? deadline => {
        var timeoutId = requestIdleCallbackTimeouts[id];
        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }
        return func(deadline);
      } : func, 'requestIdleCallback');
      requestIdleCallbacks.push(id);
      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(() => {
          var index = requestIdleCallbacks.indexOf(id);
          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);
            _callTimer(id, global.performance.now(), true);
          }
          delete requestIdleCallbackTimeouts[id];
          if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }
      return id;
    },
    cancelIdleCallback: function (timerID) {
      _freeCallback(timerID);
      var index = requestIdleCallbacks.indexOf(timerID);
      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }
      var timeoutId = requestIdleCallbackTimeouts[timerID];
      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }
      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(false);
      }
    },
    clearTimeout: function (timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function (timerID) {
      _freeCallback(timerID);
    },
    clearReactNativeMicrotask: function (timerID) {
      _freeCallback(timerID);
      var index = reactNativeMicrotasks.indexOf(timerID);
      if (index !== -1) {
        reactNativeMicrotasks.splice(index, 1);
      }
    },
    cancelAnimationFrame: function (timerID) {
      _freeCallback(timerID);
    },
    callTimers: function (timersToCall) {
      invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors.length = 0;
      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }
      var errorCount = errors.length;
      if (errorCount > 0) {
        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout((error => {
              throw error;
            }).bind(null, errors[ii]), 0);
          }
        }
        throw errors[0];
      }
    },
    callIdleCallbacks: function (frameTime) {
      if (FRAME_DURATION - (Date.now() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }
      errors.length = 0;
      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks;
        requestIdleCallbacks = [];
        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }
      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(false);
      }
      errors.forEach(error => JSTimers.setTimeout(() => {
        throw error;
      }, 0));
    },
    callReactNativeMicrotasks() {
      errors.length = 0;
      while (_callReactNativeMicrotasksPass()) {}
      errors.forEach(error => JSTimers.setTimeout(() => {
        throw error;
      }, 0));
    },
    emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }
      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };
  function createTimer(callbackID, duration, jsSchedulingTime, repeats) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.createTimer(callbackID, duration, jsSchedulingTime, repeats);
  }
  function deleteTimer(timerID) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.deleteTimer(timerID);
  }
  function setSendIdleEvents(sendIdleEvents) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.setSendIdleEvents(sendIdleEvents);
  }
  var ExportedJSTimers;
  if (!_NativeTiming.default) {
    console.warn("Timing native module is not available, can't set timers.");
    ExportedJSTimers = {
      callReactNativeMicrotasks: JSTimers.callReactNativeMicrotasks,
      queueReactNativeMicrotask: JSTimers.queueReactNativeMicrotask
    };
  } else {
    ExportedJSTimers = JSTimers;
  }
  BatchedBridge.setReactNativeMicrotasksCallback(JSTimers.callReactNativeMicrotasks);
  module.exports = ExportedJSTimers;
},181,[1,182,65,57,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('Timing');
},182,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var GUIID = 1;
  var clearedImmediates = new Set();
  function setImmediate(callback) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (arguments.length < 1) {
      throw new TypeError('setImmediate must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
      throw new TypeError('The first argument to setImmediate must be a function.');
    }
    var id = GUIID++;
    if (clearedImmediates.has(id)) {
      clearedImmediates.delete(id);
    }
    global.queueMicrotask(() => {
      if (!clearedImmediates.has(id)) {
        callback.apply(undefined, args);
      } else {
        clearedImmediates.delete(id);
      }
    });
    return id;
  }
  function clearImmediate(immediateID) {
    clearedImmediates.add(immediateID);
  }
  var immediateShim = {
    setImmediate: setImmediate,
    clearImmediate: clearImmediate
  };
  module.exports = immediateShim;
},183,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = queueMicrotask;
  var resolvedPromise;
  function queueMicrotask(callback) {
    if (arguments.length < 1) {
      throw new TypeError('queueMicrotask must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
      throw new TypeError('The argument to queueMicrotask must be a function.');
    }
    (resolvedPromise || (resolvedPromise = Promise.resolve())).then(callback).catch(error => setTimeout(() => {
      throw error;
    }, 0));
  }
},184,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0]),
    polyfillGlobal = _require.polyfillGlobal;
  polyfillGlobal('XMLHttpRequest', () => require(_dependencyMap[1]));
  polyfillGlobal('FormData', () => require(_dependencyMap[2]));
  polyfillGlobal('fetch', () => require(_dependencyMap[3]).fetch);
  polyfillGlobal('Headers', () => require(_dependencyMap[3]).Headers);
  polyfillGlobal('Request', () => require(_dependencyMap[3]).Request);
  polyfillGlobal('Response', () => require(_dependencyMap[3]).Response);
  polyfillGlobal('WebSocket', () => require(_dependencyMap[4]));
  polyfillGlobal('Blob', () => require(_dependencyMap[5]));
  polyfillGlobal('File', () => require(_dependencyMap[6]));
  polyfillGlobal('FileReader', () => require(_dependencyMap[7]));
  polyfillGlobal('URL', () => require(_dependencyMap[8]).URL);
  polyfillGlobal('URLSearchParams', () => require(_dependencyMap[8]).URLSearchParams);
  polyfillGlobal('AbortController', () => require(_dependencyMap[9]).AbortController);
  polyfillGlobal('AbortSignal', () => require(_dependencyMap[9]).AbortSignal);
},185,[6,186,198,200,202,190,208,209,211,212]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _get2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _eventTargetShim = _interopRequireDefault(require(_dependencyMap[7]));
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var BlobManager = require(_dependencyMap[8]);
  var GlobalPerformanceLogger = require(_dependencyMap[9]);
  var RCTNetworking = require(_dependencyMap[10]).default;
  var base64 = require(_dependencyMap[11]);
  var invariant = require(_dependencyMap[12]);
  var DEBUG_NETWORK_SEND_DELAY = false;
  if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
  }
  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');
  var XMLHttpRequestEventTarget = /*#__PURE__*/function (_ref) {
    function XMLHttpRequestEventTarget() {
      (0, _classCallCheck2.default)(this, XMLHttpRequestEventTarget);
      return _callSuper(this, XMLHttpRequestEventTarget, arguments);
    }
    (0, _inherits2.default)(XMLHttpRequestEventTarget, _ref);
    return (0, _createClass2.default)(XMLHttpRequestEventTarget);
  }((0, _eventTargetShim.default)(...REQUEST_EVENTS));
  var XMLHttpRequest = /*#__PURE__*/function (_ref2) {
    function XMLHttpRequest() {
      var _this;
      (0, _classCallCheck2.default)(this, XMLHttpRequest);
      _this = _callSuper(this, XMLHttpRequest);
      _this.UNSENT = UNSENT;
      _this.OPENED = OPENED;
      _this.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this.readyState = UNSENT;
      _this.status = 0;
      _this.timeout = 0;
      _this.withCredentials = true;
      _this.upload = new XMLHttpRequestEventTarget();
      _this._aborted = false;
      _this._hasError = false;
      _this._method = null;
      _this._perfKey = null;
      _this._response = '';
      _this._url = null;
      _this._timedOut = false;
      _this._trackingName = 'unknown';
      _this._incrementalEvents = false;
      _this._performanceLogger = GlobalPerformanceLogger;
      _this._reset();
      return _this;
    }
    (0, _inherits2.default)(XMLHttpRequest, _ref2);
    return (0, _createClass2.default)(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};
        this._clearSubscriptions();
        this._timedOut = false;
      }
    }, {
      key: "responseType",
      get: function () {
        return this._responseType;
      },
      set: function (responseType) {
        if (this._sent) {
          throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The response type cannot be set after the request has been sent.");
        }
        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          console.warn(`The provided value '${responseType}' is not a valid 'responseType'.`);
          return;
        }
        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', `The provided value '${responseType}' is unsupported in this environment.`);
        if (responseType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
        }
        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function () {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + `is set to '' or 'text', but it is '${this._responseType}'.`);
        }
        if (this.readyState < LOADING) {
          return '';
        }
        return this._response;
      }
    }, {
      key: "response",
      get: function () {
        var responseType = this.responseType;
        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }
        if (this.readyState !== DONE) {
          return null;
        }
        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }
        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;
          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;
          case 'blob':
            if (typeof this._response === 'object' && this._response) {
              this._cachedResponse = BlobManager.createFromOptions(this._response);
            } else if (this._response === '') {
              this._cachedResponse = BlobManager.createFromParts([]);
            } else {
              throw new Error(`Invalid response for blob: ${this._response}`);
            }
            break;
          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }
            break;
          default:
            this._cachedResponse = null;
        }
        return this._cachedResponse;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this._perfKey != null && this._performanceLogger.stopTimespan(this._perfKey);
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);
          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }
        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }
        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);
        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }
        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded,
          total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }
            this._hasError = true;
            if (timeOutError) {
              this._timedOut = true;
            }
          }
          this._clearSubscriptions();
          this._requestId = null;
          this.setReadyState(this.DONE);
          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(sub => {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }
        var responseHeaders = this.responseHeaders;
        var unsortedHeaders = new Map();
        for (var rawHeaderName of Object.keys(responseHeaders)) {
          var headerValue = responseHeaders[rawHeaderName];
          var lowerHeaderName = rawHeaderName.toLowerCase();
          var header = unsortedHeaders.get(lowerHeaderName);
          if (header) {
            header.headerValue += ', ' + headerValue;
            unsortedHeaders.set(lowerHeaderName, header);
          } else {
            unsortedHeaders.set(lowerHeaderName, {
              lowerHeaderName,
              upperHeaderName: rawHeaderName.toUpperCase(),
              headerValue
            });
          }
        }
        var sortedHeaders = [...unsortedHeaders.values()].sort((a, b) => {
          if (a.upperHeaderName < b.upperHeaderName) {
            return -1;
          }
          if (a.upperHeaderName > b.upperHeaderName) {
            return 1;
          }
          return 0;
        });
        return sortedHeaders.map(header => {
          return header.lowerHeaderName + ': ' + header.headerValue;
        }).join('\r\n') + '\r\n';
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }
        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "setPerformanceLogger",
      value: function setPerformanceLogger(performanceLogger) {
        this._performanceLogger = performanceLogger;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }
        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }
        if (!url) {
          throw new Error('Cannot load an empty url');
        }
        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }
        if (this._sent) {
          throw new Error('Request has already been sent');
        }
        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;
        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', args => this.__didUploadProgress(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', args => this.__didReceiveResponse(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', args => this.__didReceiveData(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', args => this.__didReceiveIncrementalData(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', args => this.__didReceiveDataProgress(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', args => this.__didCompleteResponse(...args)));
        var nativeResponseType = 'text';
        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }
        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }
        var doSend = () => {
          var friendlyName = this._trackingName !== 'unknown' ? this._trackingName : this._url;
          this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);
          this._performanceLogger.startTimespan(this._perfKey);
          invariant(this._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);
          invariant(this._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);
          RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
        };
        {
          doSend();
        }
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;
        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }
        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();
          this.setReadyState(this.DONE);
        }
        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce((lcaseHeaders, headerName) => {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });
        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }
          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }
        _superPropGet(XMLHttpRequest, "addEventListener", this, 3)([type, listener]);
      }
    }], [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);
  }((0, _eventTargetShim.default)(...XHR_EVENTS));
  XMLHttpRequest.UNSENT = UNSENT;
  XMLHttpRequest.OPENED = OPENED;
  XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
  XMLHttpRequest.LOADING = LOADING;
  XMLHttpRequest.DONE = DONE;
  XMLHttpRequest._interceptor = null;
  module.exports = XMLHttpRequest;
},186,[1,53,11,10,50,52,55,187,188,192,195,24,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EventTarget = EventTarget;
  exports.default = undefined;
  exports.defineEventAttribute = defineEventAttribute;
  /**
   * @author Toru Nagashima <https://github.com/mysticatea>
   * @copyright 2015 Toru Nagashima. All rights reserved.
   * See LICENSE file in root directory for full license.
   */
  /**
   * @typedef {object} PrivateData
   * @property {EventTarget} eventTarget The event target.
   * @property {{type:string}} event The original event object.
   * @property {number} eventPhase The current event phase.
   * @property {EventTarget|null} currentTarget The current event target.
   * @property {boolean} canceled The flag to prevent default.
   * @property {boolean} stopped The flag to stop propagation.
   * @property {boolean} immediateStopped The flag to stop propagation immediately.
   * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
   * @property {number} timeStamp The unix time.
   * @private
   */

  /**
   * Private data for event wrappers.
   * @type {WeakMap<Event, PrivateData>}
   * @private
   */
  var privateData = new WeakMap();

  /**
   * Cache for wrapper classes.
   * @type {WeakMap<Object, Function>}
   * @private
   */
  var wrappers = new WeakMap();

  /**
   * Get private data.
   * @param {Event} event The event object to get private data.
   * @returns {PrivateData} The private data of the event.
   * @private
   */
  function pd(event) {
    var retv = privateData.get(event);
    console.assert(retv != null, "'this' is expected an Event object, but got", event);
    return retv;
  }

  /**
   * https://dom.spec.whatwg.org/#set-the-canceled-flag
   * @param data {PrivateData} private data.
   */
  function setCancelFlag(data) {
    if (data.passiveListener != null) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
      }
      return;
    }
    if (!data.event.cancelable) {
      return;
    }
    data.canceled = true;
    if (typeof data.event.preventDefault === "function") {
      data.event.preventDefault();
    }
  }

  /**
   * @see https://dom.spec.whatwg.org/#interface-event
   * @private
   */
  /**
   * The event wrapper.
   * @constructor
   * @param {EventTarget} eventTarget The event target of this dispatching.
   * @param {Event|{type:string}} event The original event to wrap.
   */
  function Event(eventTarget, event) {
    privateData.set(this, {
      eventTarget,
      event,
      eventPhase: 2,
      currentTarget: eventTarget,
      canceled: false,
      stopped: false,
      immediateStopped: false,
      passiveListener: null,
      timeStamp: event.timeStamp || Date.now()
    });

    // https://heycam.github.io/webidl/#Unforgeable
    Object.defineProperty(this, "isTrusted", {
      value: false,
      enumerable: true
    });

    // Define accessors
    var keys = Object.keys(event);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!(key in this)) {
        Object.defineProperty(this, key, defineRedirectDescriptor(key));
      }
    }
  }

  // Should be enumerable, but class methods are not enumerable.
  Event.prototype = {
    /**
     * The type of this event.
     * @type {string}
     */
    get type() {
      return pd(this).event.type;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */
    get target() {
      return pd(this).eventTarget;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */
    get currentTarget() {
      return pd(this).currentTarget;
    },
    /**
     * @returns {EventTarget[]} The composed path of this event.
     */
    composedPath() {
      var currentTarget = pd(this).currentTarget;
      if (currentTarget == null) {
        return [];
      }
      return [currentTarget];
    },
    /**
     * Constant of NONE.
     * @type {number}
     */
    get NONE() {
      return 0;
    },
    /**
     * Constant of CAPTURING_PHASE.
     * @type {number}
     */
    get CAPTURING_PHASE() {
      return 1;
    },
    /**
     * Constant of AT_TARGET.
     * @type {number}
     */
    get AT_TARGET() {
      return 2;
    },
    /**
     * Constant of BUBBLING_PHASE.
     * @type {number}
     */
    get BUBBLING_PHASE() {
      return 3;
    },
    /**
     * The target of this event.
     * @type {number}
     */
    get eventPhase() {
      return pd(this).eventPhase;
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */
    stopPropagation() {
      var data = pd(this);
      data.stopped = true;
      if (typeof data.event.stopPropagation === "function") {
        data.event.stopPropagation();
      }
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */
    stopImmediatePropagation() {
      var data = pd(this);
      data.stopped = true;
      data.immediateStopped = true;
      if (typeof data.event.stopImmediatePropagation === "function") {
        data.event.stopImmediatePropagation();
      }
    },
    /**
     * The flag to be bubbling.
     * @type {boolean}
     */
    get bubbles() {
      return Boolean(pd(this).event.bubbles);
    },
    /**
     * The flag to be cancelable.
     * @type {boolean}
     */
    get cancelable() {
      return Boolean(pd(this).event.cancelable);
    },
    /**
     * Cancel this event.
     * @returns {void}
     */
    preventDefault() {
      setCancelFlag(pd(this));
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     */
    get defaultPrevented() {
      return pd(this).canceled;
    },
    /**
     * The flag to be composed.
     * @type {boolean}
     */
    get composed() {
      return Boolean(pd(this).event.composed);
    },
    /**
     * The unix time of this event.
     * @type {number}
     */
    get timeStamp() {
      return pd(this).timeStamp;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     * @deprecated
     */
    get srcElement() {
      return pd(this).eventTarget;
    },
    /**
     * The flag to stop event bubbling.
     * @type {boolean}
     * @deprecated
     */
    get cancelBubble() {
      return pd(this).stopped;
    },
    set cancelBubble(value) {
      if (!value) {
        return;
      }
      var data = pd(this);
      data.stopped = true;
      if (typeof data.event.cancelBubble === "boolean") {
        data.event.cancelBubble = true;
      }
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     * @deprecated
     */
    get returnValue() {
      return !pd(this).canceled;
    },
    set returnValue(value) {
      if (!value) {
        setCancelFlag(pd(this));
      }
    },
    /**
     * Initialize this event object. But do nothing under event dispatching.
     * @param {string} type The event type.
     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
     * @param {boolean} [cancelable=false] The flag to be possible to cancel.
     * @deprecated
     */
    initEvent() {
      // Do nothing.
    }
  };

  // `constructor` is not enumerable.
  Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
  });

  // Ensure `event instanceof window.Event` is `true`.
  if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);

    // Make association for wrappers.
    wrappers.set(window.Event.prototype, Event);
  }

  /**
   * Get the property descriptor to redirect a given property.
   * @param {string} key Property name to define property descriptor.
   * @returns {PropertyDescriptor} The property descriptor to redirect the property.
   * @private
   */
  function defineRedirectDescriptor(key) {
    return {
      get() {
        return pd(this).event[key];
      },
      set(value) {
        pd(this).event[key] = value;
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Get the property descriptor to call a given method property.
   * @param {string} key Property name to define property descriptor.
   * @returns {PropertyDescriptor} The property descriptor to call the method property.
   * @private
   */
  function defineCallDescriptor(key) {
    return {
      value() {
        var event = pd(this).event;
        return event[key].apply(event, arguments);
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Define new wrapper class.
   * @param {Function} BaseEvent The base wrapper class.
   * @param {Object} proto The prototype of the original event.
   * @returns {Function} The defined wrapper class.
   * @private
   */
  function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);
    if (keys.length === 0) {
      return BaseEvent;
    }

    /** CustomEvent */
    function CustomEvent(eventTarget, event) {
      BaseEvent.call(this, eventTarget, event);
    }
    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
      constructor: {
        value: CustomEvent,
        configurable: true,
        writable: true
      }
    });

    // Define accessors.
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!(key in BaseEvent.prototype)) {
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        var isFunc = typeof descriptor.value === "function";
        Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
      }
    }
    return CustomEvent;
  }

  /**
   * Get the wrapper class of a given prototype.
   * @param {Object} proto The prototype of the original event to get its wrapper.
   * @returns {Function} The wrapper class.
   * @private
   */
  function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
      return Event;
    }
    var wrapper = wrappers.get(proto);
    if (wrapper == null) {
      wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
      wrappers.set(proto, wrapper);
    }
    return wrapper;
  }

  /**
   * Wrap a given event to management a dispatching.
   * @param {EventTarget} eventTarget The event target of this dispatching.
   * @param {Object} event The event to wrap.
   * @returns {Event} The wrapper instance.
   * @private
   */
  function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
  }

  /**
   * Get the immediateStopped flag of a given event.
   * @param {Event} event The event to get.
   * @returns {boolean} The flag to stop propagation immediately.
   * @private
   */
  function isStopped(event) {
    return pd(event).immediateStopped;
  }

  /**
   * Set the current event phase of a given event.
   * @param {Event} event The event to set current target.
   * @param {number} eventPhase New event phase.
   * @returns {void}
   * @private
   */
  function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
  }

  /**
   * Set the current target of a given event.
   * @param {Event} event The event to set current target.
   * @param {EventTarget|null} currentTarget New current target.
   * @returns {void}
   * @private
   */
  function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
  }

  /**
   * Set a passive listener of a given event.
   * @param {Event} event The event to set current target.
   * @param {Function|null} passiveListener New passive listener.
   * @returns {void}
   * @private
   */
  function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
  }

  /**
   * @typedef {object} ListenerNode
   * @property {Function} listener
   * @property {1|2|3} listenerType
   * @property {boolean} passive
   * @property {boolean} once
   * @property {ListenerNode|null} next
   * @private
   */

  /**
   * @type {WeakMap<object, Map<string, ListenerNode>>}
   * @private
   */
  var listenersMap = new WeakMap();

  // Listener types
  var CAPTURE = 1;
  var BUBBLE = 2;
  var ATTRIBUTE = 3;

  /**
   * Check whether a given value is an object or not.
   * @param {any} x The value to check.
   * @returns {boolean} `true` if the value is an object.
   */
  function isObject(x) {
    return x !== null && typeof x === "object"; //eslint-disable-line no-restricted-syntax
  }

  /**
   * Get listeners.
   * @param {EventTarget} eventTarget The event target to get.
   * @returns {Map<string, ListenerNode>} The listeners.
   * @private
   */
  function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);
    if (listeners == null) {
      throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }
    return listeners;
  }

  /**
   * Get the property descriptor for the event attribute of a given event.
   * @param {string} eventName The event name to get property descriptor.
   * @returns {PropertyDescriptor} The property descriptor.
   * @private
   */
  function defineEventAttributeDescriptor(eventName) {
    return {
      get() {
        var listeners = getListeners(this);
        var node = listeners.get(eventName);
        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            return node.listener;
          }
          node = node.next;
        }
        return null;
      },
      set(listener) {
        if (typeof listener !== "function" && !isObject(listener)) {
          listener = null; // eslint-disable-line no-param-reassign
        }
        var listeners = getListeners(this);

        // Traverse to the tail while removing old value.
        var prev = null;
        var node = listeners.get(eventName);
        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            // Remove old value.
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
          } else {
            prev = node;
          }
          node = node.next;
        }

        // Add new value.
        if (listener !== null) {
          var newNode = {
            listener,
            listenerType: ATTRIBUTE,
            passive: false,
            once: false,
            next: null
          };
          if (prev === null) {
            listeners.set(eventName, newNode);
          } else {
            prev.next = newNode;
          }
        }
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Define an event attribute (e.g. `eventTarget.onclick`).
   * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
   * @param {string} eventName The event name to define.
   * @returns {void}
   */
  function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, `on${eventName}`, defineEventAttributeDescriptor(eventName));
  }

  /**
   * Define a custom EventTarget with event attributes.
   * @param {string[]} eventNames Event names for event attributes.
   * @returns {EventTarget} The custom EventTarget.
   * @private
   */
  function defineCustomEventTarget(eventNames) {
    /** CustomEventTarget */
    function CustomEventTarget() {
      EventTarget.call(this);
    }
    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
      constructor: {
        value: CustomEventTarget,
        configurable: true,
        writable: true
      }
    });
    for (var i = 0; i < eventNames.length; ++i) {
      defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }
    return CustomEventTarget;
  }

  /**
   * EventTarget.
   *
   * - This is constructor if no arguments.
   * - This is a function which returns a CustomEventTarget constructor if there are arguments.
   *
   * For example:
   *
   *     class A extends EventTarget {}
   *     class B extends EventTarget("message") {}
   *     class C extends EventTarget("message", "error") {}
   *     class D extends EventTarget(["message", "error"]) {}
   */
  function EventTarget() {
    /*eslint-disable consistent-return */
    if (this instanceof EventTarget) {
      listenersMap.set(this, new Map());
      return;
    }
    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      return defineCustomEventTarget(arguments[0]);
    }
    if (arguments.length > 0) {
      var types = new Array(arguments.length);
      for (var i = 0; i < arguments.length; ++i) {
        types[i] = arguments[i];
      }
      return defineCustomEventTarget(types);
    }
    throw new TypeError("Cannot call a class as a function");
    /*eslint-enable consistent-return */
  }

  // Should be enumerable, but class methods are not enumerable.
  EventTarget.prototype = {
    /**
     * Add a given listener to this event target.
     * @param {string} eventName The event name to add.
     * @param {Function} listener The listener to add.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */
    addEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }
      if (typeof listener !== "function" && !isObject(listener)) {
        throw new TypeError("'listener' should be a function or an object.");
      }
      var listeners = getListeners(this);
      var optionsIsObj = isObject(options);
      var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var newNode = {
        listener,
        listenerType,
        passive: optionsIsObj && Boolean(options.passive),
        once: optionsIsObj && Boolean(options.once),
        next: null
      };

      // Set it as the first node if the first node is null.
      var node = listeners.get(eventName);
      if (node === undefined) {
        listeners.set(eventName, newNode);
        return;
      }

      // Traverse to the tail while checking duplication..
      var prev = null;
      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          // Should ignore duplication.
          return;
        }
        prev = node;
        node = node.next;
      }

      // Add it.
      prev.next = newNode;
    },
    /**
     * Remove a given listener from this event target.
     * @param {string} eventName The event name to remove.
     * @param {Function} listener The listener to remove.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */
    removeEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }
      var listeners = getListeners(this);
      var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var prev = null;
      var node = listeners.get(eventName);
      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
          return;
        }
        prev = node;
        node = node.next;
      }
    },
    /**
     * Dispatch a given event.
     * @param {Event|{type:string}} event The event to dispatch.
     * @returns {boolean} `false` if canceled.
     */
    dispatchEvent(event) {
      if (event == null || typeof event.type !== "string") {
        throw new TypeError('"event.type" should be a string.');
      }

      // If listeners aren't registered, terminate.
      var listeners = getListeners(this);
      var eventName = event.type;
      var node = listeners.get(eventName);
      if (node == null) {
        return true;
      }

      // Since we cannot rewrite several properties, so wrap object.
      var wrappedEvent = wrapEvent(this, event);

      // This doesn't process capturing phase and bubbling phase.
      // This isn't participating in a tree.
      var prev = null;
      while (node != null) {
        // Remove this listener if it's once
        if (node.once) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
        } else {
          prev = node;
        }

        // Call this listener
        setPassiveListener(wrappedEvent, node.passive ? node.listener : null);
        if (typeof node.listener === "function") {
          try {
            node.listener.call(this, wrappedEvent);
          } catch (err) {
            if (typeof console !== "undefined" && typeof console.error === "function") {
              console.error(err);
            }
          }
        } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
          node.listener.handleEvent(wrappedEvent);
        }

        // Break if `event.stopImmediatePropagation` was called.
        if (isStopped(wrappedEvent)) {
          break;
        }
        node = node.next;
      }
      setPassiveListener(wrappedEvent, null);
      setEventPhase(wrappedEvent, 0);
      setCurrentTarget(wrappedEvent, null);
      return !wrappedEvent.defaultPrevented;
    }
  };

  // `constructor` is not enumerable.
  Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
  });

  // Ensure `eventTarget instanceof window.EventTarget` is `true`.
  if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
  }
  var _default = exports.default = EventTarget;
},187,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeBlobModule = _interopRequireDefault(require(_dependencyMap[3]));
  var _base64Js = require(_dependencyMap[4]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[5]));
  var Blob = require(_dependencyMap[6]);
  var BlobRegistry = require(_dependencyMap[7]);
  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
      var r = Math.random() * 16 | 0,
        v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }
  function createBlobCollector(blobId) {
    if (global.__blobCollectorProvider == null) {
      return null;
    } else {
      return global.__blobCollectorProvider(blobId);
    }
  }
  var BlobManager = /*#__PURE__*/function () {
    function BlobManager() {
      (0, _classCallCheck2.default)(this, BlobManager);
    }
    return (0, _createClass2.default)(BlobManager, null, [{
      key: "createFromParts",
      value: function createFromParts(parts, options) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        var blobId = uuidv4();
        var items = parts.map(part => {
          if (part instanceof ArrayBuffer || ArrayBuffer.isView(part)) {
            return {
              data: (0, _base64Js.fromByteArray)(new Uint8Array(part)),
              type: 'string'
            };
          } else if (part instanceof Blob) {
            return {
              data: part.data,
              type: 'blob'
            };
          } else {
            return {
              data: String(part),
              type: 'string'
            };
          }
        });
        var size = items.reduce((acc, curr) => {
          if (curr.type === 'string') {
            return acc + global.unescape(encodeURI(curr.data)).length;
          } else {
            return acc + curr.data.size;
          }
        }, 0);
        _NativeBlobModule.default.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
          blobId,
          offset: 0,
          size,
          type: options ? options.type : '',
          lastModified: options ? options.lastModified : Date.now()
        });
      }
    }, {
      key: "createFromOptions",
      value: function createFromOptions(options) {
        BlobRegistry.register(options.blobId);
        return Object.assign(Object.create(Blob.prototype), {
          data: options.__collector == null ? {
            ...options,
            __collector: createBlobCollector(options.blobId)
          } : options
        });
      }
    }, {
      key: "release",
      value: function release(blobId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        BlobRegistry.unregister(blobId);
        if (BlobRegistry.has(blobId)) {
          return;
        }
        _NativeBlobModule.default.release(blobId);
      }
    }, {
      key: "addNetworkingHandler",
      value: function addNetworkingHandler() {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.addNetworkingHandler();
      }
    }, {
      key: "addWebSocketHandler",
      value: function addWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.addWebSocketHandler(socketId);
      }
    }, {
      key: "removeWebSocketHandler",
      value: function removeWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.removeWebSocketHandler(socketId);
      }
    }, {
      key: "sendOverSocket",
      value: function sendOverSocket(blob, socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.sendOverSocket(blob.data, socketId);
      }
    }]);
  }();
  BlobManager.isAvailable = !!_NativeBlobModule.default;
  module.exports = BlobManager;
},188,[1,10,11,189,24,46,190,191]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeModule = TurboModuleRegistry.get('BlobModule');
  var constants = null;
  var NativeBlobModule = null;
  if (NativeModule != null) {
    NativeBlobModule = {
      getConstants() {
        if (constants == null) {
          constants = NativeModule.getConstants();
        }
        return constants;
      },
      addNetworkingHandler() {
        NativeModule.addNetworkingHandler();
      },
      addWebSocketHandler(id) {
        NativeModule.addWebSocketHandler(id);
      },
      removeWebSocketHandler(id) {
        NativeModule.removeWebSocketHandler(id);
      },
      sendOverSocket(blob, socketID) {
        NativeModule.sendOverSocket(blob, socketID);
      },
      createFromParts(parts, withId) {
        NativeModule.createFromParts(parts, withId);
      },
      release(blobId) {
        NativeModule.release(blobId);
      }
    };
  }
  var _default = exports.default = NativeBlobModule;
},189,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var Blob = /*#__PURE__*/function () {
    function Blob() {
      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 ? arguments[1] : undefined;
      _classCallCheck(this, Blob);
      var BlobManager = require(_dependencyMap[2]);
      this.data = BlobManager.createFromParts(parts, options).data;
    }
    return _createClass(Blob, [{
      key: "data",
      get: function () {
        if (!this._data) {
          throw new Error('Blob has been closed and is no longer available');
        }
        return this._data;
      },
      set: function (data) {
        this._data = data;
      }
    }, {
      key: "slice",
      value: function slice(start, end) {
        var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        var BlobManager = require(_dependencyMap[2]);
        var _this$data = this.data,
          offset = _this$data.offset,
          size = _this$data.size;
        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }
          offset += start;
          size -= start;
          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }
            if (end > this.size) {
              end = this.size;
            }
            size = end - start;
          }
        }
        return BlobManager.createFromOptions({
          blobId: this.data.blobId,
          offset,
          size,
          type: contentType,
          __collector: this.data.__collector
        });
      }
    }, {
      key: "close",
      value: function close() {
        var BlobManager = require(_dependencyMap[2]);
        BlobManager.release(this.data.blobId);
        this.data = null;
      }
    }, {
      key: "size",
      get: function () {
        return this.data.size;
      }
    }, {
      key: "type",
      get: function () {
        return this.data.type || '';
      }
    }]);
  }();
  module.exports = Blob;
},190,[10,11,188]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var registry = new Map();
  var register = id => {
    var used = registry.get(id);
    if (used != null) {
      registry.set(id, used + 1);
    } else {
      registry.set(id, 1);
    }
  };
  var unregister = id => {
    var used = registry.get(id);
    if (used != null) {
      if (used <= 1) {
        registry.delete(id);
      } else {
        registry.set(id, used - 1);
      }
    }
  };
  var has = id => {
    return registry.get(id) || false;
  };
  module.exports = {
    register,
    unregister,
    has
  };
},191,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _createPerformanceLogger = _interopRequireDefault(require(_dependencyMap[1]));
  var GlobalPerformanceLogger = (0, _createPerformanceLogger.default)(true);
  module.exports = GlobalPerformanceLogger;
},192,[1,193]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createPerformanceLogger;
  exports.getCurrentTimestamp = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var Systrace = _interopRequireWildcard(require(_dependencyMap[3]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativePerformance = _interopRequireDefault(require(_dependencyMap[5]));
  var _infoLog = _interopRequireDefault(require(_dependencyMap[6]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _cookies = {};
  var PRINT_TO_CONSOLE = false;
  var WEB_PERFORMANCE_PREFIX = 'global_perf_';
  var getCurrentTimestamp = exports.getCurrentTimestamp = global.nativeQPLTimestamp ?? (() => global.performance.now());
  var PerformanceLogger = /*#__PURE__*/function () {
    function PerformanceLogger(isGlobalLogger) {
      (0, _classCallCheck2.default)(this, PerformanceLogger);
      this._timespans = {};
      this._extras = {};
      this._points = {};
      this._pointExtras = {};
      this._closed = false;
      this._isGlobalLogger = false;
      this._isGlobalLogger = isGlobalLogger === true;
    }
    return (0, _createClass2.default)(PerformanceLogger, [{
      key: "_isLoggingForWebPerformance",
      value: function _isLoggingForWebPerformance() {
        if (!this._isGlobalLogger || _NativePerformance.default == null) {
          return false;
        }
        if (this._isGlobalWebPerformanceLoggerEnabled == null) {
          this._isGlobalWebPerformanceLoggerEnabled = _ReactNativeFeatureFlags.default.isGlobalWebPerformanceLoggerEnabled();
        }
        return this._isGlobalWebPerformanceLoggerEnabled === true;
      }
    }, {
      key: "_performanceMark",
      value: function _performanceMark(key, startTime) {
        if (this._isLoggingForWebPerformance()) {
          global.performance?.mark?.(key, {
            startTime
          });
        }
      }
    }, {
      key: "_performanceMeasure",
      value: function _performanceMeasure(key, start, end) {
        if (this._isLoggingForWebPerformance()) {
          global.performance?.measure?.(key, {
            start,
            end
          });
        }
      }
    }, {
      key: "addTimespan",
      value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {
        if (this._closed) {
          return;
        }
        if (this._timespans[key]) {
          return;
        }
        this._timespans[key] = {
          startTime,
          endTime,
          totalTime: endTime - (startTime || 0),
          startExtras,
          endExtras
        };
        this._performanceMeasure(`${WEB_PERFORMANCE_PREFIX}_${key}`, startTime, endTime);
      }
    }, {
      key: "append",
      value: function append(performanceLogger) {
        this._timespans = {
          ...performanceLogger.getTimespans(),
          ...this._timespans
        };
        this._extras = {
          ...performanceLogger.getExtras(),
          ...this._extras
        };
        this._points = {
          ...performanceLogger.getPoints(),
          ...this._points
        };
        this._pointExtras = {
          ...performanceLogger.getPointExtras(),
          ...this._pointExtras
        };
      }
    }, {
      key: "clear",
      value: function clear() {
        this._timespans = {};
        this._extras = {};
        this._points = {};
      }
    }, {
      key: "clearCompleted",
      value: function clearCompleted() {
        for (var _key in this._timespans) {
          if (this._timespans[_key]?.totalTime != null) {
            delete this._timespans[_key];
          }
        }
        this._extras = {};
        this._points = {};
      }
    }, {
      key: "close",
      value: function close() {
        this._closed = true;
      }
    }, {
      key: "currentTimestamp",
      value: function currentTimestamp() {
        return getCurrentTimestamp();
      }
    }, {
      key: "getExtras",
      value: function getExtras() {
        return this._extras;
      }
    }, {
      key: "getPoints",
      value: function getPoints() {
        return this._points;
      }
    }, {
      key: "getPointExtras",
      value: function getPointExtras() {
        return this._pointExtras;
      }
    }, {
      key: "getTimespans",
      value: function getTimespans() {
        return this._timespans;
      }
    }, {
      key: "hasTimespan",
      value: function hasTimespan(key) {
        return !!this._timespans[key];
      }
    }, {
      key: "isClosed",
      value: function isClosed() {
        return this._closed;
      }
    }, {
      key: "logEverything",
      value: function logEverything() {}
    }, {
      key: "markPoint",
      value: function markPoint(key) {
        var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
        var extras = arguments.length > 2 ? arguments[2] : undefined;
        if (this._closed) {
          return;
        }
        if (this._points[key] != null) {
          return;
        }
        this._points[key] = timestamp;
        if (extras) {
          this._pointExtras[key] = extras;
        }
        this._performanceMark(`${WEB_PERFORMANCE_PREFIX}_${key}`, timestamp);
      }
    }, {
      key: "removeExtra",
      value: function removeExtra(key) {
        var value = this._extras[key];
        delete this._extras[key];
        return value;
      }
    }, {
      key: "setExtra",
      value: function setExtra(key, value) {
        if (this._closed) {
          return;
        }
        if (this._extras.hasOwnProperty(key)) {
          return;
        }
        this._extras[key] = value;
      }
    }, {
      key: "startTimespan",
      value: function startTimespan(key) {
        var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
        var extras = arguments.length > 2 ? arguments[2] : undefined;
        if (this._closed) {
          return;
        }
        if (this._timespans[key]) {
          return;
        }
        this._timespans[key] = {
          startTime: timestamp,
          startExtras: extras
        };
        _cookies[key] = Systrace.beginAsyncEvent(key);
        this._performanceMark(`${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, timestamp);
      }
    }, {
      key: "stopTimespan",
      value: function stopTimespan(key) {
        var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
        var extras = arguments.length > 2 ? arguments[2] : undefined;
        if (this._closed) {
          return;
        }
        var timespan = this._timespans[key];
        if (!timespan || timespan.startTime == null) {
          return;
        }
        if (timespan.endTime != null) {
          return;
        }
        timespan.endExtras = extras;
        timespan.endTime = timestamp;
        timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
        if (_cookies[key] != null) {
          Systrace.endAsyncEvent(key, _cookies[key]);
          delete _cookies[key];
        }
        this._performanceMeasure(`${WEB_PERFORMANCE_PREFIX}_${key}`, `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, timestamp);
      }
    }]);
  }();
  function createPerformanceLogger(isGlobalLogger) {
    return new PerformanceLogger(isGlobalLogger);
  }
},193,[1,10,11,57,140,160,194]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    return console.log(...arguments);
  }
  module.exports = infoLog;
},194,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _convertRequestBody = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeNetworkingIOS = _interopRequireDefault(require(_dependencyMap[3]));
  var RCTNetworking = {
    addListener(eventType, listener, context) {
      return _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
    },
    sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
      var body = (0, _convertRequestBody.default)(data);
      _NativeNetworkingIOS.default.sendRequest({
        method,
        url,
        data: {
          ...body,
          trackingName
        },
        headers,
        responseType,
        incrementalUpdates,
        timeout,
        withCredentials
      }, callback);
    },
    abortRequest(requestId) {
      _NativeNetworkingIOS.default.abortRequest(requestId);
    },
    clearCookies(callback) {
      _NativeNetworkingIOS.default.clearCookies(callback);
    }
  };
  var _default = exports.default = RCTNetworking;
},195,[1,49,196,199]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Blob = require(_dependencyMap[0]);
  var binaryToBase64 = require(_dependencyMap[1]);
  var FormData = require(_dependencyMap[2]);
  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }
    if (body instanceof Blob) {
      return {
        blob: body.data
      };
    }
    if (body instanceof FormData) {
      return {
        formData: body.getParts()
      };
    }
    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: binaryToBase64(body)
      };
    }
    return body;
  }
  module.exports = convertRequestBody;
},196,[190,197,198]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var base64 = require(_dependencyMap[0]);
  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }
    if (data instanceof Uint8Array) {
      return base64.fromByteArray(data);
    }
    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }
    var _ref = data,
      buffer = _ref.buffer,
      byteOffset = _ref.byteOffset,
      byteLength = _ref.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }
  module.exports = binaryToBase64;
},197,[24]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = require(_dependencyMap[0]);
  var _classCallCheck = require(_dependencyMap[1]);
  var _createClass = require(_dependencyMap[2]);
  var FormData = /*#__PURE__*/function () {
    function FormData() {
      _classCallCheck(this, FormData);
      this._parts = [];
    }
    return _createClass(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getAll",
      value: function getAll(key) {
        return this._parts.filter(_ref => {
          var _ref2 = _slicedToArray(_ref, 1),
            name = _ref2[0];
          return name === key;
        }).map(_ref3 => {
          var _ref4 = _slicedToArray(_ref3, 2),
            value = _ref4[1];
          return value;
        });
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(_ref5 => {
          var _ref6 = _slicedToArray(_ref5, 2),
            name = _ref6[0],
            value = _ref6[1];
          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };
          if (typeof value === 'object' && !Array.isArray(value) && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }
            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }
            return {
              ...value,
              headers,
              fieldName: name
            };
          }
          return {
            string: String(value),
            headers,
            fieldName: name
          };
        });
      }
    }]);
  }();
  module.exports = FormData;
},198,[29,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('Networking');
},199,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  require(_dependencyMap[0]);
  module.exports = {
    fetch,
    Headers,
    Request,
    Response
  };
},200,[201]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.WHATWGFetch = {});
  })(this, function (exports) {
    'use strict';

    /* eslint-disable no-prototype-builtins */
    var g = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self ||
    // eslint-disable-next-line no-undef
    typeof global !== 'undefined' && global || {};
    var support = {
      searchParams: 'URLSearchParams' in g,
      iterable: 'Symbol' in g && 'iterator' in Symbol,
      blob: 'FileReader' in g && 'Blob' in g && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in g,
      arrayBuffer: 'ArrayBuffer' in g
    };
    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    }
    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];
      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }
    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }
      if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
        throw new TypeError('Invalid character in header field name: "' + name + '"');
      }
      return name.toLowerCase();
    }
    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }
      return value;
    }

    // Build a destructive iterator for the value list
    function iteratorFor(items) {
      var iterator = {
        next: function () {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };
      if (support.iterable) {
        iterator[Symbol.iterator] = function () {
          return iterator;
        };
      }
      return iterator;
    }
    function Headers(headers) {
      this.map = {};
      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
          if (header.length != 2) {
            throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length);
          }
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }
    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };
    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };
    Headers.prototype.get = function (name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };
    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };
    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };
    Headers.prototype.forEach = function (callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };
    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };
    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };
    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };
    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }
    function consumed(body) {
      if (body._noBody) return;
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }
      body.bodyUsed = true;
    }
    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };
        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }
    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }
    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
      var encoding = match ? match[1] : 'utf-8';
      reader.readAsText(blob, encoding);
      return promise;
    }
    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);
      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }
      return chars.join('');
    }
    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }
    function Body() {
      this.bodyUsed = false;
      this._initBody = function (body) {
        /*
          fetch-mock wraps the Response object in an ES6 Proxy to
          provide useful test harness features such as flush. However, on
          ES5 browsers without fetch or Proxy support pollyfills must be used;
          the proxy-pollyfill is unable to proxy an attribute unless it exists
          on the object before the Proxy is created. This change ensures
          Response.bodyUsed exists on the instance, while maintaining the
          semantic of setting Request.bodyUsed in the constructor before
          _initBody is called.
        */
        // eslint-disable-next-line no-self-assign
        this.bodyUsed = this.bodyUsed;
        this._bodyInit = body;
        if (!body) {
          this._noBody = true;
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          // IE 10-11 can't handle a DataView body.
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }
        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };
      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);
          if (rejected) {
            return rejected;
          }
          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };
      }
      this.arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          var isConsumed = consumed(this);
          if (isConsumed) {
            return isConsumed;
          } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
            return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
          } else {
            return Promise.resolve(this._bodyArrayBuffer);
          }
        } else if (support.blob) {
          return this.blob().then(readBlobAsArrayBuffer);
        } else {
          throw new Error('could not read as ArrayBuffer');
        }
      };
      this.text = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }
        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };
      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }
      this.json = function () {
        return this.text().then(JSON.parse);
      };
      return this;
    }

    // HTTP methods whose capitalization should be normalized
    var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];
    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }
    function Request(input, options) {
      if (!(this instanceof Request)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
      }
      options = options || {};
      var body = options.body;
      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }
        this.url = input.url;
        this.credentials = input.credentials;
        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }
        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;
        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }
      this.credentials = options.credentials || this.credentials || 'same-origin';
      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }
      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal || function () {
        if ('AbortController' in g) {
          var ctrl = new AbortController();
          return ctrl.signal;
        }
      }();
      this.referrer = null;
      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }
      this._initBody(body);
      if (this.method === 'GET' || this.method === 'HEAD') {
        if (options.cache === 'no-store' || options.cache === 'no-cache') {
          // Search for a '_' parameter in the query string
          var reParamSearch = /([?&])_=[^&]*/;
          if (reParamSearch.test(this.url)) {
            // If it already exists then set the value with the current time
            this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
          } else {
            // Otherwise add a new '_' parameter to the end with the current time
            var reQueryString = /\?/;
            this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
          }
        }
      }
    }
    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };
    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }
    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
      // https://tools.ietf.org/html/rfc7230#section-3.2
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
      // https://github.com/github/fetch/issues/748
      // https://github.com/zloirock/core-js/issues/751
      preProcessedHeaders.split('\r').map(function (header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
      }).forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          try {
            headers.append(key, value);
          } catch (error) {
            console.warn('Response ' + error.message);
          }
        }
      });
      return headers;
    }
    Body.call(Request.prototype);
    function Response(bodyInit, options) {
      if (!(this instanceof Response)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
      }
      if (!options) {
        options = {};
      }
      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      if (this.status < 200 || this.status > 599) {
        throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
      }
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
      this.headers = new Headers(options.headers);
      this.url = options.url || '';
      this._initBody(bodyInit);
    }
    Body.call(Response.prototype);
    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };
    Response.error = function () {
      var response = new Response(null, {
        status: 200,
        statusText: ''
      });
      response.ok = false;
      response.status = 0;
      response.type = 'error';
      return response;
    };
    var redirectStatuses = [301, 302, 303, 307, 308];
    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }
      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };
    exports.DOMException = g.DOMException;
    try {
      new exports.DOMException();
    } catch (err) {
      exports.DOMException = function (message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };
      exports.DOMException.prototype = Object.create(Error.prototype);
      exports.DOMException.prototype.constructor = exports.DOMException;
    }
    function fetch(input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        if (request.signal && request.signal.aborted) {
          return reject(new exports.DOMException('Aborted', 'AbortError'));
        }
        var xhr = new XMLHttpRequest();
        function abortXhr() {
          xhr.abort();
        }
        xhr.onload = function () {
          var options = {
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          // This check if specifically for when a user fetches a file locally from the file system
          // Only if the status is out of a normal range
          if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
            options.status = 200;
          } else {
            options.status = xhr.status;
          }
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          setTimeout(function () {
            resolve(new Response(body, options));
          }, 0);
        };
        xhr.onerror = function () {
          setTimeout(function () {
            reject(new TypeError('Network request failed'));
          }, 0);
        };
        xhr.ontimeout = function () {
          setTimeout(function () {
            reject(new TypeError('Network request timed out'));
          }, 0);
        };
        xhr.onabort = function () {
          setTimeout(function () {
            reject(new exports.DOMException('Aborted', 'AbortError'));
          }, 0);
        };
        function fixUrl(url) {
          try {
            return url === '' && g.location.href ? g.location.href : url;
          } catch (e) {
            return url;
          }
        }
        xhr.open(request.method, fixUrl(request.url), true);
        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }
        if ('responseType' in xhr) {
          if (support.blob) {
            xhr.responseType = 'blob';
          } else if (support.arrayBuffer) {
            xhr.responseType = 'arraybuffer';
          }
        }
        if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {
          var names = [];
          Object.getOwnPropertyNames(init.headers).forEach(function (name) {
            names.push(normalizeName(name));
            xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
          });
          request.headers.forEach(function (value, name) {
            if (names.indexOf(name) === -1) {
              xhr.setRequestHeader(name, value);
            }
          });
        } else {
          request.headers.forEach(function (value, name) {
            xhr.setRequestHeader(name, value);
          });
        }
        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);
          xhr.onreadystatechange = function () {
            // DONE (success or failure)
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    }
    fetch.polyfill = true;
    if (!g.fetch) {
      g.fetch = fetch;
      g.Headers = Headers;
      g.Request = Request;
      g.Response = Response;
    }
    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
  });
},201,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Blob = _interopRequireDefault(require(_dependencyMap[7]));
  var _BlobManager = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[9]));
  var _binaryToBase = _interopRequireDefault(require(_dependencyMap[10]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[11]));
  var _NativeWebSocketModule = _interopRequireDefault(require(_dependencyMap[12]));
  var _WebSocketEvent = _interopRequireDefault(require(_dependencyMap[13]));
  var _base64Js = _interopRequireDefault(require(_dependencyMap[14]));
  var _eventTargetShim = _interopRequireDefault(require(_dependencyMap[15]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[16]));
  var _excluded = ["headers"];
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var CLOSE_ABNORMAL = 1006;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;
  var WebSocket = /*#__PURE__*/function (_ref) {
    function WebSocket(url, protocols, options) {
      var _this;
      (0, _classCallCheck2.default)(this, WebSocket);
      _this = _callSuper(this, WebSocket);
      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;
      _this.url = url;
      if (typeof protocols === 'string') {
        protocols = [protocols];
      }
      var _ref2 = options || {},
        _ref2$headers = _ref2.headers,
        headers = _ref2$headers === undefined ? {} : _ref2$headers,
        unrecognized = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }
      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }
      if (!Array.isArray(protocols)) {
        protocols = null;
      }
      _this._eventEmitter = new _NativeEventEmitter.default(_NativeWebSocketModule.default);
      _this._socketId = nextWebSocketId++;
      _this._registerEvents();
      _NativeWebSocketModule.default.connect(url, protocols, {
        headers
      }, _this._socketId);
      return _this;
    }
    (0, _inherits2.default)(WebSocket, _ref);
    return (0, _createClass2.default)(WebSocket, [{
      key: "binaryType",
      get: function () {
        return this._binaryType;
      },
      set: function (binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
        }
        if (this._binaryType === 'blob' || binaryType === 'blob') {
          (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
          if (binaryType === 'blob') {
            _BlobManager.default.addWebSocketHandler(this._socketId);
          } else {
            _BlobManager.default.removeWebSocketHandler(this._socketId);
          }
        }
        this._binaryType = binaryType;
      }
    }, {
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }
        this.readyState = this.CLOSING;
        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }
        if (data instanceof _Blob.default) {
          (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
          _BlobManager.default.sendOverSocket(data, this._socketId);
          return;
        }
        if (typeof data === 'string') {
          _NativeWebSocketModule.default.send(data, this._socketId);
          return;
        }
        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          _NativeWebSocketModule.default.sendBinary((0, _binaryToBase.default)(data), this._socketId);
          return;
        }
        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }
        _NativeWebSocketModule.default.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        var closeReason = typeof reason === 'string' ? reason : '';
        _NativeWebSocketModule.default.close(statusCode, closeReason, this._socketId);
        if (_BlobManager.default.isAvailable && this._binaryType === 'blob') {
          _BlobManager.default.removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(e => e.remove());
        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          var data = ev.data;
          switch (ev.type) {
            case 'binary':
              data = _base64Js.default.toByteArray(ev.data).buffer;
              break;
            case 'blob':
              data = _BlobManager.default.createFromOptions(ev.data);
              break;
          }
          this.dispatchEvent(new _WebSocketEvent.default('message', {
            data
          }));
        }), this._eventEmitter.addListener('websocketOpen', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          this.readyState = this.OPEN;
          this.protocol = ev.protocol;
          this.dispatchEvent(new _WebSocketEvent.default('open'));
        }), this._eventEmitter.addListener('websocketClosed', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          this.readyState = this.CLOSED;
          this.dispatchEvent(new _WebSocketEvent.default('close', {
            code: ev.code,
            reason: ev.reason
          }));
          this._unregisterEvents();
          this.close();
        }), this._eventEmitter.addListener('websocketFailed', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          this.readyState = this.CLOSED;
          this.dispatchEvent(new _WebSocketEvent.default('error', {
            message: ev.message
          }));
          this.dispatchEvent(new _WebSocketEvent.default('close', {
            code: CLOSE_ABNORMAL,
            reason: ev.message
          }));
          this._unregisterEvents();
          this.close();
        })];
      }
    }]);
  }((0, _eventTargetShim.default)(...WEBSOCKET_EVENTS));
  WebSocket.CONNECTING = CONNECTING;
  WebSocket.OPEN = OPEN;
  WebSocket.CLOSING = CLOSING;
  WebSocket.CLOSED = CLOSED;
  module.exports = WebSocket;
},202,[1,203,10,11,50,52,55,190,188,205,197,81,206,207,24,187,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectWithoutPropertiesLoose = require(_dependencyMap[0]);
  function _objectWithoutProperties(e, t) {
    if (null == e) return {};
    var o,
      r,
      i = objectWithoutPropertiesLoose(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports;
},203,[204]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r[n];
    }
    return t;
  }
  module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
},204,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[4]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[5]));
  var NativeEventEmitter = exports.default = /*#__PURE__*/function () {
    function NativeEventEmitter(nativeModule) {
      (0, _classCallCheck2.default)(this, NativeEventEmitter);
      {
        (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');
      }
      var hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';
      var hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';
      if (nativeModule && hasAddListener && hasRemoveListeners) {
        this._nativeModule = nativeModule;
      } else if (nativeModule != null) {
        if (!hasAddListener) {
          console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');
        }
        if (!hasRemoveListeners) {
          console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');
        }
      }
    }
    return (0, _createClass2.default)(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        this._nativeModule?.addListener(eventType);
        var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
        return {
          remove: () => {
            if (subscription != null) {
              this._nativeModule?.removeListeners(1);
              subscription.remove();
              subscription = null;
            }
          }
        };
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _RCTDeviceEventEmitter.default.emit(eventType, ...args);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');
        this._nativeModule?.removeListeners(this.listenerCount(eventType));
        _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
      }
    }, {
      key: "listenerCount",
      value: function listenerCount(eventType) {
        return _RCTDeviceEventEmitter.default.listenerCount(eventType);
      }
    }]);
  }();
},205,[1,10,11,81,49,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('WebSocketModule');
},206,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   */

  'use strict';

  /**
   * Event object passed to the `onopen`, `onclose`, `onmessage`, `onerror`
   * callbacks of `WebSocket`.
   *
   * The `type` property is "open", "close", "message", "error" respectively.
   *
   * In case of "message", the `data` property contains the incoming data.
   */
  var _createClass = require(_dependencyMap[0]);
  var _classCallCheck = require(_dependencyMap[1]);
  var WebSocketEvent = /*#__PURE__*/_createClass(function WebSocketEvent(type, eventInitDict) {
    _classCallCheck(this, WebSocketEvent);
    this.type = type.toString();
    Object.assign(this, eventInitDict);
  });
  module.exports = WebSocketEvent;
},207,[11,10]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var _possibleConstructorReturn = require(_dependencyMap[2]);
  var _getPrototypeOf = require(_dependencyMap[3]);
  var _inherits = require(_dependencyMap[4]);
  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var Blob = require(_dependencyMap[5]);
  var invariant = require(_dependencyMap[6]);
  var File = /*#__PURE__*/function (_Blob) {
    function File(parts, name, options) {
      var _this;
      _classCallCheck(this, File);
      invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');
      _this = _callSuper(this, File, [parts, options]);
      _this.data.name = name;
      return _this;
    }
    _inherits(File, _Blob);
    return _createClass(File, [{
      key: "name",
      get: function () {
        invariant(this.data.name != null, 'Files must have a name set.');
        return this.data.name;
      }
    }, {
      key: "lastModified",
      get: function () {
        return this.data.lastModified || 0;
      }
    }]);
  }(Blob);
  module.exports = File;
},208,[10,11,50,52,55,190,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeFileReaderModule = _interopRequireDefault(require(_dependencyMap[6]));
  var _base64Js = require(_dependencyMap[7]);
  var _eventTargetShim = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;
  var FileReader = /*#__PURE__*/function (_ref) {
    function FileReader() {
      var _this;
      (0, _classCallCheck2.default)(this, FileReader);
      _this = _callSuper(this, FileReader);
      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._reset();
      return _this;
    }
    (0, _inherits2.default)(FileReader, _ref);
    return (0, _createClass2.default)(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });
        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._error) {
            this.dispatchEvent({
              type: 'error'
            });
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }
          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer(blob) {
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(text => {
          if (this._aborted) {
            return;
          }
          var base64 = text.split(',')[1];
          var typedArray = (0, _base64Js.toByteArray)(base64);
          this._result = typedArray.buffer;
          this._setReadyState(DONE);
        }, error => {
          if (this._aborted) {
            return;
          }
          this._error = error;
          this._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(text => {
          if (this._aborted) {
            return;
          }
          this._result = text;
          this._setReadyState(DONE);
        }, error => {
          if (this._aborted) {
            return;
          }
          this._error = error;
          this._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsText(blob.data, encoding).then(text => {
          if (this._aborted) {
            return;
          }
          this._result = text;
          this._setReadyState(DONE);
        }, error => {
          if (this._aborted) {
            return;
          }
          this._error = error;
          this._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;
        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();
          this._setReadyState(DONE);
        }
        this._reset();
      }
    }, {
      key: "readyState",
      get: function () {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function () {
        return this._error;
      }
    }, {
      key: "result",
      get: function () {
        return this._result;
      }
    }]);
  }((0, _eventTargetShim.default)(...READER_EVENTS));
  FileReader.EMPTY = EMPTY;
  FileReader.LOADING = LOADING;
  FileReader.DONE = DONE;
  module.exports = FileReader;
},209,[1,10,11,50,52,55,210,24,187]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('FileReaderModule');
},210,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.URLSearchParams = exports.URL = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeBlobModule = _interopRequireDefault(require(_dependencyMap[3]));
  var BLOB_URL_PREFIX = null;
  if (_NativeBlobModule.default && typeof _NativeBlobModule.default.getConstants().BLOB_URI_SCHEME === 'string') {
    var constants = _NativeBlobModule.default.getConstants();
    BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ':';
    if (typeof constants.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += `//${constants.BLOB_URI_HOST}/`;
    }
  }
  var URLSearchParams = exports.URLSearchParams = /*#__PURE__*/function () {
    function URLSearchParams(params) {
      (0, _classCallCheck2.default)(this, URLSearchParams);
      this._searchParams = [];
      if (typeof params === 'object') {
        Object.keys(params).forEach(key => this.append(key, params[key]));
      }
    }
    return (0, _createClass2.default)(URLSearchParams, [{
      key: "append",
      value: function append(key, value) {
        this._searchParams.push([key, value]);
      }
    }, {
      key: "delete",
      value: function _delete(name) {
        throw new Error('URLSearchParams.delete is not implemented');
      }
    }, {
      key: "get",
      value: function get(name) {
        throw new Error('URLSearchParams.get is not implemented');
      }
    }, {
      key: "getAll",
      value: function getAll(name) {
        throw new Error('URLSearchParams.getAll is not implemented');
      }
    }, {
      key: "has",
      value: function has(name) {
        throw new Error('URLSearchParams.has is not implemented');
      }
    }, {
      key: "set",
      value: function set(name, value) {
        throw new Error('URLSearchParams.set is not implemented');
      }
    }, {
      key: "sort",
      value: function sort() {
        throw new Error('URLSearchParams.sort is not implemented');
      }
    }, {
      key: Symbol.iterator,
      value: function () {
        return this._searchParams[Symbol.iterator]();
      }
    }, {
      key: "toString",
      value: function toString() {
        if (this._searchParams.length === 0) {
          return '';
        }
        var last = this._searchParams.length - 1;
        return this._searchParams.reduce((acc, curr, index) => {
          return acc + encodeURIComponent(curr[0]) + '=' + encodeURIComponent(curr[1]) + (index === last ? '' : '&');
        }, '');
      }
    }]);
  }();
  function validateBaseUrl(url) {
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)*(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/.test(url);
  }
  var URL = exports.URL = /*#__PURE__*/function () {
    function URL(url, base) {
      (0, _classCallCheck2.default)(this, URL);
      this._searchParamsInstance = null;
      var baseUrl = null;
      if (!base || validateBaseUrl(url)) {
        this._url = url;
        if (!this._url.endsWith('/')) {
          this._url += '/';
        }
      } else {
        if (typeof base === 'string') {
          baseUrl = base;
          if (!validateBaseUrl(baseUrl)) {
            throw new TypeError(`Invalid base URL: ${baseUrl}`);
          }
        } else {
          baseUrl = base.toString();
        }
        if (baseUrl.endsWith('/')) {
          baseUrl = baseUrl.slice(0, baseUrl.length - 1);
        }
        if (!url.startsWith('/')) {
          url = `/${url}`;
        }
        if (baseUrl.endsWith(url)) {
          url = '';
        }
        this._url = `${baseUrl}${url}`;
      }
    }
    return (0, _createClass2.default)(URL, [{
      key: "hash",
      get: function () {
        throw new Error('URL.hash is not implemented');
      }
    }, {
      key: "host",
      get: function () {
        throw new Error('URL.host is not implemented');
      }
    }, {
      key: "hostname",
      get: function () {
        throw new Error('URL.hostname is not implemented');
      }
    }, {
      key: "href",
      get: function () {
        return this.toString();
      }
    }, {
      key: "origin",
      get: function () {
        throw new Error('URL.origin is not implemented');
      }
    }, {
      key: "password",
      get: function () {
        throw new Error('URL.password is not implemented');
      }
    }, {
      key: "pathname",
      get: function () {
        throw new Error('URL.pathname not implemented');
      }
    }, {
      key: "port",
      get: function () {
        throw new Error('URL.port is not implemented');
      }
    }, {
      key: "protocol",
      get: function () {
        throw new Error('URL.protocol is not implemented');
      }
    }, {
      key: "search",
      get: function () {
        throw new Error('URL.search is not implemented');
      }
    }, {
      key: "searchParams",
      get: function () {
        if (this._searchParamsInstance == null) {
          this._searchParamsInstance = new URLSearchParams();
        }
        return this._searchParamsInstance;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toString();
      }
    }, {
      key: "toString",
      value: function toString() {
        if (this._searchParamsInstance === null) {
          return this._url;
        }
        var instanceString = this._searchParamsInstance.toString();
        var separator = this._url.indexOf('?') > -1 ? '&' : '?';
        return this._url + separator + instanceString;
      }
    }, {
      key: "username",
      get: function () {
        throw new Error('URL.username is not implemented');
      }
    }], [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }
        return `${BLOB_URL_PREFIX}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.size}`;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);
  }();
},211,[1,10,11,189]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.AbortSignal = exports.AbortController = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _eventTargetShim = require(_dependencyMap[6]);
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); } /**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */
  /**
   * The signal class.
   * @see https://dom.spec.whatwg.org/#abortsignal
   */
  var AbortSignal = exports.AbortSignal = /*#__PURE__*/function (_EventTarget) {
    /**
     * AbortSignal cannot be constructed directly.
     */
    function AbortSignal() {
      var _this;
      (0, _classCallCheck2.default)(this, AbortSignal);
      _this = _callSuper(this, AbortSignal);
      throw new TypeError("AbortSignal cannot be constructed directly");
      return _this;
    }
    /**
     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
     */
    (0, _inherits2.default)(AbortSignal, _EventTarget);
    return (0, _createClass2.default)(AbortSignal, [{
      key: "aborted",
      get: function () {
        var aborted = abortedFlags.get(this);
        if (typeof aborted !== "boolean") {
          throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
        }
        return aborted;
      }
    }]);
  }(_eventTargetShim.EventTarget);
  (0, _eventTargetShim.defineEventAttribute)(AbortSignal.prototype, "abort");
  /**
   * Create an AbortSignal object.
   */
  function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);
    _eventTargetShim.EventTarget.call(signal);
    abortedFlags.set(signal, false);
    return signal;
  }
  /**
   * Abort a given signal.
   */
  function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
      return;
    }
    abortedFlags.set(signal, true);
    signal.dispatchEvent({
      type: "abort"
    });
  }
  /**
   * Aborted flag for each instances.
   */
  var abortedFlags = new WeakMap();
  // Properties should be enumerable.
  Object.defineProperties(AbortSignal.prototype, {
    aborted: {
      enumerable: true
    }
  });
  // `toString()` should return `"[object AbortSignal]"`
  if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
      configurable: true,
      value: "AbortSignal"
    });
  }

  /**
   * The AbortController.
   * @see https://dom.spec.whatwg.org/#abortcontroller
   */
  var AbortController = exports.AbortController = /*#__PURE__*/function () {
    /**
     * Initialize this controller.
     */
    function AbortController() {
      (0, _classCallCheck2.default)(this, AbortController);
      signals.set(this, createAbortSignal());
    }
    /**
     * Returns the `AbortSignal` object associated with this object.
     */
    return (0, _createClass2.default)(AbortController, [{
      key: "signal",
      get: function () {
        return getSignal(this);
      }
      /**
       * Abort and signal to any observers that the associated activity is to be aborted.
       */
    }, {
      key: "abort",
      value: function abort() {
        abortSignal(getSignal(this));
      }
    }]);
  }();
  /**
   * Associated signals.
   */
  var signals = new WeakMap();
  /**
   * Get the associated signal of a given controller.
   */
  function getSignal(controller) {
    var signal = signals.get(controller);
    if (signal == null) {
      throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
    }
    return signal;
  }
  // Properties should be enumerable.
  Object.defineProperties(AbortController.prototype, {
    signal: {
      enumerable: true
    },
    abort: {
      enumerable: true
    }
  });
  if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
      configurable: true,
      value: "AbortController"
    });
  }
  var _default = exports.default = AbortController;
},212,[1,10,11,50,52,55,187]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.alert) {
    global.alert = function (text) {
      require(_dependencyMap[0]).alert('Alert', '' + text);
    };
  }
},213,[214]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _RCTAlertManager = _interopRequireDefault(require(_dependencyMap[4]));
  var Alert = /*#__PURE__*/function () {
    function Alert() {
      (0, _classCallCheck2.default)(this, Alert);
    }
    return (0, _createClass2.default)(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        {
          Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);
        }
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments.length > 4 ? arguments[4] : undefined;
        var keyboardType = arguments.length > 5 ? arguments[5] : undefined;
        var options = arguments.length > 6 ? arguments[6] : undefined;
        {
          var callbacks = [];
          var buttons = [];
          var cancelButtonKey;
          var destructiveButtonKey;
          var preferredButtonKey;
          if (typeof callbackOrButtons === 'function') {
            callbacks = [callbackOrButtons];
          } else if (Array.isArray(callbackOrButtons)) {
            callbackOrButtons.forEach((btn, index) => {
              callbacks[index] = btn.onPress;
              if (btn.style === 'cancel') {
                cancelButtonKey = String(index);
              } else if (btn.style === 'destructive') {
                destructiveButtonKey = String(index);
              }
              if (btn.isPreferred) {
                preferredButtonKey = String(index);
              }
              if (btn.text || index < (callbackOrButtons || []).length - 1) {
                var btnDef = {};
                btnDef[index] = btn.text || '';
                buttons.push(btnDef);
              }
            });
          }
          _RCTAlertManager.default.alertWithArgs({
            title: title || '',
            message: message || undefined,
            buttons,
            type: type || undefined,
            defaultValue,
            cancelButtonKey,
            destructiveButtonKey,
            preferredButtonKey,
            keyboardType,
            userInterfaceStyle: options?.userInterfaceStyle || undefined
          }, (id, value) => {
            var cb = callbacks[id];
            cb && cb(value);
          });
        }
      }
    }]);
  }();
  module.exports = Alert;
},214,[1,10,11,81,215]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeAlertManager = _interopRequireDefault(require(_dependencyMap[1]));
  module.exports = {
    alertWithArgs(args, callback) {
      if (_NativeAlertManager.default == null) {
        return;
      }
      _NativeAlertManager.default.alertWithArgs(args, callback);
    }
  };
},215,[1,216]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('AlertManager');
},216,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0]),
    polyfillObjectProperty = _require.polyfillObjectProperty;
  var navigator = global.navigator;
  if (navigator === undefined) {
    global.navigator = {
      product: 'ReactNative'
    };
  } else {
    polyfillObjectProperty(navigator, 'product', () => 'ReactNative');
  }
},217,[6]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var registerModule;
  if (global.RN$Bridgeless === true && global.RN$registerCallableModule) {
    registerModule = global.RN$registerCallableModule;
  } else {
    var BatchedBridge = require(_dependencyMap[0]);
    registerModule = (moduleName, factory) => BatchedBridge.registerLazyCallableModule(moduleName, factory);
  }
  registerModule('Systrace', () => require(_dependencyMap[1]));
  if (!(global.RN$Bridgeless === true)) {
    registerModule('JSTimers', () => require(_dependencyMap[2]));
  }
  registerModule('HeapCapture', () => require(_dependencyMap[3]));
  registerModule('SamplingProfiler', () => require(_dependencyMap[4]));
  registerModule('RCTLog', () => require(_dependencyMap[5]));
  registerModule('RCTDeviceEventEmitter', () => require(_dependencyMap[6]).default);
  registerModule('RCTNativeAppEventEmitter', () => require(_dependencyMap[7]));
  registerModule('GlobalPerformanceLogger', () => require(_dependencyMap[8]));
  {
    registerModule('HMRClient', () => require(_dependencyMap[9]));
  }
},218,[65,57,181,219,221,223,49,224,192,225]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeJSCHeapCapture = _interopRequireDefault(require(_dependencyMap[1]));
  var HeapCapture = {
    captureHeap: function (path) {
      var error = null;
      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }
      if (_NativeJSCHeapCapture.default) {
        _NativeJSCHeapCapture.default.captureComplete(path, error);
      }
    }
  };
  module.exports = HeapCapture;
},219,[1,220]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('JSCHeapCapture');
},220,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var SamplingProfiler = {
    poke: function (token) {
      var error = null;
      var result = null;
      try {
        result = global.pokeSamplingProfiler();
        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occurred when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }
      var NativeJSCSamplingProfiler = require(_dependencyMap[0]).default;
      if (NativeJSCSamplingProfiler) {
        NativeJSCSamplingProfiler.operationComplete(token, result, error);
      }
    }
  };
  module.exports = SamplingProfiler;
},221,[222]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('JSCSamplingProfiler');
},222,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0]);
  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole(level, ...args);
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler(...args);
        }
      }
    },
    logToConsole(level) {
      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      console[logFn](...args);
    },
    setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},223,[46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var RCTNativeAppEventEmitter = _RCTDeviceEventEmitter.default;
  module.exports = RCTNativeAppEventEmitter;
},224,[1,49]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var HMRClientProdShim = {
    setup() {},
    enable() {
      console.error("Fast Refresh is disabled in JavaScript bundles built in production mode. Did you forget to run Metro?");
    },
    disable() {},
    registerBundle() {},
    log() {}
  };
  module.exports = HMRClientProdShim;
},225,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function __fetchSegment(segmentId, options, callback) {
    var SegmentFetcher = require(_dependencyMap[0]).default;
    SegmentFetcher.fetchSegment(segmentId, options, errorObject => {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }
      callback(null);
    });
  }
  global.__fetchSegment = __fetchSegment;
},226,[227]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('SegmentFetcher');
},227,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _BatchedBridge = _interopRequireDefault(require(_dependencyMap[1]));
  var _BugReporting = _interopRequireDefault(require(_dependencyMap[2]));
  var _createPerformanceLogger = _interopRequireDefault(require(_dependencyMap[3]));
  var _infoLog = _interopRequireDefault(require(_dependencyMap[4]));
  var _SceneTracker = _interopRequireDefault(require(_dependencyMap[5]));
  var _DisplayMode = require(_dependencyMap[6]);
  var _HeadlessJsTaskError = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeHeadlessJsTaskSupport = _interopRequireDefault(require(_dependencyMap[8]));
  var _renderApplication = _interopRequireDefault(require(_dependencyMap[9]));
  var _RendererProxy = require(_dependencyMap[10]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[11]));
  var runnables = {};
  var runCount = 1;
  var sections = {};
  var taskProviders = new Map();
  var taskCancelProviders = new Map();
  var componentProviderInstrumentationHook = component => component();
  var wrapperComponentProvider;
  var showArchitectureIndicator = false;
  var AppRegistry = {
    setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    enableArchitectureIndicator(enabled) {
      showArchitectureIndicator = enabled;
    },
    registerConfig(config) {
      config.forEach(appConfig => {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          (0, _invariant.default)(appConfig.component != null, "AppRegistry.registerConfig(...): Every config is expected to set either `run` or `component`, but `%s` has neither.", appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent(appKey, componentProvider, section) {
      var scopedPerformanceLogger = (0, _createPerformanceLogger.default)();
      runnables[appKey] = (appParameters, displayMode) => {
        var concurrentRootEnabled = Boolean(appParameters.initialProps?.concurrentRoot || appParameters.concurrentRoot);
        (0, _renderApplication.default)(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.fabric, showArchitectureIndicator, scopedPerformanceLogger, appKey === 'LogBox', appKey, displayMode, concurrentRootEnabled);
      };
      if (section) {
        sections[appKey] = runnables[appKey];
      }
      return appKey;
    },
    registerRunnable(appKey, run) {
      runnables[appKey] = run;
      return appKey;
    },
    registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys() {
      return Object.keys(sections);
    },
    getSections() {
      return {
        ...sections
      };
    },
    getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: {
          ...runnables
        }
      };
    },
    setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication(appKey, appParameters, displayMode) {
      if (appKey !== 'LogBox') {
        var logParams = '';
        var msg = 'Running "' + appKey + logParams;
        (0, _infoLog.default)(msg);
        _BugReporting.default.addSource('AppRegistry.runApplication' + runCount++, () => msg);
      }
      (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
      _SceneTracker.default.setActiveScene({
        name: appKey
      });
      runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    setSurfaceProps(appKey, appParameters, displayMode) {
      if (appKey !== 'LogBox') {
        var msg = 'Updating props for Surface "' + appKey + '" with ' + JSON.stringify(appParameters);
        (0, _infoLog.default)(msg);
        _BugReporting.default.addSource('AppRegistry.setSurfaceProps' + runCount++, () => msg);
      }
      (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
      runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    unmountApplicationComponentAtRootTag(rootTag) {
      (0, _RendererProxy.unmountComponentAtNodeAndRemoveContainer)(rootTag);
    },
    registerHeadlessTask(taskKey, taskProvider) {
      this.registerCancellableHeadlessTask(taskKey, taskProvider, () => () => {});
    },
    registerCancellableHeadlessTask(taskKey, taskProvider, taskCancelProvider) {
      if (taskProviders.has(taskKey)) {
        console.warn(`registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '${taskKey}'`);
      }
      taskProviders.set(taskKey, taskProvider);
      taskCancelProviders.set(taskKey, taskCancelProvider);
    },
    startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = taskProviders.get(taskKey);
      if (!taskProvider) {
        console.warn(`No task registered for key ${taskKey}`);
        if (_NativeHeadlessJsTaskSupport.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
        }
        return;
      }
      taskProvider()(data).then(() => {
        if (_NativeHeadlessJsTaskSupport.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
        }
      }).catch(reason => {
        console.error(reason);
        if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then(retryPosted => {
            if (!retryPosted) {
              _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
          });
        }
      });
    },
    cancelHeadlessTask(taskId, taskKey) {
      var taskCancelProvider = taskCancelProviders.get(taskKey);
      if (!taskCancelProvider) {
        throw new Error(`No task canceller registered for key '${taskKey}'`);
      }
      taskCancelProvider()();
    }
  };
  AppRegistry.registerComponent('LogBox', () => {
    {
      return function NoOp() {
        return null;
      };
    }
  });
  global.RN$AppRegistry = AppRegistry;
  global.RN$SurfaceRegistry = {
    renderSurface: AppRegistry.runApplication,
    setSurfaceProps: AppRegistry.setSurfaceProps
  };
  if (global.RN$Bridgeless !== true) {
    _BatchedBridge.default.registerCallableModule('AppRegistry', AppRegistry);
  }
  module.exports = AppRegistry;
},228,[1,65,229,193,194,233,234,235,236,237,61,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativeRedBox = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeBugReporting = _interopRequireDefault(require(_dependencyMap[6]));
  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', () => require(_dependencyMap[7])());
  }
  var BugReporting = /*#__PURE__*/function () {
    function BugReporting() {
      (0, _classCallCheck2.default)(this, BugReporting);
    }
    return (0, _createClass2.default)(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = _RCTDeviceEventEmitter.default.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }
        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = _RCTDeviceEventEmitter.default.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();
        if (source.has(key)) {
          console.warn(`BugReporting.add* called multiple times for same key '${key}'`);
        }
        source.set(key, callback);
        return {
          remove: () => {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};
        for (var _ref of BugReporting._extraSources) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var _key = _ref2[0];
          var callback = _ref2[1];
          extraData[_key] = callback();
        }
        var fileData = {};
        for (var _ref3 of BugReporting._fileSources) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
          var _key2 = _ref4[0];
          var _callback = _ref4[1];
          fileData[_key2] = _callback();
        }
        if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
          _NativeBugReporting.default.setExtraData(extraData, fileData);
        }
        if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
          _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
        }
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);
  }();
  BugReporting._extraSources = new Map();
  BugReporting._fileSources = new Map();
  BugReporting._subscription = null;
  BugReporting._redboxSubscription = null;
  module.exports = BugReporting;
},229,[1,29,10,11,49,230,231,232]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('RedBox');
},230,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('BugReporting');
},231,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }
  function getReactTree() {
    return "React tree dumps have been temporarily disabled while React is upgraded to Fiber.";
  }
  module.exports = dumpReactTree;
},232,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene(scene) {
      _activeScene = scene;
      _listeners.forEach(listener => listener(_activeScene));
    },
    getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener(callback) {
      _listeners.push(callback);
      return {
        remove: () => {
          _listeners = _listeners.filter(listener => callback !== listener);
        }
      };
    }
  };
  module.exports = SceneTracker;
},233,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.coerceDisplayMode = coerceDisplayMode;
  exports.default = undefined;
  var DisplayMode = Object.freeze({
    VISIBLE: 1,
    SUSPENDED: 2,
    HIDDEN: 3
  });
  function coerceDisplayMode(value) {
    switch (value) {
      case DisplayMode.SUSPENDED:
        return DisplayMode.SUSPENDED;
      case DisplayMode.HIDDEN:
        return DisplayMode.HIDDEN;
      default:
        return DisplayMode.VISIBLE;
    }
  }
  var _default = exports.default = DisplayMode;
},234,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _wrapNativeSuper2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var HeadlessJsTaskError = exports.default = /*#__PURE__*/function (_Error) {
    function HeadlessJsTaskError() {
      (0, _classCallCheck2.default)(this, HeadlessJsTaskError);
      return _callSuper(this, HeadlessJsTaskError, arguments);
    }
    (0, _inherits2.default)(HeadlessJsTaskError, _Error);
    return (0, _createClass2.default)(HeadlessJsTaskError);
  }(/*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
},235,[1,11,10,50,52,55,71]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('HeadlessJsTaskSupport');
},236,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = renderApplication;
  var _GlobalPerformanceLogger = _interopRequireDefault(require(_dependencyMap[1]));
  var _PerformanceLoggerContext = _interopRequireDefault(require(_dependencyMap[2]));
  var _AppContainer = _interopRequireDefault(require(_dependencyMap[3]));
  var _DisplayMode = _interopRequireDefault(require(_dependencyMap[4]));
  var _getCachedComponentWithDebugName = _interopRequireDefault(require(_dependencyMap[5]));
  var Renderer = _interopRequireWildcard(require(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  require(_dependencyMap[9]);
  var _jsxRuntime = require(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, fabric, showArchitectureIndicator, scopedPerformanceLogger, isLogBox, debugName, displayMode, useConcurrentRoot, useOffscreen) {
    (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var performanceLogger = scopedPerformanceLogger ?? _GlobalPerformanceLogger.default;
    var renderable = /*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceLoggerContext.default.Provider, {
      value: performanceLogger,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AppContainer.default, {
        rootTag: rootTag,
        fabric: fabric,
        showArchitectureIndicator: showArchitectureIndicator,
        WrapperComponent: WrapperComponent,
        initialProps: initialProps ?? Object.freeze({}),
        internal_excludeLogBox: isLogBox,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(RootComponent, {
          ...initialProps,
          rootTag: rootTag
        })
      })
    });
    if (useOffscreen && displayMode != null) {
      var Offscreen = React.unstable_Offscreen;
      renderable = /*#__PURE__*/(0, _jsxRuntime.jsx)(Offscreen, {
        mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
        children: renderable
      });
    }
    performanceLogger.startTimespan('renderApplication_React_render');
    performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRoot ? '1' : '0');
    performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
    performanceLogger.setExtra('usedReactProfiler', Renderer.isProfilingRenderer());
    Renderer.renderElement({
      element: renderable,
      rootTag,
      useFabric: Boolean(fabric),
      useConcurrentRoot: Boolean(useConcurrentRoot)
    });
    performanceLogger.stopTimespan('renderApplication_React_render');
  }
},237,[1,192,238,239,234,259,61,46,125,260,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.usePerformanceLogger = usePerformanceLogger;
  var _GlobalPerformanceLogger = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = _interopRequireWildcard(require(_dependencyMap[2]));
  var React = _react;
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var PerformanceLoggerContext = /*#__PURE__*/React.createContext(_GlobalPerformanceLogger.default);
  function usePerformanceLogger() {
    return (0, _react.useContext)(PerformanceLoggerContext);
  }
  var _default = exports.default = PerformanceLoggerContext;
},238,[1,192,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _View = _interopRequireDefault(require(_dependencyMap[6]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[7]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[8]));
  var _RootTag = require(_dependencyMap[9]);
  var React = _interopRequireWildcard(require(_dependencyMap[10]));
  var _jsxRuntime = require(_dependencyMap[11]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var reactDevToolsHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var AppContainer = /*#__PURE__*/function (_React$Component) {
    function AppContainer() {
      var _this;
      (0, _classCallCheck2.default)(this, AppContainer);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, AppContainer, [...args]);
      _this.state = {
        inspector: null,
        devtoolsOverlay: null,
        traceUpdateOverlay: null,
        mainKey: 1
      };
      _this._subscription = null;
      _this._reactDevToolsAgentListener = null;
      return _this;
    }
    (0, _inherits2.default)(AppContainer, _React$Component);
    return (0, _createClass2.default)(AppContainer, [{
      key: "mountReactDevToolsOverlays",
      value: function mountReactDevToolsOverlays() {
        var DevtoolsOverlay = require(_dependencyMap[12]).default;
        var devtoolsOverlay = /*#__PURE__*/(0, _jsxRuntime.jsx)(DevtoolsOverlay, {
          inspectedView: this._mainRef
        });
        var TraceUpdateOverlay = require(_dependencyMap[13]).default;
        var traceUpdateOverlay = /*#__PURE__*/(0, _jsxRuntime.jsx)(TraceUpdateOverlay, {});
        this.setState({
          devtoolsOverlay,
          traceUpdateOverlay
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription != null) {
          this._subscription.remove();
        }
        if (reactDevToolsHook != null && this._reactDevToolsAgentListener != null) {
          reactDevToolsHook.off('react-devtools', this._reactDevToolsAgentListener);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var logBox = null;
        var innerView = /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
          collapsable: !this.state.inspector && !this.state.devtoolsOverlay,
          pointerEvents: "box-none",
          style: styles.appContainer,
          ref: ref => {
            this._mainRef = ref;
          },
          children: this.props.children
        }, this.state.mainKey);
        var Wrapper = this.props.WrapperComponent;
        if (Wrapper != null) {
          innerView = /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapper, {
            initialProps: this.props.initialProps,
            fabric: this.props.fabric === true,
            showArchitectureIndicator: this.props.showArchitectureIndicator === true,
            children: innerView
          });
        }
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RootTag.RootTagContext.Provider, {
          value: (0, _RootTag.createRootTag)(this.props.rootTag),
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
            style: styles.appContainer,
            pointerEvents: "box-none",
            children: [innerView, this.state.traceUpdateOverlay, this.state.devtoolsOverlay, this.state.inspector, logBox]
          })
        });
      }
    }]);
  }(React.Component);
  AppContainer.getDerivedStateFromError = undefined;
  var styles = _StyleSheet.default.create({
    appContainer: {
      flex: 1
    }
  });
  module.exports = AppContainer;
},239,[1,10,11,50,52,55,240,49,245,246,125,243,247,254]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[2]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[3]));
  var _TextAncestor = _interopRequireDefault(require(_dependencyMap[4]));
  var _ViewNativeComponent = _interopRequireDefault(require(_dependencyMap[5]));
  var React = _interopRequireWildcard(require(_dependencyMap[6]));
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["accessibilityElementsHidden", "accessibilityLabel", "accessibilityLabelledBy", "accessibilityLiveRegion", "accessibilityState", "accessibilityValue", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-hidden", "aria-label", "aria-labelledby", "aria-live", "aria-selected", "aria-valuemax", "aria-valuemin", "aria-valuenow", "aria-valuetext", "focusable", "id", "importantForAccessibility", "nativeID", "pointerEvents", "tabIndex"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var View = /*#__PURE__*/React.forwardRef((_ref, forwardedRef) => {
    var accessibilityElementsHidden = _ref.accessibilityElementsHidden,
      accessibilityLabel = _ref.accessibilityLabel,
      accessibilityLabelledBy = _ref.accessibilityLabelledBy,
      accessibilityLiveRegion = _ref.accessibilityLiveRegion,
      accessibilityState = _ref.accessibilityState,
      accessibilityValue = _ref.accessibilityValue,
      ariaBusy = _ref['aria-busy'],
      ariaChecked = _ref['aria-checked'],
      ariaDisabled = _ref['aria-disabled'],
      ariaExpanded = _ref['aria-expanded'],
      ariaHidden = _ref['aria-hidden'],
      ariaLabel = _ref['aria-label'],
      ariaLabelledBy = _ref['aria-labelledby'],
      ariaLive = _ref['aria-live'],
      ariaSelected = _ref['aria-selected'],
      ariaValueMax = _ref['aria-valuemax'],
      ariaValueMin = _ref['aria-valuemin'],
      ariaValueNow = _ref['aria-valuenow'],
      ariaValueText = _ref['aria-valuetext'],
      focusable = _ref.focusable,
      id = _ref.id,
      importantForAccessibility = _ref.importantForAccessibility,
      nativeID = _ref.nativeID,
      pointerEvents = _ref.pointerEvents,
      tabIndex = _ref.tabIndex,
      otherProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var hasTextAncestor = React.useContext(_TextAncestor.default);
    var _accessibilityLabelledBy = ariaLabelledBy?.split(/\s*,\s*/g) ?? accessibilityLabelledBy;
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
      _accessibilityState = {
        busy: ariaBusy ?? accessibilityState?.busy,
        checked: ariaChecked ?? accessibilityState?.checked,
        disabled: ariaDisabled ?? accessibilityState?.disabled,
        expanded: ariaExpanded ?? accessibilityState?.expanded,
        selected: ariaSelected ?? accessibilityState?.selected
      };
    }
    var _accessibilityValue;
    if (accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null) {
      _accessibilityValue = {
        max: ariaValueMax ?? accessibilityValue?.max,
        min: ariaValueMin ?? accessibilityValue?.min,
        now: ariaValueNow ?? accessibilityValue?.now,
        text: ariaValueText ?? accessibilityValue?.text
      };
    }
    var style = (0, _flattenStyle.default)(otherProps.style);
    var newPointerEvents = style?.pointerEvents || pointerEvents;
    var collapsableOverride = _ReactNativeFeatureFlags.default.shouldForceUnflattenForElevation() ? {
      collapsable: style != null && style.elevation != null && style.elevation !== 0 ? false : otherProps.collapsable
    } : {};
    var actualView = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ViewNativeComponent.default, {
      ...otherProps,
      ...collapsableOverride,
      accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive ?? accessibilityLiveRegion,
      accessibilityLabel: ariaLabel ?? accessibilityLabel,
      focusable: tabIndex !== undefined ? !tabIndex : focusable,
      accessibilityState: _accessibilityState,
      accessibilityElementsHidden: ariaHidden ?? accessibilityElementsHidden,
      accessibilityLabelledBy: _accessibilityLabelledBy,
      accessibilityValue: _accessibilityValue,
      importantForAccessibility: ariaHidden === true ? 'no-hide-descendants' : importantForAccessibility,
      nativeID: id ?? nativeID,
      style: style,
      pointerEvents: newPointerEvents,
      ref: forwardedRef
    });
    if (hasTextAncestor) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
        value: false,
        children: actualView
      });
    }
    return actualView;
  });
  View.displayName = 'View';
  module.exports = View;
},240,[1,203,140,131,241,242,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = require(_dependencyMap[0]);
  var TextAncestorContext = React.createContext(false);
  module.exports = TextAncestorContext;
},241,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var React = _interopRequireWildcard(require(_dependencyMap[4]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTView'
  };
  var ViewNativeComponent = NativeComponentRegistry.get('RCTView', () => __INTERNAL_VIEW_CONFIG);
  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['hotspotUpdate', 'setPressed']
  });
  var _default = exports.default = ViewNativeComponent;
},242,[1,87,127,81,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = require(_dependencyMap[0]);
  }
},243,[244]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var f = require(_dependencyMap[0]),
    k = Symbol.for("react.element"),
    l = Symbol.for("react.fragment"),
    m = Object.prototype.hasOwnProperty,
    n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
    p = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
  function q(c, a, g) {
    var b,
      d = {},
      e = null,
      h = null;
    undefined !== g && (e = "" + g);
    undefined !== a.key && (e = "" + a.key);
    undefined !== a.ref && (h = a.ref);
    for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
    if (c && c.defaultProps) for (b in a = c.defaultProps, a) undefined === d[b] && (d[b] = a[b]);
    return {
      $$typeof: k,
      type: c,
      key: e,
      ref: h,
      props: d,
      _owner: n.current
    };
  }
  exports.Fragment = l;
  exports.jsx = q;
  exports.jsxs = q;
},244,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = require(_dependencyMap[0]);
  var PixelRatio = require(_dependencyMap[1]).default;
  var flatten = require(_dependencyMap[2]);
  var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
  if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
  }
  var absoluteFill = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  module.exports = {
    hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFill,
    compose(style1, style2) {
      if (style1 != null && style2 != null) {
        return [style1, style2];
      } else {
        return style1 != null ? style1 : style2;
      }
    },
    flatten,
    setStyleAttributePreprocessor(property, process) {
      var value;
      if (ReactNativeStyleAttributes[property] === true) {
        value = {
          process
        };
      } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
        value = {
          ...ReactNativeStyleAttributes[property],
          process
        };
      } else {
        console.error(`${property} is not a valid style attribute`);
        return;
      }
      ReactNativeStyleAttributes[property] = value;
    },
    create(obj) {
      return obj;
    }
  };
},245,[89,101,131]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RootTagContext = undefined;
  exports.createRootTag = createRootTag;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var RootTagContext = exports.RootTagContext = /*#__PURE__*/React.createContext(0);
  function createRootTag(rootTag) {
    return rootTag;
  }
},246,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = DevtoolsOverlay;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _View = _interopRequireDefault(require(_dependencyMap[2]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[3]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[4]));
  var _Dimensions = _interopRequireDefault(require(_dependencyMap[5]));
  var _ElementBox = _interopRequireDefault(require(_dependencyMap[6]));
  var React = _interopRequireWildcard(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _require = require(_dependencyMap[9]),
    findNodeHandle = _require.findNodeHandle;
  var getInspectorDataForViewAtPoint = require(_dependencyMap[10]);
  var useEffect = React.useEffect,
    useState = React.useState,
    useCallback = React.useCallback,
    useRef = React.useRef;
  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  function DevtoolsOverlay(_ref) {
    var inspectedView = _ref.inspectedView;
    var _useState = useState(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      inspected = _useState2[0],
      setInspected = _useState2[1];
    var _useState3 = useState(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isInspecting = _useState4[0],
      setIsInspecting = _useState4[1];
    var devToolsAgentRef = useRef(null);
    useEffect(() => {
      var devToolsAgent = null;
      var hideTimeoutId = null;
      function onAgentHideNativeHighlight() {
        clearTimeout(hideTimeoutId);
        hideTimeoutId = setTimeout(() => {
          setInspected(null);
        }, 100);
      }
      function onAgentShowNativeHighlight(node) {
        clearTimeout(hideTimeoutId);
        var component = (node.canonical && node.canonical.publicInstance) ?? node.canonical ?? node;
        if (!component || !component.measure) {
          return;
        }
        component.measure((x, y, width, height, left, top) => {
          setInspected({
            frame: {
              left,
              top,
              width,
              height
            }
          });
        });
      }
      function cleanup() {
        var currentAgent = devToolsAgent;
        if (currentAgent != null) {
          currentAgent.removeListener('hideNativeHighlight', onAgentHideNativeHighlight);
          currentAgent.removeListener('showNativeHighlight', onAgentShowNativeHighlight);
          currentAgent.removeListener('shutdown', cleanup);
          currentAgent.removeListener('startInspectingNative', onStartInspectingNative);
          currentAgent.removeListener('stopInspectingNative', onStopInspectingNative);
          devToolsAgent = null;
        }
        devToolsAgentRef.current = null;
      }
      function onStartInspectingNative() {
        setIsInspecting(true);
      }
      function onStopInspectingNative() {
        setIsInspecting(false);
      }
      function _attachToDevtools(agent) {
        devToolsAgent = agent;
        devToolsAgentRef.current = agent;
        agent.addListener('hideNativeHighlight', onAgentHideNativeHighlight);
        agent.addListener('showNativeHighlight', onAgentShowNativeHighlight);
        agent.addListener('shutdown', cleanup);
        agent.addListener('startInspectingNative', onStartInspectingNative);
        agent.addListener('stopInspectingNative', onStopInspectingNative);
      }
      hook.on('react-devtools', _attachToDevtools);
      if (hook.reactDevtoolsAgent) {
        _attachToDevtools(hook.reactDevtoolsAgent);
      }
      return () => {
        hook.off('react-devtools', _attachToDevtools);
        cleanup();
      };
    }, []);
    var findViewForLocation = useCallback((x, y) => {
      var agent = devToolsAgentRef.current;
      if (agent == null) {
        return;
      }
      getInspectorDataForViewAtPoint(inspectedView, x, y, viewData => {
        var touchedViewTag = viewData.touchedViewTag,
          closestInstance = viewData.closestInstance,
          frame = viewData.frame;
        if (closestInstance != null || touchedViewTag != null) {
          agent.selectNode(findNodeHandle(touchedViewTag));
          if (closestInstance != null) {
            agent.selectNode(closestInstance);
          }
          setInspected({
            frame
          });
          return true;
        }
        return false;
      });
    }, [inspectedView]);
    var stopInspecting = useCallback(() => {
      var agent = devToolsAgentRef.current;
      if (agent == null) {
        return;
      }
      agent.stopInspectingNative(true);
      setIsInspecting(false);
      setInspected(null);
    }, []);
    var onPointerMove = useCallback(e => {
      findViewForLocation(e.nativeEvent.x, e.nativeEvent.y);
    }, [findViewForLocation]);
    var onResponderMove = useCallback(e => {
      findViewForLocation(e.nativeEvent.touches[0].locationX, e.nativeEvent.touches[0].locationY);
    }, [findViewForLocation]);
    var shouldSetResponder = useCallback(e => {
      onResponderMove(e);
      return true;
    }, [onResponderMove]);
    var highlight = inspected ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ElementBox.default, {
      frame: inspected.frame
    }) : null;
    if (isInspecting) {
      var events = _ReactNativeFeatureFlags.default.shouldEmitW3CPointerEvents() ? {
        onPointerMove,
        onPointerDown: onPointerMove,
        onPointerUp: stopInspecting
      } : {
        onStartShouldSetResponder: shouldSetResponder,
        onResponderMove: onResponderMove,
        onResponderRelease: stopInspecting
      };
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
        nativeID: "devToolsInspectorOverlay",
        style: [styles.inspector, {
          height: _Dimensions.default.get('window').height
        }],
        ...events,
        children: highlight
      });
    }
    return highlight;
  }
  var styles = _StyleSheet.default.create({
    inspector: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });
},247,[1,29,240,140,245,102,248,125,243,61,253]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _reactJsxRuntime = require(_dependencyMap[0]);
  var _classCallCheck = require(_dependencyMap[1]);
  var _createClass = require(_dependencyMap[2]);
  var _possibleConstructorReturn = require(_dependencyMap[3]);
  var _getPrototypeOf = require(_dependencyMap[4]);
  var _inherits = require(_dependencyMap[5]);
  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var View = require(_dependencyMap[6]);
  var flattenStyle = require(_dependencyMap[7]);
  var StyleSheet = require(_dependencyMap[8]);
  var Dimensions = require(_dependencyMap[9]).default;
  var BorderBox = require(_dependencyMap[10]);
  var resolveBoxStyle = require(_dependencyMap[11]);
  var React = require(_dependencyMap[12]);
  var ElementBox = /*#__PURE__*/function (_React$Component) {
    function ElementBox() {
      _classCallCheck(this, ElementBox);
      return _callSuper(this, ElementBox, arguments);
    }
    _inherits(ElementBox, _React$Component);
    return _createClass(ElementBox, [{
      key: "render",
      value: function render() {
        var style = flattenStyle(this.props.style) || {};
        var margin = resolveBoxStyle('margin', style);
        var padding = resolveBoxStyle('padding', style);
        var frameStyle = {
          ...this.props.frame
        };
        var contentStyle = {
          width: this.props.frame.width,
          height: this.props.frame.height
        };
        if (margin != null) {
          margin = resolveRelativeSizes(margin);
          frameStyle.top -= margin.top;
          frameStyle.left -= margin.left;
          frameStyle.height += margin.top + margin.bottom;
          frameStyle.width += margin.left + margin.right;
          if (margin.top < 0) {
            contentStyle.height += margin.top;
          }
          if (margin.bottom < 0) {
            contentStyle.height += margin.bottom;
          }
          if (margin.left < 0) {
            contentStyle.width += margin.left;
          }
          if (margin.right < 0) {
            contentStyle.width += margin.right;
          }
        }
        if (padding != null) {
          padding = resolveRelativeSizes(padding);
          contentStyle.width -= padding.left + padding.right;
          contentStyle.height -= padding.top + padding.bottom;
        }
        return /*#__PURE__*/_reactJsxRuntime.jsx(View, {
          style: [styles.frame, frameStyle],
          pointerEvents: "none",
          children: /*#__PURE__*/_reactJsxRuntime.jsx(BorderBox, {
            box: margin,
            style: styles.margin,
            children: /*#__PURE__*/_reactJsxRuntime.jsx(BorderBox, {
              box: padding,
              style: styles.padding,
              children: /*#__PURE__*/_reactJsxRuntime.jsx(View, {
                style: [styles.content, contentStyle]
              })
            })
          })
        });
      }
    }]);
  }(React.Component);
  var styles = StyleSheet.create({
    frame: {
      position: 'absolute'
    },
    content: {
      backgroundColor: 'rgba(200, 230, 255, 0.8)'
    },
    padding: {
      borderColor: 'rgba(77, 255, 0, 0.3)'
    },
    margin: {
      borderColor: 'rgba(255, 132, 0, 0.3)'
    }
  });
  function resolveRelativeSizes(style) {
    var resolvedStyle = {
      ...style
    };
    resolveSizeInPlace(resolvedStyle, 'top', 'height');
    resolveSizeInPlace(resolvedStyle, 'right', 'width');
    resolveSizeInPlace(resolvedStyle, 'bottom', 'height');
    resolveSizeInPlace(resolvedStyle, 'left', 'width');
    return resolvedStyle;
  }
  function resolveSizeInPlace(style, direction, dimension) {
    if (style[direction] !== null && typeof style[direction] === 'string') {
      if (style[direction].indexOf('%') !== -1) {
        style[direction] = parseFloat(style[direction]) / 100.0 * Dimensions.get('window')[dimension];
      }
      if (style[direction] === 'auto') {
        style[direction] = 0;
      }
    }
  }
  module.exports = ElementBox;
},248,[243,10,11,50,52,55,240,131,245,102,249,250,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _reactJsxRuntime = require(_dependencyMap[0]);
  var _classCallCheck = require(_dependencyMap[1]);
  var _createClass = require(_dependencyMap[2]);
  var _possibleConstructorReturn = require(_dependencyMap[3]);
  var _getPrototypeOf = require(_dependencyMap[4]);
  var _inherits = require(_dependencyMap[5]);
  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var View = require(_dependencyMap[6]);
  var React = require(_dependencyMap[7]);
  var BorderBox = /*#__PURE__*/function (_React$Component) {
    function BorderBox() {
      _classCallCheck(this, BorderBox);
      return _callSuper(this, BorderBox, arguments);
    }
    _inherits(BorderBox, _React$Component);
    return _createClass(BorderBox, [{
      key: "render",
      value: function render() {
        var box = this.props.box;
        if (!box) {
          return this.props.children;
        }
        var style = {
          borderTopWidth: box.top,
          borderBottomWidth: box.bottom,
          borderLeftWidth: box.left,
          borderRightWidth: box.right
        };
        return /*#__PURE__*/_reactJsxRuntime.jsx(View, {
          style: [style, this.props.style],
          children: this.props.children
        });
      }
    }]);
  }(React.Component);
  module.exports = BorderBox;
},249,[243,10,11,50,52,55,240,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var I18nManager = require(_dependencyMap[0]);
  function resolveBoxStyle(prefix, style) {
    var hasParts = false;
    var result = {
      bottom: 0,
      left: 0,
      right: 0,
      top: 0
    };
    var styleForAll = style[prefix];
    if (styleForAll != null) {
      for (var key of Object.keys(result)) {
        result[key] = styleForAll;
      }
      hasParts = true;
    }
    var styleForHorizontal = style[prefix + 'Horizontal'];
    if (styleForHorizontal != null) {
      result.left = styleForHorizontal;
      result.right = styleForHorizontal;
      hasParts = true;
    } else {
      var styleForLeft = style[prefix + 'Left'];
      if (styleForLeft != null) {
        result.left = styleForLeft;
        hasParts = true;
      }
      var styleForRight = style[prefix + 'Right'];
      if (styleForRight != null) {
        result.right = styleForRight;
        hasParts = true;
      }
      var styleForEnd = style[prefix + 'End'];
      if (styleForEnd != null) {
        var constants = I18nManager.getConstants();
        if (constants.isRTL && constants.doLeftAndRightSwapInRTL) {
          result.left = styleForEnd;
        } else {
          result.right = styleForEnd;
        }
        hasParts = true;
      }
      var styleForStart = style[prefix + 'Start'];
      if (styleForStart != null) {
        var _constants = I18nManager.getConstants();
        if (_constants.isRTL && _constants.doLeftAndRightSwapInRTL) {
          result.right = styleForStart;
        } else {
          result.left = styleForStart;
        }
        hasParts = true;
      }
    }
    var styleForVertical = style[prefix + 'Vertical'];
    if (styleForVertical != null) {
      result.bottom = styleForVertical;
      result.top = styleForVertical;
      hasParts = true;
    } else {
      var styleForBottom = style[prefix + 'Bottom'];
      if (styleForBottom != null) {
        result.bottom = styleForBottom;
        hasParts = true;
      }
      var styleForTop = style[prefix + 'Top'];
      if (styleForTop != null) {
        result.top = styleForTop;
        hasParts = true;
      }
    }
    return hasParts ? result : null;
  }
  module.exports = resolveBoxStyle;
},250,[251]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeI18nManager = _interopRequireDefault(require(_dependencyMap[1]));
  var i18nConstants = getI18nManagerConstants();
  function getI18nManagerConstants() {
    if (_NativeI18nManager.default) {
      var _NativeI18nManager$ge = _NativeI18nManager.default.getConstants(),
        isRTL = _NativeI18nManager$ge.isRTL,
        doLeftAndRightSwapInRTL = _NativeI18nManager$ge.doLeftAndRightSwapInRTL,
        localeIdentifier = _NativeI18nManager$ge.localeIdentifier;
      return {
        isRTL,
        doLeftAndRightSwapInRTL,
        localeIdentifier
      };
    }
    return {
      isRTL: false,
      doLeftAndRightSwapInRTL: true
    };
  }
  module.exports = {
    getConstants: () => {
      return i18nConstants;
    },
    allowRTL: shouldAllow => {
      if (!_NativeI18nManager.default) {
        return;
      }
      _NativeI18nManager.default.allowRTL(shouldAllow);
    },
    forceRTL: shouldForce => {
      if (!_NativeI18nManager.default) {
        return;
      }
      _NativeI18nManager.default.forceRTL(shouldForce);
    },
    swapLeftAndRightInRTL: flipStyles => {
      if (!_NativeI18nManager.default) {
        return;
      }
      _NativeI18nManager.default.swapLeftAndRightInRTL(flipStyles);
    },
    isRTL: i18nConstants.isRTL,
    doLeftAndRightSwapInRTL: i18nConstants.doLeftAndRightSwapInRTL
  };
},251,[1,252]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('I18nManager');
},252,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var invariant = require(_dependencyMap[0]);
  var React = require(_dependencyMap[1]);
  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var renderers = findRenderers();
  function findRenderers() {
    var allRenderers = Array.from(hook.renderers.values());
    invariant(allRenderers.length >= 1, 'Expected to find at least one React Native renderer on DevTools hook.');
    return allRenderers;
  }
  module.exports = function getInspectorDataForViewAtPoint(inspectedView, locationX, locationY, callback) {
    var shouldBreak = false;
    for (var i = 0; i < renderers.length; i++) {
      if (shouldBreak) {
        break;
      }
      var renderer = renderers[i];
      if (renderer?.rendererConfig?.getInspectorDataForViewAtPoint != null) {
        renderer.rendererConfig.getInspectorDataForViewAtPoint(inspectedView, locationX, locationY, viewData => {
          if (viewData && viewData.hierarchy.length > 0) {
            shouldBreak = callback(viewData);
          }
        });
      }
    }
  };
},253,[46,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = TraceUpdateOverlay;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _UIManager = _interopRequireDefault(require(_dependencyMap[2]));
  var _processColor = _interopRequireDefault(require(_dependencyMap[3]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[4]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[5]));
  var _View = _interopRequireDefault(require(_dependencyMap[6]));
  var _TraceUpdateOverlayNativeComponent = _interopRequireWildcard(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var useEffect = React.useEffect,
    useRef = React.useRef,
    useState = React.useState;
  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var isNativeComponentReady = false;
  var devToolsAgent;
  function TraceUpdateOverlay() {
    var _useState = useState(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      overlayDisabled = _useState2[0],
      setOverlayDisabled = _useState2[1];
    useEffect(() => {
      {
        return;
      }
      function attachToDevtools(agent) {
        devToolsAgent = agent;
        agent.addListener('drawTraceUpdates', onAgentDrawTraceUpdates);
        agent.addListener('disableTraceUpdates', onAgentDisableTraceUpdates);
      }
      function subscribe() {
        hook?.on('react-devtools', attachToDevtools);
        if (hook?.reactDevtoolsAgent) {
          attachToDevtools(hook.reactDevtoolsAgent);
        }
      }
      function unsubscribe() {
        hook?.off('react-devtools', attachToDevtools);
        var agent = devToolsAgent;
        if (agent != null) {
          agent.removeListener('drawTraceUpdates', onAgentDrawTraceUpdates);
          agent.removeListener('disableTraceUpdates', onAgentDisableTraceUpdates);
          devToolsAgent = null;
        }
      }
      function onAgentDrawTraceUpdates() {
        var nodesToDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        setOverlayDisabled(false);
        var newFramesToDraw = [];
        nodesToDraw.forEach(_ref => {
          var node = _ref.node,
            color = _ref.color;
          var component = (node.canonical && node.canonical.publicInstance) ?? node.canonical ?? node;
          if (!component || !component.measure) {
            return;
          }
          var frameToDrawPromise = new Promise(resolve => {
            if (component.measure) {
              component.measure((x, y, width, height, left, top) => {
                resolve({
                  rect: {
                    left,
                    top,
                    width,
                    height
                  },
                  color: (0, _processColor.default)(color)
                });
              });
            }
          });
          newFramesToDraw.push(frameToDrawPromise);
        });
        Promise.all(newFramesToDraw).then(results => {
          if (nativeComponentRef.current != null) {
            _TraceUpdateOverlayNativeComponent.Commands.draw(nativeComponentRef.current, JSON.stringify(results.filter(_ref2 => {
              var rect = _ref2.rect,
                color = _ref2.color;
              return rect.width >= 0 && rect.height >= 0;
            })));
          }
        }, err => {
          console.error(`Failed to measure updated traces. Error: ${err}`);
        });
      }
      function onAgentDisableTraceUpdates() {
        setOverlayDisabled(true);
      }
      subscribe();
      return unsubscribe;
    }, []);
    var nativeComponentRef = useRef(null);
    return !overlayDisabled && isNativeComponentReady && /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
      pointerEvents: "none",
      style: styles.overlay,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TraceUpdateOverlayNativeComponent.default, {
        ref: nativeComponentRef,
        style: styles.overlay
      })
    });
  }
  var styles = _StyleSheet.default.create({
    overlay: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0
    }
  });
},254,[1,29,111,91,245,81,240,255,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeComponentRegistry = require(_dependencyMap[4]);
  var _require = require(_dependencyMap[5]),
    dispatchCommand = _require.dispatchCommand;
  var nativeComponentName = 'TraceUpdateOverlay';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'TraceUpdateOverlay',
    validAttributes: {}
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
  var Commands = exports.Commands = {
    draw(ref, overlays) {
      dispatchCommand(ref, "draw", [overlays]);
    }
  };
},255,[1,127,256,125,87,61]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _requireNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var _UIManager = _interopRequireDefault(require(_dependencyMap[2]));
  function codegenNativeComponent(componentName, options) {
    if (global.RN$Bridgeless === true) {
      var errorMessage = "Native Component '" + componentName + "' that calls codegenNativeComponent was not code generated at build time. Please check its definition.";
      console.error(errorMessage);
    }
    var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
    if (options != null && options.paperComponentNameDeprecated != null) {
      if (_UIManager.default.hasViewManagerConfig(componentName)) {
        componentNameInUse = componentName;
      } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
        componentNameInUse = options.paperComponentNameDeprecated;
      } else {
        throw new Error(`Failed to find native component for either ${componentName} or ${options.paperComponentNameDeprecated ?? '(unknown)'}`);
      }
    }
    return (0, _requireNativeComponent.default)(componentNameInUse);
  }
  var _default = exports.default = codegenNativeComponent;
},256,[1,257,111]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var createReactNativeComponentClass = require(_dependencyMap[0]);
  var getNativeComponentAttributes = require(_dependencyMap[1]);
  var requireNativeComponent = uiViewClassName => createReactNativeComponentClass(uiViewClassName, () => getNativeComponentAttributes(uiViewClassName));
  var _default = exports.default = requireNativeComponent;
},257,[258,88]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ReactNativePrivateInterface = require(_dependencyMap[0]);
  var register = _ReactNativePrivateInterface.ReactNativeViewConfigRegistry.register;
  var createReactNativeComponentClass = function (name, callback) {
    return register(name, callback);
  };
  module.exports = createReactNativeComponentClass;
},258,[64]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getCachedComponentWithDisplayName;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var cache = new Map();
  function getCachedComponentWithDisplayName(displayName) {
    var ComponentWithDisplayName = cache.get(displayName);
    if (!ComponentWithDisplayName) {
      ComponentWithDisplayName = _ref => {
        var children = _ref.children;
        return children;
      };
      ComponentWithDisplayName.displayName = displayName;
      cache.set(displayName, ComponentWithDisplayName);
    }
    return ComponentWithDisplayName;
  }
},259,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0]);
  function emptyFunction() {}
  var BackHandler = {
    exitApp: emptyFunction,
    addEventListener(_eventName, _handler) {
      return {
        remove: emptyFunction
      };
    },
    removeEventListener(_eventName, _handler) {}
  };
  module.exports = BackHandler;
},260,[261]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[6]));
  var React = _interopRequireWildcard(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var UnimplementedView = /*#__PURE__*/function (_React$Component) {
    function UnimplementedView() {
      (0, _classCallCheck2.default)(this, UnimplementedView);
      return _callSuper(this, UnimplementedView, arguments);
    }
    (0, _inherits2.default)(UnimplementedView, _React$Component);
    return (0, _createClass2.default)(UnimplementedView, [{
      key: "render",
      value: function render() {
        var View = require(_dependencyMap[9]);
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(View, {
          style: [styles.unimplementedView, this.props.style],
          children: this.props.children
        });
      }
    }]);
  }(React.Component);
  var styles = _StyleSheet.default.create({
    unimplementedView: {}
  });
  module.exports = UnimplementedView;
},261,[1,10,11,50,52,55,245,125,243,240]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = require(_dependencyMap[0]);
  }
},262,[263]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * scheduler.native.production.min.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  function f(a, b) {
    var c = a.length;
    a.push(b);
    a: for (; 0 < c;) {
      var d = c - 1 >>> 1,
        e = a[d];
      if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;else break a;
    }
  }
  function h(a) {
    return 0 === a.length ? null : a[0];
  }
  function k(a) {
    if (0 === a.length) return null;
    var b = a[0],
      c = a.pop();
    if (c !== b) {
      a[0] = c;
      a: for (var d = 0, e = a.length, t = e >>> 1; d < t;) {
        var m = 2 * (d + 1) - 1,
          E = a[m],
          n = m + 1,
          A = a[n];
        if (0 > g(E, c)) n < e && 0 > g(A, E) ? (a[d] = A, a[n] = c, d = n) : (a[d] = E, a[m] = c, d = m);else if (n < e && 0 > g(A, c)) a[d] = A, a[n] = c, d = n;else break a;
      }
    }
    return b;
  }
  function g(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return 0 !== c ? c : a.id - b.id;
  }
  var l;
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var p = performance;
    l = function () {
      return p.now();
    };
  } else {
    var q = Date,
      r = q.now();
    l = function () {
      return q.now() - r;
    };
  }
  var u = [],
    v = [],
    w = 1,
    x = null,
    y = 3,
    z = false,
    B = false,
    C = false,
    D = "function" === typeof setTimeout ? setTimeout : null,
    F = "function" === typeof clearTimeout ? clearTimeout : null,
    G = "undefined" !== typeof setImmediate ? setImmediate : null;
  "undefined" !== typeof navigator && undefined !== navigator.scheduling && undefined !== navigator.scheduling.isInputPending ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
  function H(a) {
    for (var b = h(v); null !== b;) {
      if (null === b.callback) k(v);else if (b.startTime <= a) k(v), b.sortIndex = b.expirationTime, f(u, b);else break;
      b = h(v);
    }
  }
  function I(a) {
    C = false;
    H(a);
    if (!B) if (null !== h(u)) B = true, J = K, L || (L = true, M());else {
      var b = h(v);
      null !== b && N(I, b.startTime - a);
    }
  }
  function K(a, b) {
    B = false;
    C && (C = false, F(O), O = -1);
    z = true;
    var c = y;
    try {
      a: {
        H(b);
        for (x = h(u); null !== x && (!(x.expirationTime > b) || a && !P());) {
          var d = x.callback;
          if ("function" === typeof d) {
            x.callback = null;
            y = x.priorityLevel;
            var e = d(x.expirationTime <= b);
            b = l();
            if ("function" === typeof e) {
              x.callback = e;
              H(b);
              var t = true;
              break a;
            } else x === h(u) && k(u), H(b);
          } else k(u);
          x = h(u);
        }
        if (null !== x) t = true;else {
          var m = h(v);
          null !== m && N(I, m.startTime - b);
          t = false;
        }
      }
      return t;
    } finally {
      x = null, y = c, z = false;
    }
  }
  function Q(a, b, c) {
    var d = l();
    "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
    switch (a) {
      case 1:
        var e = -1;
        break;
      case 2:
        e = 250;
        break;
      case 5:
        e = 1073741823;
        break;
      case 4:
        e = 1E4;
        break;
      default:
        e = 5E3;
    }
    e = c + e;
    a = {
      id: w++,
      callback: b,
      priorityLevel: a,
      startTime: c,
      expirationTime: e,
      sortIndex: -1
    };
    c > d ? (a.sortIndex = c, f(v, a), null === h(u) && a === h(v) && (C ? (F(O), O = -1) : C = true, N(I, c - d))) : (a.sortIndex = e, f(u, a), B || z || (B = true, J = K, L || (L = true, M())));
    return a;
  }
  function R(a) {
    a.callback = null;
  }
  function S() {
    return y;
  }
  var L = false,
    J = null,
    O = -1,
    T = -1;
  function P() {
    return 5 > l() - T ? false : true;
  }
  function U() {}
  function V() {
    if (null !== J) {
      var a = l();
      T = a;
      var b = true;
      try {
        b = J(true, a);
      } finally {
        b ? M() : (L = false, J = null);
      }
    } else L = false;
  }
  var M;
  if ("function" === typeof G) M = function () {
    G(V);
  };else if ("undefined" !== typeof MessageChannel) {
    var W = new MessageChannel(),
      X = W.port2;
    W.port1.onmessage = V;
    M = function () {
      X.postMessage(null);
    };
  } else M = function () {
    D(V, 0);
  };
  function N(a, b) {
    O = D(function () {
      a(l());
    }, b);
  }
  var Y = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_UserBlockingPriority : 2,
    aa = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_NormalPriority : 3,
    ba = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_LowPriority : 4,
    ca = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_ImmediatePriority : 1,
    da = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_scheduleCallback : Q,
    ea = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_cancelCallback : R,
    fa = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_getCurrentPriorityLevel : S,
    ha = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_shouldYield : P,
    ia = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_requestPaint : U,
    ja = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_now : l;
  function Z() {
    throw Error("Not implemented.");
  }
  exports.unstable_IdlePriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_IdlePriority : 5;
  exports.unstable_ImmediatePriority = ca;
  exports.unstable_LowPriority = ba;
  exports.unstable_NormalPriority = aa;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = Y;
  exports.unstable_cancelCallback = ea;
  exports.unstable_continueExecution = Z;
  exports.unstable_forceFrameRate = Z;
  exports.unstable_getCurrentPriorityLevel = fa;
  exports.unstable_getFirstCallbackNode = Z;
  exports.unstable_next = Z;
  exports.unstable_now = ja;
  exports.unstable_pauseExecution = Z;
  exports.unstable_requestPaint = ia;
  exports.unstable_runWithPriority = Z;
  exports.unstable_scheduleCallback = da;
  exports.unstable_shouldYield = ha;
  exports.unstable_wrapCallback = Z;
},263,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative;
  {
    ReactNative = require(_dependencyMap[0]);
  }
  module.exports = ReactNative;
},264,[265]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @nolint
   * @providesModule ReactNativeRenderer-prod
   * @preventMunge
   * @generated SignedSource<<07cf699c0d1c149943b7a02432aa1550>>
   */

  "use strict";

  require(_dependencyMap[0]);
  var ReactNativePrivateInterface = require(_dependencyMap[1]),
    React = require(_dependencyMap[2]),
    Scheduler = require(_dependencyMap[3]);
  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }
  var hasError = false,
    caughtError = null,
    hasRethrowError = false,
    rethrowError = null,
    reporter = {
      onError: function (error) {
        hasError = true;
        caughtError = error;
      }
    };
  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }
  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);
    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }
  var isArrayImpl = Array.isArray,
    getFiberCurrentPropsFromNode = null,
    getInstanceFromNode = null,
    getNodeFromInstance = null;
  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }
  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
      dispatchInstance = event._dispatchInstances;
    if (isArrayImpl(dispatchListener)) throw Error("executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }
  var assign = Object.assign;
  function functionThatReturnsTrue() {
    return true;
  }
  function functionThatReturnsFalse() {
    return false;
  }
  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    this._dispatchInstances = this._dispatchListeners = null;
    dispatchConfig = this.constructor.Interface;
    for (var propName in dispatchConfig) dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }
  assign(SyntheticEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function () {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function () {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function () {
      var Interface = this.constructor.Interface,
        propName;
      for (propName in Interface) this[propName] = null;
      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });
  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function () {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  SyntheticEvent.extend = function (Interface) {
    function E() {}
    function Class() {
      return Super.apply(this, arguments);
    }
    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };
  addEventPoolingTo(SyntheticEvent);
  function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }
    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }
  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }
  function addEventPoolingTo(EventConstructor) {
    EventConstructor.getPooled = createOrGetPooledEvent;
    EventConstructor.eventPool = [];
    EventConstructor.release = releasePooledEvent;
  }
  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function () {
      return null;
    }
  });
  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }
  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }
  var startDependencies = ["topTouchStart"],
    moveDependencies = ["topTouchMove"],
    endDependencies = ["topTouchCancel", "topTouchEnd"],
    touchBank = [],
    touchHistory = {
      touchBank: touchBank,
      numberActiveTouches: 0,
      indexOfSingleActiveTouch: -1,
      mostRecentTimeStamp: 0
    };
  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }
  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
  }
  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
      touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }
  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  var instrumentationCallback,
    ResponderTouchHistoryStore = {
      instrument: function (callback) {
        instrumentationCallback = callback;
      },
      recordTouchTrack: function (topLevelType, nativeEvent) {
        null != instrumentationCallback && instrumentationCallback(topLevelType, nativeEvent);
        if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      },
      touchHistory: touchHistory
    };
  function accumulate(current, next) {
    if (null == next) throw Error("accumulate(...): Accumulated items must not be null or undefined.");
    return null == current ? next : isArrayImpl(current) ? current.concat(next) : isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function accumulateInto(current, next) {
    if (null == next) throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;
    if (isArrayImpl(current)) {
      if (isArrayImpl(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }
    return isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }
  var responderInst = null,
    trackedTouchCount = 0;
  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }
  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  };
  function getParent(inst) {
    do inst = inst.return; while (inst && 5 !== inst.tag);
    return inst ? inst : null;
  }
  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) path.push(inst), inst = getParent(inst);
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function getListener(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
  }
  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }
  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
  var ResponderEventPlugin = {
      _getResponder: function () {
        return responderInst;
      },
      eventTypes: eventTypes,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return null;
        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
          var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
          if (responderInst) b: {
            var JSCompiler_temp = responderInst;
            for (var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent(tempA)) depthA++;
            tempA = 0;
            for (var tempB = targetInst; tempB; tempB = getParent(tempB)) tempA++;
            for (; 0 < depthA - tempA;) JSCompiler_temp = getParent(JSCompiler_temp), depthA--;
            for (; 0 < tempA - depthA;) targetInst = getParent(targetInst), tempA--;
            for (; depthA--;) {
              if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
              JSCompiler_temp = getParent(JSCompiler_temp);
              targetInst = getParent(targetInst);
            }
            JSCompiler_temp = null;
          } else JSCompiler_temp = targetInst;
          targetInst = JSCompiler_temp;
          JSCompiler_temp = targetInst === responderInst;
          shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, targetInst, nativeEvent, nativeEventTarget);
          shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory;
          JSCompiler_temp ? forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingle);
          b: {
            JSCompiler_temp = shouldSetEventType._dispatchListeners;
            targetInst = shouldSetEventType._dispatchInstances;
            if (isArrayImpl(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !shouldSetEventType.isPropagationStopped(); depthA++) {
              if (JSCompiler_temp[depthA](shouldSetEventType, targetInst[depthA])) {
                JSCompiler_temp = targetInst[depthA];
                break b;
              }
            } else if (JSCompiler_temp && JSCompiler_temp(shouldSetEventType, targetInst)) {
              JSCompiler_temp = targetInst;
              break b;
            }
            JSCompiler_temp = null;
          }
          shouldSetEventType._dispatchInstances = null;
          shouldSetEventType._dispatchListeners = null;
          shouldSetEventType.isPersistent() || shouldSetEventType.constructor.release(shouldSetEventType);
          if (JSCompiler_temp && JSCompiler_temp !== responderInst) {
            if (shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), targetInst = true === executeDirectDispatch(shouldSetEventType), responderInst) {
              if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
                depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                forEachAccumulated(depthA, accumulateDirectDispatchesSingle);
                var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [shouldSetEventType, depthA]);
                changeResponder(JSCompiler_temp, targetInst);
              } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
            } else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType), changeResponder(JSCompiler_temp, targetInst);
          } else JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = null;
        shouldSetEventType = responderInst && isStartish(topLevelType);
        JSCompiler_temp = responderInst && isMoveish(topLevelType);
        targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
        if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
        shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
        if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
          if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++) if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && undefined !== targetInst && 0 !== targetInst) {
            depthA = getInstanceFromNode(targetInst);
            b: {
              for (targetInst = responderInst; depthA;) {
                if (targetInst === depthA || targetInst === depthA.alternate) {
                  targetInst = true;
                  break b;
                }
                depthA = getParent(depthA);
              }
              targetInst = false;
            }
            if (targetInst) {
              topLevelType = false;
              break a;
            }
          }
          topLevelType = true;
        }
        if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
        return JSCompiler_temp$jscomp$0;
      },
      GlobalResponderHandler: null,
      injection: {
        injectGlobalResponderHandler: function (GlobalResponderHandler) {
          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
      }
    },
    eventPluginOrder = null,
    namesToPlugins = {};
  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
        pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (-1 >= pluginIndex) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + (pluginName + "`."));
      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + (pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;
        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
            eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + (eventName$jscomp$0 + "`."));
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule, eventName$jscomp$0);
            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;
          if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
        }
      }
    }
  }
  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + (registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }
  var plugins = [],
    eventNameDispatchConfigs = {},
    registrationNameModules = {};
  function getListeners(inst, registrationName, phase, dispatchToImperativeListeners) {
    var stateNode = inst.stateNode;
    if (null === stateNode) return null;
    inst = getFiberCurrentPropsFromNode(stateNode);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    if (!(dispatchToImperativeListeners && stateNode.canonical && stateNode.canonical._eventListeners)) return inst;
    var listeners = [];
    inst && listeners.push(inst);
    var requestedPhaseIsCapture = "captured" === phase,
      mangledImperativeRegistrationName = requestedPhaseIsCapture ? "rn:" + registrationName.replace(/Capture$/, "") : "rn:" + registrationName;
    stateNode.canonical._eventListeners[mangledImperativeRegistrationName] && 0 < stateNode.canonical._eventListeners[mangledImperativeRegistrationName].length && stateNode.canonical._eventListeners[mangledImperativeRegistrationName].forEach(function (listenerObj) {
      if ((null != listenerObj.options.capture && listenerObj.options.capture) === requestedPhaseIsCapture) {
        var listenerFnWrapper = function (syntheticEvent) {
          var eventInst = new ReactNativePrivateInterface.CustomEvent(mangledImperativeRegistrationName, {
            detail: syntheticEvent.nativeEvent
          });
          eventInst.isTrusted = true;
          eventInst.setSyntheticEvent(syntheticEvent);
          for (var _len = arguments.length, args = Array(1 < _len ? _len - 1 : 0), _key = 1; _key < _len; _key++) args[_key - 1] = arguments[_key];
          listenerObj.listener.apply(listenerObj, [eventInst].concat(args));
        };
        listenerObj.options.once ? listeners.push(function () {
          stateNode.canonical.removeEventListener_unstable(mangledImperativeRegistrationName, listenerObj.listener, listenerObj.capture);
          listenerObj.invalidated || (listenerObj.invalidated = true, listenerObj.listener.apply(listenerObj, arguments));
        }) : listeners.push(listenerFnWrapper);
      }
    });
    return 0 === listeners.length ? null : 1 === listeners.length ? listeners[0] : listeners;
  }
  var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
    customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
  function accumulateListenersAndInstances(inst, event, listeners) {
    var listenersLength = listeners ? isArrayImpl(listeners) ? listeners.length : 1 : 0;
    if (0 < listenersLength) if (event._dispatchListeners = accumulateInto(event._dispatchListeners, listeners), null == event._dispatchInstances && 1 === listenersLength) event._dispatchInstances = inst;else for (event._dispatchInstances = event._dispatchInstances || [], isArrayImpl(event._dispatchInstances) || (event._dispatchInstances = [event._dispatchInstances]), listeners = 0; listeners < listenersLength; listeners++) event._dispatchInstances.push(inst);
  }
  function accumulateDirectionalDispatches$1(inst, phase, event) {
    phase = getListeners(inst, event.dispatchConfig.phasedRegistrationNames[phase], phase, true);
    accumulateListenersAndInstances(inst, event, phase);
  }
  function traverseTwoPhase$1(inst, fn, arg, skipBubbling) {
    for (var path = []; inst;) {
      path.push(inst);
      do inst = inst.return; while (inst && 5 !== inst.tag);
      inst = inst ? inst : null;
    }
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    if (skipBubbling) fn(path[0], "bubbled", arg);else for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function accumulateTwoPhaseDispatchesSingle$1(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event, false);
  }
  function accumulateDirectDispatchesSingle$1(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listeners = getListeners(inst, event.dispatchConfig.registrationName, "bubbled", false);
        accumulateListenersAndInstances(inst, event, listeners);
      }
    }
  }
  if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
  eventPluginOrder = Array.prototype.slice.call(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  recomputePluginOrdering();
  var injectedNamesToPlugins$jscomp$inline_229 = {
      ResponderEventPlugin: ResponderEventPlugin,
      ReactNativeBridgeEventPlugin: {
        eventTypes: {},
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (null == targetInst) return null;
          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
          if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
          topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
          if (bubbleDispatchConfig) null != topLevelType && null != topLevelType.dispatchConfig.phasedRegistrationNames && topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling ? topLevelType && topLevelType.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(topLevelType._targetInst, accumulateDirectionalDispatches$1, topLevelType, true) : forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle$1);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle$1);else return null;
          return topLevelType;
        }
      }
    },
    isOrderingDirty$jscomp$inline_230 = false,
    pluginName$jscomp$inline_231;
  for (pluginName$jscomp$inline_231 in injectedNamesToPlugins$jscomp$inline_229) if (injectedNamesToPlugins$jscomp$inline_229.hasOwnProperty(pluginName$jscomp$inline_231)) {
    var pluginModule$jscomp$inline_232 = injectedNamesToPlugins$jscomp$inline_229[pluginName$jscomp$inline_231];
    if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_231) || namesToPlugins[pluginName$jscomp$inline_231] !== pluginModule$jscomp$inline_232) {
      if (namesToPlugins[pluginName$jscomp$inline_231]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + (pluginName$jscomp$inline_231 + "`."));
      namesToPlugins[pluginName$jscomp$inline_231] = pluginModule$jscomp$inline_232;
      isOrderingDirty$jscomp$inline_230 = true;
    }
  }
  isOrderingDirty$jscomp$inline_230 && recomputePluginOrdering();
  var instanceCache = new Map(),
    instanceProps = new Map();
  function getInstanceFromTag(tag) {
    return instanceCache.get(tag) || null;
  }
  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }
  var isInsideEventHandler = false;
  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;
    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      isInsideEventHandler = false;
    }
  }
  var eventQueue = null;
  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
        dispatchInstances = e._dispatchInstances;
      if (isArrayImpl(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }
  var EMPTY_NATIVE_EVENT = {};
  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
      inst = getInstanceFromTag(rootNodeID),
      target = null;
    null != inst && (target = inst.stateNode);
    batchedUpdates(function () {
      var JSCompiler_inline_result = target;
      for (var events = null, legacyPlugins = plugins, i = 0; i < legacyPlugins.length; i++) {
        var possiblePlugin = legacyPlugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, JSCompiler_inline_result)) && (events = accumulateInto(events, possiblePlugin));
      }
      JSCompiler_inline_result = events;
      null !== JSCompiler_inline_result && (eventQueue = accumulateInto(eventQueue, JSCompiler_inline_result));
      JSCompiler_inline_result = eventQueue;
      eventQueue = null;
      if (JSCompiler_inline_result) {
        forEachAccumulated(JSCompiler_inline_result, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        if (hasRethrowError) throw JSCompiler_inline_result = rethrowError, hasRethrowError = false, rethrowError = null, JSCompiler_inline_result;
      }
    });
  }
  ReactNativePrivateInterface.RCTEventEmitter.register({
    receiveEvent: function (rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function (eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];
        for (var i = 0; i < changedIndices.length; i++) {
          var index$0 = changedIndices[i];
          JSCompiler_temp.push(touches[index$0]);
          touches[index$0] = null;
        }
        for (i = changedIndices = 0; i < touches.length; i++) index$0 = touches[i], null !== index$0 && (touches[changedIndices++] = index$0);
        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) JSCompiler_temp.push(touches[changedIndices[i]]);
      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index$0 = null;
        var target = i.target;
        null === target || undefined === target || 1 > target || (index$0 = target);
        _receiveRootNodeIDEvent(index$0, eventTopLevelType, i);
      }
    }
  });
  getFiberCurrentPropsFromNode = function (stateNode) {
    return instanceProps.get(stateNode._nativeTag) || null;
  };
  getInstanceFromNode = getInstanceFromTag;
  getNodeFromInstance = function (inst) {
    inst = inst.stateNode;
    var tag = inst._nativeTag;
    undefined === tag && (inst = inst.canonical, tag = inst._nativeTag);
    if (!tag) throw Error("All native instances should have a tag.");
    return inst;
  };
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function (from, to, blockNativeResponder) {
      null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    REACT_ELEMENT_TYPE = Symbol.for("react.element"),
    REACT_PORTAL_TYPE = Symbol.for("react.portal"),
    REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
    REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
    REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
    REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
    REACT_CONTEXT_TYPE = Symbol.for("react.context"),
    REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
    REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
    REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
    REACT_MEMO_TYPE = Symbol.for("react.memo"),
    REACT_LAZY_TYPE = Symbol.for("react.lazy");
  Symbol.for("react.scope");
  Symbol.for("react.debug_trace_mode");
  var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
  Symbol.for("react.legacy_hidden");
  Symbol.for("react.cache");
  Symbol.for("react.tracing_marker");
  var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }
  function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";
      case REACT_PORTAL_TYPE:
        return "Portal";
      case REACT_PROFILER_TYPE:
        return "Profiler";
      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";
      case REACT_SUSPENSE_TYPE:
        return "Suspense";
      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }
    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return (type.displayName || "Context") + ".Consumer";
      case REACT_PROVIDER_TYPE:
        return (type._context.displayName || "Context") + ".Provider";
      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        type = type.displayName;
        type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
        return type;
      case REACT_MEMO_TYPE:
        return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
      case REACT_LAZY_TYPE:
        innerType = type._payload;
        type = type._init;
        try {
          return getComponentNameFromType(type(innerType));
        } catch (x) {}
    }
    return null;
  }
  function getComponentNameFromFiber(fiber) {
    var type = fiber.type;
    switch (fiber.tag) {
      case 24:
        return "Cache";
      case 9:
        return (type.displayName || "Context") + ".Consumer";
      case 10:
        return (type._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return type;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return getComponentNameFromType(type);
      case 8:
        return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if ("function" === typeof type) return type.displayName || type.name || null;
        if ("string" === typeof type) return type;
    }
    return null;
  }
  function getNearestMountedFiber(fiber) {
    var node = fiber,
      nearestMounted = fiber;
    if (fiber.alternate) for (; node.return;) node = node.return;else {
      fiber = node;
      do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return; while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
  }
  function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
  }
  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
      alternate = getNearestMountedFiber(fiber);
      if (null === alternate) throw Error("Unable to find node on an unmounted component.");
      return alternate !== fiber ? null : fiber;
    }
    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;
      if (null === parentB) {
        b = parentA.return;
        if (null !== b) {
          a = b;
          continue;
        }
        break;
      }
      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }
        throw Error("Unable to find node on an unmounted component.");
      }
      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, child$1 = parentA.child; child$1;) {
          if (child$1 === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }
          if (child$1 === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }
          child$1 = child$1.sibling;
        }
        if (!didFindChild) {
          for (child$1 = parentB.child; child$1;) {
            if (child$1 === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }
            if (child$1 === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }
            child$1 = child$1.sibling;
          }
          if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }
    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }
  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    return null !== parent ? findCurrentHostFiberImpl(parent) : null;
  }
  function findCurrentHostFiberImpl(node) {
    if (5 === node.tag || 6 === node.tag) return node;
    for (node = node.child; null !== node;) {
      var match = findCurrentHostFiberImpl(node);
      if (null !== match) return match;
      node = node.sibling;
    }
    return null;
  }
  var emptyObject = {},
    removedKeys = null,
    removedKeyCount = 0,
    deepDifferOptions = {
      unsafelyIgnoreFunctions: true
    };
  function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? true : ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
  }
  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (isArrayImpl(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);else if (node && 0 < removedKeyCount) for (i in removedKeys) if (removedKeys[i]) {
      var nextProp = node[i];
      if (undefined !== nextProp) {
        var attributeConfig = validAttributes[i];
        if (attributeConfig) {
          "function" === typeof nextProp && (nextProp = true);
          "undefined" === typeof nextProp && (nextProp = null);
          if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
          removedKeys[i] = false;
          removedKeyCount--;
        }
      }
    }
  }
  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
        i;
      for (i = 0; i < minLength; i++) updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      for (; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      for (; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      return updatePayload;
    }
    return isArrayImpl(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
  }
  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!isArrayImpl(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);
    for (var i = 0; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    return updatePayload;
  }
  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!isArrayImpl(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);
    for (var i = 0; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    return updatePayload;
  }
  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;
    for (propKey in nextProps) if (attributeConfig = validAttributes[propKey]) {
      var prevProp = prevProps[propKey];
      var nextProp = nextProps[propKey];
      "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
      "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
      removedKeys && (removedKeys[propKey] = false);
      if (updatePayload && undefined !== updatePayload[propKey]) {
        if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
          if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
        }
      } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
        if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
      } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }
    for (var propKey$3 in prevProps) undefined === nextProps[propKey$3] && (!(attributeConfig = validAttributes[propKey$3]) || updatePayload && undefined !== updatePayload[propKey$3] || (prevProp = prevProps[propKey$3], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey$3] = null, removedKeys || (removedKeys = {}), removedKeys[propKey$3] || (removedKeys[propKey$3] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    return updatePayload;
  }
  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }
  var ReactNativeFiberHostComponent = function () {
      function ReactNativeFiberHostComponent(tag, viewConfig) {
        this._nativeTag = tag;
        this._children = [];
        this.viewConfig = viewConfig;
      }
      var _proto = ReactNativeFiberHostComponent.prototype;
      _proto.blur = function () {
        ReactNativePrivateInterface.TextInputState.blurTextInput(this);
      };
      _proto.focus = function () {
        ReactNativePrivateInterface.TextInputState.focusTextInput(this);
      };
      _proto.measure = function (callback) {
        ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
      };
      _proto.measureInWindow = function (callback) {
        ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
      };
      _proto.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        if ("number" === typeof relativeToNativeNode) var relativeNode = relativeToNativeNode;else relativeToNativeNode._nativeTag && (relativeNode = relativeToNativeNode._nativeTag);
        null != relativeNode && ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
      };
      _proto.setNativeProps = function (nativeProps) {
        nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
        null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
      };
      return ReactNativeFiberHostComponent;
    }(),
    scheduleCallback = Scheduler.unstable_scheduleCallback,
    cancelCallback = Scheduler.unstable_cancelCallback,
    shouldYield = Scheduler.unstable_shouldYield,
    requestPaint = Scheduler.unstable_requestPaint,
    now = Scheduler.unstable_now,
    ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    NormalPriority = Scheduler.unstable_NormalPriority,
    IdlePriority = Scheduler.unstable_IdlePriority,
    rendererID = null,
    injectedHook = null;
  function onCommitRoot(root) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
      injectedHook.onCommitFiberRoot(rendererID, root, undefined, 128 === (root.current.flags & 128));
    } catch (err) {}
  }
  var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
    log = Math.log,
    LN2 = Math.LN2;
  function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
  }
  var nextTransitionLane = 64,
    nextRetryLane = 4194304;
  function getHighestPriorityLanes(lanes) {
    switch (lanes & -lanes) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return lanes & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return lanes & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return lanes;
    }
  }
  function getNextLanes(root, wipLanes) {
    var pendingLanes = root.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0,
      suspendedLanes = root.suspendedLanes,
      pingedLanes = root.pingedLanes,
      nonIdlePendingLanes = pendingLanes & 268435455;
    if (0 !== nonIdlePendingLanes) {
      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
      0 !== nonIdleUnblockedLanes ? nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes && (nextLanes = getHighestPriorityLanes(pingedLanes)));
    } else nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes && (nextLanes = getHighestPriorityLanes(pingedLanes));
    if (0 === nextLanes) return 0;
    if (0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, pingedLanes = wipLanes & -wipLanes, suspendedLanes >= pingedLanes || 16 === suspendedLanes && 0 !== (pingedLanes & 4194240))) return wipLanes;
    0 !== (nextLanes & 4) && (nextLanes |= pendingLanes & 16);
    wipLanes = root.entangledLanes;
    if (0 !== wipLanes) for (root = root.entanglements, wipLanes &= nextLanes; 0 < wipLanes;) pendingLanes = 31 - clz32(wipLanes), suspendedLanes = 1 << pendingLanes, nextLanes |= root[pendingLanes], wipLanes &= ~suspendedLanes;
    return nextLanes;
  }
  function computeExpirationTime(lane, currentTime) {
    switch (lane) {
      case 1:
      case 2:
      case 4:
        return currentTime + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return currentTime + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function getLanesToRetrySynchronouslyOnError(root) {
    root = root.pendingLanes & -1073741825;
    return 0 !== root ? root : root & 1073741824 ? 1073741824 : 0;
  }
  function claimNextTransitionLane() {
    var lane = nextTransitionLane;
    nextTransitionLane <<= 1;
    0 === (nextTransitionLane & 4194240) && (nextTransitionLane = 64);
    return lane;
  }
  function createLaneMap(initial) {
    for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
    return laneMap;
  }
  function markRootUpdated(root, updateLane, eventTime) {
    root.pendingLanes |= updateLane;
    536870912 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0);
    root = root.eventTimes;
    updateLane = 31 - clz32(updateLane);
    root[updateLane] = eventTime;
  }
  function markRootFinished(root, remainingLanes) {
    var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
    root.pendingLanes = remainingLanes;
    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.mutableReadLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    remainingLanes = root.entanglements;
    var eventTimes = root.eventTimes;
    for (root = root.expirationTimes; 0 < noLongerPendingLanes;) {
      var index$8 = 31 - clz32(noLongerPendingLanes),
        lane = 1 << index$8;
      remainingLanes[index$8] = 0;
      eventTimes[index$8] = -1;
      root[index$8] = -1;
      noLongerPendingLanes &= ~lane;
    }
  }
  function markRootEntangled(root, entangledLanes) {
    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
    for (root = root.entanglements; rootEntangledLanes;) {
      var index$9 = 31 - clz32(rootEntangledLanes),
        lane = 1 << index$9;
      lane & entangledLanes | root[index$9] & entangledLanes && (root[index$9] |= entangledLanes);
      rootEntangledLanes &= ~lane;
    }
  }
  var currentUpdatePriority = 0;
  function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 1 < lanes ? 4 < lanes ? 0 !== (lanes & 268435455) ? 16 : 536870912 : 4 : 1;
  }
  function shim() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
  }
  var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
    UPDATE_SIGNAL = {},
    nextReactTag = 3;
  function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
  }
  function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) instanceCache.delete(node), instanceProps.delete(node);else {
      var tag = node._nativeTag;
      instanceCache.delete(tag);
      instanceProps.delete(tag);
      node._children.forEach(recursivelyUncacheFiberNode);
    }
  }
  function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return false;
    var nativeTags = parentInstance._children.map(function (child) {
      return "number" === typeof child ? child : child._nativeTag;
    });
    ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);
    return false;
  }
  var scheduleTimeout = setTimeout,
    cancelTimeout = clearTimeout;
  function describeComponentFrame(name, source, ownerName) {
    source = "";
    ownerName && (source = " (created by " + ownerName + ")");
    return "\n    in " + (name || "Unknown") + source;
  }
  function describeFunctionComponentFrame(fn, source) {
    return fn ? describeComponentFrame(fn.displayName || fn.name || null, source, null) : "";
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty,
    valueStack = [],
    index = -1;
  function createCursor(defaultValue) {
    return {
      current: defaultValue
    };
  }
  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }
  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }
  var emptyContextObject = {},
    contextStackCursor = createCursor(emptyContextObject),
    didPerformWorkStackCursor = createCursor(false),
    previousContext = emptyContextObject;
  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
      key;
    for (key in contextTypes) context[key] = unmaskedContext[key];
    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }
  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }
  function popContext() {
    pop(didPerformWorkStackCursor);
    pop(contextStackCursor);
  }
  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context);
    push(didPerformWorkStackCursor, didChange);
  }
  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    type = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();
    for (var contextKey in instance) if (!(contextKey in type)) throw Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
    return assign({}, parentContext, instance);
  }
  function pushContextProvider(workInProgress) {
    workInProgress = (workInProgress = workInProgress.stateNode) && workInProgress.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current);
    return true;
  }
  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
    didChange ? (workInProgress = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = workInProgress, pop(didPerformWorkStackCursor), pop(contextStackCursor), push(contextStackCursor, workInProgress)) : pop(didPerformWorkStackCursor);
    push(didPerformWorkStackCursor, didChange);
  }
  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var objectIs = "function" === typeof Object.is ? Object.is : is,
    syncQueue = null,
    includesLegacySyncCallbacks = false,
    isFlushingSyncQueue = false;
  function flushSyncCallbacks() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = true;
      var i = 0,
        previousUpdatePriority = currentUpdatePriority;
      try {
        var queue = syncQueue;
        for (currentUpdatePriority = 1; i < queue.length; i++) {
          var callback = queue[i];
          do callback = callback(true); while (null !== callback);
        }
        syncQueue = null;
        includesLegacySyncCallbacks = false;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), scheduleCallback(ImmediatePriority, flushSyncCallbacks), error;
      } finally {
        currentUpdatePriority = previousUpdatePriority, isFlushingSyncQueue = false;
      }
    }
    return null;
  }
  var forkStack = [],
    forkStackIndex = 0,
    treeForkProvider = null,
    idStack = [],
    idStackIndex = 0,
    treeContextProvider = null;
  function popTreeContext(workInProgress) {
    for (; workInProgress === treeForkProvider;) treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, --forkStackIndex, forkStack[forkStackIndex] = null;
    for (; workInProgress === treeContextProvider;) treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, --idStackIndex, idStack[idStackIndex] = null, --idStackIndex, idStack[idStackIndex] = null;
  }
  var hydrationErrors = null,
    ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
      keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for (keysB = 0; keysB < keysA.length; keysB++) {
      var currentKey = keysA[keysB];
      if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
    }
    return true;
  }
  function describeFiber(fiber) {
    switch (fiber.tag) {
      case 5:
        return describeComponentFrame(fiber.type, null, null);
      case 16:
        return describeComponentFrame("Lazy", null, null);
      case 13:
        return describeComponentFrame("Suspense", null, null);
      case 19:
        return describeComponentFrame("SuspenseList", null, null);
      case 0:
      case 2:
      case 15:
        return describeFunctionComponentFrame(fiber.type, null);
      case 11:
        return describeFunctionComponentFrame(fiber.type.render, null);
      case 1:
        return fiber = describeFunctionComponentFrame(fiber.type, null), fiber;
      default:
        return "";
    }
  }
  function getStackByFiberInDevAndProd(workInProgress) {
    try {
      var info = "";
      do info += describeFiber(workInProgress), workInProgress = workInProgress.return; while (workInProgress);
      return info;
    } catch (x) {
      return "\nError generating stack: " + x.message + "\n" + x.stack;
    }
  }
  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = assign({}, baseProps);
      Component = Component.defaultProps;
      for (var propName in Component) undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      return baseProps;
    }
    return baseProps;
  }
  var valueCursor = createCursor(null),
    currentlyRenderingFiber = null,
    lastContextDependency = null,
    lastFullyObservedContext = null;
  function resetContextDependencies() {
    lastFullyObservedContext = lastContextDependency = currentlyRenderingFiber = null;
  }
  function popProvider(context) {
    var currentValue = valueCursor.current;
    pop(valueCursor);
    context._currentValue = currentValue;
  }
  function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
      if (parent === propagationRoot) break;
      parent = parent.return;
    }
  }
  function prepareToReadContext(workInProgress, renderLanes) {
    currentlyRenderingFiber = workInProgress;
    lastFullyObservedContext = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (0 !== (workInProgress.lanes & renderLanes) && (didReceiveUpdate = true), workInProgress.firstContext = null);
  }
  function readContext(context) {
    var value = context._currentValue;
    if (lastFullyObservedContext !== context) if (context = {
      context: context,
      memoizedValue: value,
      next: null
    }, null === lastContextDependency) {
      if (null === currentlyRenderingFiber) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      lastContextDependency = context;
      currentlyRenderingFiber.dependencies = {
        lanes: 0,
        firstContext: context
      };
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
  }
  var concurrentQueues = null;
  function pushConcurrentUpdateQueue(queue) {
    null === concurrentQueues ? concurrentQueues = [queue] : concurrentQueues.push(queue);
  }
  function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    var interleaved = queue.interleaved;
    null === interleaved ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update);
    queue.interleaved = update;
    return markUpdateLaneFromFiberToRoot(fiber, lane);
  }
  function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    alternate = sourceFiber;
    for (sourceFiber = sourceFiber.return; null !== sourceFiber;) sourceFiber.childLanes |= lane, alternate = sourceFiber.alternate, null !== alternate && (alternate.childLanes |= lane), alternate = sourceFiber, sourceFiber = sourceFiber.return;
    return 3 === alternate.tag ? alternate.stateNode : null;
  }
  var hasForceUpdate = false;
  function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
      baseState: fiber.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: {
        pending: null,
        interleaved: null,
        lanes: 0
      },
      effects: null
    };
  }
  function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
      baseState: current.baseState,
      firstBaseUpdate: current.firstBaseUpdate,
      lastBaseUpdate: current.lastBaseUpdate,
      shared: current.shared,
      effects: current.effects
    });
  }
  function createUpdate(eventTime, lane) {
    return {
      eventTime: eventTime,
      lane: lane,
      tag: 0,
      payload: null,
      callback: null,
      next: null
    };
  }
  function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
      var pending = updateQueue.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      updateQueue.pending = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    pending = updateQueue.interleaved;
    null === pending ? (update.next = update, pushConcurrentUpdateQueue(updateQueue)) : (update.next = pending.next, pending.next = update);
    updateQueue.interleaved = update;
    return markUpdateLaneFromFiberToRoot(fiber, lane);
  }
  function entangleTransitions(root, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194240))) {
      var queueLanes = fiber.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      fiber.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    var queue = workInProgress.updateQueue,
      current = workInProgress.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
      var newFirst = null,
        newLast = null;
      queue = queue.firstBaseUpdate;
      if (null !== queue) {
        do {
          var clone = {
            eventTime: queue.eventTime,
            lane: queue.lane,
            tag: queue.tag,
            payload: queue.payload,
            callback: queue.callback,
            next: null
          };
          null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
          queue = queue.next;
        } while (null !== queue);
        null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
      } else newFirst = newLast = capturedUpdate;
      queue = {
        baseState: current.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: current.shared,
        effects: current.effects
      };
      workInProgress.updateQueue = queue;
      return;
    }
    workInProgress = queue.lastBaseUpdate;
    null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
  }
  function processUpdateQueue(workInProgress$jscomp$0, props, instance, renderLanes) {
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = false;
    var firstBaseUpdate = queue.firstBaseUpdate,
      lastBaseUpdate = queue.lastBaseUpdate,
      pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
      queue.shared.pending = null;
      var lastPendingUpdate = pendingQueue,
        firstPendingUpdate = lastPendingUpdate.next;
      lastPendingUpdate.next = null;
      null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
      lastBaseUpdate = lastPendingUpdate;
      var current = workInProgress$jscomp$0.alternate;
      null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
      var newState = queue.baseState;
      lastBaseUpdate = 0;
      current = firstPendingUpdate = lastPendingUpdate = null;
      pendingQueue = firstBaseUpdate;
      do {
        var updateLane = pendingQueue.lane,
          updateEventTime = pendingQueue.eventTime;
        if ((renderLanes & updateLane) === updateLane) {
          null !== current && (current = current.next = {
            eventTime: updateEventTime,
            lane: 0,
            tag: pendingQueue.tag,
            payload: pendingQueue.payload,
            callback: pendingQueue.callback,
            next: null
          });
          a: {
            var workInProgress = workInProgress$jscomp$0,
              update = pendingQueue;
            updateLane = props;
            updateEventTime = instance;
            switch (update.tag) {
              case 1:
                workInProgress = update.payload;
                if ("function" === typeof workInProgress) {
                  newState = workInProgress.call(updateEventTime, newState, updateLane);
                  break a;
                }
                newState = workInProgress;
                break a;
              case 3:
                workInProgress.flags = workInProgress.flags & -65537 | 128;
              case 0:
                workInProgress = update.payload;
                updateLane = "function" === typeof workInProgress ? workInProgress.call(updateEventTime, newState, updateLane) : workInProgress;
                if (null === updateLane || undefined === updateLane) break a;
                newState = assign({}, newState, updateLane);
                break a;
              case 2:
                hasForceUpdate = true;
            }
          }
          null !== pendingQueue.callback && 0 !== pendingQueue.lane && (workInProgress$jscomp$0.flags |= 64, updateLane = queue.effects, null === updateLane ? queue.effects = [pendingQueue] : updateLane.push(pendingQueue));
        } else updateEventTime = {
          eventTime: updateEventTime,
          lane: updateLane,
          tag: pendingQueue.tag,
          payload: pendingQueue.payload,
          callback: pendingQueue.callback,
          next: null
        }, null === current ? (firstPendingUpdate = current = updateEventTime, lastPendingUpdate = newState) : current = current.next = updateEventTime, lastBaseUpdate |= updateLane;
        pendingQueue = pendingQueue.next;
        if (null === pendingQueue) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;else updateLane = pendingQueue, pendingQueue = updateLane.next, updateLane.next = null, queue.lastBaseUpdate = updateLane, queue.shared.pending = null;
      } while (1);
      null === current && (lastPendingUpdate = newState);
      queue.baseState = lastPendingUpdate;
      queue.firstBaseUpdate = firstPendingUpdate;
      queue.lastBaseUpdate = current;
      props = queue.shared.interleaved;
      if (null !== props) {
        queue = props;
        do lastBaseUpdate |= queue.lane, queue = queue.next; while (queue !== props);
      } else null === firstBaseUpdate && (queue.shared.lanes = 0);
      workInProgressRootSkippedLanes |= lastBaseUpdate;
      workInProgress$jscomp$0.lanes = lastBaseUpdate;
      workInProgress$jscomp$0.memoizedState = newState;
    }
  }
  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    finishedWork = finishedQueue.effects;
    finishedQueue.effects = null;
    if (null !== finishedWork) for (finishedQueue = 0; finishedQueue < finishedWork.length; finishedQueue++) {
      var effect = finishedWork[finishedQueue],
        callback = effect.callback;
      if (null !== callback) {
        effect.callback = null;
        if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(instance);
      }
    }
  }
  var emptyRefsObject = new React.Component().refs;
  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
  }
  var classComponentUpdater = {
    isMounted: function (component) {
      return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : false;
    },
    enqueueSetState: function (inst, payload, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane, eventTime), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function (inst, payload, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.tag = 1;
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane, eventTime), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function (inst, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(),
        lane = requestUpdateLane(inst),
        update = createUpdate(eventTime, lane);
      update.tag = 2;
      undefined !== callback && null !== callback && (update.callback = callback);
      callback = enqueueUpdate(inst, update, lane);
      null !== callback && (scheduleUpdateOnFiber(callback, inst, lane, eventTime), entangleTransitions(callback, inst, lane));
    }
  };
  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }
  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
      unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternals = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }
  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
  function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderLanes), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4);
  }
  function coerceRef(returnFiber, current, element) {
    returnFiber = element.ref;
    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        if (element) {
          if (1 !== element.tag) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://react.dev/link/strict-mode-string-ref");
          var inst = element.stateNode;
        }
        if (!inst) throw Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue.");
        var resolvedInst = inst,
          stringRef = "" + returnFiber;
        if (null !== current && null !== current.ref && "function" === typeof current.ref && current.ref._stringRef === stringRef) return current.ref;
        current = function (value) {
          var refs = resolvedInst.refs;
          refs === emptyRefsObject && (refs = resolvedInst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };
        current._stringRef = stringRef;
        return current;
      }
      if ("string" !== typeof returnFiber) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
      if (!element._owner) throw Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://react.dev/link/refs-must-have-owner for more information.");
    }
    return returnFiber;
  }
  function throwOnInvalidObjectType(returnFiber, newChild) {
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
  }
  function resolveLazy(lazyType) {
    var init = lazyType._init;
    return init(lazyType._payload);
  }
  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var deletions = returnFiber.deletions;
        null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
      }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;
      for (; null !== currentFirstChild;) deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return null;
    }
    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return returnFiber;
    }
    function useFiber(fiber, pendingProps) {
      fiber = createWorkInProgress(fiber, pendingProps);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 2, lastPlacedIndex) : newIndex;
      newFiber.flags |= 2;
      return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 2);
      return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, textContent);
      current.return = returnFiber;
      return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
      var elementType = element.type;
      if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
      if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) return lanes = useFiber(current, element.props), lanes.ref = coerceRef(returnFiber, current, element), lanes.return = returnFiber, lanes;
      lanes = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
      lanes.ref = coerceRef(returnFiber, current, element);
      lanes.return = returnFiber;
      return lanes;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, portal.children || []);
      current.return = returnFiber;
      return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
      if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
      current = useFiber(current, fragment);
      current.return = returnFiber;
      return current;
    }
    function createChild(returnFiber, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), lanes.ref = coerceRef(returnFiber, null, newChild), lanes.return = returnFiber, lanes;
          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            return createChild(returnFiber, init(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_LAZY_TYPE:
            return key = newChild._init, updateSlot(returnFiber, oldFiber, key(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            return updateFromMap(existingChildren, returnFiber, newIdx, init(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        return resultingFirstChild;
      }
      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw Error("An iterable object provided no iterator.");
      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;
      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        return iteratorFn;
      }
      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }
    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            a: {
              for (var key = newChild.key, child = currentFirstChild; null !== child;) {
                if (child.key === key) {
                  key = newChild.type;
                  if (key === REACT_FRAGMENT_TYPE) {
                    if (7 === child.tag) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      currentFirstChild = useFiber(child, newChild.props.children);
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    }
                  } else if (child.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    currentFirstChild = useFiber(child, newChild.props);
                    currentFirstChild.ref = coerceRef(returnFiber, child, newChild);
                    currentFirstChild.return = returnFiber;
                    returnFiber = currentFirstChild;
                    break a;
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
              }
              newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), lanes.ref = coerceRef(returnFiber, currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes);
            }
            return placeSingleChild(returnFiber);
          case REACT_PORTAL_TYPE:
            a: {
              for (child = newChild.key; null !== currentFirstChild;) {
                if (currentFirstChild.key === child) {
                  if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    currentFirstChild = useFiber(currentFirstChild, newChild.children || []);
                    currentFirstChild.return = returnFiber;
                    returnFiber = currentFirstChild;
                    break a;
                  } else {
                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    break;
                  }
                } else deleteChild(returnFiber, currentFirstChild);
                currentFirstChild = currentFirstChild.sibling;
              }
              currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              currentFirstChild.return = returnFiber;
              returnFiber = currentFirstChild;
            }
            return placeSingleChild(returnFiber);
          case REACT_LAZY_TYPE:
            return child = newChild._init, reconcileChildFibers(returnFiber, currentFirstChild, child(newChild._payload), lanes);
        }
        if (isArrayImpl(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
        if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, lanes), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return reconcileChildFibers;
  }
  var reconcileChildFibers = ChildReconciler(true),
    mountChildFibers = ChildReconciler(false),
    NO_CONTEXT = {},
    contextStackCursor$1 = createCursor(NO_CONTEXT),
    contextFiberStackCursor = createCursor(NO_CONTEXT),
    rootInstanceStackCursor = createCursor(NO_CONTEXT);
  function requiredContext(c) {
    if (c === NO_CONTEXT) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    return c;
  }
  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor$1, NO_CONTEXT);
    pop(contextStackCursor$1);
    push(contextStackCursor$1, {
      isInAParentText: false
    });
  }
  function popHostContainer() {
    pop(contextStackCursor$1);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
  }
  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var JSCompiler_inline_result = fiber.type;
    JSCompiler_inline_result = "AndroidTextInput" === JSCompiler_inline_result || "RCTMultilineTextInputView" === JSCompiler_inline_result || "RCTSinglelineTextInputView" === JSCompiler_inline_result || "RCTText" === JSCompiler_inline_result || "RCTVirtualText" === JSCompiler_inline_result;
    JSCompiler_inline_result = context.isInAParentText !== JSCompiler_inline_result ? {
      isInAParentText: JSCompiler_inline_result
    } : context;
    context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor$1, JSCompiler_inline_result));
  }
  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1), pop(contextFiberStackCursor));
  }
  var suspenseStackCursor = createCursor(0);
  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        var state = node.memoizedState;
        if (null !== state && (null === state.dehydrated || shim() || shim())) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.flags & 128)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === row) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    return null;
  }
  var workInProgressSources = [];
  function resetWorkInProgressVersions() {
    for (var i = 0; i < workInProgressSources.length; i++) workInProgressSources[i]._workInProgressVersionPrimary = null;
    workInProgressSources.length = 0;
  }
  var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig,
    renderLanes = 0,
    currentlyRenderingFiber$1 = null,
    currentHook = null,
    workInProgressHook = null,
    didScheduleRenderPhaseUpdate = false,
    didScheduleRenderPhaseUpdateDuringThisPass = false,
    globalClientIdCounter = 0;
  function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
  }
  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;
    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) if (!objectIs(nextDeps[i], prevDeps[i])) return false;
    return true;
  }
  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = 0;
    ReactCurrentDispatcher$1.current = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    current = Component(props, secondArg);
    if (didScheduleRenderPhaseUpdateDuringThisPass) {
      nextRenderLanes = 0;
      do {
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        if (25 <= nextRenderLanes) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        nextRenderLanes += 1;
        workInProgressHook = currentHook = null;
        workInProgress.updateQueue = null;
        ReactCurrentDispatcher$1.current = HooksDispatcherOnRerender;
        current = Component(props, secondArg);
      } while (didScheduleRenderPhaseUpdateDuringThisPass);
    }
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    workInProgress = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = false;
    if (workInProgress) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    return current;
  }
  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }
  function updateWorkInProgressHook() {
    if (null === currentHook) {
      var nextCurrentHook = currentlyRenderingFiber$1.alternate;
      nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;else {
      if (null === nextCurrentHook) throw Error("Rendered more hooks than during the previous render.");
      currentHook = nextCurrentHook;
      nextCurrentHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };
      null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
  }
  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }
  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
      queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var current = currentHook,
      baseQueue = current.baseQueue,
      pendingQueue = queue.pending;
    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }
      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }
    if (null !== baseQueue) {
      pendingQueue = baseQueue.next;
      current = current.baseState;
      var newBaseQueueFirst = baseFirst = null,
        newBaseQueueLast = null,
        update = pendingQueue;
      do {
        var updateLane = update.lane;
        if ((renderLanes & updateLane) === updateLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
          lane: 0,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        }), current = update.hasEagerState ? update.eagerState : reducer(current, update.action);else {
          var clone = {
            lane: updateLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          };
          null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = clone, baseFirst = current) : newBaseQueueLast = newBaseQueueLast.next = clone;
          currentlyRenderingFiber$1.lanes |= updateLane;
          workInProgressRootSkippedLanes |= updateLane;
        }
        update = update.next;
      } while (null !== update && update !== pendingQueue);
      null === newBaseQueueLast ? baseFirst = current : newBaseQueueLast.next = newBaseQueueFirst;
      objectIs(current, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = current;
      hook.baseState = baseFirst;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = current;
    }
    reducer = queue.interleaved;
    if (null !== reducer) {
      baseQueue = reducer;
      do pendingQueue = baseQueue.lane, currentlyRenderingFiber$1.lanes |= pendingQueue, workInProgressRootSkippedLanes |= pendingQueue, baseQueue = baseQueue.next; while (baseQueue !== reducer);
    } else null === baseQueue && (queue.lanes = 0);
    return [hook.memoizedState, queue.dispatch];
  }
  function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(),
      queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch,
      lastRenderPhaseUpdate = queue.pending,
      newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
      queue.pending = null;
      var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      do newState = reducer(newState, update.action), update = update.next; while (update !== lastRenderPhaseUpdate);
      objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      null === hook.baseQueue && (hook.baseState = newState);
      queue.lastRenderedState = newState;
    }
    return [newState, dispatch];
  }
  function updateMutableSource() {}
  function updateSyncExternalStore(subscribe, getSnapshot) {
    var fiber = currentlyRenderingFiber$1,
      hook = updateWorkInProgressHook(),
      nextSnapshot = getSnapshot(),
      snapshotChanged = !objectIs(hook.memoizedState, nextSnapshot);
    snapshotChanged && (hook.memoizedState = nextSnapshot, didReceiveUpdate = true);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [subscribe]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
      fiber.flags |= 2048;
      pushEffect(9, updateStoreInstance.bind(null, fiber, hook, nextSnapshot, getSnapshot), undefined, null);
      if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
      0 !== (renderLanes & 30) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
    return nextSnapshot;
  }
  function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = {
      getSnapshot: getSnapshot,
      value: renderedSnapshot
    };
    getSnapshot = currentlyRenderingFiber$1.updateQueue;
    null === getSnapshot ? (getSnapshot = {
      lastEffect: null,
      stores: null
    }, currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
  }
  function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
  }
  function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function () {
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
  }
  function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
      var nextValue = latestGetSnapshot();
      return !objectIs(inst, nextValue);
    } catch (error) {
      return true;
    }
  }
  function forceStoreRerender(fiber) {
    var root = markUpdateLaneFromFiberToRoot(fiber, 1);
    null !== root && scheduleUpdateOnFiber(root, fiber, 1, -1);
  }
  function mountState(initialState) {
    var hook = mountWorkInProgressHook();
    "function" === typeof initialState && (initialState = initialState());
    hook.memoizedState = hook.baseState = initialState;
    initialState = {
      pending: null,
      interleaved: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    hook.queue = initialState;
    initialState = initialState.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, initialState);
    return [hook.memoizedState, initialState];
  }
  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create ? (create = {
      lastEffect: null,
      stores: null
    }, currentlyRenderingFiber$1.updateQueue = create, create.lastEffect = tag.next = tag) : (destroy = create.lastEffect, null === destroy ? create.lastEffect = tag.next = tag : (deps = destroy.next, destroy.next = tag, tag.next = deps, create.lastEffect = tag));
    return tag;
  }
  function updateRef() {
    return updateWorkInProgressHook().memoizedState;
  }
  function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, undefined, undefined === deps ? null : deps);
  }
  function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var destroy = undefined;
    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;
      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        hook.memoizedState = pushEffect(hookFlags, create, destroy, deps);
        return;
      }
    }
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, destroy, deps);
  }
  function mountEffect(create, deps) {
    return mountEffectImpl(8390656, 8, create, deps);
  }
  function updateEffect(create, deps) {
    return updateEffectImpl(2048, 8, create, deps);
  }
  function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
  }
  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
  }
  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }
  function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
    return updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
  }
  function mountDebugValue() {}
  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [callback, deps];
    return callback;
  }
  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    nextCreate = nextCreate();
    hook.memoizedState = [nextCreate, deps];
    return nextCreate;
  }
  function updateDeferredValueImpl(hook, prevValue, value) {
    if (0 === (renderLanes & 21)) return hook.baseState && (hook.baseState = false, didReceiveUpdate = true), hook.memoizedState = value;
    objectIs(value, prevValue) || (value = claimNextTransitionLane(), currentlyRenderingFiber$1.lanes |= value, workInProgressRootSkippedLanes |= value, hook.baseState = true);
    return prevValue;
  }
  function startTransition(setPending, callback) {
    var previousPriority = currentUpdatePriority;
    currentUpdatePriority = 0 !== previousPriority && 4 > previousPriority ? previousPriority : 4;
    setPending(true);
    var prevTransition = ReactCurrentBatchConfig$1.transition;
    ReactCurrentBatchConfig$1.transition = {};
    try {
      setPending(false), callback();
    } finally {
      currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$1.transition = prevTransition;
    }
  }
  function updateId() {
    return updateWorkInProgressHook().memoizedState;
  }
  function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    action = {
      lane: lane,
      action: action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, action);else if (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action) {
      var eventTime = requestEventTime();
      scheduleUpdateOnFiber(action, fiber, lane, eventTime);
      entangleTransitionUpdate(action, queue, lane);
    }
  }
  function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane(fiber),
      update = {
        lane: lane,
        action: action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);else {
      var alternate = fiber.alternate;
      if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
          eagerState = alternate(currentState, action);
        update.hasEagerState = true;
        update.eagerState = eagerState;
        if (objectIs(eagerState, currentState)) {
          var interleaved = queue.interleaved;
          null === interleaved ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update);
          queue.interleaved = update;
          return;
        }
      } catch (error) {} finally {}
      action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
      null !== action && (update = requestEventTime(), scheduleUpdateOnFiber(action, fiber, lane, update), entangleTransitionUpdate(action, queue, lane));
    }
  }
  function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
  }
  function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
  }
  function entangleTransitionUpdate(root, queue, lane) {
    if (0 !== (lane & 4194240)) {
      var queueLanes = queue.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      queue.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  var ContextOnlyDispatcher = {
      readContext: readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnMount = {
      readContext: readContext,
      useCallback: function (callback, deps) {
        mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
        return callback;
      },
      useContext: readContext,
      useEffect: mountEffect,
      useImperativeHandle: function (ref, create, deps) {
        deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
        return mountEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
      },
      useLayoutEffect: function (create, deps) {
        return mountEffectImpl(4, 4, create, deps);
      },
      useInsertionEffect: function (create, deps) {
        return mountEffectImpl(4, 2, create, deps);
      },
      useMemo: function (nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = undefined === deps ? null : deps;
        nextCreate = nextCreate();
        hook.memoizedState = [nextCreate, deps];
        return nextCreate;
      },
      useReducer: function (reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        initialArg = undefined !== init ? init(initialArg) : initialArg;
        hook.memoizedState = hook.baseState = initialArg;
        reducer = {
          pending: null,
          interleaved: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialArg
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
        return [hook.memoizedState, reducer];
      },
      useRef: function (initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = {
          current: initialValue
        };
        return hook.memoizedState = initialValue;
      },
      useState: mountState,
      useDebugValue: mountDebugValue,
      useDeferredValue: function (value) {
        return mountWorkInProgressHook().memoizedState = value;
      },
      useTransition: function () {
        var _mountState = mountState(false),
          isPending = _mountState[0];
        _mountState = startTransition.bind(null, _mountState[1]);
        mountWorkInProgressHook().memoizedState = _mountState;
        return [isPending, _mountState];
      },
      useMutableSource: function () {},
      useSyncExternalStore: function (subscribe, getSnapshot) {
        var fiber = currentlyRenderingFiber$1,
          hook = mountWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (renderLanes & 30) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot: getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
      },
      useId: function () {
        var hook = mountWorkInProgressHook(),
          identifierPrefix = workInProgressRoot.identifierPrefix,
          globalClientId = globalClientIdCounter++;
        identifierPrefix = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        return hook.memoizedState = identifierPrefix;
      },
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnUpdate = {
      readContext: readContext,
      useCallback: updateCallback,
      useContext: readContext,
      useEffect: updateEffect,
      useImperativeHandle: updateImperativeHandle,
      useInsertionEffect: updateInsertionEffect,
      useLayoutEffect: updateLayoutEffect,
      useMemo: updateMemo,
      useReducer: updateReducer,
      useRef: updateRef,
      useState: function () {
        return updateReducer(basicStateReducer);
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function (value) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(hook, currentHook.memoizedState, value);
      },
      useTransition: function () {
        var isPending = updateReducer(basicStateReducer)[0],
          start = updateWorkInProgressHook().memoizedState;
        return [isPending, start];
      },
      useMutableSource: updateMutableSource,
      useSyncExternalStore: updateSyncExternalStore,
      useId: updateId,
      unstable_isNewReconciler: false
    },
    HooksDispatcherOnRerender = {
      readContext: readContext,
      useCallback: updateCallback,
      useContext: readContext,
      useEffect: updateEffect,
      useImperativeHandle: updateImperativeHandle,
      useInsertionEffect: updateInsertionEffect,
      useLayoutEffect: updateLayoutEffect,
      useMemo: updateMemo,
      useReducer: rerenderReducer,
      useRef: updateRef,
      useState: function () {
        return rerenderReducer(basicStateReducer);
      },
      useDebugValue: mountDebugValue,
      useDeferredValue: function (value) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? hook.memoizedState = value : updateDeferredValueImpl(hook, currentHook.memoizedState, value);
      },
      useTransition: function () {
        var isPending = rerenderReducer(basicStateReducer)[0],
          start = updateWorkInProgressHook().memoizedState;
        return [isPending, start];
      },
      useMutableSource: updateMutableSource,
      useSyncExternalStore: updateSyncExternalStore,
      useId: updateId,
      unstable_isNewReconciler: false
    };
  function createCapturedValueAtFiber(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source),
      digest: null
    };
  }
  function createCapturedValue(value, digest, stack) {
    return {
      value: value,
      source: null,
      stack: null != stack ? stack : null,
      digest: null != digest ? digest : null
    };
  }
  if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
  function logCapturedError(boundary, errorInfo) {
    try {
      false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
        componentStack: null !== errorInfo.stack ? errorInfo.stack : "",
        error: errorInfo.value,
        errorBoundary: null !== boundary && 1 === boundary.tag ? boundary.stateNode : null
      }) && console.error(errorInfo.value);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;
  function createRootErrorUpdate(fiber, errorInfo, lane) {
    lane = createUpdate(-1, lane);
    lane.tag = 3;
    lane.payload = {
      element: null
    };
    var error = errorInfo.value;
    lane.callback = function () {
      hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error);
      logCapturedError(fiber, errorInfo);
    };
    return lane;
  }
  function createClassErrorUpdate(fiber, errorInfo, lane) {
    lane = createUpdate(-1, lane);
    lane.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;
      lane.payload = function () {
        return getDerivedStateFromError(error);
      };
      lane.callback = function () {
        logCapturedError(fiber, errorInfo);
      };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (lane.callback = function () {
      logCapturedError(fiber, errorInfo);
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return lane;
  }
  function attachPingListener(root, wakeable, lanes) {
    var pingCache = root.pingCache;
    if (null === pingCache) {
      pingCache = root.pingCache = new PossiblyWeakMap();
      var threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    } else threadIDs = pingCache.get(wakeable), undefined === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (threadIDs.add(lanes), root = pingSuspendedRoot.bind(null, root, wakeable, lanes), wakeable.then(root, root));
  }
  var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,
    didReceiveUpdate = false;
  function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
  function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderLanes);
    nextProps = renderWithHooks(current, workInProgress, Component, nextProps, ref, renderLanes);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.flags &= -2053, current.lanes &= ~renderLanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
  }
  function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null === current) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare && undefined === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes);
      current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return workInProgress.child = current;
    }
    type = current.child;
    if (0 === (current.lanes & renderLanes)) {
      var prevProps = type.memoizedProps;
      Component = Component.compare;
      Component = null !== Component ? Component : shallowEqual;
      if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    workInProgress.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
  }
  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null !== current) {
      var prevProps = current.memoizedProps;
      if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref) if (didReceiveUpdate = false, workInProgress.pendingProps = nextProps = prevProps, 0 !== (current.lanes & renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = true);else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
  }
  function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      nextChildren = nextProps.children,
      prevState = null !== current ? current.memoizedState : null;
    if ("hidden" === nextProps.mode) {
      if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = {
        baseLanes: 0,
        cachePool: null,
        transitions: null
      }, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= renderLanes;else {
        if (0 === (renderLanes & 1073741824)) return current = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, workInProgress.lanes = workInProgress.childLanes = 1073741824, workInProgress.memoizedState = {
          baseLanes: current,
          cachePool: null,
          transitions: null
        }, workInProgress.updateQueue = null, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= current, null;
        workInProgress.memoizedState = {
          baseLanes: 0,
          cachePool: null,
          transitions: null
        };
        nextProps = null !== prevState ? prevState.baseLanes : renderLanes;
        push(subtreeRenderLanesCursor, subtreeRenderLanes);
        subtreeRenderLanes |= nextProps;
      }
    } else null !== prevState ? (nextProps = prevState.baseLanes | renderLanes, workInProgress.memoizedState = null) : nextProps = renderLanes, push(subtreeRenderLanesCursor, subtreeRenderLanes), subtreeRenderLanes |= nextProps;
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }
  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current && null !== ref || null !== current && current.ref !== ref) workInProgress.flags |= 512;
  }
  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderLanes);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
    if (null !== current && !didReceiveUpdate) return workInProgress.updateQueue = current.updateQueue, workInProgress.flags &= -2053, current.lanes &= ~renderLanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, Component, renderLanes);
    return workInProgress.child;
  }
  function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;
    prepareToReadContext(workInProgress, renderLanes);
    if (null === workInProgress.stateNode) resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), nextProps = true;else if (null === current) {
      var instance = workInProgress.stateNode,
        oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
        contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
        hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      oldContext = workInProgress.memoizedState;
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4), nextProps = false);
    } else {
      instance = workInProgress.stateNode;
      cloneUpdateQueue(current, workInProgress);
      oldProps = workInProgress.memoizedProps;
      contextType = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
      instance.props = contextType;
      hasNewLifecycles = workInProgress.pendingProps;
      oldState = instance.context;
      oldContext = Component.contextType;
      "object" === typeof oldContext && null !== oldContext ? oldContext = readContext(oldContext) : (oldContext = isContextProvider(Component) ? previousContext : contextStackCursor.current, oldContext = getMaskedContext(workInProgress, oldContext));
      var getDerivedStateFromProps$jscomp$0 = Component.getDerivedStateFromProps;
      (getDerivedStateFromProps = "function" === typeof getDerivedStateFromProps$jscomp$0 || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== hasNewLifecycles || oldState !== oldContext) && callComponentWillReceiveProps(workInProgress, instance, nextProps, oldContext);
      hasForceUpdate = false;
      oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      var newState = workInProgress.memoizedState;
      oldProps !== hasNewLifecycles || oldState !== newState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps$jscomp$0 && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps$jscomp$0, nextProps), newState = workInProgress.memoizedState), (contextType = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextType, nextProps, oldState, newState, oldContext) || false) ? (getDerivedStateFromProps || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, newState, oldContext), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, newState, oldContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), instance.props = nextProps, instance.state = newState, instance.context = oldContext, nextProps = contextType) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = false);
    }
    return finishClassComponent(current, workInProgress, Component, nextProps, hasContext, renderLanes);
  }
  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    markRef(current, workInProgress);
    var didCaptureError = 0 !== (workInProgress.flags & 128);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$1.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.flags |= 1;
    null !== current && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes)) : reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }
  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }
  var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
  };
  function mountSuspenseOffscreenState(renderLanes) {
    return {
      baseLanes: renderLanes,
      cachePool: null,
      transitions: null
    };
  }
  function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      suspenseContext = suspenseStackCursor.current,
      showFallback = false,
      didSuspend = 0 !== (workInProgress.flags & 128),
      JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? false : 0 !== (suspenseContext & 2));
    if (JSCompiler_temp) showFallback = true, workInProgress.flags &= -129;else if (null === current || null !== current.memoizedState) suspenseContext |= 1;
    push(suspenseStackCursor, suspenseContext & 1);
    if (null === current) {
      current = workInProgress.memoizedState;
      if (null !== current && null !== current.dehydrated) return 0 === (workInProgress.mode & 1) ? workInProgress.lanes = 1 : shim() ? workInProgress.lanes = 8 : workInProgress.lanes = 1073741824, null;
      didSuspend = nextProps.children;
      current = nextProps.fallback;
      return showFallback ? (nextProps = workInProgress.mode, showFallback = workInProgress.child, didSuspend = {
        mode: "hidden",
        children: didSuspend
      }, 0 === (nextProps & 1) && null !== showFallback ? (showFallback.childLanes = 0, showFallback.pendingProps = didSuspend) : showFallback = createFiberFromOffscreen(didSuspend, nextProps, 0, null), current = createFiberFromFragment(current, nextProps, renderLanes, null), showFallback.return = workInProgress, current.return = workInProgress, showFallback.sibling = current, workInProgress.child = showFallback, workInProgress.child.memoizedState = mountSuspenseOffscreenState(renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, current) : mountSuspensePrimaryChildren(workInProgress, didSuspend);
    }
    suspenseContext = current.memoizedState;
    if (null !== suspenseContext && (JSCompiler_temp = suspenseContext.dehydrated, null !== JSCompiler_temp)) return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, JSCompiler_temp, suspenseContext, renderLanes);
    if (showFallback) {
      showFallback = nextProps.fallback;
      didSuspend = workInProgress.mode;
      suspenseContext = current.child;
      JSCompiler_temp = suspenseContext.sibling;
      var primaryChildProps = {
        mode: "hidden",
        children: nextProps.children
      };
      0 === (didSuspend & 1) && workInProgress.child !== suspenseContext ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.deletions = null) : (nextProps = createWorkInProgress(suspenseContext, primaryChildProps), nextProps.subtreeFlags = suspenseContext.subtreeFlags & 14680064);
      null !== JSCompiler_temp ? showFallback = createWorkInProgress(JSCompiler_temp, showFallback) : (showFallback = createFiberFromFragment(showFallback, didSuspend, renderLanes, null), showFallback.flags |= 2);
      showFallback.return = workInProgress;
      nextProps.return = workInProgress;
      nextProps.sibling = showFallback;
      workInProgress.child = nextProps;
      nextProps = showFallback;
      showFallback = workInProgress.child;
      didSuspend = current.child.memoizedState;
      didSuspend = null === didSuspend ? mountSuspenseOffscreenState(renderLanes) : {
        baseLanes: didSuspend.baseLanes | renderLanes,
        cachePool: null,
        transitions: didSuspend.transitions
      };
      showFallback.memoizedState = didSuspend;
      showFallback.childLanes = current.childLanes & ~renderLanes;
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return nextProps;
    }
    showFallback = current.child;
    current = showFallback.sibling;
    nextProps = createWorkInProgress(showFallback, {
      mode: "visible",
      children: nextProps.children
    });
    0 === (workInProgress.mode & 1) && (nextProps.lanes = renderLanes);
    nextProps.return = workInProgress;
    nextProps.sibling = null;
    null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [current], workInProgress.flags |= 16) : renderLanes.push(current));
    workInProgress.child = nextProps;
    workInProgress.memoizedState = null;
    return nextProps;
  }
  function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
    primaryChildren = createFiberFromOffscreen({
      mode: "visible",
      children: primaryChildren
    }, workInProgress.mode, 0, null);
    primaryChildren.return = workInProgress;
    return workInProgress.child = primaryChildren;
  }
  function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
    null !== recoverableError && (null === hydrationErrors ? hydrationErrors = [recoverableError] : hydrationErrors.push(recoverableError));
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
    current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
    current.flags |= 2;
    workInProgress.memoizedState = null;
    return current;
  }
  function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
    if (didSuspend) {
      if (workInProgress.flags & 256) return workInProgress.flags &= -257, suspenseState = createCapturedValue(Error("There was an error while hydrating this Suspense boundary. Switched to client rendering.")), retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
      if (null !== workInProgress.memoizedState) return workInProgress.child = current.child, workInProgress.flags |= 128, null;
      suspenseState = nextProps.fallback;
      didSuspend = workInProgress.mode;
      nextProps = createFiberFromOffscreen({
        mode: "visible",
        children: nextProps.children
      }, didSuspend, 0, null);
      suspenseState = createFiberFromFragment(suspenseState, didSuspend, renderLanes, null);
      suspenseState.flags |= 2;
      nextProps.return = workInProgress;
      suspenseState.return = workInProgress;
      nextProps.sibling = suspenseState;
      workInProgress.child = nextProps;
      0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes);
      workInProgress.child.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return suspenseState;
    }
    if (0 === (workInProgress.mode & 1)) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);
    if (shim()) return suspenseState = shim().digest, suspenseState = createCapturedValue(Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), suspenseState, undefined), retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
    didSuspend = 0 !== (renderLanes & current.childLanes);
    if (didReceiveUpdate || didSuspend) {
      nextProps = workInProgressRoot;
      if (null !== nextProps) {
        switch (renderLanes & -renderLanes) {
          case 4:
            didSuspend = 2;
            break;
          case 16:
            didSuspend = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            didSuspend = 32;
            break;
          case 536870912:
            didSuspend = 268435456;
            break;
          default:
            didSuspend = 0;
        }
        didSuspend = 0 !== (didSuspend & (nextProps.suspendedLanes | renderLanes)) ? 0 : didSuspend;
        0 !== didSuspend && didSuspend !== suspenseState.retryLane && (suspenseState.retryLane = didSuspend, markUpdateLaneFromFiberToRoot(current, didSuspend), scheduleUpdateOnFiber(nextProps, current, didSuspend, -1));
      }
      renderDidSuspendDelayIfPossible();
      suspenseState = createCapturedValue(Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, suspenseState);
    }
    if (shim()) return workInProgress.flags |= 128, workInProgress.child = current.child, retryDehydratedSuspenseBoundary.bind(null, current), shim(), null;
    current = mountSuspensePrimaryChildren(workInProgress, nextProps.children);
    current.flags |= 4096;
    return current;
  }
  function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
    fiber.lanes |= renderLanes;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
  }
  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
  }
  function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      revealOrder = nextProps.revealOrder,
      tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;else {
      if (null !== current && 0 !== (current.flags & 128)) a: for (current = workInProgress.child; null !== current;) {
        if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (null !== current.child) {
          current.child.return = current;
          current = current.child;
          continue;
        }
        if (current === workInProgress) break a;
        for (; null === current.sibling;) {
          if (null === current.return || current.return === workInProgress) break a;
          current = current.return;
        }
        current.sibling.return = current.return;
        current = current.sibling;
      }
      nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderLanes = workInProgress.child;
        for (revealOrder = null; null !== renderLanes;) current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
        renderLanes = revealOrder;
        null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderLanes, tailMode);
        break;
      case "backwards":
        renderLanes = null;
        revealOrder = workInProgress.child;
        for (workInProgress.child = null; null !== revealOrder;) {
          current = revealOrder.alternate;
          if (null !== current && null === findFirstSuspended(current)) {
            workInProgress.child = revealOrder;
            break;
          }
          current = revealOrder.sibling;
          revealOrder.sibling = renderLanes;
          renderLanes = revealOrder;
          revealOrder = current;
        }
        initSuspenseListRenderState(workInProgress, true, renderLanes, null, tailMode);
        break;
      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;
      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }
  function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
    0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
  }
  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress.lanes;
    if (0 === (renderLanes & workInProgress.childLanes)) return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
    if (null !== workInProgress.child) {
      current = workInProgress.child;
      renderLanes = createWorkInProgress(current, current.pendingProps);
      workInProgress.child = renderLanes;
      for (renderLanes.return = workInProgress; null !== current.sibling;) current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
      renderLanes.sibling = null;
    }
    return workInProgress.child;
  }
  function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
    switch (workInProgress.tag) {
      case 3:
        pushHostRootContext(workInProgress);
        break;
      case 5:
        pushHostContext(workInProgress);
        break;
      case 1:
        isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
        break;
      case 4:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
      case 10:
        var context = workInProgress.type._context,
          nextValue = workInProgress.memoizedProps.value;
        push(valueCursor, context._currentValue);
        context._currentValue = nextValue;
        break;
      case 13:
        context = workInProgress.memoizedState;
        if (null !== context) {
          if (null !== context.dehydrated) return push(suspenseStackCursor, suspenseStackCursor.current & 1), workInProgress.flags |= 128, null;
          if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
          push(suspenseStackCursor, suspenseStackCursor.current & 1);
          current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          return null !== current ? current.sibling : null;
        }
        push(suspenseStackCursor, suspenseStackCursor.current & 1);
        break;
      case 19:
        context = 0 !== (renderLanes & workInProgress.childLanes);
        if (0 !== (current.flags & 128)) {
          if (context) return updateSuspenseListComponent(current, workInProgress, renderLanes);
          workInProgress.flags |= 128;
        }
        nextValue = workInProgress.memoizedState;
        null !== nextValue && (nextValue.rendering = null, nextValue.tail = null, nextValue.lastEffect = null);
        push(suspenseStackCursor, suspenseStackCursor.current);
        if (context) break;else return null;
      case 22:
      case 23:
        return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }
  var appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;
  appendAllChildren = function (parent, workInProgress) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag || 6 === node.tag) parent._children.push(node.stateNode);else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  };
  updateHostContainer = function () {};
  updateHostComponent$1 = function (current, workInProgress, type, newProps) {
    current.memoizedProps !== newProps && (requiredContext(contextStackCursor$1.current), workInProgress.updateQueue = UPDATE_SIGNAL) && (workInProgress.flags |= 4);
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    oldText !== newText && (workInProgress.flags |= 4);
  };
  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;
        for (var lastTailNode = null; null !== hasRenderedATailFallback;) null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;
      case "collapsed":
        lastTailNode = renderState.tail;
        for (var lastTailNode$62 = null; null !== lastTailNode;) null !== lastTailNode.alternate && (lastTailNode$62 = lastTailNode), lastTailNode = lastTailNode.sibling;
        null === lastTailNode$62 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$62.sibling = null;
    }
  }
  function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child,
      newChildLanes = 0,
      subtreeFlags = 0;
    if (didBailout) for (var child$63 = completedWork.child; null !== child$63;) newChildLanes |= child$63.lanes | child$63.childLanes, subtreeFlags |= child$63.subtreeFlags & 14680064, subtreeFlags |= child$63.flags & 14680064, child$63.return = completedWork, child$63 = child$63.sibling;else for (child$63 = completedWork.child; null !== child$63;) newChildLanes |= child$63.lanes | child$63.childLanes, subtreeFlags |= child$63.subtreeFlags, subtreeFlags |= child$63.flags, child$63.return = completedWork, child$63 = child$63.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
  }
  function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;
    popTreeContext(workInProgress);
    switch (workInProgress.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return bubbleProperties(workInProgress), null;
      case 1:
        return isContextProvider(workInProgress.type) && popContext(), bubbleProperties(workInProgress), null;
      case 3:
        return renderLanes = workInProgress.stateNode, popHostContainer(), pop(didPerformWorkStackCursor), pop(contextStackCursor), resetWorkInProgressVersions(), renderLanes.pendingContext && (renderLanes.context = renderLanes.pendingContext, renderLanes.pendingContext = null), null !== current && null !== current.child || null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null)), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
      case 5:
        popHostContext(workInProgress);
        renderLanes = requiredContext(rootInstanceStackCursor.current);
        var type = workInProgress.type;
        if (null !== current && null != workInProgress.stateNode) updateHostComponent$1(current, workInProgress, type, newProps, renderLanes), current.ref !== workInProgress.ref && (workInProgress.flags |= 512);else {
          if (!newProps) {
            if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            bubbleProperties(workInProgress);
            return null;
          }
          requiredContext(contextStackCursor$1.current);
          current = allocateTag();
          type = getViewConfigForType(type);
          var updatePayload = diffProperties(null, emptyObject, newProps, type.validAttributes);
          ReactNativePrivateInterface.UIManager.createView(current, type.uiViewClassName, renderLanes, updatePayload);
          renderLanes = new ReactNativeFiberHostComponent(current, type, workInProgress);
          instanceCache.set(current, workInProgress);
          instanceProps.set(current, newProps);
          appendAllChildren(renderLanes, workInProgress, false, false);
          workInProgress.stateNode = renderLanes;
          finalizeInitialChildren(renderLanes) && (workInProgress.flags |= 4);
          null !== workInProgress.ref && (workInProgress.flags |= 512);
        }
        bubbleProperties(workInProgress);
        return null;
      case 6:
        if (current && null != workInProgress.stateNode) updateHostText$1(current, workInProgress, current.memoizedProps, newProps);else {
          if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
          current = requiredContext(rootInstanceStackCursor.current);
          if (!requiredContext(contextStackCursor$1.current).isInAParentText) throw Error("Text strings must be rendered within a <Text> component.");
          renderLanes = allocateTag();
          ReactNativePrivateInterface.UIManager.createView(renderLanes, "RCTRawText", current, {
            text: newProps
          });
          instanceCache.set(renderLanes, workInProgress);
          workInProgress.stateNode = renderLanes;
        }
        bubbleProperties(workInProgress);
        return null;
      case 13:
        pop(suspenseStackCursor);
        newProps = workInProgress.memoizedState;
        if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
          if (null !== newProps && null !== newProps.dehydrated) {
            if (null === current) {
              throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
            }
            0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null);
            workInProgress.flags |= 4;
            bubbleProperties(workInProgress);
            type = false;
          } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), type = true;
          if (!type) return workInProgress.flags & 65536 ? workInProgress : null;
        }
        if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, workInProgress;
        renderLanes = null !== newProps;
        renderLanes !== (null !== current && null !== current.memoizedState) && renderLanes && (workInProgress.child.flags |= 8192, 0 !== (workInProgress.mode & 1) && (null === current || 0 !== (suspenseStackCursor.current & 1) ? 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3) : renderDidSuspendDelayIfPossible()));
        null !== workInProgress.updateQueue && (workInProgress.flags |= 4);
        bubbleProperties(workInProgress);
        return null;
      case 4:
        return popHostContainer(), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
      case 10:
        return popProvider(workInProgress.type._context), bubbleProperties(workInProgress), null;
      case 17:
        return isContextProvider(workInProgress.type) && popContext(), bubbleProperties(workInProgress), null;
      case 19:
        pop(suspenseStackCursor);
        type = workInProgress.memoizedState;
        if (null === type) return bubbleProperties(workInProgress), null;
        newProps = 0 !== (workInProgress.flags & 128);
        updatePayload = type.rendering;
        if (null === updatePayload) {
          if (newProps) cutOffTailIfNeeded(type, false);else {
            if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128)) for (current = workInProgress.child; null !== current;) {
              updatePayload = findFirstSuspended(current);
              if (null !== updatePayload) {
                workInProgress.flags |= 128;
                cutOffTailIfNeeded(type, false);
                current = updatePayload.updateQueue;
                null !== current && (workInProgress.updateQueue = current, workInProgress.flags |= 4);
                workInProgress.subtreeFlags = 0;
                current = renderLanes;
                for (renderLanes = workInProgress.child; null !== renderLanes;) newProps = renderLanes, type = current, newProps.flags &= 14680066, updatePayload = newProps.alternate, null === updatePayload ? (newProps.childLanes = 0, newProps.lanes = type, newProps.child = null, newProps.subtreeFlags = 0, newProps.memoizedProps = null, newProps.memoizedState = null, newProps.updateQueue = null, newProps.dependencies = null, newProps.stateNode = null) : (newProps.childLanes = updatePayload.childLanes, newProps.lanes = updatePayload.lanes, newProps.child = updatePayload.child, newProps.subtreeFlags = 0, newProps.deletions = null, newProps.memoizedProps = updatePayload.memoizedProps, newProps.memoizedState = updatePayload.memoizedState, newProps.updateQueue = updatePayload.updateQueue, newProps.type = updatePayload.type, type = updatePayload.dependencies, newProps.dependencies = null === type ? null : {
                  lanes: type.lanes,
                  firstContext: type.firstContext
                }), renderLanes = renderLanes.sibling;
                push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                return workInProgress.child;
              }
              current = current.sibling;
            }
            null !== type.tail && now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
          }
        } else {
          if (!newProps) if (current = findFirstSuspended(updatePayload), null !== current) {
            if (workInProgress.flags |= 128, newProps = true, current = current.updateQueue, null !== current && (workInProgress.updateQueue = current, workInProgress.flags |= 4), cutOffTailIfNeeded(type, true), null === type.tail && "hidden" === type.tailMode && !updatePayload.alternate) return bubbleProperties(workInProgress), null;
          } else 2 * now() - type.renderingStartTime > workInProgressRootRenderTargetTime && 1073741824 !== renderLanes && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
          type.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = type.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, type.last = updatePayload);
        }
        if (null !== type.tail) return workInProgress = type.tail, type.rendering = workInProgress, type.tail = workInProgress.sibling, type.renderingStartTime = now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
        bubbleProperties(workInProgress);
        return null;
      case 22:
      case 23:
        return popRenderLanes(), renderLanes = null !== workInProgress.memoizedState, null !== current && null !== current.memoizedState !== renderLanes && (workInProgress.flags |= 8192), renderLanes && 0 !== (workInProgress.mode & 1) ? 0 !== (subtreeRenderLanes & 1073741824) && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  }
  function unwindWork(current, workInProgress) {
    popTreeContext(workInProgress);
    switch (workInProgress.tag) {
      case 1:
        return isContextProvider(workInProgress.type) && popContext(), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 3:
        return popHostContainer(), pop(didPerformWorkStackCursor), pop(contextStackCursor), resetWorkInProgressVersions(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 5:
        return popHostContext(workInProgress), null;
      case 13:
        pop(suspenseStackCursor);
        current = workInProgress.memoizedState;
        if (null !== current && null !== current.dehydrated && null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
        current = workInProgress.flags;
        return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 19:
        return pop(suspenseStackCursor), null;
      case 4:
        return popHostContainer(), null;
      case 10:
        return popProvider(workInProgress.type._context), null;
      case 22:
      case 23:
        return popRenderLanes(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
    nextEffect = null;
  function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    } else ref.current = null;
  }
  function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
    try {
      destroy();
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
  }
  var shouldFireAfterActiveInstanceBlur = false;
  function commitBeforeMutationEffects(root, firstChild) {
    for (nextEffect = firstChild; null !== nextEffect;) if (root = nextEffect, firstChild = root.child, 0 !== (root.subtreeFlags & 1028) && null !== firstChild) firstChild.return = root, nextEffect = firstChild;else for (; null !== nextEffect;) {
      root = nextEffect;
      try {
        var current = root.alternate;
        if (0 !== (root.flags & 1024)) switch (root.tag) {
          case 0:
          case 11:
          case 15:
            break;
          case 1:
            if (null !== current) {
              var prevProps = current.memoizedProps,
                prevState = current.memoizedState,
                instance = root.stateNode,
                snapshot = instance.getSnapshotBeforeUpdate(root.elementType === root.type ? prevProps : resolveDefaultProps(root.type, prevProps), prevState);
              instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            }
            break;
          case 3:
            break;
          case 5:
          case 6:
          case 4:
          case 17:
            break;
          default:
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      } catch (error) {
        captureCommitPhaseError(root, root.return, error);
      }
      firstChild = root.sibling;
      if (null !== firstChild) {
        firstChild.return = root.return;
        nextEffect = firstChild;
        break;
      }
      nextEffect = root.return;
    }
    current = shouldFireAfterActiveInstanceBlur;
    shouldFireAfterActiveInstanceBlur = false;
    return current;
  }
  function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
    var updateQueue = finishedWork.updateQueue;
    updateQueue = null !== updateQueue ? updateQueue.lastEffect : null;
    if (null !== updateQueue) {
      var effect = updateQueue = updateQueue.next;
      do {
        if ((effect.tag & flags) === flags) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          undefined !== destroy && safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
        }
        effect = effect.next;
      } while (effect !== updateQueue);
    }
  }
  function commitHookEffectListMount(flags, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;
    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;
      do {
        if ((effect.tag & flags) === flags) {
          var create$75 = effect.create;
          effect.destroy = create$75();
        }
        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }
  function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
  }
  function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
  }
  function getHostSibling(fiber) {
    a: for (;;) {
      for (; null === fiber.sibling;) {
        if (null === fiber.return || isHostParent(fiber.return)) return null;
        fiber = fiber.return;
      }
      fiber.sibling.return = fiber.return;
      for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag;) {
        if (fiber.flags & 2) continue a;
        if (null === fiber.child || 4 === fiber.tag) continue a;else fiber.child.return = fiber, fiber = fiber.child;
      }
      if (!(fiber.flags & 2)) return fiber.stateNode;
    }
  }
  function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag) {
      if (node = node.stateNode, before) {
        if ("number" === typeof parent) throw Error("Container does not support insertBefore operation");
      } else ReactNativePrivateInterface.UIManager.setChildren(parent, ["number" === typeof node ? node : node._nativeTag]);
    } else if (4 !== tag && (node = node.child, null !== node)) for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node;) insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
  }
  function insertOrAppendPlacementNode(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag) {
      if (node = node.stateNode, before) {
        tag = parent._children;
        var index = tag.indexOf(node);
        0 <= index ? (tag.splice(index, 1), before = tag.indexOf(before), tag.splice(before, 0, node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [index], [before], [], [], [])) : (before = tag.indexOf(before), tag.splice(before, 0, node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [], [], ["number" === typeof node ? node : node._nativeTag], [before], []));
      } else before = "number" === typeof node ? node : node._nativeTag, tag = parent._children, index = tag.indexOf(node), 0 <= index ? (tag.splice(index, 1), tag.push(node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [index], [tag.length - 1], [], [], [])) : (tag.push(node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [], [], [before], [tag.length - 1], []));
    } else if (4 !== tag && (node = node.child, null !== node)) for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node;) insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
  }
  var hostParent = null,
    hostParentIsContainer = false;
  function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for (parent = parent.child; null !== parent;) commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
  }
  function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
    switch (deletedFiber.tag) {
      case 5:
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
      case 6:
        var prevHostParent = hostParent,
          prevHostParentIsContainer = hostParentIsContainer;
        hostParent = null;
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        hostParent = prevHostParent;
        hostParentIsContainer = prevHostParentIsContainer;
        null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, recursivelyUncacheFiberNode(deletedFiber.stateNode), ReactNativePrivateInterface.UIManager.manageChildren(finishedRoot, [], [], [], [], [0])) : (finishedRoot = hostParent, nearestMountedAncestor = deletedFiber.stateNode, recursivelyUncacheFiberNode(nearestMountedAncestor), deletedFiber = finishedRoot._children, nearestMountedAncestor = deletedFiber.indexOf(nearestMountedAncestor), deletedFiber.splice(nearestMountedAncestor, 1), ReactNativePrivateInterface.UIManager.manageChildren(finishedRoot._nativeTag, [], [], [], [], [nearestMountedAncestor])));
        break;
      case 18:
        null !== hostParent && shim(hostParent, deletedFiber.stateNode);
        break;
      case 4:
        prevHostParent = hostParent;
        prevHostParentIsContainer = hostParentIsContainer;
        hostParent = deletedFiber.stateNode.containerInfo;
        hostParentIsContainer = true;
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        hostParent = prevHostParent;
        hostParentIsContainer = prevHostParentIsContainer;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        prevHostParent = deletedFiber.updateQueue;
        if (null !== prevHostParent && (prevHostParent = prevHostParent.lastEffect, null !== prevHostParent)) {
          prevHostParentIsContainer = prevHostParent = prevHostParent.next;
          do {
            var _effect = prevHostParentIsContainer,
              destroy = _effect.destroy;
            _effect = _effect.tag;
            undefined !== destroy && (0 !== (_effect & 2) ? safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy) : 0 !== (_effect & 4) && safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy));
            prevHostParentIsContainer = prevHostParentIsContainer.next;
          } while (prevHostParentIsContainer !== prevHostParent);
        }
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 1:
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
        prevHostParent = deletedFiber.stateNode;
        if ("function" === typeof prevHostParent.componentWillUnmount) try {
          prevHostParent.props = deletedFiber.memoizedProps, prevHostParent.state = deletedFiber.memoizedState, prevHostParent.componentWillUnmount();
        } catch (error) {
          captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
        }
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 21:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 22:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      default:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
    }
  }
  function attachSuspenseRetryListeners(finishedWork) {
    var wakeables = finishedWork.updateQueue;
    if (null !== wakeables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
      wakeables.forEach(function (wakeable) {
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
      });
    }
  }
  function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions) for (var i = 0; i < deletions.length; i++) {
      var childToDelete = deletions[i];
      try {
        var root = root$jscomp$0,
          returnFiber = parentFiber,
          parent = returnFiber;
        a: for (; null !== parent;) {
          switch (parent.tag) {
            case 5:
              hostParent = parent.stateNode;
              hostParentIsContainer = false;
              break a;
            case 3:
              hostParent = parent.stateNode.containerInfo;
              hostParentIsContainer = true;
              break a;
            case 4:
              hostParent = parent.stateNode.containerInfo;
              hostParentIsContainer = true;
              break a;
          }
          parent = parent.return;
        }
        if (null === hostParent) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
        hostParent = null;
        hostParentIsContainer = false;
        var alternate = childToDelete.alternate;
        null !== alternate && (alternate.return = null);
        childToDelete.return = null;
      } catch (error) {
        captureCommitPhaseError(childToDelete, parentFiber, error);
      }
    }
    if (parentFiber.subtreeFlags & 12854) for (parentFiber = parentFiber.child; null !== parentFiber;) commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
  }
  function commitMutationEffectsOnFiber(finishedWork, root) {
    var current = finishedWork.alternate,
      flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        if (flags & 4) {
          try {
            commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
          try {
            commitHookEffectListUnmount(5, finishedWork, finishedWork.return);
          } catch (error$85) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$85);
          }
        }
        break;
      case 1:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && null !== current && safelyDetachRef(current, current.return);
        break;
      case 5:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && null !== current && safelyDetachRef(current, current.return);
        if (flags & 4) {
          var instance$87 = finishedWork.stateNode;
          if (null != instance$87) {
            var newProps = finishedWork.memoizedProps,
              oldProps = null !== current ? current.memoizedProps : newProps,
              updatePayload = finishedWork.updateQueue;
            finishedWork.updateQueue = null;
            if (null !== updatePayload) try {
              var viewConfig = instance$87.viewConfig;
              instanceProps.set(instance$87._nativeTag, newProps);
              var updatePayload$jscomp$0 = diffProperties(null, oldProps, newProps, viewConfig.validAttributes);
              null != updatePayload$jscomp$0 && ReactNativePrivateInterface.UIManager.updateView(instance$87._nativeTag, viewConfig.uiViewClassName, updatePayload$jscomp$0);
            } catch (error$88) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error$88);
            }
          }
        }
        break;
      case 6:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        if (flags & 4) {
          if (null === finishedWork.stateNode) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
          viewConfig = finishedWork.stateNode;
          updatePayload$jscomp$0 = finishedWork.memoizedProps;
          try {
            ReactNativePrivateInterface.UIManager.updateView(viewConfig, "RCTRawText", {
              text: updatePayload$jscomp$0
            });
          } catch (error$89) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$89);
          }
        }
        break;
      case 3:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 4:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 13:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        viewConfig = finishedWork.child;
        viewConfig.flags & 8192 && (updatePayload$jscomp$0 = null !== viewConfig.memoizedState, viewConfig.stateNode.isHidden = updatePayload$jscomp$0, !updatePayload$jscomp$0 || null !== viewConfig.alternate && null !== viewConfig.alternate.memoizedState || (globalMostRecentFallbackTime = now()));
        flags & 4 && attachSuspenseRetryListeners(finishedWork);
        break;
      case 22:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        if (flags & 8192) a: for (viewConfig = null !== finishedWork.memoizedState, finishedWork.stateNode.isHidden = viewConfig, updatePayload$jscomp$0 = null, current = finishedWork;;) {
          if (5 === current.tag) {
            if (null === updatePayload$jscomp$0) {
              updatePayload$jscomp$0 = current;
              try {
                if (instance$87 = current.stateNode, viewConfig) newProps = instance$87.viewConfig, oldProps = diffProperties(null, emptyObject, {
                  style: {
                    display: "none"
                  }
                }, newProps.validAttributes), ReactNativePrivateInterface.UIManager.updateView(instance$87._nativeTag, newProps.uiViewClassName, oldProps);else {
                  updatePayload = current.stateNode;
                  var props = current.memoizedProps,
                    viewConfig$jscomp$0 = updatePayload.viewConfig,
                    prevProps = assign({}, props, {
                      style: [props.style, {
                        display: "none"
                      }]
                    });
                  var updatePayload$jscomp$1 = diffProperties(null, prevProps, props, viewConfig$jscomp$0.validAttributes);
                  ReactNativePrivateInterface.UIManager.updateView(updatePayload._nativeTag, viewConfig$jscomp$0.uiViewClassName, updatePayload$jscomp$1);
                }
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
          } else if (6 === current.tag) {
            if (null === updatePayload$jscomp$0) try {
              throw Error("Not yet implemented.");
            } catch (error$80) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error$80);
            }
          } else if ((22 !== current.tag && 23 !== current.tag || null === current.memoizedState || current === finishedWork) && null !== current.child) {
            current.child.return = current;
            current = current.child;
            continue;
          }
          if (current === finishedWork) break a;
          for (; null === current.sibling;) {
            if (null === current.return || current.return === finishedWork) break a;
            updatePayload$jscomp$0 === current && (updatePayload$jscomp$0 = null);
            current = current.return;
          }
          updatePayload$jscomp$0 === current && (updatePayload$jscomp$0 = null);
          current.sibling.return = current.return;
          current = current.sibling;
        }
        break;
      case 19:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && attachSuspenseRetryListeners(finishedWork);
        break;
      case 21:
        break;
      default:
        recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
    }
  }
  function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    if (flags & 2) {
      try {
        a: {
          for (var parent = finishedWork.return; null !== parent;) {
            if (isHostParent(parent)) {
              var JSCompiler_inline_result = parent;
              break a;
            }
            parent = parent.return;
          }
          throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        switch (JSCompiler_inline_result.tag) {
          case 5:
            var parent$jscomp$0 = JSCompiler_inline_result.stateNode;
            JSCompiler_inline_result.flags & 32 && (JSCompiler_inline_result.flags &= -33);
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent$jscomp$0);
            break;
          case 3:
          case 4:
            var parent$81 = JSCompiler_inline_result.stateNode.containerInfo,
              before$82 = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before$82, parent$81);
            break;
          default:
            throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
      finishedWork.flags &= -3;
    }
    flags & 4096 && (finishedWork.flags &= -4097);
  }
  function commitLayoutEffects(finishedWork) {
    for (nextEffect = finishedWork; null !== nextEffect;) {
      var fiber = nextEffect,
        firstChild = fiber.child;
      if (0 !== (fiber.subtreeFlags & 8772) && null !== firstChild) firstChild.return = fiber, nextEffect = firstChild;else for (fiber = finishedWork; null !== nextEffect;) {
        firstChild = nextEffect;
        if (0 !== (firstChild.flags & 8772)) {
          var current = firstChild.alternate;
          try {
            if (0 !== (firstChild.flags & 8772)) switch (firstChild.tag) {
              case 0:
              case 11:
              case 15:
                commitHookEffectListMount(5, firstChild);
                break;
              case 1:
                var instance = firstChild.stateNode;
                if (firstChild.flags & 4) if (null === current) instance.componentDidMount();else {
                  var prevProps = firstChild.elementType === firstChild.type ? current.memoizedProps : resolveDefaultProps(firstChild.type, current.memoizedProps);
                  instance.componentDidUpdate(prevProps, current.memoizedState, instance.__reactInternalSnapshotBeforeUpdate);
                }
                var updateQueue = firstChild.updateQueue;
                null !== updateQueue && commitUpdateQueue(firstChild, updateQueue, instance);
                break;
              case 3:
                var updateQueue$76 = firstChild.updateQueue;
                if (null !== updateQueue$76) {
                  current = null;
                  if (null !== firstChild.child) switch (firstChild.child.tag) {
                    case 5:
                      current = firstChild.child.stateNode;
                      break;
                    case 1:
                      current = firstChild.child.stateNode;
                  }
                  commitUpdateQueue(firstChild, updateQueue$76, current);
                }
                break;
              case 5:
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (firstChild.flags & 512) {
              current = undefined;
              var ref = firstChild.ref;
              if (null !== ref) {
                var instance$jscomp$0 = firstChild.stateNode;
                switch (firstChild.tag) {
                  case 5:
                    current = instance$jscomp$0;
                    break;
                  default:
                    current = instance$jscomp$0;
                }
                "function" === typeof ref ? ref(current) : ref.current = current;
              }
            }
          } catch (error) {
            captureCommitPhaseError(firstChild, firstChild.return, error);
          }
        }
        if (firstChild === fiber) {
          nextEffect = null;
          break;
        }
        current = firstChild.sibling;
        if (null !== current) {
          current.return = firstChild.return;
          nextEffect = current;
          break;
        }
        nextEffect = firstChild.return;
      }
    }
  }
  var ceil = Math.ceil,
    ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,
    executionContext = 0,
    workInProgressRoot = null,
    workInProgress = null,
    workInProgressRootRenderLanes = 0,
    subtreeRenderLanes = 0,
    subtreeRenderLanesCursor = createCursor(0),
    workInProgressRootExitStatus = 0,
    workInProgressRootFatalError = null,
    workInProgressRootSkippedLanes = 0,
    workInProgressRootInterleavedUpdatedLanes = 0,
    workInProgressRootPingedLanes = 0,
    workInProgressRootConcurrentErrors = null,
    workInProgressRootRecoverableErrors = null,
    globalMostRecentFallbackTime = 0,
    workInProgressRootRenderTargetTime = Infinity,
    workInProgressTransitions = null,
    hasUncaughtError = false,
    firstUncaughtError = null,
    legacyErrorBoundariesThatAlreadyFailed = null,
    rootDoesHavePassiveEffects = false,
    rootWithPendingPassiveEffects = null,
    pendingPassiveEffectsLanes = 0,
    nestedUpdateCount = 0,
    rootWithNestedUpdates = null,
    currentEventTime = -1,
    currentEventTransitionLane = 0;
  function requestEventTime() {
    return 0 !== (executionContext & 6) ? now() : -1 !== currentEventTime ? currentEventTime : currentEventTime = now();
  }
  function requestUpdateLane(fiber) {
    if (0 === (fiber.mode & 1)) return 1;
    if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes) return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
    if (null !== ReactCurrentBatchConfig.transition) return 0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane()), currentEventTransitionLane;
    fiber = currentUpdatePriority;
    return 0 !== fiber ? fiber : 16;
  }
  function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    markRootUpdated(root, lane, eventTime);
    if (0 === (executionContext & 2) || root !== workInProgressRoot) root === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended$1(root, workInProgressRootRenderLanes)), ensureRootIsScheduled(root, eventTime), 1 === lane && 0 === executionContext && 0 === (fiber.mode & 1) && (workInProgressRootRenderTargetTime = now() + 500, includesLegacySyncCallbacks && flushSyncCallbacks());
  }
  function ensureRootIsScheduled(root, currentTime) {
    for (var existingCallbackNode = root.callbackNode, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes; 0 < lanes;) {
      var index$6 = 31 - clz32(lanes),
        lane = 1 << index$6,
        expirationTime = expirationTimes[index$6];
      if (-1 === expirationTime) {
        if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index$6] = computeExpirationTime(lane, currentTime);
      } else expirationTime <= currentTime && (root.expiredLanes |= lane);
      lanes &= ~lane;
    }
    suspendedLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : 0);
    if (0 === suspendedLanes) null !== existingCallbackNode && cancelCallback(existingCallbackNode), root.callbackNode = null, root.callbackPriority = 0;else if (currentTime = suspendedLanes & -suspendedLanes, root.callbackPriority !== currentTime) {
      null != existingCallbackNode && cancelCallback(existingCallbackNode);
      if (1 === currentTime) 0 === root.tag ? (existingCallbackNode = performSyncWorkOnRoot.bind(null, root), includesLegacySyncCallbacks = true, null === syncQueue ? syncQueue = [existingCallbackNode] : syncQueue.push(existingCallbackNode)) : (existingCallbackNode = performSyncWorkOnRoot.bind(null, root), null === syncQueue ? syncQueue = [existingCallbackNode] : syncQueue.push(existingCallbackNode)), scheduleCallback(ImmediatePriority, flushSyncCallbacks), existingCallbackNode = null;else {
        switch (lanesToEventPriority(suspendedLanes)) {
          case 1:
            existingCallbackNode = ImmediatePriority;
            break;
          case 4:
            existingCallbackNode = UserBlockingPriority;
            break;
          case 16:
            existingCallbackNode = NormalPriority;
            break;
          case 536870912:
            existingCallbackNode = IdlePriority;
            break;
          default:
            existingCallbackNode = NormalPriority;
        }
        existingCallbackNode = scheduleCallback$1(existingCallbackNode, performConcurrentWorkOnRoot.bind(null, root));
      }
      root.callbackPriority = currentTime;
      root.callbackNode = existingCallbackNode;
    }
  }
  function performConcurrentWorkOnRoot(root, didTimeout) {
    currentEventTime = -1;
    currentEventTransitionLane = 0;
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var originalCallbackNode = root.callbackNode;
    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
    var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : 0);
    if (0 === lanes) return null;
    if (0 !== (lanes & 30) || 0 !== (lanes & root.expiredLanes) || didTimeout) didTimeout = renderRootSync(root, lanes);else {
      didTimeout = lanes;
      var prevExecutionContext = executionContext;
      executionContext |= 2;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== didTimeout) workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root, didTimeout);
      do try {
        workLoopConcurrent();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      } while (1);
      resetContextDependencies();
      ReactCurrentDispatcher$2.current = prevDispatcher;
      executionContext = prevExecutionContext;
      null !== workInProgress ? didTimeout = 0 : (workInProgressRoot = null, workInProgressRootRenderLanes = 0, didTimeout = workInProgressRootExitStatus);
    }
    if (0 !== didTimeout) {
      2 === didTimeout && (prevExecutionContext = getLanesToRetrySynchronouslyOnError(root), 0 !== prevExecutionContext && (lanes = prevExecutionContext, didTimeout = recoverFromConcurrentError(root, prevExecutionContext)));
      if (1 === didTimeout) throw originalCallbackNode = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, now()), originalCallbackNode;
      if (6 === didTimeout) markRootSuspended$1(root, lanes);else {
        prevExecutionContext = root.current.alternate;
        if (0 === (lanes & 30) && !isRenderConsistentWithExternalStores(prevExecutionContext) && (didTimeout = renderRootSync(root, lanes), 2 === didTimeout && (prevDispatcher = getLanesToRetrySynchronouslyOnError(root), 0 !== prevDispatcher && (lanes = prevDispatcher, didTimeout = recoverFromConcurrentError(root, prevDispatcher))), 1 === didTimeout)) throw originalCallbackNode = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, now()), originalCallbackNode;
        root.finishedWork = prevExecutionContext;
        root.finishedLanes = lanes;
        switch (didTimeout) {
          case 0:
          case 1:
            throw Error("Root did not complete. This is a bug in React.");
          case 2:
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 3:
            markRootSuspended$1(root, lanes);
            if ((lanes & 130023424) === lanes && (didTimeout = globalMostRecentFallbackTime + 500 - now(), 10 < didTimeout)) {
              if (0 !== getNextLanes(root, 0)) break;
              prevExecutionContext = root.suspendedLanes;
              if ((prevExecutionContext & lanes) !== lanes) {
                requestEventTime();
                root.pingedLanes |= root.suspendedLanes & prevExecutionContext;
                break;
              }
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), didTimeout);
              break;
            }
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 4:
            markRootSuspended$1(root, lanes);
            if ((lanes & 4194240) === lanes) break;
            didTimeout = root.eventTimes;
            for (prevExecutionContext = -1; 0 < lanes;) {
              var index$5 = 31 - clz32(lanes);
              prevDispatcher = 1 << index$5;
              index$5 = didTimeout[index$5];
              index$5 > prevExecutionContext && (prevExecutionContext = index$5);
              lanes &= ~prevDispatcher;
            }
            lanes = prevExecutionContext;
            lanes = now() - lanes;
            lanes = (120 > lanes ? 120 : 480 > lanes ? 480 : 1080 > lanes ? 1080 : 1920 > lanes ? 1920 : 3e3 > lanes ? 3e3 : 4320 > lanes ? 4320 : 1960 * ceil(lanes / 1960)) - lanes;
            if (10 < lanes) {
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), lanes);
              break;
            }
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          case 5:
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          default:
            throw Error("Unknown root exit status.");
        }
      }
    }
    ensureRootIsScheduled(root, now());
    return root.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root) : null;
  }
  function recoverFromConcurrentError(root, errorRetryLanes) {
    var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
    root.current.memoizedState.isDehydrated && (prepareFreshStack(root, errorRetryLanes).flags |= 256);
    root = renderRootSync(root, errorRetryLanes);
    2 !== root && (errorRetryLanes = workInProgressRootRecoverableErrors, workInProgressRootRecoverableErrors = errorsFromFirstAttempt, null !== errorRetryLanes && queueRecoverableErrors(errorRetryLanes));
    return root;
  }
  function queueRecoverableErrors(errors) {
    null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
  }
  function isRenderConsistentWithExternalStores(finishedWork) {
    for (var node = finishedWork;;) {
      if (node.flags & 16384) {
        var updateQueue = node.updateQueue;
        if (null !== updateQueue && (updateQueue = updateQueue.stores, null !== updateQueue)) for (var i = 0; i < updateQueue.length; i++) {
          var check = updateQueue[i],
            getSnapshot = check.getSnapshot;
          check = check.value;
          try {
            if (!objectIs(getSnapshot(), check)) return false;
          } catch (error) {
            return false;
          }
        }
      }
      updateQueue = node.child;
      if (node.subtreeFlags & 16384 && null !== updateQueue) updateQueue.return = node, node = updateQueue;else {
        if (node === finishedWork) break;
        for (; null === node.sibling;) {
          if (null === node.return || node.return === finishedWork) return true;
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    return true;
  }
  function markRootSuspended$1(root, suspendedLanes) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes;
    for (root = root.expirationTimes; 0 < suspendedLanes;) {
      var index$7 = 31 - clz32(suspendedLanes),
        lane = 1 << index$7;
      root[index$7] = -1;
      suspendedLanes &= ~lane;
    }
  }
  function performSyncWorkOnRoot(root) {
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    flushPassiveEffects();
    var lanes = getNextLanes(root, 0);
    if (0 === (lanes & 1)) return ensureRootIsScheduled(root, now()), null;
    var exitStatus = renderRootSync(root, lanes);
    if (0 !== root.tag && 2 === exitStatus) {
      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
      0 !== errorRetryLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root, errorRetryLanes));
    }
    if (1 === exitStatus) throw exitStatus = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, now()), exitStatus;
    if (6 === exitStatus) throw Error("Root did not complete. This is a bug in React.");
    root.finishedWork = root.current.alternate;
    root.finishedLanes = lanes;
    commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
    ensureRootIsScheduled(root, now());
    return null;
  }
  function popRenderLanes() {
    subtreeRenderLanes = subtreeRenderLanesCursor.current;
    pop(subtreeRenderLanesCursor);
  }
  function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case 1:
          interruptedWork = interruptedWork.type.childContextTypes;
          null !== interruptedWork && undefined !== interruptedWork && popContext();
          break;
        case 3:
          popHostContainer();
          pop(didPerformWorkStackCursor);
          pop(contextStackCursor);
          resetWorkInProgressVersions();
          break;
        case 5:
          popHostContext(interruptedWork);
          break;
        case 4:
          popHostContainer();
          break;
        case 13:
          pop(suspenseStackCursor);
          break;
        case 19:
          pop(suspenseStackCursor);
          break;
        case 10:
          popProvider(interruptedWork.type._context);
          break;
        case 22:
        case 23:
          popRenderLanes();
      }
      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = root = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
    workInProgressRootExitStatus = 0;
    workInProgressRootFatalError = null;
    workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    if (null !== concurrentQueues) {
      for (lanes = 0; lanes < concurrentQueues.length; lanes++) if (timeoutHandle = concurrentQueues[lanes], interruptedWork = timeoutHandle.interleaved, null !== interruptedWork) {
        timeoutHandle.interleaved = null;
        var firstInterleavedUpdate = interruptedWork.next,
          lastPendingUpdate = timeoutHandle.pending;
        if (null !== lastPendingUpdate) {
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = firstInterleavedUpdate;
          interruptedWork.next = firstPendingUpdate;
        }
        timeoutHandle.pending = interruptedWork;
      }
      concurrentQueues = null;
    }
    return root;
  }
  function handleError(root$jscomp$0, thrownValue) {
    do {
      var erroredWork = workInProgress;
      try {
        resetContextDependencies();
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          for (var hook = currentlyRenderingFiber$1.memoizedState; null !== hook;) {
            var queue = hook.queue;
            null !== queue && (queue.pending = null);
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = 0;
        workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        ReactCurrentOwner$2.current = null;
        if (null === erroredWork || null === erroredWork.return) {
          workInProgressRootExitStatus = 1;
          workInProgressRootFatalError = thrownValue;
          workInProgress = null;
          break;
        }
        a: {
          var root = root$jscomp$0,
            returnFiber = erroredWork.return,
            sourceFiber = erroredWork,
            value = thrownValue;
          thrownValue = workInProgressRootRenderLanes;
          sourceFiber.flags |= 32768;
          if (null !== value && "object" === typeof value && "function" === typeof value.then) {
            var wakeable = value,
              sourceFiber$jscomp$0 = sourceFiber,
              tag = sourceFiber$jscomp$0.tag;
            if (0 === (sourceFiber$jscomp$0.mode & 1) && (0 === tag || 11 === tag || 15 === tag)) {
              var currentSource = sourceFiber$jscomp$0.alternate;
              currentSource ? (sourceFiber$jscomp$0.updateQueue = currentSource.updateQueue, sourceFiber$jscomp$0.memoizedState = currentSource.memoizedState, sourceFiber$jscomp$0.lanes = currentSource.lanes) : (sourceFiber$jscomp$0.updateQueue = null, sourceFiber$jscomp$0.memoizedState = null);
            }
            b: {
              sourceFiber$jscomp$0 = returnFiber;
              do {
                var JSCompiler_temp;
                if (JSCompiler_temp = 13 === sourceFiber$jscomp$0.tag) {
                  var nextState = sourceFiber$jscomp$0.memoizedState;
                  JSCompiler_temp = null !== nextState ? null !== nextState.dehydrated ? true : false : true;
                }
                if (JSCompiler_temp) {
                  var suspenseBoundary = sourceFiber$jscomp$0;
                  break b;
                }
                sourceFiber$jscomp$0 = sourceFiber$jscomp$0.return;
              } while (null !== sourceFiber$jscomp$0);
              suspenseBoundary = null;
            }
            if (null !== suspenseBoundary) {
              suspenseBoundary.flags &= -257;
              value = suspenseBoundary;
              sourceFiber$jscomp$0 = thrownValue;
              if (0 === (value.mode & 1)) {
                if (value === returnFiber) value.flags |= 65536;else {
                  value.flags |= 128;
                  sourceFiber.flags |= 131072;
                  sourceFiber.flags &= -52805;
                  if (1 === sourceFiber.tag) if (null === sourceFiber.alternate) sourceFiber.tag = 17;else {
                    var update = createUpdate(-1, 1);
                    update.tag = 2;
                    enqueueUpdate(sourceFiber, update, 1);
                  }
                  sourceFiber.lanes |= 1;
                }
              } else value.flags |= 65536, value.lanes = sourceFiber$jscomp$0;
              suspenseBoundary.mode & 1 && attachPingListener(root, wakeable, thrownValue);
              thrownValue = suspenseBoundary;
              root = wakeable;
              var wakeables = thrownValue.updateQueue;
              if (null === wakeables) {
                var updateQueue = new Set();
                updateQueue.add(root);
                thrownValue.updateQueue = updateQueue;
              } else wakeables.add(root);
              break a;
            } else {
              if (0 === (thrownValue & 1)) {
                attachPingListener(root, wakeable, thrownValue);
                renderDidSuspendDelayIfPossible();
                break a;
              }
              value = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            }
          }
          root = value = createCapturedValueAtFiber(value, sourceFiber);
          4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
          null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [root] : workInProgressRootConcurrentErrors.push(root);
          root = returnFiber;
          do {
            switch (root.tag) {
              case 3:
                wakeable = value;
                root.flags |= 65536;
                thrownValue &= -thrownValue;
                root.lanes |= thrownValue;
                var update$jscomp$0 = createRootErrorUpdate(root, wakeable, thrownValue);
                enqueueCapturedUpdate(root, update$jscomp$0);
                break a;
              case 1:
                wakeable = value;
                var ctor = root.type,
                  instance = root.stateNode;
                if (0 === (root.flags & 128) && ("function" === typeof ctor.getDerivedStateFromError || null !== instance && "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance)))) {
                  root.flags |= 65536;
                  thrownValue &= -thrownValue;
                  root.lanes |= thrownValue;
                  var update$34 = createClassErrorUpdate(root, wakeable, thrownValue);
                  enqueueCapturedUpdate(root, update$34);
                  break a;
                }
            }
            root = root.return;
          } while (null !== root);
        }
        completeUnitOfWork(erroredWork);
      } catch (yetAnotherThrownValue) {
        thrownValue = yetAnotherThrownValue;
        workInProgress === erroredWork && null !== erroredWork && (workInProgress = erroredWork = erroredWork.return);
        continue;
      }
      break;
    } while (1);
  }
  function pushDispatcher() {
    var prevDispatcher = ReactCurrentDispatcher$2.current;
    ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
  }
  function renderDidSuspendDelayIfPossible() {
    if (0 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus || 2 === workInProgressRootExitStatus) workInProgressRootExitStatus = 4;
    null === workInProgressRoot || 0 === (workInProgressRootSkippedLanes & 268435455) && 0 === (workInProgressRootInterleavedUpdatedLanes & 268435455) || markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
  }
  function renderRootSync(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher();
    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) workInProgressTransitions = null, prepareFreshStack(root, lanes);
    do try {
      workLoopSync();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    } while (1);
    resetContextDependencies();
    executionContext = prevExecutionContext;
    ReactCurrentDispatcher$2.current = prevDispatcher;
    if (null !== workInProgress) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    return workInProgressRootExitStatus;
  }
  function workLoopSync() {
    for (; null !== workInProgress;) performUnitOfWork(workInProgress);
  }
  function workLoopConcurrent() {
    for (; null !== workInProgress && !shouldYield();) performUnitOfWork(workInProgress);
  }
  function performUnitOfWork(unitOfWork) {
    var next = beginWork$1(unitOfWork.alternate, unitOfWork, subtreeRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
    ReactCurrentOwner$2.current = null;
  }
  function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
      var current = completedWork.alternate;
      unitOfWork = completedWork.return;
      if (0 === (completedWork.flags & 32768)) {
        if (current = completeWork(current, completedWork, subtreeRenderLanes), null !== current) {
          workInProgress = current;
          return;
        }
      } else {
        current = unwindWork(current, completedWork);
        if (null !== current) {
          current.flags &= 32767;
          workInProgress = current;
          return;
        }
        if (null !== unitOfWork) unitOfWork.flags |= 32768, unitOfWork.subtreeFlags = 0, unitOfWork.deletions = null;else {
          workInProgressRootExitStatus = 6;
          workInProgress = null;
          return;
        }
      }
      completedWork = completedWork.sibling;
      if (null !== completedWork) {
        workInProgress = completedWork;
        return;
      }
      workInProgress = completedWork = unitOfWork;
    } while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
  }
  function commitRoot(root, recoverableErrors, transitions) {
    var previousUpdateLanePriority = currentUpdatePriority,
      prevTransition = ReactCurrentBatchConfig$2.transition;
    try {
      ReactCurrentBatchConfig$2.transition = null, currentUpdatePriority = 1, commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
    } finally {
      ReactCurrentBatchConfig$2.transition = prevTransition, currentUpdatePriority = previousUpdateLanePriority;
    }
    return null;
  }
  function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
    do flushPassiveEffects(); while (null !== rootWithPendingPassiveEffects);
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    transitions = root.finishedWork;
    var lanes = root.finishedLanes;
    if (null === transitions) return null;
    root.finishedWork = null;
    root.finishedLanes = 0;
    if (transitions === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root.callbackNode = null;
    root.callbackPriority = 0;
    var remainingLanes = transitions.lanes | transitions.childLanes;
    markRootFinished(root, remainingLanes);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    0 === (transitions.subtreeFlags & 2064) && 0 === (transitions.flags & 2064) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = true, scheduleCallback$1(NormalPriority, function () {
      flushPassiveEffects();
      return null;
    }));
    remainingLanes = 0 !== (transitions.flags & 15990);
    if (0 !== (transitions.subtreeFlags & 15990) || remainingLanes) {
      remainingLanes = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition = null;
      var previousPriority = currentUpdatePriority;
      currentUpdatePriority = 1;
      var prevExecutionContext = executionContext;
      executionContext |= 4;
      ReactCurrentOwner$2.current = null;
      commitBeforeMutationEffects(root, transitions);
      commitMutationEffectsOnFiber(transitions, root);
      root.current = transitions;
      commitLayoutEffects(transitions, root, lanes);
      requestPaint();
      executionContext = prevExecutionContext;
      currentUpdatePriority = previousPriority;
      ReactCurrentBatchConfig$2.transition = remainingLanes;
    } else root.current = transitions;
    rootDoesHavePassiveEffects && (rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = lanes);
    remainingLanes = root.pendingLanes;
    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
    onCommitRoot(transitions.stateNode, renderPriorityLevel);
    ensureRootIsScheduled(root, now());
    if (null !== recoverableErrors) for (renderPriorityLevel = root.onRecoverableError, transitions = 0; transitions < recoverableErrors.length; transitions++) lanes = recoverableErrors[transitions], renderPriorityLevel(lanes.value, {
      componentStack: lanes.stack,
      digest: lanes.digest
    });
    if (hasUncaughtError) throw hasUncaughtError = false, root = firstUncaughtError, firstUncaughtError = null, root;
    0 !== (pendingPassiveEffectsLanes & 1) && 0 !== root.tag && flushPassiveEffects();
    remainingLanes = root.pendingLanes;
    0 !== (remainingLanes & 1) ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    flushSyncCallbacks();
    return null;
  }
  function flushPassiveEffects() {
    if (null !== rootWithPendingPassiveEffects) {
      var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
        prevTransition = ReactCurrentBatchConfig$2.transition,
        previousPriority = currentUpdatePriority;
      try {
        ReactCurrentBatchConfig$2.transition = null;
        currentUpdatePriority = 16 > renderPriority ? 16 : renderPriority;
        if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = false;else {
          renderPriority = rootWithPendingPassiveEffects;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = 0;
          if (0 !== (executionContext & 6)) throw Error("Cannot flush passive effects while already rendering.");
          var prevExecutionContext = executionContext;
          executionContext |= 4;
          for (nextEffect = renderPriority.current; null !== nextEffect;) {
            var fiber = nextEffect,
              child = fiber.child;
            if (0 !== (nextEffect.flags & 16)) {
              var deletions = fiber.deletions;
              if (null !== deletions) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  for (nextEffect = fiberToDelete; null !== nextEffect;) {
                    var fiber$jscomp$0 = nextEffect;
                    switch (fiber$jscomp$0.tag) {
                      case 0:
                      case 11:
                      case 15:
                        commitHookEffectListUnmount(8, fiber$jscomp$0, fiber);
                    }
                    var child$jscomp$0 = fiber$jscomp$0.child;
                    if (null !== child$jscomp$0) child$jscomp$0.return = fiber$jscomp$0, nextEffect = child$jscomp$0;else for (; null !== nextEffect;) {
                      fiber$jscomp$0 = nextEffect;
                      var sibling = fiber$jscomp$0.sibling,
                        returnFiber = fiber$jscomp$0.return;
                      detachFiberAfterEffects(fiber$jscomp$0);
                      if (fiber$jscomp$0 === fiberToDelete) {
                        nextEffect = null;
                        break;
                      }
                      if (null !== sibling) {
                        sibling.return = returnFiber;
                        nextEffect = sibling;
                        break;
                      }
                      nextEffect = returnFiber;
                    }
                  }
                }
                var previousFiber = fiber.alternate;
                if (null !== previousFiber) {
                  var detachedChild = previousFiber.child;
                  if (null !== detachedChild) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (null !== detachedChild);
                  }
                }
                nextEffect = fiber;
              }
            }
            if (0 !== (fiber.subtreeFlags & 2064) && null !== child) child.return = fiber, nextEffect = child;else b: for (; null !== nextEffect;) {
              fiber = nextEffect;
              if (0 !== (fiber.flags & 2048)) switch (fiber.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectListUnmount(9, fiber, fiber.return);
              }
              var sibling$jscomp$0 = fiber.sibling;
              if (null !== sibling$jscomp$0) {
                sibling$jscomp$0.return = fiber.return;
                nextEffect = sibling$jscomp$0;
                break b;
              }
              nextEffect = fiber.return;
            }
          }
          var finishedWork = renderPriority.current;
          for (nextEffect = finishedWork; null !== nextEffect;) {
            child = nextEffect;
            var firstChild = child.child;
            if (0 !== (child.subtreeFlags & 2064) && null !== firstChild) firstChild.return = child, nextEffect = firstChild;else b: for (child = finishedWork; null !== nextEffect;) {
              deletions = nextEffect;
              if (0 !== (deletions.flags & 2048)) try {
                switch (deletions.tag) {
                  case 0:
                  case 11:
                  case 15:
                    commitHookEffectListMount(9, deletions);
                }
              } catch (error) {
                captureCommitPhaseError(deletions, deletions.return, error);
              }
              if (deletions === child) {
                nextEffect = null;
                break b;
              }
              var sibling$jscomp$1 = deletions.sibling;
              if (null !== sibling$jscomp$1) {
                sibling$jscomp$1.return = deletions.return;
                nextEffect = sibling$jscomp$1;
                break b;
              }
              nextEffect = deletions.return;
            }
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
            injectedHook.onPostCommitFiberRoot(rendererID, renderPriority);
          } catch (err) {}
          JSCompiler_inline_result = true;
        }
        return JSCompiler_inline_result;
      } finally {
        currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$2.transition = prevTransition;
      }
    }
    return false;
  }
  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 1);
    sourceFiber = requestEventTime();
    null !== rootFiber && (markRootUpdated(rootFiber, 1, sourceFiber), ensureRootIsScheduled(rootFiber, sourceFiber));
  }
  function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (nearestMountedAncestor = sourceFiber.return; null !== nearestMountedAncestor;) {
      if (3 === nearestMountedAncestor.tag) {
        captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
        break;
      } else if (1 === nearestMountedAncestor.tag) {
        var instance = nearestMountedAncestor.stateNode;
        if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(nearestMountedAncestor, sourceFiber, 1);
          nearestMountedAncestor = enqueueUpdate(nearestMountedAncestor, sourceFiber, 1);
          sourceFiber = requestEventTime();
          null !== nearestMountedAncestor && (markRootUpdated(nearestMountedAncestor, 1, sourceFiber), ensureRootIsScheduled(nearestMountedAncestor, sourceFiber));
          break;
        }
      }
      nearestMountedAncestor = nearestMountedAncestor.return;
    }
  }
  function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    wakeable = requestEventTime();
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
    workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 130023424) === workInProgressRootRenderLanes && 500 > now() - globalMostRecentFallbackTime ? prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes);
    ensureRootIsScheduled(root, wakeable);
  }
  function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (0 === (boundaryFiber.mode & 1) ? retryLane = 1 : (retryLane = nextRetryLane, nextRetryLane <<= 1, 0 === (nextRetryLane & 130023424) && (nextRetryLane = 4194304)));
    var eventTime = requestEventTime();
    boundaryFiber = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated(boundaryFiber, retryLane, eventTime), ensureRootIsScheduled(boundaryFiber, eventTime));
  }
  function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState,
      retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch (boundaryFiber.tag) {
      case 13:
        var retryCache = boundaryFiber.stateNode;
        var suspenseState = boundaryFiber.memoizedState;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        break;
      case 19:
        retryCache = boundaryFiber.stateNode;
        break;
      default:
        throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  var beginWork$1;
  beginWork$1 = function (current, workInProgress, renderLanes) {
    if (null !== current) {
      if (current.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = true;else {
        if (0 === (current.lanes & renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
        didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
      }
    } else didReceiveUpdate = false;
    workInProgress.lanes = 0;
    switch (workInProgress.tag) {
      case 2:
        var Component = workInProgress.type;
        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
        current = workInProgress.pendingProps;
        var context = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderLanes);
        context = renderWithHooks(null, workInProgress, Component, current, context, renderLanes);
        workInProgress.flags |= 1;
        if ("object" === typeof context && null !== context && "function" === typeof context.render && undefined === context.$$typeof) {
          workInProgress.tag = 1;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          if (isContextProvider(Component)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;
          workInProgress.memoizedState = null !== context.state && undefined !== context.state ? context.state : null;
          initializeUpdateQueue(workInProgress);
          context.updater = classComponentUpdater;
          workInProgress.stateNode = context;
          context._reactInternals = workInProgress;
          mountClassInstance(workInProgress, Component, current, renderLanes);
          workInProgress = finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, context, renderLanes), workInProgress = workInProgress.child;
        return workInProgress;
      case 16:
        Component = workInProgress.elementType;
        a: {
          resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
          current = workInProgress.pendingProps;
          context = Component._init;
          Component = context(Component._payload);
          workInProgress.type = Component;
          context = workInProgress.tag = resolveLazyComponentTag(Component);
          current = resolveDefaultProps(Component, current);
          switch (context) {
            case 0:
              workInProgress = updateFunctionComponent(null, workInProgress, Component, current, renderLanes);
              break a;
            case 1:
              workInProgress = updateClassComponent(null, workInProgress, Component, current, renderLanes);
              break a;
            case 11:
              workInProgress = updateForwardRef(null, workInProgress, Component, current, renderLanes);
              break a;
            case 14:
              workInProgress = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, current), renderLanes);
              break a;
          }
          throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function.");
        }
        return workInProgress;
      case 0:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateFunctionComponent(current, workInProgress, Component, context, renderLanes);
      case 1:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateClassComponent(current, workInProgress, Component, context, renderLanes);
      case 3:
        pushHostRootContext(workInProgress);
        if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
        context = workInProgress.pendingProps;
        Component = workInProgress.memoizedState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, context, null, renderLanes);
        context = workInProgress.memoizedState.element;
        context === Component ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) : (reconcileChildren(current, workInProgress, context, renderLanes), workInProgress = workInProgress.child);
        return workInProgress;
      case 5:
        return pushHostContext(workInProgress), Component = workInProgress.pendingProps.children, markRef(current, workInProgress), reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 6:
        return null;
      case 13:
        return updateSuspenseComponent(current, workInProgress, renderLanes);
      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), Component = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes) : reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 11:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), updateForwardRef(current, workInProgress, Component, context, renderLanes);
      case 7:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
      case 8:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 12:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 10:
        a: {
          Component = workInProgress.type._context;
          context = workInProgress.pendingProps;
          hasContext = workInProgress.memoizedProps;
          var newValue = context.value;
          push(valueCursor, Component._currentValue);
          Component._currentValue = newValue;
          if (null !== hasContext) if (objectIs(hasContext.value, newValue)) {
            if (hasContext.children === context.children && !didPerformWorkStackCursor.current) {
              workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              break a;
            }
          } else for (hasContext = workInProgress.child, null !== hasContext && (hasContext.return = workInProgress); null !== hasContext;) {
            var list = hasContext.dependencies;
            if (null !== list) {
              newValue = hasContext.child;
              for (var dependency = list.firstContext; null !== dependency;) {
                if (dependency.context === Component) {
                  if (1 === hasContext.tag) {
                    dependency = createUpdate(-1, renderLanes & -renderLanes);
                    dependency.tag = 2;
                    var updateQueue = hasContext.updateQueue;
                    if (null !== updateQueue) {
                      updateQueue = updateQueue.shared;
                      var pending = updateQueue.pending;
                      null === pending ? dependency.next = dependency : (dependency.next = pending.next, pending.next = dependency);
                      updateQueue.pending = dependency;
                    }
                  }
                  hasContext.lanes |= renderLanes;
                  dependency = hasContext.alternate;
                  null !== dependency && (dependency.lanes |= renderLanes);
                  scheduleContextWorkOnParentPath(hasContext.return, renderLanes, workInProgress);
                  list.lanes |= renderLanes;
                  break;
                }
                dependency = dependency.next;
              }
            } else if (10 === hasContext.tag) newValue = hasContext.type === workInProgress.type ? null : hasContext.child;else if (18 === hasContext.tag) {
              newValue = hasContext.return;
              if (null === newValue) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              newValue.lanes |= renderLanes;
              list = newValue.alternate;
              null !== list && (list.lanes |= renderLanes);
              scheduleContextWorkOnParentPath(newValue, renderLanes, workInProgress);
              newValue = hasContext.sibling;
            } else newValue = hasContext.child;
            if (null !== newValue) newValue.return = hasContext;else for (newValue = hasContext; null !== newValue;) {
              if (newValue === workInProgress) {
                newValue = null;
                break;
              }
              hasContext = newValue.sibling;
              if (null !== hasContext) {
                hasContext.return = newValue.return;
                newValue = hasContext;
                break;
              }
              newValue = newValue.return;
            }
            hasContext = newValue;
          }
          reconcileChildren(current, workInProgress, context.children, renderLanes);
          workInProgress = workInProgress.child;
        }
        return workInProgress;
      case 9:
        return context = workInProgress.type, Component = workInProgress.pendingProps.children, prepareToReadContext(workInProgress, renderLanes), context = readContext(context), Component = Component(context), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, Component, renderLanes), workInProgress.child;
      case 14:
        return Component = workInProgress.type, context = resolveDefaultProps(Component, workInProgress.pendingProps), context = resolveDefaultProps(Component.type, context), updateMemoComponent(current, workInProgress, Component, context, renderLanes);
      case 15:
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 17:
        return Component = workInProgress.type, context = workInProgress.pendingProps, context = workInProgress.elementType === Component ? context : resolveDefaultProps(Component, context), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, isContextProvider(Component) ? (current = true, pushContextProvider(workInProgress)) : current = false, prepareToReadContext(workInProgress, renderLanes), constructClassInstance(workInProgress, Component, context), mountClassInstance(workInProgress, Component, context, renderLanes), finishClassComponent(null, workInProgress, Component, true, current, renderLanes);
      case 19:
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      case 22:
        return updateOffscreenComponent(current, workInProgress, renderLanes);
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  };
  function scheduleCallback$1(priorityLevel, callback) {
    return scheduleCallback(priorityLevel, callback);
  }
  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }
  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }
  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;
    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }
    return 2;
  }
  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
    workInProgress.flags = current.flags & 14680064;
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      lanes: pendingProps.lanes,
      firstContext: pendingProps.firstContext
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }
  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);
      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 8;
        break;
      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);
      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;
          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;
          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;
          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;
          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == type ? type : typeof type) + "."));
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
  }
  function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiber(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
  }
  function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    pendingProps = createFiber(22, pendingProps, key, mode);
    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
    pendingProps.lanes = lanes;
    pendingProps.stateNode = {
      isHidden: false
    };
    return pendingProps;
  }
  function createFiberFromText(content, mode, lanes) {
    content = createFiber(6, content, null, mode);
    content.lanes = lanes;
    return content;
  }
  function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.lanes = lanes;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }
  function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.pendingContext = this.context = null;
    this.callbackPriority = 0;
    this.eventTimes = createLaneMap(0);
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.identifierPrefix = identifierPrefix;
    this.onRecoverableError = onRecoverableError;
  }
  function createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }
  function findHostInstance(component) {
    var fiber = component._reactInternals;
    if (undefined === fiber) {
      if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
      component = Object.keys(component).join(",");
      throw Error("Argument appears to not be a ReactComponent. Keys: " + component);
    }
    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }
  function updateContainer(element, container, parentComponent, callback) {
    var current = container.current,
      eventTime = requestEventTime(),
      lane = requestUpdateLane(current);
    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternals;
      b: {
        if (getNearestMountedFiber(parentComponent) !== parentComponent || 1 !== parentComponent.tag) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var JSCompiler_inline_result = parentComponent;
        do {
          switch (JSCompiler_inline_result.tag) {
            case 3:
              JSCompiler_inline_result = JSCompiler_inline_result.stateNode.context;
              break b;
            case 1:
              if (isContextProvider(JSCompiler_inline_result.type)) {
                JSCompiler_inline_result = JSCompiler_inline_result.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }
          }
          JSCompiler_inline_result = JSCompiler_inline_result.return;
        } while (null !== JSCompiler_inline_result);
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;
        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, JSCompiler_inline_result);
          break a;
        }
      }
      parentComponent = JSCompiler_inline_result;
    } else parentComponent = emptyContextObject;
    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = createUpdate(eventTime, lane);
    container.payload = {
      element: element
    };
    callback = undefined === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(current, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, current, lane, eventTime), entangleTransitions(element, current, lane));
    return lane;
  }
  function emptyFindFiberByHostInstance() {
    return null;
  }
  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }
  function onRecoverableError(error) {
    console.error(error);
  }
  function unmountComponentAtNode(containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function () {
      roots.delete(containerTag);
    });
  }
  batchedUpdatesImpl = function (fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;
    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, 0 === executionContext && (workInProgressRootRenderTargetTime = now() + 500, includesLegacySyncCallbacks && flushSyncCallbacks());
    }
  };
  var roots = new Map(),
    devToolsConfig$jscomp$inline_979 = {
      findFiberByHostInstance: getInstanceFromTag,
      bundleType: 0,
      version: "18.2.0-next-9e3b772b8-20220608",
      rendererPackageName: "react-native-renderer",
      rendererConfig: {
        getInspectorDataForViewTag: function () {
          throw Error("getInspectorDataForViewTag() is not available in production");
        },
        getInspectorDataForViewAtPoint: function () {
          throw Error("getInspectorDataForViewAtPoint() is not available in production.");
        }.bind(null, findNodeHandle)
      }
    };
  var internals$jscomp$inline_1247 = {
    bundleType: devToolsConfig$jscomp$inline_979.bundleType,
    version: devToolsConfig$jscomp$inline_979.version,
    rendererPackageName: devToolsConfig$jscomp$inline_979.rendererPackageName,
    rendererConfig: devToolsConfig$jscomp$inline_979.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setErrorHandler: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    },
    findFiberByHostInstance: devToolsConfig$jscomp$inline_979.findFiberByHostInstance || emptyFindFiberByHostInstance,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null,
    reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
  };
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_1248 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_1248.isDisabled && hook$jscomp$inline_1248.supportsFiber) try {
      rendererID = hook$jscomp$inline_1248.inject(internals$jscomp$inline_1247), injectedHook = hook$jscomp$inline_1248;
    } catch (err) {}
  }
  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
    computeComponentStackForErrorReporting: function (reactTag) {
      return (reactTag = getInstanceFromTag(reactTag)) ? getStackByFiberInDevAndProd(reactTag) : "";
    }
  };
  exports.createPortal = function (children, containerTag) {
    return createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
  };
  exports.dispatchCommand = function (handle, command, args) {
    null != handle._nativeTag && (null != handle._internalInstanceHandle ? (handle = handle._internalInstanceHandle.stateNode, null != handle && nativeFabricUIManager.dispatchCommand(handle.node, command, args)) : ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args));
  };
  exports.findHostInstance_DEPRECATED = function (componentOrHandle) {
    if (null == componentOrHandle) return null;
    if (componentOrHandle._nativeTag) return componentOrHandle;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical : componentOrHandle;
  };
  exports.findNodeHandle = findNodeHandle;
  exports.getInspectorDataForInstance = undefined;
  exports.render = function (element, containerTag, callback) {
    var root = roots.get(containerTag);
    if (!root) {
      root = new FiberRootNode(containerTag, 0, false, "", onRecoverableError);
      var JSCompiler_inline_result = createFiber(3, null, null, 0);
      root.current = JSCompiler_inline_result;
      JSCompiler_inline_result.stateNode = root;
      JSCompiler_inline_result.memoizedState = {
        element: null,
        isDehydrated: false,
        cache: null,
        transitions: null,
        pendingSuspenseBoundaries: null
      };
      initializeUpdateQueue(JSCompiler_inline_result);
      roots.set(containerTag, root);
    }
    updateContainer(element, root, null, callback);
    a: if (element = root.current, element.child) switch (element.child.tag) {
      case 5:
        element = element.child.stateNode;
        break a;
      default:
        element = element.child.stateNode;
    } else element = null;
    return element;
  };
  exports.sendAccessibilityEvent = function (handle, eventType) {
    null != handle._nativeTag && (null != handle._internalInstanceHandle ? (handle = handle._internalInstanceHandle.stateNode, null != handle && nativeFabricUIManager.sendAccessibilityEvent(handle.node, eventType)) : ReactNativePrivateInterface.legacySendAccessibilityEvent(handle._nativeTag, eventType));
  };
  exports.unmountComponentAtNode = unmountComponentAtNode;
  exports.unmountComponentAtNodeAndRemoveContainer = function (containerTag) {
    unmountComponentAtNode(containerTag);
    ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
  };
  exports.unstable_batchedUpdates = batchedUpdates;
},265,[155,64,125,262]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('AccessibilityInfo');
},266,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _View = _interopRequireDefault(require(_dependencyMap[4]));
  var React = _interopRequireWildcard(require(_dependencyMap[5]));
  var _jsxRuntime = require(_dependencyMap[6]);
  var _excluded = ["animating", "color", "hidesWhenStopped", "onLayout", "size", "style"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var PlatformActivityIndicator = require(_dependencyMap[7]).default;
  var GRAY = '#999999';
  var ActivityIndicator = (_ref, forwardedRef) => {
    var _ref$animating = _ref.animating,
      animating = _ref$animating === undefined ? true : _ref$animating,
      _ref$color = _ref.color,
      color = _ref$color === undefined ? GRAY : _ref$color,
      _ref$hidesWhenStopped = _ref.hidesWhenStopped,
      hidesWhenStopped = _ref$hidesWhenStopped === undefined ? true : _ref$hidesWhenStopped,
      onLayout = _ref.onLayout,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 'small' : _ref$size,
      style = _ref.style,
      restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var sizeStyle;
    var sizeProp;
    switch (size) {
      case 'small':
        sizeStyle = styles.sizeSmall;
        sizeProp = 'small';
        break;
      case 'large':
        sizeStyle = styles.sizeLarge;
        sizeProp = 'large';
        break;
      default:
        sizeStyle = {
          height: size,
          width: size
        };
        break;
    }
    var nativeProps = {
      animating,
      color,
      hidesWhenStopped,
      ...restProps,
      ref: forwardedRef,
      style: sizeStyle,
      size: sizeProp
    };
    var androidProps = {
      styleAttr: 'Normal',
      indeterminate: true
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
      onLayout: onLayout,
      style: _StyleSheet.default.compose(styles.container, style),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(PlatformActivityIndicator, {
        ...nativeProps
      })
    });
  };
  var ActivityIndicatorWithRef = /*#__PURE__*/React.forwardRef(ActivityIndicator);
  ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
  var styles = _StyleSheet.default.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });
  var _default = exports.default = ActivityIndicatorWithRef;
},267,[1,203,245,81,240,125,243,268]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var nativeComponentName = 'RCTActivityIndicatorView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTActivityIndicatorView',
    validAttributes: {
      hidesWhenStopped: true,
      animating: true,
      color: {
        process: require(_dependencyMap[3]).default
      },
      size: true
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},268,[1,256,87,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[6]));
  var _Text = _interopRequireDefault(require(_dependencyMap[7]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[8]));
  var _TouchableNativeFeedback = _interopRequireDefault(require(_dependencyMap[9]));
  var _TouchableOpacity = _interopRequireDefault(require(_dependencyMap[10]));
  var _View = _interopRequireDefault(require(_dependencyMap[11]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[12]));
  var React = _interopRequireWildcard(require(_dependencyMap[13]));
  var _jsxRuntime = require(_dependencyMap[14]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var Button = /*#__PURE__*/function (_React$Component) {
    function Button() {
      (0, _classCallCheck2.default)(this, Button);
      return _callSuper(this, Button, arguments);
    }
    (0, _inherits2.default)(Button, _React$Component);
    return (0, _createClass2.default)(Button, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          accessibilityLabel = _this$props.accessibilityLabel,
          accessibilityState = _this$props.accessibilityState,
          ariaBusy = _this$props['aria-busy'],
          ariaChecked = _this$props['aria-checked'],
          ariaDisabled = _this$props['aria-disabled'],
          ariaExpanded = _this$props['aria-expanded'],
          ariaLabel = _this$props['aria-label'],
          ariaSelected = _this$props['aria-selected'],
          importantForAccessibility = _this$props.importantForAccessibility,
          color = _this$props.color,
          onPress = _this$props.onPress,
          touchSoundDisabled = _this$props.touchSoundDisabled,
          title = _this$props.title,
          hasTVPreferredFocus = _this$props.hasTVPreferredFocus,
          nextFocusDown = _this$props.nextFocusDown,
          nextFocusForward = _this$props.nextFocusForward,
          nextFocusLeft = _this$props.nextFocusLeft,
          nextFocusRight = _this$props.nextFocusRight,
          nextFocusUp = _this$props.nextFocusUp,
          testID = _this$props.testID,
          accessible = _this$props.accessible,
          accessibilityActions = _this$props.accessibilityActions,
          accessibilityHint = _this$props.accessibilityHint,
          accessibilityLanguage = _this$props.accessibilityLanguage,
          onAccessibilityAction = _this$props.onAccessibilityAction;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];
        if (color) {
          {
            textStyles.push({
              color: color
            });
          }
        }
        var _accessibilityState = {
          busy: ariaBusy ?? accessibilityState?.busy,
          checked: ariaChecked ?? accessibilityState?.checked,
          disabled: ariaDisabled ?? accessibilityState?.disabled,
          expanded: ariaExpanded ?? accessibilityState?.expanded,
          selected: ariaSelected ?? accessibilityState?.selected
        };
        var disabled = this.props.disabled != null ? this.props.disabled : _accessibilityState?.disabled;
        _accessibilityState = disabled !== _accessibilityState?.disabled ? {
          ..._accessibilityState,
          disabled
        } : _accessibilityState;
        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
        }
        (0, _invariant.default)(typeof title === 'string', 'The title prop of a Button must be a string');
        var formattedTitle = title;
        var Touchable = _TouchableOpacity.default;
        var _importantForAccessibility = importantForAccessibility === 'no' ? 'no-hide-descendants' : importantForAccessibility;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Touchable, {
          accessible: accessible,
          accessibilityActions: accessibilityActions,
          onAccessibilityAction: onAccessibilityAction,
          accessibilityLabel: ariaLabel || accessibilityLabel,
          accessibilityHint: accessibilityHint,
          accessibilityLanguage: accessibilityLanguage,
          accessibilityRole: "button",
          accessibilityState: _accessibilityState,
          importantForAccessibility: _importantForAccessibility,
          hasTVPreferredFocus: hasTVPreferredFocus,
          nextFocusDown: nextFocusDown,
          nextFocusForward: nextFocusForward,
          nextFocusLeft: nextFocusLeft,
          nextFocusRight: nextFocusRight,
          nextFocusUp: nextFocusUp,
          testID: testID,
          disabled: disabled,
          onPress: onPress,
          touchSoundDisabled: touchSoundDisabled,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
            style: buttonStyles,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
              style: textStyles,
              disabled: disabled,
              children: formattedTitle
            })
          })
        });
      }
    }]);
  }(React.Component);
  var styles = _StyleSheet.default.create({
    button: {},
    text: {
      textAlign: 'center',
      margin: 8,
      ...{
        color: '#007AFF',
        fontSize: 18
      }
    },
    buttonDisabled: {},
    textDisabled: {
      color: '#cdcdcd'
    }
  });
  module.exports = Button;
},269,[1,10,11,50,52,55,245,270,81,302,303,240,46,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var PressabilityDebug = _interopRequireWildcard(require(_dependencyMap[3]));
  var _usePressability = _interopRequireDefault(require(_dependencyMap[4]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[5]));
  var _processColor = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _TextAncestor = _interopRequireDefault(require(_dependencyMap[8]));
  var _TextNativeComponent = require(_dependencyMap[9]);
  var _react = _interopRequireWildcard(require(_dependencyMap[10]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[11]);
  var _excluded = ["accessible", "accessibilityLabel", "accessibilityState", "allowFontScaling", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-label", "aria-selected", "ellipsizeMode", "id", "nativeID", "onLongPress", "onPress", "onPressIn", "onPressOut", "onResponderGrant", "onResponderMove", "onResponderRelease", "onResponderTerminate", "onResponderTerminationRequest", "onStartShouldSetResponder", "pressRetentionOffset", "suppressHighlighting"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var Text = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
    var accessible = props.accessible,
      accessibilityLabel = props.accessibilityLabel,
      accessibilityState = props.accessibilityState,
      allowFontScaling = props.allowFontScaling,
      ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaLabel = props['aria-label'],
      ariaSelected = props['aria-selected'],
      ellipsizeMode = props.ellipsizeMode,
      id = props.id,
      nativeID = props.nativeID,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      onPressIn = props.onPressIn,
      onPressOut = props.onPressOut,
      onResponderGrant = props.onResponderGrant,
      onResponderMove = props.onResponderMove,
      onResponderRelease = props.onResponderRelease,
      onResponderTerminate = props.onResponderTerminate,
      onResponderTerminationRequest = props.onResponderTerminationRequest,
      onStartShouldSetResponder = props.onStartShouldSetResponder,
      pressRetentionOffset = props.pressRetentionOffset,
      suppressHighlighting = props.suppressHighlighting,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isHighlighted = _useState2[0],
      setHighlighted = _useState2[1];
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
      _accessibilityState = {
        busy: ariaBusy ?? accessibilityState?.busy,
        checked: ariaChecked ?? accessibilityState?.checked,
        disabled: ariaDisabled ?? accessibilityState?.disabled,
        expanded: ariaExpanded ?? accessibilityState?.expanded,
        selected: ariaSelected ?? accessibilityState?.selected
      };
    }
    var _disabled = restProps.disabled != null ? restProps.disabled : _accessibilityState?.disabled;
    var nativeTextAccessibilityState = _disabled !== _accessibilityState?.disabled ? {
      ..._accessibilityState,
      disabled: _disabled
    } : _accessibilityState;
    var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;
    var initialized = useLazyInitialization(isPressable);
    var config = (0, _react.useMemo)(() => initialized ? {
      disabled: !isPressable,
      pressRectOffset: pressRetentionOffset,
      onLongPress,
      onPress,
      onPressIn(event) {
        setHighlighted((suppressHighlighting == null || !suppressHighlighting) && true);
        onPressIn?.(event);
      },
      onPressOut(event) {
        setHighlighted(false);
        onPressOut?.(event);
      },
      onResponderTerminationRequest_DEPRECATED: onResponderTerminationRequest,
      onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder
    } : null, [initialized, isPressable, pressRetentionOffset, onLongPress, onPress, onPressIn, onPressOut, onResponderTerminationRequest, onStartShouldSetResponder, suppressHighlighting]);
    var eventHandlers = (0, _usePressability.default)(config);
    var eventHandlersForText = (0, _react.useMemo)(() => eventHandlers == null ? null : {
      onResponderGrant(event) {
        eventHandlers.onResponderGrant(event);
        if (onResponderGrant != null) {
          onResponderGrant(event);
        }
      },
      onResponderMove(event) {
        eventHandlers.onResponderMove(event);
        if (onResponderMove != null) {
          onResponderMove(event);
        }
      },
      onResponderRelease(event) {
        eventHandlers.onResponderRelease(event);
        if (onResponderRelease != null) {
          onResponderRelease(event);
        }
      },
      onResponderTerminate(event) {
        eventHandlers.onResponderTerminate(event);
        if (onResponderTerminate != null) {
          onResponderTerminate(event);
        }
      },
      onClick: eventHandlers.onClick,
      onResponderTerminationRequest: eventHandlers.onResponderTerminationRequest,
      onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder
    }, [eventHandlers, onResponderGrant, onResponderMove, onResponderRelease, onResponderTerminate]);
    var selectionColor = restProps.selectionColor == null ? null : (0, _processColor.default)(restProps.selectionColor);
    var style = restProps.style;
    var numberOfLines = restProps.numberOfLines;
    if (numberOfLines != null && !(numberOfLines >= 0)) {
      console.error(`'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`);
      numberOfLines = 0;
    }
    var hasTextAncestor = (0, _react.useContext)(_TextAncestor.default);
    var _accessible = accessible !== false;
    style = (0, _flattenStyle.default)(style);
    if (typeof style?.fontWeight === 'number') {
      style.fontWeight = style?.fontWeight.toString();
    }
    var _selectable = restProps.selectable;
    if (style?.userSelect != null) {
      _selectable = userSelectToSelectableMap[style.userSelect];
      delete style.userSelect;
    }
    if (style?.verticalAlign != null) {
      style.textAlignVertical = verticalAlignToTextAlignVerticalMap[style.verticalAlign];
      delete style.verticalAlign;
    }
    var _hasOnPressOrOnLongPress = props.onPress != null || props.onLongPress != null;
    return hasTextAncestor ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextNativeComponent.NativeVirtualText, {
      ...restProps,
      ...eventHandlersForText,
      accessibilityLabel: ariaLabel ?? accessibilityLabel,
      accessibilityState: _accessibilityState,
      isHighlighted: isHighlighted,
      isPressable: isPressable,
      nativeID: id ?? nativeID,
      numberOfLines: numberOfLines,
      ref: forwardedRef,
      selectable: _selectable,
      selectionColor: selectionColor,
      style: style
    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
      value: true,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextNativeComponent.NativeText, {
        ...restProps,
        ...eventHandlersForText,
        accessibilityLabel: ariaLabel ?? accessibilityLabel,
        accessibilityState: nativeTextAccessibilityState,
        accessible: accessible == null && false ? _hasOnPressOrOnLongPress : _accessible,
        allowFontScaling: allowFontScaling !== false,
        disabled: _disabled,
        ellipsizeMode: ellipsizeMode ?? 'tail',
        isHighlighted: isHighlighted,
        nativeID: id ?? nativeID,
        numberOfLines: numberOfLines,
        ref: forwardedRef,
        selectable: _selectable,
        selectionColor: selectionColor,
        style: style
      })
    });
  });
  Text.displayName = 'Text';
  Text.propTypes = require(_dependencyMap[12]).TextPropTypes;
  function useLazyInitialization(newValue) {
    var _useState3 = (0, _react.useState)(newValue),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      oldValue = _useState4[0],
      setValue = _useState4[1];
    if (!oldValue && newValue) {
      setValue(newValue);
    }
    return oldValue;
  }
  var userSelectToSelectableMap = {
    auto: true,
    text: true,
    none: false,
    contain: true,
    all: true
  };
  var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
  };
  module.exports = Text;
},270,[1,29,203,271,273,131,91,81,241,279,125,243,280]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PressabilityDebugView = PressabilityDebugView;
  exports.isEnabled = isEnabled;
  exports.setEnabled = setEnabled;
  var _View = _interopRequireDefault(require(_dependencyMap[1]));
  var _normalizeColor = _interopRequireDefault(require(_dependencyMap[2]));
  var _Rect = require(_dependencyMap[3]);
  var React = _interopRequireWildcard(require(_dependencyMap[4]));
  var _jsxRuntime = require(_dependencyMap[5]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function PressabilityDebugView(props) {
    return null;
  }
  var isDebugEnabled = false;
  function isEnabled() {
    return false;
  }
  function setEnabled(value) {}
},271,[1,240,92,272,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createSquare = createSquare;
  exports.normalizeRect = normalizeRect;
  function createSquare(size) {
    return {
      bottom: size,
      left: size,
      right: size,
      top: size
    };
  }
  function normalizeRect(rectOrSize) {
    return typeof rectOrSize === 'number' ? createSquare(rectOrSize) : rectOrSize;
  }
},272,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = usePressability;
  var _Pressability = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = require(_dependencyMap[2]);
  function usePressability(config) {
    var pressabilityRef = (0, _react.useRef)(null);
    if (config != null && pressabilityRef.current == null) {
      pressabilityRef.current = new _Pressability.default(config);
    }
    var pressability = pressabilityRef.current;
    (0, _react.useEffect)(() => {
      if (config != null && pressability != null) {
        pressability.configure(config);
      }
    }, [config, pressability]);
    (0, _react.useEffect)(() => {
      if (pressability != null) {
        return () => {
          pressability.reset();
        };
      }
    }, [pressability]);
    return pressability == null ? null : pressability.getEventHandlers();
  }
},273,[1,274,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _SoundManager = _interopRequireDefault(require(_dependencyMap[3]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[4]));
  var _UIManager = _interopRequireDefault(require(_dependencyMap[5]));
  var _Rect = require(_dependencyMap[6]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _HoverState = require(_dependencyMap[8]);
  var _PressabilityPerformanceEventEmitter = _interopRequireDefault(require(_dependencyMap[9]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[10]));
  var React = _interopRequireWildcard(require(_dependencyMap[11]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var Transitions = Object.freeze({
    NOT_RESPONDER: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
      RESPONDER_RELEASE: 'ERROR',
      RESPONDER_TERMINATED: 'ERROR',
      ENTER_PRESS_RECT: 'ERROR',
      LEAVE_PRESS_RECT: 'ERROR',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: 'RESPONDER_ACTIVE_PRESS_IN',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
      LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    ERROR: {
      DELAY: 'NOT_RESPONDER',
      RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'NOT_RESPONDER',
      LEAVE_PRESS_RECT: 'NOT_RESPONDER',
      LONG_PRESS_DETECTED: 'NOT_RESPONDER'
    }
  });
  var isActiveSignal = signal => signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
  var isActivationSignal = signal => signal === 'RESPONDER_ACTIVE_PRESS_OUT' || signal === 'RESPONDER_ACTIVE_PRESS_IN';
  var isPressInSignal = signal => signal === 'RESPONDER_INACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
  var isTerminalSignal = signal => signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';
  var DEFAULT_LONG_PRESS_DELAY_MS = 500;
  var DEFAULT_PRESS_RECT_OFFSETS = {
    bottom: 30,
    left: 20,
    right: 20,
    top: 20
  };
  var DEFAULT_MIN_PRESS_DURATION = 130;
  var DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE = 10;
  var longPressDeactivationDistance = DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE;
  var Pressability = exports.default = /*#__PURE__*/function () {
    function Pressability(config) {
      (0, _classCallCheck2.default)(this, Pressability);
      this._eventHandlers = null;
      this._hoverInDelayTimeout = null;
      this._hoverOutDelayTimeout = null;
      this._isHovered = false;
      this._longPressDelayTimeout = null;
      this._pressDelayTimeout = null;
      this._pressOutDelayTimeout = null;
      this._responderID = null;
      this._responderRegion = null;
      this._touchState = 'NOT_RESPONDER';
      this._measureCallback = (left, top, width, height, pageX, pageY) => {
        if (!left && !top && !width && !height && !pageX && !pageY) {
          return;
        }
        this._responderRegion = {
          bottom: pageY + height,
          left: pageX,
          right: pageX + width,
          top: pageY
        };
      };
      this.configure(config);
    }
    return (0, _createClass2.default)(Pressability, [{
      key: "configure",
      value: function configure(config) {
        this._config = config;
      }
    }, {
      key: "reset",
      value: function reset() {
        this._cancelHoverInDelayTimeout();
        this._cancelHoverOutDelayTimeout();
        this._cancelLongPressDelayTimeout();
        this._cancelPressDelayTimeout();
        this._cancelPressOutDelayTimeout();
        this._config = Object.freeze({});
      }
    }, {
      key: "getEventHandlers",
      value: function getEventHandlers() {
        if (this._eventHandlers == null) {
          this._eventHandlers = this._createEventHandlers();
        }
        return this._eventHandlers;
      }
    }, {
      key: "_createEventHandlers",
      value: function _createEventHandlers() {
        var focusEventHandlers = {
          onBlur: event => {
            var onBlur = this._config.onBlur;
            if (onBlur != null) {
              onBlur(event);
            }
          },
          onFocus: event => {
            var onFocus = this._config.onFocus;
            if (onFocus != null) {
              onFocus(event);
            }
          }
        };
        var responderEventHandlers = {
          onStartShouldSetResponder: () => {
            var disabled = this._config.disabled;
            if (disabled == null) {
              var onStartShouldSetResponder_DEPRECATED = this._config.onStartShouldSetResponder_DEPRECATED;
              return onStartShouldSetResponder_DEPRECATED == null ? true : onStartShouldSetResponder_DEPRECATED();
            }
            return !disabled;
          },
          onResponderGrant: event => {
            event.persist();
            this._cancelPressOutDelayTimeout();
            this._responderID = event.currentTarget;
            this._touchState = 'NOT_RESPONDER';
            this._receiveSignal('RESPONDER_GRANT', event);
            var delayPressIn = normalizeDelay(this._config.delayPressIn);
            if (delayPressIn > 0) {
              this._pressDelayTimeout = setTimeout(() => {
                this._receiveSignal('DELAY', event);
              }, delayPressIn);
            } else {
              this._receiveSignal('DELAY', event);
            }
            var delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn);
            this._longPressDelayTimeout = setTimeout(() => {
              this._handleLongPress(event);
            }, delayLongPress + delayPressIn);
            return this._config.blockNativeResponder === true;
          },
          onResponderMove: event => {
            var onPressMove = this._config.onPressMove;
            if (onPressMove != null) {
              onPressMove(event);
            }
            var responderRegion = this._responderRegion;
            if (responderRegion == null) {
              return;
            }
            var touch = getTouchFromPressEvent(event);
            if (touch == null) {
              this._cancelLongPressDelayTimeout();
              this._receiveSignal('LEAVE_PRESS_RECT', event);
              return;
            }
            if (this._touchActivatePosition != null) {
              var deltaX = this._touchActivatePosition.pageX - touch.pageX;
              var deltaY = this._touchActivatePosition.pageY - touch.pageY;
              if (Math.hypot(deltaX, deltaY) > longPressDeactivationDistance) {
                this._cancelLongPressDelayTimeout();
              }
            }
            if (this._isTouchWithinResponderRegion(touch, responderRegion)) {
              this._receiveSignal('ENTER_PRESS_RECT', event);
            } else {
              this._cancelLongPressDelayTimeout();
              this._receiveSignal('LEAVE_PRESS_RECT', event);
            }
          },
          onResponderRelease: event => {
            this._receiveSignal('RESPONDER_RELEASE', event);
          },
          onResponderTerminate: event => {
            this._receiveSignal('RESPONDER_TERMINATED', event);
          },
          onResponderTerminationRequest: () => {
            var cancelable = this._config.cancelable;
            if (cancelable == null) {
              var onResponderTerminationRequest_DEPRECATED = this._config.onResponderTerminationRequest_DEPRECATED;
              return onResponderTerminationRequest_DEPRECATED == null ? true : onResponderTerminationRequest_DEPRECATED();
            }
            return cancelable;
          },
          onClick: event => {
            if (event?.nativeEvent?.hasOwnProperty?.('pointerType')) {
              return;
            }
            if (event?.currentTarget !== event?.target) {
              event?.stopPropagation();
              return;
            }
            var _this$_config = this._config,
              onPress = _this$_config.onPress,
              disabled = _this$_config.disabled;
            if (onPress != null && disabled !== true) {
              onPress(event);
            }
          }
        };
        if (_ReactNativeFeatureFlags.default.shouldPressibilityUseW3CPointerEventsForHover()) {
          var hoverPointerEvents = {
            onPointerEnter: undefined,
            onPointerLeave: undefined
          };
          var _this$_config2 = this._config,
            onHoverIn = _this$_config2.onHoverIn,
            onHoverOut = _this$_config2.onHoverOut;
          if (onHoverIn != null) {
            hoverPointerEvents.onPointerEnter = event => {
              this._isHovered = true;
              this._cancelHoverOutDelayTimeout();
              if (onHoverIn != null) {
                var delayHoverIn = normalizeDelay(this._config.delayHoverIn);
                if (delayHoverIn > 0) {
                  event.persist();
                  this._hoverInDelayTimeout = setTimeout(() => {
                    onHoverIn(convertPointerEventToMouseEvent(event));
                  }, delayHoverIn);
                } else {
                  onHoverIn(convertPointerEventToMouseEvent(event));
                }
              }
            };
          }
          if (onHoverOut != null) {
            hoverPointerEvents.onPointerLeave = event => {
              if (this._isHovered) {
                this._isHovered = false;
                this._cancelHoverInDelayTimeout();
                if (onHoverOut != null) {
                  var delayHoverOut = normalizeDelay(this._config.delayHoverOut);
                  if (delayHoverOut > 0) {
                    event.persist();
                    this._hoverOutDelayTimeout = setTimeout(() => {
                      onHoverOut(convertPointerEventToMouseEvent(event));
                    }, delayHoverOut);
                  } else {
                    onHoverOut(convertPointerEventToMouseEvent(event));
                  }
                }
              }
            };
          }
          return {
            ...focusEventHandlers,
            ...responderEventHandlers,
            ...hoverPointerEvents
          };
        } else {
          var mouseEventHandlers = null;
          return {
            ...focusEventHandlers,
            ...responderEventHandlers,
            ...mouseEventHandlers
          };
        }
      }
    }, {
      key: "_receiveSignal",
      value: function _receiveSignal(signal, event) {
        if (event.nativeEvent.timestamp != null) {
          _PressabilityPerformanceEventEmitter.default.emitEvent(() => {
            return {
              signal,
              nativeTimestamp: event.nativeEvent.timestamp
            };
          });
        }
        var prevState = this._touchState;
        var nextState = Transitions[prevState]?.[signal];
        if (this._responderID == null && signal === 'RESPONDER_RELEASE') {
          return;
        }
        (0, _invariant.default)(nextState != null && nextState !== 'ERROR', 'Pressability: Invalid signal `%s` for state `%s` on responder: %s', signal, prevState, typeof this._responderID === 'number' ? this._responderID : '<<host component>>');
        if (prevState !== nextState) {
          this._performTransitionSideEffects(prevState, nextState, signal, event);
          this._touchState = nextState;
        }
      }
    }, {
      key: "_performTransitionSideEffects",
      value: function _performTransitionSideEffects(prevState, nextState, signal, event) {
        if (isTerminalSignal(signal)) {
          this._touchActivatePosition = null;
          this._cancelLongPressDelayTimeout();
        }
        var isInitialTransition = prevState === 'NOT_RESPONDER' && nextState === 'RESPONDER_INACTIVE_PRESS_IN';
        var isActivationTransition = !isActivationSignal(prevState) && isActivationSignal(nextState);
        if (isInitialTransition || isActivationTransition) {
          this._measureResponderRegion();
        }
        if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {
          var onLongPress = this._config.onLongPress;
          if (onLongPress != null) {
            onLongPress(event);
          }
        }
        var isPrevActive = isActiveSignal(prevState);
        var isNextActive = isActiveSignal(nextState);
        if (!isPrevActive && isNextActive) {
          this._activate(event);
        } else if (isPrevActive && !isNextActive) {
          this._deactivate(event);
        }
        if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {
          if (!isNextActive && !isPrevActive) {
            this._activate(event);
            this._deactivate(event);
          }
          var _this$_config3 = this._config,
            _onLongPress = _this$_config3.onLongPress,
            onPress = _this$_config3.onPress,
            android_disableSound = _this$_config3.android_disableSound;
          if (onPress != null) {
            var isPressCanceledByLongPress = _onLongPress != null && prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN' && this._shouldLongPressCancelPress();
            if (!isPressCanceledByLongPress) {
              onPress(event);
            }
          }
        }
        this._cancelPressDelayTimeout();
      }
    }, {
      key: "_activate",
      value: function _activate(event) {
        var onPressIn = this._config.onPressIn;
        var _getTouchFromPressEve = getTouchFromPressEvent(event),
          pageX = _getTouchFromPressEve.pageX,
          pageY = _getTouchFromPressEve.pageY;
        this._touchActivatePosition = {
          pageX,
          pageY
        };
        this._touchActivateTime = Date.now();
        if (onPressIn != null) {
          onPressIn(event);
        }
      }
    }, {
      key: "_deactivate",
      value: function _deactivate(event) {
        var onPressOut = this._config.onPressOut;
        if (onPressOut != null) {
          var minPressDuration = normalizeDelay(this._config.minPressDuration, 0, DEFAULT_MIN_PRESS_DURATION);
          var pressDuration = Date.now() - (this._touchActivateTime ?? 0);
          var delayPressOut = Math.max(minPressDuration - pressDuration, normalizeDelay(this._config.delayPressOut));
          if (delayPressOut > 0) {
            event.persist();
            this._pressOutDelayTimeout = setTimeout(() => {
              onPressOut(event);
            }, delayPressOut);
          } else {
            onPressOut(event);
          }
        }
        this._touchActivateTime = null;
      }
    }, {
      key: "_measureResponderRegion",
      value: function _measureResponderRegion() {
        if (this._responderID == null) {
          return;
        }
        if (typeof this._responderID === 'number') {
          _UIManager.default.measure(this._responderID, this._measureCallback);
        } else {
          this._responderID.measure(this._measureCallback);
        }
      }
    }, {
      key: "_isTouchWithinResponderRegion",
      value: function _isTouchWithinResponderRegion(touch, responderRegion) {
        var hitSlop = (0, _Rect.normalizeRect)(this._config.hitSlop);
        var pressRectOffset = (0, _Rect.normalizeRect)(this._config.pressRectOffset);
        var regionBottom = responderRegion.bottom;
        var regionLeft = responderRegion.left;
        var regionRight = responderRegion.right;
        var regionTop = responderRegion.top;
        if (hitSlop != null) {
          if (hitSlop.bottom != null) {
            regionBottom += hitSlop.bottom;
          }
          if (hitSlop.left != null) {
            regionLeft -= hitSlop.left;
          }
          if (hitSlop.right != null) {
            regionRight += hitSlop.right;
          }
          if (hitSlop.top != null) {
            regionTop -= hitSlop.top;
          }
        }
        regionBottom += pressRectOffset?.bottom ?? DEFAULT_PRESS_RECT_OFFSETS.bottom;
        regionLeft -= pressRectOffset?.left ?? DEFAULT_PRESS_RECT_OFFSETS.left;
        regionRight += pressRectOffset?.right ?? DEFAULT_PRESS_RECT_OFFSETS.right;
        regionTop -= pressRectOffset?.top ?? DEFAULT_PRESS_RECT_OFFSETS.top;
        return touch.pageX > regionLeft && touch.pageX < regionRight && touch.pageY > regionTop && touch.pageY < regionBottom;
      }
    }, {
      key: "_handleLongPress",
      value: function _handleLongPress(event) {
        if (this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' || this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN') {
          this._receiveSignal('LONG_PRESS_DETECTED', event);
        }
      }
    }, {
      key: "_shouldLongPressCancelPress",
      value: function _shouldLongPressCancelPress() {
        return this._config.onLongPressShouldCancelPress_DEPRECATED == null || this._config.onLongPressShouldCancelPress_DEPRECATED();
      }
    }, {
      key: "_cancelHoverInDelayTimeout",
      value: function _cancelHoverInDelayTimeout() {
        if (this._hoverInDelayTimeout != null) {
          clearTimeout(this._hoverInDelayTimeout);
          this._hoverInDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelHoverOutDelayTimeout",
      value: function _cancelHoverOutDelayTimeout() {
        if (this._hoverOutDelayTimeout != null) {
          clearTimeout(this._hoverOutDelayTimeout);
          this._hoverOutDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelLongPressDelayTimeout",
      value: function _cancelLongPressDelayTimeout() {
        if (this._longPressDelayTimeout != null) {
          clearTimeout(this._longPressDelayTimeout);
          this._longPressDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelPressDelayTimeout",
      value: function _cancelPressDelayTimeout() {
        if (this._pressDelayTimeout != null) {
          clearTimeout(this._pressDelayTimeout);
          this._pressDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelPressOutDelayTimeout",
      value: function _cancelPressOutDelayTimeout() {
        if (this._pressOutDelayTimeout != null) {
          clearTimeout(this._pressOutDelayTimeout);
          this._pressOutDelayTimeout = null;
        }
      }
    }], [{
      key: "setLongPressDeactivationDistance",
      value: function setLongPressDeactivationDistance(distance) {
        longPressDeactivationDistance = distance;
      }
    }]);
  }();
  function normalizeDelay(delay) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return Math.max(min, delay ?? fallback);
  }
  var getTouchFromPressEvent = event => {
    var _event$nativeEvent = event.nativeEvent,
      changedTouches = _event$nativeEvent.changedTouches,
      touches = _event$nativeEvent.touches;
    if (touches != null && touches.length > 0) {
      return touches[0];
    }
    if (changedTouches != null && changedTouches.length > 0) {
      return changedTouches[0];
    }
    return event.nativeEvent;
  };
  function convertPointerEventToMouseEvent(input) {
    var _input$nativeEvent = input.nativeEvent,
      clientX = _input$nativeEvent.clientX,
      clientY = _input$nativeEvent.clientY;
    return {
      ...input,
      nativeEvent: {
        clientX,
        clientY,
        pageX: clientX,
        pageY: clientY,
        timestamp: input.timeStamp
      }
    };
  }
},274,[1,10,11,275,140,111,272,81,277,278,46,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeSoundManager = _interopRequireDefault(require(_dependencyMap[1]));
  var SoundManager = {
    playTouchSound: function () {
      if (_NativeSoundManager.default) {
        _NativeSoundManager.default.playTouchSound();
      }
    }
  };
  module.exports = SoundManager;
},275,[1,276]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('SoundManager');
},276,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isHoverEnabled = isHoverEnabled;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  var isEnabled = false;
  function isHoverEnabled() {
    return isEnabled;
  }
},277,[1,81]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var PressabilityPerformanceEventEmitter = /*#__PURE__*/function () {
    function PressabilityPerformanceEventEmitter() {
      (0, _classCallCheck2.default)(this, PressabilityPerformanceEventEmitter);
      this._listeners = [];
    }
    return (0, _createClass2.default)(PressabilityPerformanceEventEmitter, [{
      key: "addListener",
      value: function addListener(listener) {
        this._listeners.push(listener);
      }
    }, {
      key: "removeListener",
      value: function removeListener(listener) {
        var index = this._listeners.indexOf(listener);
        if (index > -1) {
          this._listeners.splice(index, 1);
        }
      }
    }, {
      key: "emitEvent",
      value: function emitEvent(constructEvent) {
        if (this._listeners.length === 0) {
          return;
        }
        var event = constructEvent();
        this._listeners.forEach(listener => listener(event));
      }
    }]);
  }();
  var PressabilityPerformanceEventEmitterSingleton = new PressabilityPerformanceEventEmitter();
  var _default = exports.default = PressabilityPerformanceEventEmitterSingleton;
},278,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NativeVirtualText = exports.NativeText = undefined;
  var _ViewConfig = require(_dependencyMap[1]);
  var _UIManager = _interopRequireDefault(require(_dependencyMap[2]));
  var _createReactNativeComponentClass = _interopRequireDefault(require(_dependencyMap[3]));
  var textViewConfig = {
    validAttributes: {
      isHighlighted: true,
      isPressable: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      dynamicTypeRamp: true,
      maxFontSizeMultiplier: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true,
      onInlineViewLayout: true,
      dataDetectorType: true,
      android_hyphenationFrequency: true,
      lineBreakStrategyIOS: true
    },
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      },
      topInlineViewLayout: {
        registrationName: 'onInlineViewLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };
  var virtualTextViewConfig = {
    validAttributes: {
      isHighlighted: true,
      isPressable: true,
      maxFontSizeMultiplier: true
    },
    uiViewClassName: 'RCTVirtualText'
  };
  var NativeText = exports.NativeText = (0, _createReactNativeComponentClass.default)('RCTText', () => (0, _ViewConfig.createViewConfig)(textViewConfig));
  var NativeVirtualText = exports.NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', () => (0, _ViewConfig.createViewConfig)(virtualTextViewConfig));
},279,[1,124,111,258]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    get ColorPropType() {
      return require(_dependencyMap[0]);
    },
    get EdgeInsetsPropType() {
      return require(_dependencyMap[1]);
    },
    get ImagePropTypes() {
      return require(_dependencyMap[2]);
    },
    get PointPropType() {
      return require(_dependencyMap[3]);
    },
    get TextInputPropTypes() {
      return require(_dependencyMap[4]);
    },
    get TextPropTypes() {
      return require(_dependencyMap[5]);
    },
    get ViewPropTypes() {
      return require(_dependencyMap[6]);
    }
  };
},280,[281,283,287,298,299,300,295]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = require(_dependencyMap[0]);
  var colorPropType = function (isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];
    if (color == null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }
      return;
    }
    if (typeof color === 'number') {
      return;
    }
    if (typeof color === 'string' && normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + `Valid color formats are
  - '#f0f' (#rgb)
  - '#f0fc' (#rgba)
  - '#ff00ff' (#rrggbb)
  - '#ff00ff00' (#rrggbbaa)
  - 'rgb(255, 255, 255)'
  - 'rgba(255, 255, 255, 1.0)'
  - 'hsl(360, 100%, 100%)'
  - 'hsla(360, 100%, 100%, 1.0)'
  - 'transparent'
  - 'red'
  - 0xff00ff00 (0xrrggbbaa)
`);
    }
  };
  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},281,[282]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /* eslint no-bitwise: 0 */

  'use strict';

  function normalizeColor(color) {
    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }
      return null;
    }
    if (typeof color !== 'string') {
      return null;
    }
    var matchers = getMatchers();
    var match;

    // Ordered based on occurrences on Facebook codebase
    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }
    var colorFromKeyword = normalizeKeyword(color);
    if (colorFromKeyword != null) {
      return colorFromKeyword;
    }
    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 |
      // r
      parse255(match[2]) << 16 |
      // g
      parse255(match[3]) << 8 |
      // b
      0x000000ff) >>>
      // a
      0;
    }
    if (match = matchers.rgba.exec(color)) {
      // rgba(R G B / A) notation
      if (match[6] !== undefined) {
        return (parse255(match[6]) << 24 |
        // r
        parse255(match[7]) << 16 |
        // g
        parse255(match[8]) << 8 |
        // b
        parse1(match[9])) >>>
        // a
        0;
      }

      // rgba(R, G, B, A) notation
      return (parse255(match[2]) << 24 |
      // r
      parse255(match[3]) << 16 |
      // g
      parse255(match[4]) << 8 |
      // b
      parse1(match[5])) >>>
      // a
      0;
    }
    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] +
      // r
      match[2] + match[2] +
      // g
      match[3] + match[3] +
      // b
      'ff',
      // a
      16) >>> 0;
    }

    // https://drafts.csswg.org/css-color-4/#hex-notation
    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }
    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] +
      // r
      match[2] + match[2] +
      // g
      match[3] + match[3] +
      // b
      match[4] + match[4],
      // a
      16) >>> 0;
    }
    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3]) // l
      ) | 0x000000ff) >>>
      // a
      0;
    }
    if (match = matchers.hsla.exec(color)) {
      // hsla(H S L / A) notation
      if (match[6] !== undefined) {
        return (hslToRgb(parse360(match[6]),
        // h
        parsePercentage(match[7]),
        // s
        parsePercentage(match[8]) // l
        ) | parse1(match[9])) >>>
        // a
        0;
      }

      // hsla(H, S, L, A) notation
      return (hslToRgb(parse360(match[2]),
      // h
      parsePercentage(match[3]),
      // s
      parsePercentage(match[4]) // l
      ) | parse1(match[5])) >>>
      // a
      0;
    }
    if (match = matchers.hwb.exec(color)) {
      return (hwbToRgb(parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // w
      parsePercentage(match[3]) // b
      ) | 0x000000ff) >>>
      // a
      0;
    }
    return null;
  }
  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }
    if (t > 1) {
      t -= 1;
    }
    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }
    if (t < 0.5) {
      return q;
    }
    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }
    return p;
  }
  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }
  function hwbToRgb(h, w, b) {
    if (w + b >= 1) {
      var gray = Math.round(w * 255 / (w + b));
      return gray << 24 | gray << 16 | gray << 8;
    }
    var red = hue2rgb(0, 1, h + 0.3333333333333333) * (1 - w - b) + w;
    var green = hue2rgb(0, 1, h) * (1 - w - b) + w;
    var blue = hue2rgb(0, 1, h - 0.3333333333333333) * (1 - w - b) + w;
    return Math.round(red * 255) << 24 | Math.round(green * 255) << 16 | Math.round(blue * 255) << 8;
  }
  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";
  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return '\\(\\s*(' + args.join(')\\s*,?\\s*(') + ')\\s*\\)';
  }
  function callWithSlashSeparator() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return '\\(\\s*(' + args.slice(0, args.length - 1).join(')\\s*,?\\s*(') + ')\\s*/\\s*(' + args[args.length - 1] + ')\\s*\\)';
  }
  function commaSeparatedCall() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }
  var cachedMatchers;
  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp('rgba(' + commaSeparatedCall(NUMBER, NUMBER, NUMBER, NUMBER) + '|' + callWithSlashSeparator(NUMBER, NUMBER, NUMBER, NUMBER) + ')'),
        hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp('hsla(' + commaSeparatedCall(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + '|' + callWithSlashSeparator(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + ')'),
        hwb: new RegExp('hwb' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }
    return cachedMatchers;
  }
  function parse255(str) {
    var int = parseInt(str, 10);
    if (int < 0) {
      return 0;
    }
    if (int > 255) {
      return 255;
    }
    return int;
  }
  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }
  function parse1(str) {
    var num = parseFloat(str);
    if (num < 0) {
      return 0;
    }
    if (num > 1) {
      return 255;
    }
    return Math.round(num * 255);
  }
  function parsePercentage(str) {
    // parseFloat conveniently ignores the final %
    var int = parseFloat(str);
    if (int < 0) {
      return 0;
    }
    if (int > 100) {
      return 1;
    }
    return int / 100;
  }
  function normalizeKeyword(name) {
    // prettier-ignore
    switch (name) {
      case 'transparent':
        return 0x00000000;
      // http://www.w3.org/TR/css3-color/#svg-color
      case 'aliceblue':
        return 0xf0f8ffff;
      case 'antiquewhite':
        return 0xfaebd7ff;
      case 'aqua':
        return 0x00ffffff;
      case 'aquamarine':
        return 0x7fffd4ff;
      case 'azure':
        return 0xf0ffffff;
      case 'beige':
        return 0xf5f5dcff;
      case 'bisque':
        return 0xffe4c4ff;
      case 'black':
        return 0x000000ff;
      case 'blanchedalmond':
        return 0xffebcdff;
      case 'blue':
        return 0x0000ffff;
      case 'blueviolet':
        return 0x8a2be2ff;
      case 'brown':
        return 0xa52a2aff;
      case 'burlywood':
        return 0xdeb887ff;
      case 'burntsienna':
        return 0xea7e5dff;
      case 'cadetblue':
        return 0x5f9ea0ff;
      case 'chartreuse':
        return 0x7fff00ff;
      case 'chocolate':
        return 0xd2691eff;
      case 'coral':
        return 0xff7f50ff;
      case 'cornflowerblue':
        return 0x6495edff;
      case 'cornsilk':
        return 0xfff8dcff;
      case 'crimson':
        return 0xdc143cff;
      case 'cyan':
        return 0x00ffffff;
      case 'darkblue':
        return 0x00008bff;
      case 'darkcyan':
        return 0x008b8bff;
      case 'darkgoldenrod':
        return 0xb8860bff;
      case 'darkgray':
        return 0xa9a9a9ff;
      case 'darkgreen':
        return 0x006400ff;
      case 'darkgrey':
        return 0xa9a9a9ff;
      case 'darkkhaki':
        return 0xbdb76bff;
      case 'darkmagenta':
        return 0x8b008bff;
      case 'darkolivegreen':
        return 0x556b2fff;
      case 'darkorange':
        return 0xff8c00ff;
      case 'darkorchid':
        return 0x9932ccff;
      case 'darkred':
        return 0x8b0000ff;
      case 'darksalmon':
        return 0xe9967aff;
      case 'darkseagreen':
        return 0x8fbc8fff;
      case 'darkslateblue':
        return 0x483d8bff;
      case 'darkslategray':
        return 0x2f4f4fff;
      case 'darkslategrey':
        return 0x2f4f4fff;
      case 'darkturquoise':
        return 0x00ced1ff;
      case 'darkviolet':
        return 0x9400d3ff;
      case 'deeppink':
        return 0xff1493ff;
      case 'deepskyblue':
        return 0x00bfffff;
      case 'dimgray':
        return 0x696969ff;
      case 'dimgrey':
        return 0x696969ff;
      case 'dodgerblue':
        return 0x1e90ffff;
      case 'firebrick':
        return 0xb22222ff;
      case 'floralwhite':
        return 0xfffaf0ff;
      case 'forestgreen':
        return 0x228b22ff;
      case 'fuchsia':
        return 0xff00ffff;
      case 'gainsboro':
        return 0xdcdcdcff;
      case 'ghostwhite':
        return 0xf8f8ffff;
      case 'gold':
        return 0xffd700ff;
      case 'goldenrod':
        return 0xdaa520ff;
      case 'gray':
        return 0x808080ff;
      case 'green':
        return 0x008000ff;
      case 'greenyellow':
        return 0xadff2fff;
      case 'grey':
        return 0x808080ff;
      case 'honeydew':
        return 0xf0fff0ff;
      case 'hotpink':
        return 0xff69b4ff;
      case 'indianred':
        return 0xcd5c5cff;
      case 'indigo':
        return 0x4b0082ff;
      case 'ivory':
        return 0xfffff0ff;
      case 'khaki':
        return 0xf0e68cff;
      case 'lavender':
        return 0xe6e6faff;
      case 'lavenderblush':
        return 0xfff0f5ff;
      case 'lawngreen':
        return 0x7cfc00ff;
      case 'lemonchiffon':
        return 0xfffacdff;
      case 'lightblue':
        return 0xadd8e6ff;
      case 'lightcoral':
        return 0xf08080ff;
      case 'lightcyan':
        return 0xe0ffffff;
      case 'lightgoldenrodyellow':
        return 0xfafad2ff;
      case 'lightgray':
        return 0xd3d3d3ff;
      case 'lightgreen':
        return 0x90ee90ff;
      case 'lightgrey':
        return 0xd3d3d3ff;
      case 'lightpink':
        return 0xffb6c1ff;
      case 'lightsalmon':
        return 0xffa07aff;
      case 'lightseagreen':
        return 0x20b2aaff;
      case 'lightskyblue':
        return 0x87cefaff;
      case 'lightslategray':
        return 0x778899ff;
      case 'lightslategrey':
        return 0x778899ff;
      case 'lightsteelblue':
        return 0xb0c4deff;
      case 'lightyellow':
        return 0xffffe0ff;
      case 'lime':
        return 0x00ff00ff;
      case 'limegreen':
        return 0x32cd32ff;
      case 'linen':
        return 0xfaf0e6ff;
      case 'magenta':
        return 0xff00ffff;
      case 'maroon':
        return 0x800000ff;
      case 'mediumaquamarine':
        return 0x66cdaaff;
      case 'mediumblue':
        return 0x0000cdff;
      case 'mediumorchid':
        return 0xba55d3ff;
      case 'mediumpurple':
        return 0x9370dbff;
      case 'mediumseagreen':
        return 0x3cb371ff;
      case 'mediumslateblue':
        return 0x7b68eeff;
      case 'mediumspringgreen':
        return 0x00fa9aff;
      case 'mediumturquoise':
        return 0x48d1ccff;
      case 'mediumvioletred':
        return 0xc71585ff;
      case 'midnightblue':
        return 0x191970ff;
      case 'mintcream':
        return 0xf5fffaff;
      case 'mistyrose':
        return 0xffe4e1ff;
      case 'moccasin':
        return 0xffe4b5ff;
      case 'navajowhite':
        return 0xffdeadff;
      case 'navy':
        return 0x000080ff;
      case 'oldlace':
        return 0xfdf5e6ff;
      case 'olive':
        return 0x808000ff;
      case 'olivedrab':
        return 0x6b8e23ff;
      case 'orange':
        return 0xffa500ff;
      case 'orangered':
        return 0xff4500ff;
      case 'orchid':
        return 0xda70d6ff;
      case 'palegoldenrod':
        return 0xeee8aaff;
      case 'palegreen':
        return 0x98fb98ff;
      case 'paleturquoise':
        return 0xafeeeeff;
      case 'palevioletred':
        return 0xdb7093ff;
      case 'papayawhip':
        return 0xffefd5ff;
      case 'peachpuff':
        return 0xffdab9ff;
      case 'peru':
        return 0xcd853fff;
      case 'pink':
        return 0xffc0cbff;
      case 'plum':
        return 0xdda0ddff;
      case 'powderblue':
        return 0xb0e0e6ff;
      case 'purple':
        return 0x800080ff;
      case 'rebeccapurple':
        return 0x663399ff;
      case 'red':
        return 0xff0000ff;
      case 'rosybrown':
        return 0xbc8f8fff;
      case 'royalblue':
        return 0x4169e1ff;
      case 'saddlebrown':
        return 0x8b4513ff;
      case 'salmon':
        return 0xfa8072ff;
      case 'sandybrown':
        return 0xf4a460ff;
      case 'seagreen':
        return 0x2e8b57ff;
      case 'seashell':
        return 0xfff5eeff;
      case 'sienna':
        return 0xa0522dff;
      case 'silver':
        return 0xc0c0c0ff;
      case 'skyblue':
        return 0x87ceebff;
      case 'slateblue':
        return 0x6a5acdff;
      case 'slategray':
        return 0x708090ff;
      case 'slategrey':
        return 0x708090ff;
      case 'snow':
        return 0xfffafaff;
      case 'springgreen':
        return 0x00ff7fff;
      case 'steelblue':
        return 0x4682b4ff;
      case 'tan':
        return 0xd2b48cff;
      case 'teal':
        return 0x008080ff;
      case 'thistle':
        return 0xd8bfd8ff;
      case 'tomato':
        return 0xff6347ff;
      case 'turquoise':
        return 0x40e0d0ff;
      case 'violet':
        return 0xee82eeff;
      case 'wheat':
        return 0xf5deb3ff;
      case 'white':
        return 0xffffffff;
      case 'whitesmoke':
        return 0xf5f5f5ff;
      case 'yellow':
        return 0xffff00ff;
      case 'yellowgreen':
        return 0x9acd32ff;
    }
    return null;
  }
  module.exports = normalizeColor;
},282,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0]);
  var DeprecatedEdgeInsetsPropType = PropTypes.shape({
    bottom: PropTypes.number,
    left: PropTypes.number,
    right: PropTypes.number,
    top: PropTypes.number
  });
  module.exports = DeprecatedEdgeInsetsPropType;
},283,[284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    // By explicitly using `prop-types` you are opting into new production behavior.
    // http://fb.me/prop-types-in-prod
    module.exports = require(_dependencyMap[0])();
  }
},284,[285]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  'use strict';

  var ReactPropTypesSecret = require(_dependencyMap[0]);
  function emptyFunction() {}
  function emptyFunctionWithReset() {}
  emptyFunctionWithReset.resetWarningCache = emptyFunction;
  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        // It is still safe when called from React.
        return;
      }
      var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      err.name = 'Invariant Violation';
      throw err;
    }
    ;
    shim.isRequired = shim;
    function getShim() {
      return shim;
    }
    ;
    // Important!
    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
    var ReactPropTypes = {
      array: shim,
      bigint: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},285,[286]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},286,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = require(_dependencyMap[0]);
  var DeprecatedEdgeInsetsPropType = require(_dependencyMap[1]);
  var DeprecatedImageSourcePropType = require(_dependencyMap[2]);
  var DeprecatedImageStylePropTypes = require(_dependencyMap[3]);
  var DeprecatedStyleSheetPropType = require(_dependencyMap[4]);
  var DeprecatedViewPropTypes = require(_dependencyMap[5]);
  var PropTypes = require(_dependencyMap[6]);
  var DeprecatedImagePropType = {
    ...DeprecatedViewPropTypes,
    alt: PropTypes.string,
    blurRadius: PropTypes.number,
    capInsets: DeprecatedEdgeInsetsPropType,
    crossOrigin: PropTypes.oneOf(['anonymous', 'use-credentials']),
    defaultSource: DeprecatedImageSourcePropType,
    fadeDuration: PropTypes.number,
    height: PropTypes.number,
    internal_analyticTag: PropTypes.string,
    loadingIndicatorSource: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string
    }), PropTypes.number]),
    onError: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func,
    onLoadStart: PropTypes.func,
    onPartialLoad: PropTypes.func,
    onProgress: PropTypes.func,
    progressiveRenderingEnabled: PropTypes.bool,
    referrerPolicy: PropTypes.oneOf(['no-referrer', 'no-referrer-when-downgrade', 'origin', 'origin-when-cross-origin', 'same-origin', 'strict-origin', 'strict-origin-when-cross-origin', 'unsafe-url']),
    resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),
    resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'repeat', 'center']),
    source: DeprecatedImageSourcePropType,
    src: PropTypes.string,
    srcSet: PropTypes.string,
    style: DeprecatedStyleSheetPropType(DeprecatedImageStylePropTypes),
    testID: PropTypes.string,
    tintColor: DeprecatedColorPropType,
    width: PropTypes.number
  };
  module.exports = DeprecatedImagePropType;
},287,[281,283,288,289,293,295,284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0]);
  var ImageURISourcePropType = PropTypes.shape({
    body: PropTypes.string,
    bundle: PropTypes.string,
    cache: PropTypes.oneOf(['default', 'force-cache', 'only-if-cached', 'reload']),
    headers: PropTypes.objectOf(PropTypes.string),
    height: PropTypes.number,
    method: PropTypes.string,
    scale: PropTypes.number,
    uri: PropTypes.string,
    width: PropTypes.number
  });
  var ImageSourcePropType = PropTypes.oneOfType([ImageURISourcePropType, PropTypes.number, PropTypes.arrayOf(ImageURISourcePropType)]);
  module.exports = ImageSourcePropType;
},288,[284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = require(_dependencyMap[0]);
  var DeprecatedLayoutPropTypes = require(_dependencyMap[1]);
  var DeprecatedShadowPropTypesIOS = require(_dependencyMap[2]);
  var DeprecatedTransformPropTypes = require(_dependencyMap[3]);
  var PropTypes = require(_dependencyMap[4]);
  var DeprecatedImageStylePropTypes = {
    ...DeprecatedLayoutPropTypes,
    ...DeprecatedShadowPropTypesIOS,
    ...DeprecatedTransformPropTypes,
    backfaceVisibility: PropTypes.oneOf(['hidden', 'visible']),
    backgroundColor: DeprecatedColorPropType,
    borderBottomLeftRadius: PropTypes.number,
    borderBottomRightRadius: PropTypes.number,
    borderColor: DeprecatedColorPropType,
    borderRadius: PropTypes.number,
    borderTopLeftRadius: PropTypes.number,
    borderTopRightRadius: PropTypes.number,
    borderWidth: PropTypes.number,
    objectFit: PropTypes.oneOf(['contain', 'cover', 'fill', 'scale-down']),
    opacity: PropTypes.number,
    overflow: PropTypes.oneOf(['hidden', 'visible']),
    overlayColor: PropTypes.string,
    tintColor: DeprecatedColorPropType,
    resizeMode: PropTypes.oneOf(['center', 'contain', 'cover', 'repeat', 'stretch'])
  };
  module.exports = DeprecatedImageStylePropTypes;
},289,[281,290,291,292,284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0]);
  var DimensionValuePropType = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);
  var DeprecatedLayoutPropTypes = {
    alignContent: PropTypes.oneOf(['center', 'flex-end', 'flex-start', 'space-around', 'space-between', 'stretch']),
    alignItems: PropTypes.oneOf(['baseline', 'center', 'flex-end', 'flex-start', 'stretch']),
    alignSelf: PropTypes.oneOf(['auto', 'baseline', 'center', 'flex-end', 'flex-start', 'stretch']),
    aspectRatio: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    borderBottomWidth: PropTypes.number,
    borderEndWidth: PropTypes.number,
    borderLeftWidth: PropTypes.number,
    borderRightWidth: PropTypes.number,
    borderStartWidth: PropTypes.number,
    borderTopWidth: PropTypes.number,
    borderWidth: PropTypes.number,
    bottom: DimensionValuePropType,
    columnGap: PropTypes.number,
    direction: PropTypes.oneOf(['inherit', 'ltr', 'rtl']),
    display: PropTypes.oneOf(['flex', 'none']),
    end: DimensionValuePropType,
    flex: PropTypes.number,
    flexBasis: DimensionValuePropType,
    flexDirection: PropTypes.oneOf(['column', 'column-reverse', 'row', 'row-reverse']),
    flexGrow: PropTypes.number,
    flexShrink: PropTypes.number,
    flexWrap: PropTypes.oneOf(['nowrap', 'wrap', 'wrap-reverse']),
    gap: PropTypes.number,
    height: DimensionValuePropType,
    inset: DimensionValuePropType,
    insetBlock: DimensionValuePropType,
    insetBlockEnd: DimensionValuePropType,
    insetBlockStart: DimensionValuePropType,
    insetInline: DimensionValuePropType,
    insetInlineEnd: DimensionValuePropType,
    insetInlineStart: DimensionValuePropType,
    justifyContent: PropTypes.oneOf(['center', 'flex-end', 'flex-start', 'space-around', 'space-between', 'space-evenly']),
    left: DimensionValuePropType,
    margin: DimensionValuePropType,
    marginBlock: DimensionValuePropType,
    marginBlockEnd: DimensionValuePropType,
    marginBlockStart: DimensionValuePropType,
    marginBottom: DimensionValuePropType,
    marginEnd: DimensionValuePropType,
    marginHorizontal: DimensionValuePropType,
    marginInline: DimensionValuePropType,
    marginInlineEnd: DimensionValuePropType,
    marginInlineStart: DimensionValuePropType,
    marginLeft: DimensionValuePropType,
    marginRight: DimensionValuePropType,
    marginStart: DimensionValuePropType,
    marginTop: DimensionValuePropType,
    marginVertical: DimensionValuePropType,
    maxHeight: DimensionValuePropType,
    maxWidth: DimensionValuePropType,
    minHeight: DimensionValuePropType,
    minWidth: DimensionValuePropType,
    overflow: PropTypes.oneOf(['hidden', 'scroll', 'visible']),
    padding: DimensionValuePropType,
    paddingBlock: DimensionValuePropType,
    paddingBlockEnd: DimensionValuePropType,
    paddingBlockStart: DimensionValuePropType,
    paddingBottom: DimensionValuePropType,
    paddingEnd: DimensionValuePropType,
    paddingHorizontal: DimensionValuePropType,
    paddingInline: DimensionValuePropType,
    paddingInlineEnd: DimensionValuePropType,
    paddingInlineStart: DimensionValuePropType,
    paddingLeft: DimensionValuePropType,
    paddingRight: DimensionValuePropType,
    paddingStart: DimensionValuePropType,
    paddingTop: DimensionValuePropType,
    paddingVertical: DimensionValuePropType,
    position: PropTypes.oneOf(['absolute', 'relative']),
    right: DimensionValuePropType,
    rowGap: PropTypes.number,
    start: DimensionValuePropType,
    top: DimensionValuePropType,
    width: DimensionValuePropType,
    zIndex: PropTypes.number
  };
  module.exports = DeprecatedLayoutPropTypes;
},290,[284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = require(_dependencyMap[0]);
  var PropTypes = require(_dependencyMap[1]);
  var DeprecatedShadowPropTypesIOS = {
    shadowColor: DeprecatedColorPropType,
    shadowOffset: PropTypes.shape({
      height: PropTypes.number,
      width: PropTypes.number
    }),
    shadowOpacity: PropTypes.number,
    shadowRadius: PropTypes.number
  };
  module.exports = DeprecatedShadowPropTypesIOS;
},291,[281,284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0]);
  var DeprecatedTransformPropTypes = {
    transform: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({
      perspective: PropTypes.number
    }), PropTypes.shape({
      rotate: PropTypes.string
    }), PropTypes.shape({
      rotateX: PropTypes.string
    }), PropTypes.shape({
      rotateY: PropTypes.string
    }), PropTypes.shape({
      rotateZ: PropTypes.string
    }), PropTypes.shape({
      scale: PropTypes.number
    }), PropTypes.shape({
      scaleX: PropTypes.number
    }), PropTypes.shape({
      scaleY: PropTypes.number
    }), PropTypes.shape({
      skewX: PropTypes.string
    }), PropTypes.shape({
      skewY: PropTypes.string
    }), PropTypes.shape({
      translateX: PropTypes.number
    }), PropTypes.shape({
      translateY: PropTypes.number
    })]))
  };
  module.exports = DeprecatedTransformPropTypes;
},292,[284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var deprecatedCreateStrictShapeTypeChecker = require(_dependencyMap[0]);
  function DeprecatedStyleSheetPropType(shape) {
    var shapePropType = deprecatedCreateStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;
      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }
      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }
      return shapePropType(newProps, propName, componentName, location, ...rest);
    };
  }
  function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
      return undefined;
    }
    if (!Array.isArray(style)) {
      return style;
    }
    var result = {};
    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);
      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }
    return result;
  }
  module.exports = DeprecatedStyleSheetPropType;
},293,[294]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = require(_dependencyMap[0]);
  function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, `Required object \`${propName}\` was not specified in ` + `\`${componentName}\`.`);
        }
        return;
      }
      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';
      if (propType !== 'object') {
        invariant(false, `Invalid ${locationName} \`${propName}\` of type \`${propType}\` ` + `supplied to \`${componentName}\`, expected \`object\`.`);
      }
      var allKeys = {
        ...props[propName],
        ...shapeTypes
      };
      for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          invariant(false, `Invalid props.${propName} key \`${key}\` supplied to \`${componentName}\`.` + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, ...rest);
        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }
    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
        rest[_key2 - 4] = arguments[_key2];
      }
      return checkType(false, props, propName, componentName, location, ...rest);
    }
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  module.exports = deprecatedCreateStrictShapeTypeChecker;
},294,[46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedEdgeInsetsPropType = require(_dependencyMap[0]);
  var DeprecatedStyleSheetPropType = require(_dependencyMap[1]);
  var _require = require(_dependencyMap[2]),
    AccessibilityActionInfoPropType = _require.AccessibilityActionInfoPropType,
    AccessibilityRolePropType = _require.AccessibilityRolePropType,
    AccessibilityStatePropType = _require.AccessibilityStatePropType,
    AccessibilityValuePropType = _require.AccessibilityValuePropType,
    RolePropType = _require.RolePropType;
  var DeprecatedViewStylePropTypes = require(_dependencyMap[3]);
  var PropTypes = require(_dependencyMap[4]);
  var MouseEventPropTypes = {
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func
  };
  var PointerEventPropTypes = {
    onPointerEnter: PropTypes.func,
    onPointerEnterCapture: PropTypes.func,
    onPointerLeave: PropTypes.func,
    onPointerLeaveCapture: PropTypes.func,
    onPointerMove: PropTypes.func,
    onPointerMoveCapture: PropTypes.func,
    onPointerCancel: PropTypes.func,
    onPointerCancelCapture: PropTypes.func,
    onPointerDown: PropTypes.func,
    onPointerDownCapture: PropTypes.func,
    onPointerUp: PropTypes.func,
    onPointerUpCapture: PropTypes.func,
    onPointerOver: PropTypes.func,
    onPointerOverCapture: PropTypes.func,
    onPointerOut: PropTypes.func,
    onPointerOutCapture: PropTypes.func
  };
  var FocusEventPropTypes = {
    onBlur: PropTypes.func,
    onBlurCapture: PropTypes.func,
    onFocus: PropTypes.func,
    onFocusCapture: PropTypes.func
  };
  var TouchEventPropTypes = {
    onTouchCancel: PropTypes.func,
    onTouchCancelCapture: PropTypes.func,
    onTouchEnd: PropTypes.func,
    onTouchEndCapture: PropTypes.func,
    onTouchMove: PropTypes.func,
    onTouchMoveCapture: PropTypes.func,
    onTouchStart: PropTypes.func,
    onTouchStartCapture: PropTypes.func
  };
  var GestureResponderEventPropTypes = {
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    onResponderEnd: PropTypes.func,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderStart: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func
  };
  var DeprecatedViewPropTypes = {
    ...MouseEventPropTypes,
    ...PointerEventPropTypes,
    ...FocusEventPropTypes,
    ...TouchEventPropTypes,
    ...GestureResponderEventPropTypes,
    'aria-busy': PropTypes.bool,
    'aria-checked': PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['mixed'])]),
    'aria-disabled': PropTypes.bool,
    'aria-expanded': PropTypes.bool,
    'aria-hidden': PropTypes.bool,
    'aria-label': PropTypes.string,
    'aria-labelledby': PropTypes.string,
    'aria-live': PropTypes.oneOf(['polite', 'assertive', 'off']),
    'aria-modal': PropTypes.bool,
    'aria-selected': PropTypes.bool,
    'aria-valuemax': PropTypes.number,
    'aria-valuemin': PropTypes.number,
    'aria-valuenow': PropTypes.number,
    'aria-valuetext': PropTypes.string,
    accessibilityActions: PropTypes.arrayOf(AccessibilityActionInfoPropType),
    accessibilityElementsHidden: PropTypes.bool,
    accessibilityHint: PropTypes.string,
    accessibilityIgnoresInvertColors: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityLabelledBy: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
    accessibilityLanguage: PropTypes.string,
    accessibilityLiveRegion: PropTypes.oneOf(['assertive', 'none', 'polite']),
    accessibilityRole: AccessibilityRolePropType,
    accessibilityState: AccessibilityStatePropType,
    accessibilityValue: AccessibilityValuePropType,
    accessibilityViewIsModal: PropTypes.bool,
    accessible: PropTypes.bool,
    collapsable: PropTypes.bool,
    focusable: PropTypes.bool,
    hitSlop: PropTypes.oneOfType([DeprecatedEdgeInsetsPropType, PropTypes.number]),
    importantForAccessibility: PropTypes.oneOf(['auto', 'no', 'no-hide-descendants', 'yes']),
    nativeBackgroundAndroid: PropTypes.object,
    nativeForegroundAndroid: PropTypes.object,
    nativeID: PropTypes.string,
    needsOffscreenAlphaCompositing: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityEscape: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onClick: PropTypes.func,
    onLayout: PropTypes.func,
    onMagicTap: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['auto', 'box-none', 'box-only', 'none']),
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    role: RolePropType,
    shouldRasterizeIOS: PropTypes.bool,
    style: DeprecatedStyleSheetPropType(DeprecatedViewStylePropTypes),
    tabIndex: PropTypes.oneOf([0, -1]),
    testID: PropTypes.string
  };
  module.exports = DeprecatedViewPropTypes;
},295,[283,293,296,297,284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0]);
  var DeprecatedViewAccessibility = {
    AccessibilityRolePropType: PropTypes.oneOf(['adjustable', 'alert', 'button', 'checkbox', 'combobox', 'drawerlayout', 'dropdownlist', 'grid', 'header', 'horizontalscrollview', 'iconmenu', 'image', 'imagebutton', 'keyboardkey', 'link', 'list', 'menu', 'menubar', 'menuitem', 'none', 'pager', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'scrollview', 'search', 'slidingdrawer', 'spinbutton', 'summary', 'switch', 'tab', 'tabbar', 'tablist', 'text', 'timer', 'togglebutton', 'toolbar', 'viewgroup', 'webview']),
    AccessibilityStatePropType: PropTypes.object,
    AccessibilityActionInfoPropType: PropTypes.object,
    AccessibilityValuePropType: PropTypes.object,
    RolePropType: PropTypes.oneOf(['alert', 'alertdialog', 'application', 'article', 'banner', 'button', 'cell', 'checkbox', 'columnheader', 'combobox', 'complementary', 'contentinfo', 'definition', 'dialog', 'directory', 'document', 'feed', 'figure', 'form', 'grid', 'group', 'heading', 'img', 'link', 'list', 'listitem', 'log', 'main', 'marquee', 'math', 'menu', 'menubar', 'menuitem', 'meter', 'navigation', 'none', 'note', 'option', 'presentation', 'progressbar', 'radio', 'radiogroup', 'region', 'row', 'rowgroup', 'rowheader', 'scrollbar', 'searchbox', 'separator', 'slider', 'spinbutton', 'status', 'summary', 'switch', 'tab', 'table', 'tablist', 'tabpanel', 'term', 'timer', 'toolbar', 'tooltip', 'tree', 'treegrid', 'treeitem'])
  };
  module.exports = DeprecatedViewAccessibility;
},296,[284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = require(_dependencyMap[0]);
  var DeprecatedLayoutPropTypes = require(_dependencyMap[1]);
  var DeprecatedShadowPropTypesIOS = require(_dependencyMap[2]);
  var DeprecatedTransformPropTypes = require(_dependencyMap[3]);
  var PropTypes = require(_dependencyMap[4]);
  var DeprecatedViewStylePropTypes = {
    ...DeprecatedLayoutPropTypes,
    ...DeprecatedShadowPropTypesIOS,
    ...DeprecatedTransformPropTypes,
    backfaceVisibility: PropTypes.oneOf(['hidden', 'visible']),
    backgroundColor: DeprecatedColorPropType,
    borderBottomColor: DeprecatedColorPropType,
    borderBottomEndRadius: PropTypes.number,
    borderBottomLeftRadius: PropTypes.number,
    borderBottomRightRadius: PropTypes.number,
    borderBottomStartRadius: PropTypes.number,
    borderBottomWidth: PropTypes.number,
    borderColor: DeprecatedColorPropType,
    borderCurve: PropTypes.oneOf(['circular', 'continuous']),
    borderEndColor: DeprecatedColorPropType,
    borderEndEndRadius: PropTypes.number,
    borderEndStartRadius: PropTypes.number,
    borderLeftColor: DeprecatedColorPropType,
    borderLeftWidth: PropTypes.number,
    borderRadius: PropTypes.number,
    borderRightColor: DeprecatedColorPropType,
    borderRightWidth: PropTypes.number,
    borderStartColor: DeprecatedColorPropType,
    borderStartEndRadius: PropTypes.number,
    borderStartStartRadius: PropTypes.number,
    borderStyle: PropTypes.oneOf(['dashed', 'dotted', 'solid']),
    borderTopColor: DeprecatedColorPropType,
    borderTopEndRadius: PropTypes.number,
    borderTopLeftRadius: PropTypes.number,
    borderTopRightRadius: PropTypes.number,
    borderTopStartRadius: PropTypes.number,
    borderTopWidth: PropTypes.number,
    borderWidth: PropTypes.number,
    elevation: PropTypes.number,
    opacity: PropTypes.number,
    pointerEvents: PropTypes.oneOf(['auto', 'box-none', 'box-only', 'none'])
  };
  module.exports = DeprecatedViewStylePropTypes;
},297,[281,290,291,292,284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = require(_dependencyMap[0]);
  var PointPropType = PropTypes.shape({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},298,[284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = require(_dependencyMap[0]);
  var DeprecatedTextPropTypes = require(_dependencyMap[1]);
  var DeprecatedViewPropTypes = require(_dependencyMap[2]);
  var PropTypes = require(_dependencyMap[3]);
  var DataDetectorTypes = ['address', 'all', 'calendarEvent', 'link', 'none', 'phoneNumber'];
  var DeprecatedTextInputPropTypes = {
    ...DeprecatedViewPropTypes,
    allowFontScaling: PropTypes.bool,
    autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
    autoComplete: PropTypes.oneOf(['additional-name', 'address-line1', 'address-line2', 'bday', 'bday-day', 'bday-month', 'bday-year', 'birthdate-day', 'birthdate-full', 'birthdate-month', 'birthdate-year', 'cc-csc', 'cc-exp', 'cc-exp-day', 'cc-exp-month', 'cc-exp-year', 'cc-family-name', 'cc-given-name', 'cc-middle-name', 'cc-name', 'cc-number', 'cc-type', 'country', 'current-password', 'email', 'family-name', 'gender', 'given-name', 'honorific-prefix', 'honorific-suffix', 'name', 'name-family', 'name-given', 'name-middle', 'name-middle-initial', 'name-prefix', 'name-suffix', 'new-password', 'nickname', 'off', 'one-time-code', 'organization', 'organization-title', 'password', 'password-new', 'postal-address', 'postal-address-country', 'postal-address-extended', 'postal-address-extended-postal-code', 'postal-address-locality', 'postal-address-region', 'postal-code', 'sex', 'sms-otp', 'street-address', 'tel', 'tel-country-code', 'tel-device', 'tel-national', 'url', 'username', 'username-new']),
    autoCorrect: PropTypes.bool,
    autoFocus: PropTypes.bool,
    blurOnSubmit: PropTypes.bool,
    caretHidden: PropTypes.bool,
    clearButtonMode: PropTypes.oneOf(['always', 'never', 'unless-editing', 'while-editing']),
    clearTextOnFocus: PropTypes.bool,
    cursorColor: DeprecatedColorPropType,
    contextMenuHidden: PropTypes.bool,
    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
    defaultValue: PropTypes.string,
    disableFullscreenUI: PropTypes.bool,
    editable: PropTypes.bool,
    enablesReturnKeyAutomatically: PropTypes.bool,
    enterKeyHint: PropTypes.oneOf(['done', 'enter', 'go', 'next', 'previous', 'search', 'send']),
    inlineImageLeft: PropTypes.string,
    inlineImagePadding: PropTypes.number,
    inputAccessoryViewID: PropTypes.string,
    inputMode: PropTypes.oneOf(['decimal', 'email', 'none', 'numeric', 'search', 'tel', 'text', 'url']),
    keyboardAppearance: PropTypes.oneOf(['default', 'dark', 'light']),
    keyboardType: PropTypes.oneOf(['ascii-capable', 'ascii-capable-number-pad', 'decimal-pad', 'default', 'email-address', 'name-phone-pad', 'number-pad', 'numbers-and-punctuation', 'numeric', 'phone-pad', 'twitter', 'url', 'visible-password', 'web-search']),
    lineBreakStrategyIOS: PropTypes.oneOf(['hangul-word', 'none', 'push-out', 'standard']),
    maxFontSizeMultiplier: PropTypes.number,
    maxLength: PropTypes.number,
    multiline: PropTypes.bool,
    numberOfLines: PropTypes.number,
    onBlur: PropTypes.func,
    onChange: PropTypes.func,
    onChangeText: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    onEndEditing: PropTypes.func,
    onFocus: PropTypes.func,
    onKeyPress: PropTypes.func,
    onLayout: PropTypes.func,
    onScroll: PropTypes.func,
    onSelectionChange: PropTypes.func,
    onSubmitEditing: PropTypes.func,
    onTextInput: PropTypes.func,
    placeholder: PropTypes.string,
    placeholderTextColor: DeprecatedColorPropType,
    readOnly: PropTypes.bool,
    rejectResponderTermination: PropTypes.bool,
    returnKeyLabel: PropTypes.string,
    returnKeyType: PropTypes.oneOf(['default', 'done', 'emergency-call', 'go', 'google', 'join', 'next', 'none', 'previous', 'route', 'search', 'send', 'yahoo']),
    rows: PropTypes.number,
    scrollEnabled: PropTypes.bool,
    secureTextEntry: PropTypes.bool,
    selection: PropTypes.shape({
      end: PropTypes.number,
      start: PropTypes.number.isRequired
    }),
    selectionColor: DeprecatedColorPropType,
    selectTextOnFocus: PropTypes.bool,
    showSoftInputOnFocus: PropTypes.bool,
    spellCheck: PropTypes.bool,
    style: DeprecatedTextPropTypes.style,
    submitBehavior: PropTypes.oneOf(['blurAndSubmit', 'newline', 'submit']),
    textBreakStrategy: PropTypes.oneOf(['balanced', 'highQuality', 'simple']),
    textContentType: PropTypes.oneOf(['addressCity', 'addressCityAndState', 'addressState', 'birthdate', 'birthdateDay', 'birthdateMonth', 'birthdateYear', 'countryName', 'creditCardExpiration', 'creditCardExpirationMonth', 'creditCardExpirationYear', 'creditCardFamilyName', 'creditCardGivenName', 'creditCardMiddleName', 'creditCardName', 'creditCardNumber', 'creditCardSecurityCode', 'creditCardType', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'newPassword', 'nickname', 'none', 'oneTimeCode', 'organizationName', 'password', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'URL', 'username']),
    underlineColorAndroid: DeprecatedColorPropType,
    value: PropTypes.string
  };
  module.exports = DeprecatedTextInputPropTypes;
},299,[281,300,295,284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = require(_dependencyMap[0]);
  var DeprecatedEdgeInsetsPropType = require(_dependencyMap[1]);
  var DeprecatedStyleSheetPropType = require(_dependencyMap[2]);
  var DeprecatedTextStylePropTypes = require(_dependencyMap[3]);
  var _require = require(_dependencyMap[4]),
    AccessibilityActionInfoPropType = _require.AccessibilityActionInfoPropType,
    AccessibilityRolePropType = _require.AccessibilityRolePropType,
    AccessibilityStatePropType = _require.AccessibilityStatePropType,
    AccessibilityValuePropType = _require.AccessibilityValuePropType,
    RolePropType = _require.RolePropType;
  var PropTypes = require(_dependencyMap[5]);
  var DeprecatedTextPropTypes = {
    'aria-busy': PropTypes.bool,
    'aria-checked': PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['mixed'])]),
    'aria-disabled': PropTypes.bool,
    'aria-expanded': PropTypes.bool,
    'aria-label': PropTypes.string,
    'aria-labelledby': PropTypes.string,
    'aria-selected': PropTypes.bool,
    accessibilityActions: PropTypes.arrayOf(AccessibilityActionInfoPropType),
    accessibilityHint: PropTypes.string,
    accessibilityLabel: PropTypes.string,
    accessibilityLanguage: PropTypes.string,
    accessibilityRole: AccessibilityRolePropType,
    accessibilityState: AccessibilityStatePropType,
    accessible: PropTypes.bool,
    adjustsFontSizeToFit: PropTypes.bool,
    allowFontScaling: PropTypes.bool,
    dataDetectorType: PropTypes.oneOf(['all', 'email', 'link', 'none', 'phoneNumber']),
    disabled: PropTypes.bool,
    dynamicTypeRamp: PropTypes.oneOf(['body', 'callout', 'caption1', 'caption2', 'footnote', 'headline', 'largeTitle', 'subheadline', 'title1', 'title2', 'title3']),
    ellipsizeMode: PropTypes.oneOf(['clip', 'head', 'middle', 'tail']),
    id: PropTypes.string,
    lineBreakStrategyIOS: PropTypes.oneOf(['hangul-word', 'none', 'push-out', 'standard']),
    maxFontSizeMultiplier: PropTypes.number,
    minimumFontScale: PropTypes.number,
    nativeID: PropTypes.string,
    numberOfLines: PropTypes.number,
    onAccessibilityAction: PropTypes.func,
    onLayout: PropTypes.func,
    onLongPress: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onPress: PropTypes.func,
    onPressIn: PropTypes.func,
    onPressOut: PropTypes.func,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onTextLayout: PropTypes.func,
    pressRetentionOffset: DeprecatedEdgeInsetsPropType,
    role: RolePropType,
    selectable: PropTypes.bool,
    selectionColor: DeprecatedColorPropType,
    style: DeprecatedStyleSheetPropType(DeprecatedTextStylePropTypes),
    suppressHighlighting: PropTypes.bool,
    testID: PropTypes.string,
    textBreakStrategy: PropTypes.oneOf(['balanced', 'highQuality', 'simple'])
  };
  module.exports = DeprecatedTextPropTypes;
},300,[281,283,293,301,296,284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = require(_dependencyMap[0]);
  var DeprecatedViewStylePropTypes = require(_dependencyMap[1]);
  var PropTypes = require(_dependencyMap[2]);
  var DeprecatedTextStylePropTypes = {
    ...DeprecatedViewStylePropTypes,
    color: DeprecatedColorPropType,
    fontFamily: PropTypes.string,
    fontSize: PropTypes.number,
    fontStyle: PropTypes.oneOf(['italic', 'normal']),
    fontVariant: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOf(['lining-nums', 'oldstyle-nums', 'proportional-nums', 'small-caps', 'stylistic-eight', 'stylistic-eighteen', 'stylistic-eleven', 'stylistic-fifteen', 'stylistic-five', 'stylistic-four', 'stylistic-fourteen', 'stylistic-nine', 'stylistic-nineteen', 'stylistic-one', 'stylistic-seven', 'stylistic-seventeen', 'stylistic-six', 'stylistic-sixteen', 'stylistic-ten', 'stylistic-thirteen', 'stylistic-three', 'stylistic-twelve', 'stylistic-twenty', 'stylistic-two', 'tabular-nums'])), PropTypes.string]),
    fontWeight: PropTypes.oneOf(['100', '200', '300', '400', '500', '600', '700', '800', '900', 'black', 'bold', 'condensed', 'condensedBold', 'heavy', 'light', 'medium', 'normal', 'regular', 'semibold', 'thin', 'ultralight', 100, 200, 300, 400, 500, 600, 700, 800, 900]),
    includeFontPadding: PropTypes.bool,
    letterSpacing: PropTypes.number,
    lineHeight: PropTypes.number,
    textAlign: PropTypes.oneOf(['auto', 'center', 'justify', 'left', 'right']),
    textAlignVertical: PropTypes.oneOf(['auto', 'bottom', 'center', 'top']),
    textDecorationColor: DeprecatedColorPropType,
    textDecorationLine: PropTypes.oneOf(['line-through', 'none', 'underline line-through', 'underline']),
    textDecorationStyle: PropTypes.oneOf(['dashed', 'dotted', 'double', 'solid']),
    textShadowColor: DeprecatedColorPropType,
    textShadowOffset: PropTypes.shape({
      height: PropTypes.number,
      width: PropTypes.number
    }),
    textShadowRadius: PropTypes.number,
    textTransform: PropTypes.oneOf(['capitalize', 'lowercase', 'none', 'uppercase']),
    userSelect: PropTypes.oneOf(['all', 'auto', 'contain', 'none', 'text']),
    verticalAlign: PropTypes.oneOf(['auto', 'bottom', 'middle', 'top']),
    writingDirection: PropTypes.oneOf(['auto', 'ltr', 'rtl'])
  };
  module.exports = DeprecatedTextStylePropTypes;
},301,[281,297,284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _View = _interopRequireDefault(require(_dependencyMap[7]));
  var _Pressability = _interopRequireDefault(require(_dependencyMap[8]));
  var _PressabilityDebug = require(_dependencyMap[9]);
  var _RendererProxy = require(_dependencyMap[10]);
  var _processColor = _interopRequireDefault(require(_dependencyMap[11]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[12]));
  var _ViewNativeComponent = require(_dependencyMap[13]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[14]));
  var React = _interopRequireWildcard(require(_dependencyMap[15]));
  var _jsxRuntime = require(_dependencyMap[16]);
  var _excluded = ["onBlur", "onFocus"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var TouchableNativeFeedback = /*#__PURE__*/function (_React$Component) {
    function TouchableNativeFeedback() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableNativeFeedback);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, TouchableNativeFeedback, [...args]);
      _this.state = {
        pressability: new _Pressability.default(_this._createPressabilityConfig())
      };
      return _this;
    }
    (0, _inherits2.default)(TouchableNativeFeedback, _React$Component);
    return (0, _createClass2.default)(TouchableNativeFeedback, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        var accessibilityStateDisabled = this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled;
        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled != null ? this.props.disabled : accessibilityStateDisabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          android_disableSound: this.props.touchSoundDisabled,
          onLongPress: this.props.onLongPress,
          onPress: this.props.onPress,
          onPressIn: event => {
            if (this.props.onPressIn != null) {
              this.props.onPressIn(event);
            }
          },
          onPressMove: event => {},
          onPressOut: event => {
            if (this.props.onPressOut != null) {
              this.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_dispatchPressedStateChange",
      value: function _dispatchPressedStateChange(pressed) {}
    }, {
      key: "_dispatchHotspotUpdate",
      value: function _dispatchHotspotUpdate(event) {}
    }, {
      key: "render",
      value: function render() {
        var element = React.Children.only(this.props.children);
        var children = [element.props.children];
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var _accessibilityState = {
          busy: this.props['aria-busy'] ?? this.props.accessibilityState?.busy,
          checked: this.props['aria-checked'] ?? this.props.accessibilityState?.checked,
          disabled: this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,
          expanded: this.props['aria-expanded'] ?? this.props.accessibilityState?.expanded,
          selected: this.props['aria-selected'] ?? this.props.accessibilityState?.selected
        };
        _accessibilityState = this.props.disabled != null ? {
          ..._accessibilityState,
          disabled: this.props.disabled
        } : _accessibilityState;
        var accessibilityValue = {
          max: this.props['aria-valuemax'] ?? this.props.accessibilityValue?.max,
          min: this.props['aria-valuemin'] ?? this.props.accessibilityValue?.min,
          now: this.props['aria-valuenow'] ?? this.props.accessibilityValue?.now,
          text: this.props['aria-valuetext'] ?? this.props.accessibilityValue?.text
        };
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
        var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
        return /*#__PURE__*/React.cloneElement(element, {
          ...eventHandlersWithoutBlurAndFocus,
          ...getBackgroundProp(this.props.background === undefined ? TouchableNativeFeedback.SelectableBackground() : this.props.background, this.props.useForeground === true),
          accessible: this.props.accessible !== false,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityLanguage: this.props.accessibilityLanguage,
          accessibilityLabel: accessibilityLabel,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: _accessibilityState,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          accessibilityValue: accessibilityValue,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
          accessibilityLiveRegion: accessibilityLiveRegion,
          accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          hitSlop: this.props.hitSlop,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
          nativeID: this.props.id ?? this.props.nativeID,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          onLayout: this.props.onLayout,
          testID: this.props.testID
        }, ...children);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.state.pressability.reset();
      }
    }]);
  }(React.Component);
  TouchableNativeFeedback.SelectableBackground = rippleRadius => ({
    type: 'ThemeAttrAndroid',
    attribute: 'selectableItemBackground',
    rippleRadius
  });
  TouchableNativeFeedback.SelectableBackgroundBorderless = rippleRadius => ({
    type: 'ThemeAttrAndroid',
    attribute: 'selectableItemBackgroundBorderless',
    rippleRadius
  });
  TouchableNativeFeedback.Ripple = (color, borderless, rippleRadius) => {
    var processedColor = (0, _processColor.default)(color);
    (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
    return {
      type: 'RippleAndroid',
      color: processedColor,
      borderless,
      rippleRadius
    };
  };
  TouchableNativeFeedback.canUseNativeForeground = () => false;
  var getBackgroundProp = (background, useForeground) => null;
  TouchableNativeFeedback.displayName = 'TouchableNativeFeedback';
  module.exports = TouchableNativeFeedback;
},302,[1,203,10,11,50,52,55,240,274,271,61,91,81,242,46,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Animated = _interopRequireDefault(require(_dependencyMap[7]));
  var _Easing = _interopRequireDefault(require(_dependencyMap[8]));
  var _Pressability = _interopRequireDefault(require(_dependencyMap[9]));
  var _PressabilityDebug = require(_dependencyMap[10]);
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[11]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[12]));
  var React = _interopRequireWildcard(require(_dependencyMap[13]));
  var _jsxRuntime = require(_dependencyMap[14]);
  var _excluded = ["onBlur", "onFocus"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var TouchableOpacity = /*#__PURE__*/function (_React$Component) {
    function TouchableOpacity() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableOpacity);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, TouchableOpacity, [...args]);
      _this.state = {
        anim: new _Animated.default.Value(_this._getChildStyleOpacityWithDefault()),
        pressability: new _Pressability.default(_this._createPressabilityConfig())
      };
      return _this;
    }
    (0, _inherits2.default)(TouchableOpacity, _React$Component);
    return (0, _createClass2.default)(TouchableOpacity, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled ?? this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          onBlur: event => {
            if (_Platform.default.isTV) {
              this._opacityInactive(250);
            }
            if (this.props.onBlur != null) {
              this.props.onBlur(event);
            }
          },
          onFocus: event => {
            if (_Platform.default.isTV) {
              this._opacityActive(150);
            }
            if (this.props.onFocus != null) {
              this.props.onFocus(event);
            }
          },
          onLongPress: this.props.onLongPress,
          onPress: this.props.onPress,
          onPressIn: event => {
            this._opacityActive(event.dispatchConfig.registrationName === 'onResponderGrant' ? 0 : 150);
            if (this.props.onPressIn != null) {
              this.props.onPressIn(event);
            }
          },
          onPressOut: event => {
            this._opacityInactive(250);
            if (this.props.onPressOut != null) {
              this.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_setOpacityTo",
      value: function _setOpacityTo(toValue, duration) {
        _Animated.default.timing(this.state.anim, {
          toValue,
          duration,
          easing: _Easing.default.inOut(_Easing.default.quad),
          useNativeDriver: true
        }).start();
      }
    }, {
      key: "_opacityActive",
      value: function _opacityActive(duration) {
        this._setOpacityTo(this.props.activeOpacity ?? 0.2, duration);
      }
    }, {
      key: "_opacityInactive",
      value: function _opacityInactive(duration) {
        this._setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
      }
    }, {
      key: "_getChildStyleOpacityWithDefault",
      value: function _getChildStyleOpacityWithDefault() {
        var opacity = (0, _flattenStyle.default)(this.props.style)?.opacity;
        return typeof opacity === 'number' ? opacity : 1;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var _accessibilityState = {
          busy: this.props['aria-busy'] ?? this.props.accessibilityState?.busy,
          checked: this.props['aria-checked'] ?? this.props.accessibilityState?.checked,
          disabled: this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,
          expanded: this.props['aria-expanded'] ?? this.props.accessibilityState?.expanded,
          selected: this.props['aria-selected'] ?? this.props.accessibilityState?.selected
        };
        _accessibilityState = this.props.disabled != null ? {
          ..._accessibilityState,
          disabled: this.props.disabled
        } : _accessibilityState;
        var accessibilityValue = {
          max: this.props['aria-valuemax'] ?? this.props.accessibilityValue?.max,
          min: this.props['aria-valuemin'] ?? this.props.accessibilityValue?.min,
          now: this.props['aria-valuenow'] ?? this.props.accessibilityValue?.now,
          text: this.props['aria-valuetext'] ?? this.props.accessibilityValue?.text
        };
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
        var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Animated.default.View, {
          accessible: this.props.accessible !== false,
          accessibilityLabel: accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityLanguage: this.props.accessibilityLanguage,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: _accessibilityState,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          accessibilityValue: accessibilityValue,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
          accessibilityLiveRegion: accessibilityLiveRegion,
          accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
          style: [this.props.style, {
            opacity: this.state.anim
          }],
          nativeID: this.props.id ?? this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          hitSlop: this.props.hitSlop,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined,
          ref: this.props.hostRef,
          ...eventHandlersWithoutBlurAndFocus,
          children: [this.props.children, null]
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
        if (this.props.disabled !== prevProps.disabled || (0, _flattenStyle.default)(prevProps.style)?.opacity !== (0, _flattenStyle.default)(this.props.style)?.opacity) {
          this._opacityInactive(250);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.state.pressability.reset();
      }
    }]);
  }(React.Component);
  var Touchable = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableOpacity, {
    ...props,
    hostRef: ref
  }));
  Touchable.displayName = 'TouchableOpacity';
  module.exports = Touchable;
},303,[1,203,10,11,50,52,55,304,315,274,271,131,81,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  var _AnimatedImplementation = _interopRequireDefault(require(_dependencyMap[2]));
  var _AnimatedMock = _interopRequireDefault(require(_dependencyMap[3]));
  var Animated = _Platform.default.isDisableAnimations ? _AnimatedMock.default : _AnimatedImplementation.default;
  var _default = exports.default = {
    get FlatList() {
      return require(_dependencyMap[4]).default;
    },
    get Image() {
      return require(_dependencyMap[5]).default;
    },
    get ScrollView() {
      return require(_dependencyMap[6]).default;
    },
    get SectionList() {
      return require(_dependencyMap[7]).default;
    },
    get Text() {
      return require(_dependencyMap[8]).default;
    },
    get View() {
      return require(_dependencyMap[9]).default;
    },
    ...Animated
  };
},304,[1,81,305,342,343,362,371,391,393,394]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _AnimatedEvent = require(_dependencyMap[1]);
  var _DecayAnimation = _interopRequireDefault(require(_dependencyMap[2]));
  var _SpringAnimation = _interopRequireDefault(require(_dependencyMap[3]));
  var _TimingAnimation = _interopRequireDefault(require(_dependencyMap[4]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[5]));
  var _AnimatedAddition = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedColor = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedDiffClamp = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedDivision = _interopRequireDefault(require(_dependencyMap[9]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[10]));
  var _AnimatedModulo = _interopRequireDefault(require(_dependencyMap[11]));
  var _AnimatedMultiplication = _interopRequireDefault(require(_dependencyMap[12]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[13]));
  var _AnimatedSubtraction = _interopRequireDefault(require(_dependencyMap[14]));
  var _AnimatedTracking = _interopRequireDefault(require(_dependencyMap[15]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[16]));
  var _AnimatedValueXY = _interopRequireDefault(require(_dependencyMap[17]));
  var add = function (a, b) {
    return new _AnimatedAddition.default(a, b);
  };
  var subtract = function (a, b) {
    return new _AnimatedSubtraction.default(a, b);
  };
  var divide = function (a, b) {
    return new _AnimatedDivision.default(a, b);
  };
  var multiply = function (a, b) {
    return new _AnimatedMultiplication.default(a, b);
  };
  var modulo = function (a, modulus) {
    return new _AnimatedModulo.default(a, modulus);
  };
  var diffClamp = function (a, min, max) {
    return new _AnimatedDiffClamp.default(a, min, max);
  };
  var _combineCallbacks = function (callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete(...arguments);
        callback && callback(...arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };
  var maybeVectorAnim = function (value, config, anim) {
    if (value instanceof _AnimatedValueXY.default) {
      var configX = {
        ...config
      };
      var configY = {
        ...config
      };
      for (var key in config) {
        var _config$key = config[key],
          x = _config$key.x,
          y = _config$key.y;
        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }
      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    } else if (value instanceof _AnimatedColor.default) {
      var configR = {
        ...config
      };
      var configG = {
        ...config
      };
      var configB = {
        ...config
      };
      var configA = {
        ...config
      };
      for (var _key in config) {
        var _config$_key = config[_key],
          r = _config$_key.r,
          g = _config$_key.g,
          b = _config$_key.b,
          a = _config$_key.a;
        if (r !== undefined && g !== undefined && b !== undefined && a !== undefined) {
          configR[_key] = r;
          configG[_key] = g;
          configB[_key] = b;
          configA[_key] = a;
        }
      }
      var aR = anim(value.r, configR);
      var aG = anim(value.g, configG);
      var aB = anim(value.b, configB);
      var aA = anim(value.a, configA);
      return parallel([aR, aG, aB, aA], {
        stopTogether: false
      });
    }
    return null;
  };
  var spring = function (value, config) {
    var start = function (animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      if (configuration.toValue instanceof _AnimatedNode.default) {
        singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _SpringAnimation.default, singleConfig, callback));
      } else {
        singleValue.animate(new _SpringAnimation.default(singleConfig), callback);
      }
    };
    return maybeVectorAnim(value, config, spring) || {
      start: function (callback) {
        start(value, config, callback);
      },
      stop: function () {
        value.stopAnimation();
      },
      reset: function () {
        value.resetAnimation();
      },
      _startNativeLoop: function (iterations) {
        var singleConfig = {
          ...config,
          iterations
        };
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function () {
        return config.useNativeDriver || false;
      }
    };
  };
  var timing = function (value, config) {
    var start = function (animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      if (configuration.toValue instanceof _AnimatedNode.default) {
        singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _TimingAnimation.default, singleConfig, callback));
      } else {
        singleValue.animate(new _TimingAnimation.default(singleConfig), callback);
      }
    };
    return maybeVectorAnim(value, config, timing) || {
      start: function (callback) {
        start(value, config, callback);
      },
      stop: function () {
        value.stopAnimation();
      },
      reset: function () {
        value.resetAnimation();
      },
      _startNativeLoop: function (iterations) {
        var singleConfig = {
          ...config,
          iterations
        };
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function () {
        return config.useNativeDriver || false;
      }
    };
  };
  var decay = function (value, config) {
    var start = function (animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new _DecayAnimation.default(singleConfig), callback);
    };
    return maybeVectorAnim(value, config, decay) || {
      start: function (callback) {
        start(value, config, callback);
      },
      stop: function () {
        value.stopAnimation();
      },
      reset: function () {
        value.resetAnimation();
      },
      _startNativeLoop: function (iterations) {
        var singleConfig = {
          ...config,
          iterations
        };
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function () {
        return config.useNativeDriver || false;
      }
    };
  };
  var sequence = function (animations) {
    var current = 0;
    return {
      start: function (callback) {
        var onComplete = function (result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }
          current++;
          if (current === animations.length) {
            callback && callback(result);
            return;
          }
          animations[current].start(onComplete);
        };
        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function () {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function () {
        animations.forEach((animation, idx) => {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function () {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function () {
        return false;
      }
    };
  };
  var parallel = function (animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function (callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }
        animations.forEach((animation, idx) => {
          var cb = function (endResult) {
            hasEnded[idx] = true;
            doneCount++;
            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }
            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };
          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function () {
        animations.forEach((animation, idx) => {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function () {
        animations.forEach((animation, idx) => {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function () {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function () {
        return false;
      }
    };
    return result;
  };
  var delay = function (time) {
    return timing(new _AnimatedValue.default(0), {
      toValue: 0,
      delay: time,
      duration: 0,
      useNativeDriver: false
    });
  };
  var stagger = function (time, animations) {
    return parallel(animations.map((animation, i) => {
      return sequence([delay(time * i), animation]);
    }));
  };
  var loop = function (animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$iterations = _ref.iterations,
      iterations = _ref$iterations === undefined ? -1 : _ref$iterations,
      _ref$resetBeforeItera = _ref.resetBeforeIteration,
      resetBeforeIteration = _ref$resetBeforeItera === undefined ? true : _ref$resetBeforeItera;
    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function (callback) {
        var restart = function () {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };
          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            resetBeforeIteration && animation.reset();
            animation.start(restart);
          }
        };
        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function () {
        isFinished = true;
        animation.stop();
      },
      reset: function () {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function () {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function () {
        return animation._isUsingNativeDriver();
      }
    };
  };
  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof _AnimatedEvent.AnimatedEvent) {
      event.__addListener(listener);
      return event;
    } else {
      return function () {
        typeof event === 'function' && event(...arguments);
        listener(...arguments);
      };
    }
  }
  function unforkEvent(event, listener) {
    if (event && event instanceof _AnimatedEvent.AnimatedEvent) {
      event.__removeListener(listener);
    }
  }
  var event = function (argMapping, config) {
    var animatedEvent = new _AnimatedEvent.AnimatedEvent(argMapping, config);
    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };
  var _default = exports.default = {
    Value: _AnimatedValue.default,
    ValueXY: _AnimatedValueXY.default,
    Color: _AnimatedColor.default,
    Interpolation: _AnimatedInterpolation.default,
    Node: _AnimatedNode.default,
    decay,
    timing,
    spring,
    add,
    subtract,
    divide,
    multiply,
    modulo,
    diffClamp,
    delay,
    sequence,
    parallel,
    stagger,
    loop,
    event,
    createAnimatedComponent: _createAnimatedComponent.default,
    attachNativeEvent: _AnimatedEvent.attachNativeEvent,
    forkEvent,
    unforkEvent,
    Event: _AnimatedEvent.AnimatedEvent
  };
},305,[1,306,320,327,329,330,335,322,336,337,314,338,339,318,340,341,311,319]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AnimatedEvent = undefined;
  exports.attachNativeEvent = attachNativeEvent;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _RendererProxy = require(_dependencyMap[3]);
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[4]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[5]));
  var _AnimatedValueXY = _interopRequireDefault(require(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  function attachNativeEvent(viewRef, eventName, argMapping, platformConfig) {
    var eventMappings = [];
    var traverse = (value, path) => {
      if (value instanceof _AnimatedValue.default) {
        value.__makeNative(platformConfig);
        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (value instanceof _AnimatedValueXY.default) {
        traverse(value.x, path.concat('x'));
        traverse(value.y, path.concat('y'));
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };
    (0, _invariant.default)(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = (0, _RendererProxy.findNodeHandle)(viewRef);
    if (viewTag != null) {
      eventMappings.forEach(mapping => {
        _NativeAnimatedHelper.default.API.addAnimatedEventToView(viewTag, eventName, mapping);
      });
    }
    return {
      detach() {
        if (viewTag != null) {
          eventMappings.forEach(mapping => {
            _NativeAnimatedHelper.default.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
          });
        }
      }
    };
  }
  var AnimatedEvent = exports.AnimatedEvent = /*#__PURE__*/function () {
    function AnimatedEvent(argMapping, config) {
      var _this = this;
      (0, _classCallCheck2.default)(this, AnimatedEvent);
      this._listeners = [];
      this._callListeners = function () {
        for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
          args[_key2] = arguments[_key2];
        }
        _this._listeners.forEach(listener => listener(...args));
      };
      this._argMapping = argMapping;
      if (config == null) {
        console.warn('Animated.event now requires a second argument for options');
        config = {
          useNativeDriver: false
        };
      }
      if (config.listener) {
        this.__addListener(config.listener);
      }
      this._attachedEvent = null;
      this.__isNative = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
      this.__platformConfig = config.platformConfig;
    }
    return (0, _createClass2.default)(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(listener => listener !== callback);
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        (0, _invariant.default)(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping, this.__platformConfig);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        (0, _invariant.default)(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this2 = this;
        if (this.__isNative) {
          {
            return this._callListeners;
          }
        }
        var validatedMapping = false;
        return function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
            args[_key4] = arguments[_key4];
          }
          var traverse = (recMapping, recEvt) => {
            if (recMapping instanceof _AnimatedValue.default) {
              if (typeof recEvt === 'number') {
                recMapping.setValue(recEvt);
              }
            } else if (recMapping instanceof _AnimatedValueXY.default) {
              if (typeof recEvt === 'object') {
                traverse(recMapping.x, recEvt.x);
                traverse(recMapping.y, recEvt.y);
              }
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey]);
              }
            }
          };
          _this2._argMapping.forEach((mapping, idx) => {
            traverse(mapping, args[idx]);
          });
          _this2._callListeners(...args);
        };
      }
    }]);
  }();
},306,[1,10,11,61,307,311,319,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[2]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativeAnimatedModule = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeAnimatedTurboModule = _interopRequireDefault(require(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  var NativeAnimatedModule = _NativeAnimatedModule.default ?? _NativeAnimatedTurboModule.default;
  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter;
  var waitingForQueuedOperations = new Set();
  var queueOperations = false;
  var queue = [];
  var singleOpQueue = [];
  var useSingleOpBatching = false;
  var flushQueueTimeout = null;
  var eventListenerGetValueCallbacks = {};
  var eventListenerAnimationFinishedCallbacks = {};
  var globalEventEmitterGetValueListener = null;
  var globalEventEmitterAnimationFinishedListener = null;
  var nativeOps = NativeAnimatedModule;
  var API = {
    getValue: function (tag, saveValueCallback) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      {
        API.queueOperation(nativeOps.getValue, tag, saveValueCallback);
      }
    },
    setWaitingForIdentifier: function (id) {
      waitingForQueuedOperations.add(id);
      queueOperations = true;
      if (_ReactNativeFeatureFlags.default.animatedShouldDebounceQueueFlush() && flushQueueTimeout) {
        clearTimeout(flushQueueTimeout);
      }
    },
    unsetWaitingForIdentifier: function (id) {
      waitingForQueuedOperations.delete(id);
      if (waitingForQueuedOperations.size === 0) {
        queueOperations = false;
        API.disableQueue();
      }
    },
    disableQueue: function () {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      if (_ReactNativeFeatureFlags.default.animatedShouldDebounceQueueFlush()) {
        var prevTimeout = flushQueueTimeout;
        clearImmediate(prevTimeout);
        flushQueueTimeout = setImmediate(API.flushQueue);
      } else {
        API.flushQueue();
      }
    },
    flushQueue: function () {
      (0, _invariant.default)(NativeAnimatedModule || false, 'Native animated module is not available');
      flushQueueTimeout = null;
      if (queue.length === 0) {
        return;
      }
      {
        false;
        for (var q = 0, l = queue.length; q < l; q++) {
          queue[q]();
        }
        queue.length = 0;
        false;
      }
    },
    queueOperation: function (fn) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (queueOperations || queue.length !== 0) {
        queue.push(() => fn(...args));
      } else {
        fn(...args);
      }
    },
    createAnimatedNode: function (tag, config) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.createAnimatedNode, tag, config);
    },
    updateAnimatedNodeConfig: function (tag, config) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      if (nativeOps.updateAnimatedNodeConfig) {
        API.queueOperation(nativeOps.updateAnimatedNodeConfig, tag, config);
      }
    },
    startListeningToAnimatedNodeValue: function (tag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.startListeningToAnimatedNodeValue, tag);
    },
    stopListeningToAnimatedNodeValue: function (tag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.stopListeningToAnimatedNodeValue, tag);
    },
    connectAnimatedNodes: function (parentTag, childTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.connectAnimatedNodes, parentTag, childTag);
    },
    disconnectAnimatedNodes: function (parentTag, childTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.disconnectAnimatedNodes, parentTag, childTag);
    },
    startAnimatingNode: function (animationId, nodeTag, config, endCallback) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      {
        API.queueOperation(nativeOps.startAnimatingNode, animationId, nodeTag, config, endCallback);
      }
    },
    stopAnimation: function (animationId) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.stopAnimation, animationId);
    },
    setAnimatedNodeValue: function (nodeTag, value) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.setAnimatedNodeValue, nodeTag, value);
    },
    setAnimatedNodeOffset: function (nodeTag, offset) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.setAnimatedNodeOffset, nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function (nodeTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.flattenAnimatedNodeOffset, nodeTag);
    },
    extractAnimatedNodeOffset: function (nodeTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.extractAnimatedNodeOffset, nodeTag);
    },
    connectAnimatedNodeToView: function (nodeTag, viewTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.connectAnimatedNodeToView, nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function (nodeTag, viewTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.disconnectAnimatedNodeFromView, nodeTag, viewTag);
    },
    restoreDefaultValues: function (nodeTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      if (nativeOps.restoreDefaultValues != null) {
        API.queueOperation(nativeOps.restoreDefaultValues, nodeTag);
      }
    },
    dropAnimatedNode: function (tag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.dropAnimatedNode, tag);
    },
    addAnimatedEventToView: function (viewTag, eventName, eventMapping) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.addAnimatedEventToView, viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      (0, _invariant.default)(nativeOps, 'Native animated module is not available');
      API.queueOperation(nativeOps.removeAnimatedEventFromView, viewTag, eventName, animatedNodeTag);
    }
  };
  var SUPPORTED_COLOR_STYLES = {
    backgroundColor: true,
    borderBottomColor: true,
    borderColor: true,
    borderEndColor: true,
    borderLeftColor: true,
    borderRightColor: true,
    borderStartColor: true,
    borderTopColor: true,
    color: true,
    tintColor: true
  };
  var SUPPORTED_STYLES = {
    ...SUPPORTED_COLOR_STYLES,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderRadius: true,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    elevation: true,
    opacity: true,
    transform: true,
    zIndex: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var SUPPORTED_TRANSFORMS = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    rotateZ: true,
    perspective: true,
    skewX: true,
    skewY: true,
    matrix: _ReactNativeFeatureFlags.default.shouldUseAnimatedObjectForTransform()
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };
  function addWhitelistedStyleProp(prop) {
    SUPPORTED_STYLES[prop] = true;
  }
  function addWhitelistedTransformProp(prop) {
    SUPPORTED_TRANSFORMS[prop] = true;
  }
  function addWhitelistedInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }
  function isSupportedColorStyleProp(prop) {
    return SUPPORTED_COLOR_STYLES[prop] === true;
  }
  function isSupportedStyleProp(prop) {
    return SUPPORTED_STYLES[prop] === true;
  }
  function isSupportedTransformProp(prop) {
    return SUPPORTED_TRANSFORMS[prop] === true;
  }
  function isSupportedInterpolationParam(param) {
    return SUPPORTED_INTERPOLATION_PARAMS[param] === true;
  }
  function validateTransform(configs) {
    configs.forEach(config => {
      if (!isSupportedTransformProp(config.property)) {
        throw new Error(`Property '${config.property}' is not supported by native animated module`);
      }
    });
  }
  function validateStyles(styles) {
    for (var _key2 in styles) {
      if (!isSupportedStyleProp(_key2)) {
        throw new Error(`Style property '${_key2}' is not supported by native animated module`);
      }
    }
  }
  function validateInterpolation(config) {
    for (var _key3 in config) {
      if (!isSupportedInterpolationParam(_key3)) {
        throw new Error(`Interpolation property '${_key3}' is not supported by native animated module`);
      }
    }
  }
  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }
  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }
  function assertNativeAnimatedModule() {
    (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
  }
  var _warnedMissingNativeAnimated = false;
  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver == null) {
      console.warn("Animated: `useNativeDriver` was not specified. This is a required option and must be explicitly set to `true` or `false`");
    }
    if (config.useNativeDriver === true && !NativeAnimatedModule) {
      {
        if (!_warnedMissingNativeAnimated) {
          console.warn("Animated: `useNativeDriver` is not supported because the native animated module is missing. Falling back to JS-based animation. To resolve this, add `RCTAnimation` module to this app, or remove `useNativeDriver`. Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md");
          _warnedMissingNativeAnimated = true;
        }
      }
      return false;
    }
    return config.useNativeDriver || false;
  }
  function transformDataType(value) {
    if (typeof value !== 'string') {
      return value;
    }
    if (value.endsWith('deg')) {
      var degrees = parseFloat(value) || 0;
      return degrees * Math.PI / 180.0;
    } else if (value.endsWith('rad')) {
      return parseFloat(value) || 0;
    } else {
      return value;
    }
  }
  var _default = exports.default = {
    API,
    isSupportedColorStyleProp,
    isSupportedStyleProp,
    isSupportedTransformProp,
    isSupportedInterpolationParam,
    addWhitelistedStyleProp,
    addWhitelistedTransformProp,
    addWhitelistedInterpolationParam,
    validateStyles,
    validateTransform,
    validateInterpolation,
    generateNewNodeTag,
    generateNewAnimationId,
    assertNativeAnimatedModule,
    shouldUseNativeDriver,
    transformDataType,
    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new _NativeEventEmitter.default(NativeAnimatedModule);
      }
      return nativeEventEmitter;
    }
  };
},307,[1,205,49,140,81,308,310,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _shouldUseTurboAnimatedModule = _interopRequireDefault(require(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeModule = !(0, _shouldUseTurboAnimatedModule.default)() ? TurboModuleRegistry.get('NativeAnimatedModule') : null;
  var _default = exports.default = NativeModule;
},308,[1,79,309]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  function shouldUseTurboAnimatedModule() {
    return global.RN$Bridgeless === true;
  }
  var _default = exports.default = shouldUseTurboAnimatedModule;
},309,[1,81]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _shouldUseTurboAnimatedModule = _interopRequireDefault(require(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeModule = (0, _shouldUseTurboAnimatedModule.default)() ? TurboModuleRegistry.get('NativeAnimatedTurboModule') : null;
  var _default = exports.default = NativeModule;
},310,[1,79,309]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.flushValue = flushValue;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _InteractionManager = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[9]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[10]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
  function flushValue(rootNode) {
    var leaves = new Set();
    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        leaves.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }
    findAnimatedStyles(rootNode);
    leaves.forEach(leaf => leaf.update());
  }
  function _executeAsAnimatedBatch(id, operation) {
    NativeAnimatedAPI.setWaitingForIdentifier(id);
    operation();
    NativeAnimatedAPI.unsetWaitingForIdentifier(id);
  }
  var AnimatedValue = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedValue(value, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedValue);
      _this = _callSuper(this, AnimatedValue);
      if (typeof value !== 'number') {
        throw new Error('AnimatedValue: Attempting to set value to undefined');
      }
      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      if (config && config.useNativeDriver) {
        _this.__makeNative();
      }
      return _this;
    }
    (0, _inherits2.default)(AnimatedValue, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        if (this.__isNative) {
          NativeAnimatedAPI.getValue(this.__getNativeTag(), value => {
            this._value = value - this._offset;
          });
        }
        this.stopAnimation();
        _superPropGet(AnimatedValue, "__detach", this, 3)([]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();
          this._animation = null;
        }
        this._updateValue(value, !this.__isNative);
        if (this.__isNative) {
          _executeAsAnimatedBatch(this.__getNativeTag().toString(), () => NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value));
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;
        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;
        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;
        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        if (callback) {
          if (this.__isNative) {
            NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);
          } else {
            callback(this.__getValue());
          }
        }
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), this._startingValue);
        }
      }
    }, {
      key: "__onAnimatedValueUpdateReceived",
      value: function __onAnimatedValueUpdateReceived(value) {
        this._updateValue(value, false);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var handle = null;
        if (animation.__isInteraction) {
          handle = _InteractionManager.default.createInteractionHandle();
        }
        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, value => {
          this._updateValue(value, true);
        }, result => {
          this._animation = null;
          if (handle !== null) {
            _InteractionManager.default.clearInteractionHandle(handle);
          }
          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
        this._tracking && this._tracking.update();
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        if (value === undefined) {
          throw new Error('AnimatedValue: Attempting to set value to undefined');
        }
        this._value = value;
        if (flush) {
          flushValue(this);
        }
        this.__callListeners(this.__getValue());
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},311,[1,10,11,50,52,53,55,312,307,314,317]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _EventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var BatchedBridge = require(_dependencyMap[2]);
  var infoLog = require(_dependencyMap[3]);
  var TaskQueue = require(_dependencyMap[4]);
  var invariant = require(_dependencyMap[5]);
  var _emitter = new _EventEmitter.default();
  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManager = {
    Events: {
      interactionStart: 'interactionStart',
      interactionComplete: 'interactionComplete'
    },
    runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(resolve => {
        _scheduleUpdate();
        if (task) {
          tasks.push(task);
        }
        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });
        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        cancel: function () {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle() {
      DEBUG;
      _scheduleUpdate();
      var handle = ++_inc;
      _addInteractionSet.add(handle);
      return handle;
    },
    clearInteractionHandle(handle) {
      DEBUG;
      invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');
      _scheduleUpdate();
      _addInteractionSet.delete(handle);
      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline(deadline) {
      _deadline = deadline;
    }
  };
  var _interactionSet = new Set();
  var _addInteractionSet = new Set();
  var _deleteInteractionSet = new Set();
  var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
  });
  var _nextUpdateHandle = 0;
  var _inc = 0;
  var _deadline = -1;
  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }
  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;
    _addInteractionSet.forEach(handle => _interactionSet.add(handle));
    _deleteInteractionSet.forEach(handle => _interactionSet.delete(handle));
    var nextInteractionCount = _interactionSet.size;
    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }
    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();
        if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();
          break;
        }
      }
    }
    _addInteractionSet.clear();
    _deleteInteractionSet.clear();
  }
  module.exports = InteractionManager;
},312,[1,58,65,194,313,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var infoLog = require(_dependencyMap[2]);
  var invariant = require(_dependencyMap[3]);
  var DEBUG = false;
  var TaskQueue = /*#__PURE__*/function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;
      _classCallCheck(this, TaskQueue);
      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }
    return _createClass(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        tasks.forEach(task => this.enqueue(task));
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(queue => ({
          ...queue,
          tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1)
        })).filter((queue, idx) => queue.tasks.length > 0 || idx === 0);
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();
        if (queue.length) {
          var task = queue.shift();
          try {
            if (typeof task === 'object' && task.gen) {
              DEBUG;
              this._genPromise(task);
            } else if (typeof task === 'object' && task.run) {
              DEBUG;
              task.run();
            } else {
              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG;
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];
        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();
          DEBUG;
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        this._queueStack.push({
          tasks: [],
          popable: false
        });
        var stackIdx = this._queueStack.length - 1;
        var stackItem = this._queueStack[stackIdx];
        DEBUG;
        DEBUG;
        task.gen().then(() => {
          DEBUG;
          stackItem.popable = true;
          this.hasTasksToProcess() && this._onMoreTasks();
        }).catch(ex => {
          setTimeout(() => {
            ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;
            throw ex;
          }, 0);
        });
      }
    }]);
  }();
  module.exports = TaskQueue;
},313,[10,11,194,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _normalizeColor = _interopRequireDefault(require(_dependencyMap[7]));
  var _processColor = _interopRequireDefault(require(_dependencyMap[8]));
  var _Easing = _interopRequireDefault(require(_dependencyMap[9]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[10]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[11]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[12]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function createNumericInterpolation(config) {
    var outputRange = config.outputRange;
    var inputRange = config.inputRange;
    var easing = config.easing || _Easing.default.linear;
    var extrapolateLeft = 'extend';
    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }
    var extrapolateRight = 'extend';
    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }
    return input => {
      (0, _invariant.default)(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }
  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;
    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }
    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }
    if (outputMin === outputMax) {
      return outputMin;
    }
    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }
      return outputMax;
    }
    if (inputMin === -(1 / 0)) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }
    result = easing(result);
    if (outputMin === -(1 / 0)) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }
    return result;
  }
  var numericComponentRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;
  function mapStringToNumericComponents(input) {
    var normalizedColor = (0, _normalizeColor.default)(input);
    (0, _invariant.default)(normalizedColor == null || typeof normalizedColor !== 'object', 'PlatformColors are not supported');
    if (typeof normalizedColor === 'number') {
      normalizedColor = normalizedColor || 0;
      var r = (normalizedColor & 0xff000000) >>> 24;
      var g = (normalizedColor & 0x00ff0000) >>> 16;
      var b = (normalizedColor & 0x0000ff00) >>> 8;
      var a = (normalizedColor & 0x000000ff) / 255;
      return {
        isColor: true,
        components: [r, g, b, a]
      };
    } else {
      var components = [];
      var lastMatchEnd = 0;
      var match;
      while ((match = numericComponentRegex.exec(input)) != null) {
        if (match.index > lastMatchEnd) {
          components.push(input.substring(lastMatchEnd, match.index));
        }
        components.push(parseFloat(match[0]));
        lastMatchEnd = match.index + match[0].length;
      }
      (0, _invariant.default)(components.length > 0, 'outputRange must contain color or value with numeric component');
      if (lastMatchEnd < input.length) {
        components.push(input.substring(lastMatchEnd, input.length));
      }
      return {
        isColor: false,
        components
      };
    }
  }
  function createStringInterpolation(config) {
    (0, _invariant.default)(config.outputRange.length >= 2, 'Bad output range');
    var outputRange = config.outputRange.map(mapStringToNumericComponents);
    var isColor = outputRange[0].isColor;
    var numericComponents = outputRange.map(output => isColor ? output.components : output.components.filter(c => typeof c === 'number'));
    var interpolations = numericComponents[0].map((_, i) => createNumericInterpolation({
      ...config,
      outputRange: numericComponents.map(components => components[i])
    }));
    if (!isColor) {
      return input => {
        var values = interpolations.map(interpolation => interpolation(input));
        var i = 0;
        return outputRange[0].components.map(c => typeof c === 'number' ? values[i++] : c).join('');
      };
    } else {
      return input => {
        var result = interpolations.map((interpolation, i) => {
          var value = interpolation(input);
          return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;
        });
        return `rgba(${result[0]}, ${result[1]}, ${result[2]}, ${result[3]})`;
      };
    }
  }
  function findRange(input, inputRange) {
    var i;
    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }
    return i - 1;
  }
  var AnimatedInterpolation = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedInterpolation(parent, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedInterpolation);
      _this = _callSuper(this, AnimatedInterpolation);
      _this._parent = parent;
      _this._config = config;
      return _this;
    }
    (0, _inherits2.default)(AnimatedInterpolation, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedInterpolation, [{
      key: "_getInterpolation",
      value: function _getInterpolation() {
        if (!this._interpolation) {
          var config = this._config;
          if (config.outputRange && typeof config.outputRange[0] === 'string') {
            this._interpolation = createStringInterpolation(config);
          } else {
            this._interpolation = createNumericInterpolation(config);
          }
        }
        return this._interpolation;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._parent.__makeNative(platformConfig);
        _superPropGet(AnimatedInterpolation, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();
        (0, _invariant.default)(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._getInterpolation()(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);
        _superPropGet(AnimatedInterpolation, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var outputRange = this._config.outputRange;
        var outputType = null;
        if (typeof outputRange[0] === 'string') {
          outputRange = outputRange.map(value => {
            var processedColor = (0, _processColor.default)(value);
            if (typeof processedColor === 'number') {
              outputType = 'color';
              return processedColor;
            } else {
              return _NativeAnimatedHelper.default.transformDataType(value);
            }
          });
        }
        return {
          inputRange: this._config.inputRange,
          outputRange,
          outputType,
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},314,[1,10,11,50,52,53,55,92,91,315,307,317,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ease;
  var Easing = {
    step0(n) {
      return n > 0 ? 1 : 0;
    },
    step1(n) {
      return n >= 1 ? 1 : 0;
    },
    linear(t) {
      return t;
    },
    ease(t) {
      if (!ease) {
        ease = Easing.bezier(0.42, 0, 1, 1);
      }
      return ease(t);
    },
    quad(t) {
      return t * t;
    },
    cubic(t) {
      return t * t * t;
    },
    poly(n) {
      return t => Math.pow(t, n);
    },
    sin(t) {
      return 1 - Math.cos(t * Math.PI / 2);
    },
    circle(t) {
      return 1 - Math.sqrt(1 - t * t);
    },
    exp(t) {
      return Math.pow(2, 10 * (t - 1));
    },
    elastic() {
      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var p = bounciness * Math.PI;
      return t => 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
    },
    back() {
      var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;
      return t => t * t * ((s + 1) * t - s);
    },
    bounce(t) {
      if (t < 0.36363636363636365) {
        return 7.5625 * t * t;
      }
      if (t < 0.7272727272727273) {
        var _t = t - 0.5454545454545454;
        return 7.5625 * _t * _t + 0.75;
      }
      if (t < 0.9090909090909091) {
        var _t2 = t - 0.8181818181818182;
        return 7.5625 * _t2 * _t2 + 0.9375;
      }
      var t2 = t - 0.9545454545454546;
      return 7.5625 * t2 * t2 + 0.984375;
    },
    bezier(x1, y1, x2, y2) {
      var _bezier = require(_dependencyMap[0]).default;
      return _bezier(x1, y1, x2, y2);
    },
    in(easing) {
      return easing;
    },
    out(easing) {
      return t => 1 - easing(1 - t);
    },
    inOut(easing) {
      return t => {
        if (t < 0.5) {
          return easing(t * 2) / 2;
        }
        return 1 - easing((1 - t) * 2) / 2;
      };
    }
  };
  var _default = exports.default = Easing;
},315,[316]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = bezier;
  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 0.1;
  var float32ArraySupported = typeof Float32Array === 'function';
  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }
  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }
  function C(aA1) {
    return 3.0 * aA1;
  }
  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }
  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }
  function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
    var currentX,
      currentT,
      i = 0,
      aA = _aA,
      aB = _aB;
    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
    return currentT;
  }
  function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
    var aGuessT = _aGuessT;
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0.0) {
        return aGuessT;
      }
      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }
  function bezier(mX1, mY1, mX2, mY2) {
    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }
    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }
    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = 10;
      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }
      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);
      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }
    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }
      if (x === 0) {
        return 0;
      }
      if (x === 1) {
        return 1;
      }
      return calcBezier(getTForX(x), mY1, mY2);
    };
  }
},316,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedNode2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedWithChildren = exports.default = /*#__PURE__*/function (_AnimatedNode) {
    function AnimatedWithChildren() {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedWithChildren);
      _this = _callSuper(this, AnimatedWithChildren);
      _this._children = [];
      return _this;
    }
    (0, _inherits2.default)(AnimatedWithChildren, _AnimatedNode);
    return (0, _createClass2.default)(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        if (!this.__isNative) {
          this.__isNative = true;
          for (var child of this._children) {
            child.__makeNative(platformConfig);
            _NativeAnimatedHelper.default.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
          }
        }
        _superPropGet(AnimatedWithChildren, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }
        this._children.push(child);
        if (this.__isNative) {
          child.__makeNative(this.__getPlatformConfig());
          _NativeAnimatedHelper.default.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);
        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }
        if (this.__isNative && child.__isNative) {
          _NativeAnimatedHelper.default.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
        this._children.splice(index, 1);
        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        _superPropGet(AnimatedWithChildren, "__callListeners", this, 3)([value]);
        if (!this.__isNative) {
          for (var child of this._children) {
            if (child.__getValue) {
              child.__callListeners(child.__getValue());
            }
          }
        }
      }
    }]);
  }(_AnimatedNode2.default);
},317,[1,10,11,50,52,53,55,307,318]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[3]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[4]));
  var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
  var _uniqueId = 1;
  var AnimatedNode = exports.default = /*#__PURE__*/function () {
    function AnimatedNode() {
      (0, _classCallCheck2.default)(this, AnimatedNode);
      this._listeners = {};
    }
    return (0, _createClass2.default)(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        this.removeAllListeners();
        if (this.__isNative && this.__nativeTag != null) {
          _NativeAnimatedHelper.default.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }
        this._platformConfig = platformConfig;
        if (this.hasListeners()) {
          this._startListeningToNativeValueUpdates();
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;
        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];
        if (this.__isNative && !this.hasListeners()) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};
        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "hasListeners",
      value: function hasListeners() {
        return !!Object.keys(this._listeners).length;
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        if (this.__nativeAnimatedValueListener && !this.__shouldUpdateListenersForNewNativeTag) {
          return;
        }
        if (this.__shouldUpdateListenersForNewNativeTag) {
          this.__shouldUpdateListenersForNewNativeTag = false;
          this._stopListeningForNativeValueUpdates();
        }
        NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onAnimatedValueUpdate', data => {
          if (data.tag !== this.__getNativeTag()) {
            return;
          }
          this.__onAnimatedValueUpdateReceived(data.value);
        });
      }
    }, {
      key: "__onAnimatedValueUpdateReceived",
      value: function __onAnimatedValueUpdateReceived(value) {
        this.__callListeners(value);
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        for (var _key in this._listeners) {
          this._listeners[_key]({
            value
          });
        }
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }
        this.__nativeAnimatedValueListener.remove();
        this.__nativeAnimatedValueListener = null;
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        _NativeAnimatedHelper.default.assertNativeAnimatedModule();
        (0, _invariant.default)(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
        var nativeTag = this.__nativeTag ?? _NativeAnimatedHelper.default.generateNewNodeTag();
        if (this.__nativeTag == null) {
          this.__nativeTag = nativeTag;
          var config = this.__getNativeConfig();
          if (this._platformConfig) {
            config.platformConfig = this._platformConfig;
          }
          _NativeAnimatedHelper.default.API.createAnimatedNode(nativeTag, config);
          this.__shouldUpdateListenersForNewNativeTag = true;
        }
        return nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }, {
      key: "__getPlatformConfig",
      value: function __getPlatformConfig() {
        return this._platformConfig;
      }
    }, {
      key: "__setPlatformConfig",
      value: function __setPlatformConfig(platformConfig) {
        this._platformConfig = platformConfig;
      }
    }]);
  }();
},318,[1,10,11,307,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[9]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var _uniqueId = 1;
  var AnimatedValueXY = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedValueXY(valueIn, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedValueXY);
      _this = _callSuper(this, AnimatedValueXY);
      var value = valueIn || {
        x: 0,
        y: 0
      };
      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new _AnimatedValue.default(value.x);
        _this.y = new _AnimatedValue.default(value.y);
      } else {
        (0, _invariant.default)(value.x instanceof _AnimatedValue.default && value.y instanceof _AnimatedValue.default, "AnimatedValueXY must be initialized with an object of numbers or AnimatedValues.");
        _this.x = value.x;
        _this.y = value.y;
      }
      _this._listeners = {};
      if (config && config.useNativeDriver) {
        _this.__makeNative();
      }
      return _this;
    }
    (0, _inherits2.default)(AnimatedValueXY, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        var jointCallback = _ref => {
          var number = _ref.value;
          callback(this.__getValue());
        };
        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this.x.__addChild(this);
        this.y.__addChild(this);
        _superPropGet(AnimatedValueXY, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this.x.__removeChild(this);
        this.y.__removeChild(this);
        _superPropGet(AnimatedValueXY, "__detach", this, 3)([]);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this.x.__makeNative(platformConfig);
        this.y.__makeNative(platformConfig);
        _superPropGet(AnimatedValueXY, "__makeNative", this, 3)([platformConfig]);
      }
    }]);
  }(_AnimatedWithChildren2.default);
},319,[1,10,11,50,52,53,55,311,317,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[7]));
  var _Animation2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var DecayAnimation = exports.default = /*#__PURE__*/function (_Animation) {
    function DecayAnimation(config) {
      var _this;
      (0, _classCallCheck2.default)(this, DecayAnimation);
      _this = _callSuper(this, DecayAnimation);
      _this._deceleration = config.deceleration ?? 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
      _this._platformConfig = config.platformConfig;
      _this.__isInteraction = config.isInteraction ?? !_this._useNativeDriver;
      _this.__iterations = config.iterations ?? 1;
      return _this;
    }
    (0, _inherits2.default)(DecayAnimation, _Animation);
    return (0, _createClass2.default)(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations,
          platformConfig: this._platformConfig
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();
        if (!this._useNativeDriver && animatedValue.__isNative === true) {
          throw new Error("Attempting to run JS driven animation on animated node that has been moved to \"native\" earlier by starting an animation with `useNativeDriver: true`");
        }
        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));
        this._onUpdate(value);
        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });
          return;
        }
        this._lastValue = value;
        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _superPropGet(DecayAnimation, "stop", this, 3)([]);
        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);
        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
  }(_Animation2.default);
},320,[1,10,11,50,52,53,55,307,321]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[4]));
  var _AnimatedColor = _interopRequireDefault(require(_dependencyMap[5]));
  var _AnimatedProps = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedValueXY = _interopRequireDefault(require(_dependencyMap[7]));
  var startNativeAnimationNextId = 1;
  var Animation = exports.default = /*#__PURE__*/function () {
    function Animation() {
      (0, _classCallCheck2.default)(this, Animation);
    }
    return (0, _createClass2.default)(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          _NativeAnimatedHelper.default.API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__findAnimatedPropsNodes",
      value: function __findAnimatedPropsNodes(node) {
        var result = [];
        if (node instanceof _AnimatedProps.default) {
          result.push(node);
          return result;
        }
        if (node instanceof _AnimatedValueXY.default || node instanceof _AnimatedColor.default) {
          return result;
        }
        for (var child of node.__getChildren()) {
          result.push(...this.__findAnimatedPropsNodes(child));
        }
        return result;
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        var startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;
        startNativeAnimationNextId += 1;
        _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
        try {
          var config = this.__getNativeAnimationConfig();
          animatedValue.__makeNative(config.platformConfig);
          this.__nativeId = _NativeAnimatedHelper.default.generateNewAnimationId();
          _NativeAnimatedHelper.default.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), config, result => {
            this.__debouncedOnEnd(result);
            var value = result.value;
            if (value != null) {
              animatedValue.__onAnimatedValueUpdateReceived(value);
              this.__findAnimatedPropsNodes(animatedValue).forEach(node => node.update());
            }
          });
        } catch (e) {
          throw e;
        } finally {
          _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
        }
      }
    }]);
  }();
},321,[1,10,11,81,307,322,323,319]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _normalizeColor = _interopRequireDefault(require(_dependencyMap[7]));
  var _PlatformColorValueTypes = require(_dependencyMap[8]);
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[9]));
  var _AnimatedValue = _interopRequireWildcard(require(_dependencyMap[10]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[11]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
  var defaultColor = {
    r: 0,
    g: 0,
    b: 0,
    a: 1.0
  };
  function processColor(color) {
    if (color === undefined || color === null) {
      return null;
    }
    if (isRgbaValue(color)) {
      return color;
    }
    var normalizedColor = (0, _normalizeColor.default)(color);
    if (normalizedColor === undefined || normalizedColor === null) {
      return null;
    }
    if (typeof normalizedColor === 'object') {
      var processedColorObj = (0, _PlatformColorValueTypes.processColorObject)(normalizedColor);
      if (processedColorObj != null) {
        return processedColorObj;
      }
    } else if (typeof normalizedColor === 'number') {
      var r = (normalizedColor & 0xff000000) >>> 24;
      var g = (normalizedColor & 0x00ff0000) >>> 16;
      var b = (normalizedColor & 0x0000ff00) >>> 8;
      var a = (normalizedColor & 0x000000ff) / 255;
      return {
        r,
        g,
        b,
        a
      };
    }
    return null;
  }
  function isRgbaValue(value) {
    return value && typeof value.r === 'number' && typeof value.g === 'number' && typeof value.b === 'number' && typeof value.a === 'number';
  }
  function isRgbaAnimatedValue(value) {
    return value && value.r instanceof _AnimatedValue.default && value.g instanceof _AnimatedValue.default && value.b instanceof _AnimatedValue.default && value.a instanceof _AnimatedValue.default;
  }
  var AnimatedColor = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedColor(valueIn, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedColor);
      _this = _callSuper(this, AnimatedColor);
      _this._suspendCallbacks = 0;
      var value = valueIn ?? defaultColor;
      if (isRgbaAnimatedValue(value)) {
        var rgbaAnimatedValue = value;
        _this.r = rgbaAnimatedValue.r;
        _this.g = rgbaAnimatedValue.g;
        _this.b = rgbaAnimatedValue.b;
        _this.a = rgbaAnimatedValue.a;
      } else {
        var processedColor = processColor(value) ?? defaultColor;
        var initColor = defaultColor;
        if (isRgbaValue(processedColor)) {
          initColor = processedColor;
        } else {
          _this.nativeColor = processedColor;
        }
        _this.r = new _AnimatedValue.default(initColor.r);
        _this.g = new _AnimatedValue.default(initColor.g);
        _this.b = new _AnimatedValue.default(initColor.b);
        _this.a = new _AnimatedValue.default(initColor.a);
      }
      if (config?.useNativeDriver) {
        _this.__makeNative();
      }
      return _this;
    }
    (0, _inherits2.default)(AnimatedColor, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedColor, [{
      key: "setValue",
      value: function setValue(value) {
        var shouldUpdateNodeConfig = false;
        if (this.__isNative) {
          var nativeTag = this.__getNativeTag();
          NativeAnimatedAPI.setWaitingForIdentifier(nativeTag.toString());
        }
        var processedColor = processColor(value) ?? defaultColor;
        this._withSuspendedCallbacks(() => {
          if (isRgbaValue(processedColor)) {
            var rgbaValue = processedColor;
            this.r.setValue(rgbaValue.r);
            this.g.setValue(rgbaValue.g);
            this.b.setValue(rgbaValue.b);
            this.a.setValue(rgbaValue.a);
            if (this.nativeColor != null) {
              this.nativeColor = null;
              shouldUpdateNodeConfig = true;
            }
          } else {
            var nativeColor = processedColor;
            if (this.nativeColor !== nativeColor) {
              this.nativeColor = nativeColor;
              shouldUpdateNodeConfig = true;
            }
          }
        });
        if (this.__isNative) {
          var _nativeTag = this.__getNativeTag();
          if (shouldUpdateNodeConfig) {
            NativeAnimatedAPI.updateAnimatedNodeConfig(_nativeTag, this.__getNativeConfig());
          }
          NativeAnimatedAPI.unsetWaitingForIdentifier(_nativeTag.toString());
        } else {
          (0, _AnimatedValue.flushValue)(this);
        }
        this.__callListeners(this.__getValue());
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.r.setOffset(offset.r);
        this.g.setOffset(offset.g);
        this.b.setOffset(offset.b);
        this.a.setOffset(offset.a);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.r.flattenOffset();
        this.g.flattenOffset();
        this.b.flattenOffset();
        this.a.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.r.extractOffset();
        this.g.extractOffset();
        this.b.extractOffset();
        this.a.extractOffset();
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.r.stopAnimation();
        this.g.stopAnimation();
        this.b.stopAnimation();
        this.a.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.r.resetAnimation();
        this.g.resetAnimation();
        this.b.resetAnimation();
        this.a.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        if (this.nativeColor != null) {
          return this.nativeColor;
        } else {
          return `rgba(${this.r.__getValue()}, ${this.g.__getValue()}, ${this.b.__getValue()}, ${this.a.__getValue()})`;
        }
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this.r.__addChild(this);
        this.g.__addChild(this);
        this.b.__addChild(this);
        this.a.__addChild(this);
        _superPropGet(AnimatedColor, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this.r.__removeChild(this);
        this.g.__removeChild(this);
        this.b.__removeChild(this);
        this.a.__removeChild(this);
        _superPropGet(AnimatedColor, "__detach", this, 3)([]);
      }
    }, {
      key: "_withSuspendedCallbacks",
      value: function _withSuspendedCallbacks(callback) {
        this._suspendCallbacks++;
        callback();
        this._suspendCallbacks--;
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        if (this._suspendCallbacks === 0) {
          _superPropGet(AnimatedColor, "__callListeners", this, 3)([value]);
        }
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this.r.__makeNative(platformConfig);
        this.g.__makeNative(platformConfig);
        this.b.__makeNative(platformConfig);
        this.a.__makeNative(platformConfig);
        _superPropGet(AnimatedColor, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'color',
          r: this.r.__getNativeTag(),
          g: this.g.__getNativeTag(),
          b: this.b.__getNativeTag(),
          a: this.a.__getNativeTag(),
          nativeColor: this.nativeColor
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},322,[1,10,11,50,52,53,55,92,94,307,311,317]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _RendererProxy = require(_dependencyMap[7]);
  var _AnimatedEvent = require(_dependencyMap[8]);
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[9]));
  var _AnimatedNode2 = _interopRequireDefault(require(_dependencyMap[10]));
  var _AnimatedObject = _interopRequireWildcard(require(_dependencyMap[11]));
  var _AnimatedStyle = _interopRequireDefault(require(_dependencyMap[12]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[13]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function createAnimatedProps(inputProps) {
    var props = {};
    for (var key in inputProps) {
      var value = inputProps[key];
      if (key === 'style') {
        props[key] = new _AnimatedStyle.default(value);
      } else if (value instanceof _AnimatedNode2.default) {
        props[key] = value;
      } else if ((0, _AnimatedObject.hasAnimatedNode)(value)) {
        props[key] = new _AnimatedObject.default(value);
      } else {
        props[key] = value;
      }
    }
    return props;
  }
  var AnimatedProps = exports.default = /*#__PURE__*/function (_AnimatedNode) {
    function AnimatedProps(props, callback) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedProps);
      _this = _callSuper(this, AnimatedProps);
      _this._props = createAnimatedProps(props);
      _this._callback = callback;
      return _this;
    }
    (0, _inherits2.default)(AnimatedProps, _AnimatedNode);
    return (0, _createClass2.default)(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof _AnimatedNode2.default) {
            props[key] = value.__getValue();
          } else if (value instanceof _AnimatedEvent.AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }
        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof _AnimatedNode2.default) {
            props[key] = value.__getAnimatedValue();
          }
        }
        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof _AnimatedNode2.default) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof _AnimatedNode2.default) {
            value.__removeChild(this);
          }
        }
        _superPropGet(AnimatedProps, "__detach", this, 3)([]);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof _AnimatedNode2.default) {
            value.__makeNative(platformConfig);
          }
        }
        if (!this.__isNative) {
          this.__isNative = true;
          _superPropGet(AnimatedProps, "__setPlatformConfig", this, 3)([platformConfig]);
          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }
        this._animatedView = animatedView;
        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = (0, _RendererProxy.findNodeHandle)(this._animatedView);
        (0, _invariant.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        _NativeAnimatedHelper.default.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = (0, _RendererProxy.findNodeHandle)(this._animatedView);
        (0, _invariant.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        _NativeAnimatedHelper.default.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__restoreDefaultValues",
      value: function __restoreDefaultValues() {
        if (this.__isNative) {
          _NativeAnimatedHelper.default.API.restoreDefaultValues(this.__getNativeTag());
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};
        for (var propKey in this._props) {
          var value = this._props[propKey];
          if (value instanceof _AnimatedNode2.default) {
            value.__makeNative(this.__getPlatformConfig());
            propsConfig[propKey] = value.__getNativeTag();
          }
        }
        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);
  }(_AnimatedNode2.default);
},323,[1,10,11,50,52,53,55,61,306,307,318,324,325,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.hasAnimatedNode = hasAnimatedNode;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[8]));
  var React = _interopRequireWildcard(require(_dependencyMap[9]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var MAX_DEPTH = 5;
  function isPlainObject(value) {
    return value !== null && typeof value === 'object' && Object.getPrototypeOf(value).isPrototypeOf(Object);
  }
  function visit(value, fn) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    if (depth >= MAX_DEPTH) {
      return;
    }
    if (value instanceof _AnimatedNode.default) {
      fn(value);
    } else if (Array.isArray(value)) {
      value.forEach(element => {
        visit(element, fn, depth + 1);
      });
    } else if (isPlainObject(value)) {
      Object.values(value).forEach(element => {
        visit(element, fn, depth + 1);
      });
    }
  }
  function mapAnimatedNodes(value, fn) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    if (depth >= MAX_DEPTH) {
      return value;
    }
    if (value instanceof _AnimatedNode.default) {
      return fn(value);
    } else if (Array.isArray(value)) {
      return value.map(element => mapAnimatedNodes(element, fn, depth + 1));
    } else if (isPlainObject(value)) {
      var result = {};
      for (var key in value) {
        result[key] = mapAnimatedNodes(value[key], fn, depth + 1);
      }
      return result;
    } else {
      return value;
    }
  }
  function hasAnimatedNode(value) {
    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (depth >= MAX_DEPTH) {
      return false;
    }
    if (value instanceof _AnimatedNode.default) {
      return true;
    } else if (Array.isArray(value)) {
      for (var element of value) {
        if (hasAnimatedNode(element, depth + 1)) {
          return true;
        }
      }
    } else if (isPlainObject(value)) {
      if (/*#__PURE__*/React.isValidElement(value)) {
        return false;
      }
      for (var key in value) {
        if (hasAnimatedNode(value[key], depth + 1)) {
          return true;
        }
      }
    }
    return false;
  }
  var AnimatedObject = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedObject(value) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedObject);
      _this = _callSuper(this, AnimatedObject);
      _this._value = value;
      return _this;
    }
    (0, _inherits2.default)(AnimatedObject, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedObject, [{
      key: "__getValue",
      value: function __getValue() {
        return mapAnimatedNodes(this._value, node => {
          return node.__getValue();
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return mapAnimatedNodes(this._value, node => {
          return node.__getAnimatedValue();
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        _superPropGet(AnimatedObject, "__attach", this, 3)([]);
        visit(this._value, node => {
          node.__addChild(this);
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        visit(this._value, node => {
          node.__removeChild(this);
        });
        _superPropGet(AnimatedObject, "__detach", this, 3)([]);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        visit(this._value, value => {
          value.__makeNative(platformConfig);
        });
        _superPropGet(AnimatedObject, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'object',
          value: mapAnimatedNodes(this._value, node => {
            return {
              nodeTag: node.__getNativeTag()
            };
          })
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},324,[1,10,11,50,52,53,55,318,317,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[7]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[8]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[9]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[10]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[11]));
  var _AnimatedObject = _interopRequireWildcard(require(_dependencyMap[12]));
  var _AnimatedTransform = _interopRequireDefault(require(_dependencyMap[13]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[14]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function createAnimatedStyle(inputStyle, keepUnanimatedValues) {
    var style = (0, _flattenStyle.default)(inputStyle);
    var animatedStyles = {};
    for (var key in style) {
      var value = style[key];
      if (value != null && key === 'transform') {
        animatedStyles[key] = _ReactNativeFeatureFlags.default.shouldUseAnimatedObjectForTransform() ? new _AnimatedObject.default(value) : new _AnimatedTransform.default(value);
      } else if (value instanceof _AnimatedNode.default) {
        animatedStyles[key] = value;
      } else if ((0, _AnimatedObject.hasAnimatedNode)(value)) {
        animatedStyles[key] = new _AnimatedObject.default(value);
      } else if (keepUnanimatedValues) {
        animatedStyles[key] = value;
      }
    }
    return animatedStyles;
  }
  var AnimatedStyle = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedStyle(style) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedStyle);
      _this = _callSuper(this, AnimatedStyle);
      _this._inputStyle = style;
      _this._style = createAnimatedStyle(style, true);
      return _this;
    }
    (0, _inherits2.default)(AnimatedStyle, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedStyle, [{
      key: "__getValue",
      value: function __getValue() {
        var result = {};
        for (var key in this._style) {
          var value = this._style[key];
          if (value instanceof _AnimatedNode.default) {
            result[key] = value.__getValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var result = {};
        for (var key in this._style) {
          var value = this._style[key];
          if (value instanceof _AnimatedNode.default) {
            result[key] = value.__getAnimatedValue();
          }
        }
        return result;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];
          if (value instanceof _AnimatedNode.default) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];
          if (value instanceof _AnimatedNode.default) {
            value.__removeChild(this);
          }
        }
        _superPropGet(AnimatedStyle, "__detach", this, 3)([]);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        for (var key in this._style) {
          var value = this._style[key];
          if (value instanceof _AnimatedNode.default) {
            value.__makeNative(platformConfig);
          }
        }
        _superPropGet(AnimatedStyle, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};
        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof _AnimatedNode.default) {
            var style = this._style[styleKey];
            style.__makeNative(this.__getPlatformConfig());
            styleConfig[styleKey] = style.__getNativeTag();
          }
        }
        _NativeAnimatedHelper.default.validateStyles(styleConfig);
        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},325,[1,10,11,50,52,53,55,140,131,81,307,318,324,326,317]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[9]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[10]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedTransform = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedTransform(transforms) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedTransform);
      _this = _callSuper(this, AnimatedTransform);
      _this._transforms = transforms;
      return _this;
    }
    (0, _inherits2.default)(AnimatedTransform, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._transforms.forEach(transform => {
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              value.__makeNative(platformConfig);
            }
          }
        });
        _superPropGet(AnimatedTransform, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._get(animatedNode => animatedNode.__getValue());
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._get(animatedNode => animatedNode.__getAnimatedValue());
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._transforms.forEach(transform => {
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              value.__addChild(this);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._transforms.forEach(transform => {
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              value.__removeChild(this);
            }
          }
        });
        _superPropGet(AnimatedTransform, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];
        this._transforms.forEach(transform => {
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: _NativeAnimatedHelper.default.transformDataType(value)
              });
            }
          }
        });
        _NativeAnimatedHelper.default.validateTransform(transConfigs);
        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }, {
      key: "_get",
      value: function _get(getter) {
        return this._transforms.map(transform => {
          var result = {};
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              result[key] = getter(value);
            } else if (Array.isArray(value)) {
              result[key] = value.map(element => {
                if (element instanceof _AnimatedNode.default) {
                  return getter(element);
                } else {
                  return element;
                }
              });
            } else if (typeof value === 'object') {
              result[key] = {};
              for (var _ref of Object.entries(value)) {
                var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
                var nestedKey = _ref2[0];
                var nestedValue = _ref2[1];
                if (nestedValue instanceof _AnimatedNode.default) {
                  result[key][nestedKey] = getter(nestedValue);
                } else {
                  result[key][nestedKey] = nestedValue;
                }
              }
            } else {
              result[key] = value;
            }
          }
          return result;
        });
      }
    }]);
  }(_AnimatedWithChildren2.default);
},326,[1,29,10,11,50,52,53,55,307,318,317]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _readOnlyError2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedColor = _interopRequireDefault(require(_dependencyMap[9]));
  var SpringConfig = _interopRequireWildcard(require(_dependencyMap[10]));
  var _Animation2 = _interopRequireDefault(require(_dependencyMap[11]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[12]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var SpringAnimation = exports.default = /*#__PURE__*/function (_Animation) {
    function SpringAnimation(config) {
      var _this;
      (0, _classCallCheck2.default)(this, SpringAnimation);
      _this = _callSuper(this, SpringAnimation);
      _this._overshootClamping = config.overshootClamping ?? false;
      _this._restDisplacementThreshold = config.restDisplacementThreshold ?? 0.001;
      _this._restSpeedThreshold = config.restSpeedThreshold ?? 0.001;
      _this._initialVelocity = config.velocity ?? 0;
      _this._lastVelocity = config.velocity ?? 0;
      _this._toValue = config.toValue;
      _this._delay = config.delay ?? 0;
      _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
      _this._platformConfig = config.platformConfig;
      _this.__isInteraction = config.isInteraction ?? !_this._useNativeDriver;
      _this.__iterations = config.iterations ?? 1;
      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        (0, _invariant.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = config.stiffness ?? 100;
        _this._damping = config.damping ?? 10;
        _this._mass = config.mass ?? 1;
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        (0, _invariant.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed(config.bounciness ?? 8, config.speed ?? 12);
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(config.tension ?? 40, config.friction ?? 7);
        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }
      (0, _invariant.default)(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      (0, _invariant.default)(_this._damping > 0, 'Damping value must be greater than 0');
      (0, _invariant.default)(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }
    (0, _inherits2.default)(SpringAnimation, _Animation);
    return (0, _createClass2.default)(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: this._initialVelocity ?? this._lastVelocity,
          toValue: this._toValue,
          iterations: this.__iterations,
          platformConfig: this._platformConfig
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;
        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }
        var start = () => {
          if (!this._useNativeDriver && animatedValue.__isNative === true) {
            throw new Error("Attempting to run JS driven animation on animated node that has been moved to \"native\" earlier by starting an animation with `useNativeDriver: true`");
          }
          if (this._useNativeDriver) {
            this.__startNativeAnimation(animatedValue);
          } else {
            this.onUpdate();
          }
        };
        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();
        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }
        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;
        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);
          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }
        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;
        this._onUpdate(position);
        if (!this.__active) {
          return;
        }
        var isOvershooting = false;
        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }
        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
        var isDisplacement = true;
        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }
        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;
            this._onUpdate(this._toValue);
          }
          this.__debouncedOnEnd({
            finished: true
          });
          return;
        }
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        _superPropGet(SpringAnimation, "stop", this, 3)([]);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);
        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
  }(_Animation2.default);
},327,[1,162,10,11,50,52,53,55,307,322,328,321,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fromBouncinessAndSpeed = fromBouncinessAndSpeed;
  exports.fromOrigamiTensionAndFriction = fromOrigamiTensionAndFriction;
  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }
  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }
  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }
  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }
    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }
    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }
    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }
    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }
    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }
    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }
    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }
    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }
},328,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _readOnlyError2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedColor = _interopRequireDefault(require(_dependencyMap[9]));
  var _Animation2 = _interopRequireDefault(require(_dependencyMap[10]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var _easeInOut;
  function easeInOut() {
    if (!_easeInOut) {
      var Easing = require(_dependencyMap[11]).default;
      _easeInOut = Easing.inOut(Easing.ease);
    }
    return _easeInOut;
  }
  var TimingAnimation = exports.default = /*#__PURE__*/function (_Animation) {
    function TimingAnimation(config) {
      var _this;
      (0, _classCallCheck2.default)(this, TimingAnimation);
      _this = _callSuper(this, TimingAnimation);
      _this._toValue = config.toValue;
      _this._easing = config.easing ?? easeInOut();
      _this._duration = config.duration ?? 500;
      _this._delay = config.delay ?? 0;
      _this.__iterations = config.iterations ?? 1;
      _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
      _this._platformConfig = config.platformConfig;
      _this.__isInteraction = config.isInteraction ?? !_this._useNativeDriver;
      return _this;
    }
    (0, _inherits2.default)(TimingAnimation, _Animation);
    return (0, _createClass2.default)(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 16.666666666666668;
        var frames = [];
        var numFrames = Math.round(this._duration / frameDuration);
        for (var frame = 0; frame < numFrames; frame++) {
          frames.push(this._easing(frame / numFrames));
        }
        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames,
          toValue: this._toValue,
          iterations: this.__iterations,
          platformConfig: this._platformConfig
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        var start = () => {
          if (!this._useNativeDriver && animatedValue.__isNative === true) {
            throw new Error("Attempting to run JS driven animation on animated node that has been moved to \"native\" earlier by starting an animation with `useNativeDriver: true`");
          }
          if (this._duration === 0 && !this._useNativeDriver) {
            this._onUpdate(this._toValue);
            this.__debouncedOnEnd({
              finished: true
            });
          } else {
            this._startTime = Date.now();
            if (this._useNativeDriver) {
              this.__startNativeAnimation(animatedValue);
            } else {
              this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
            }
          }
        };
        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }
          this.__debouncedOnEnd({
            finished: true
          });
          return;
        }
        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _superPropGet(TimingAnimation, "stop", this, 3)([]);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);
        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
  }(_Animation2.default);
},329,[1,162,10,11,50,52,53,55,307,322,321,315]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createAnimatedComponent;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _View = _interopRequireDefault(require(_dependencyMap[3]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[4]));
  var _useAnimatedProps3 = _interopRequireDefault(require(_dependencyMap[5]));
  var React = _interopRequireWildcard(require(_dependencyMap[6]));
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["style"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function createAnimatedComponent(Component) {
    return /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
      var _useAnimatedProps = (0, _useAnimatedProps3.default)(props),
        _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
        reducedProps = _useAnimatedProps2[0],
        callbackRef = _useAnimatedProps2[1];
      var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
      var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues,
        style = reducedProps.style;
      var _ref = passthroughAnimatedPropExplicitValues ?? {},
        passthroughStyle = _ref.style,
        passthroughProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var mergedStyle = {
        ...style,
        ...passthroughStyle
      };
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        ...reducedProps,
        ...passthroughProps,
        style: mergedStyle,
        ref: ref
      });
    });
  }
},330,[1,203,29,240,331,332,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useMergeRefs;
  var _react = require(_dependencyMap[0]);
  function useMergeRefs() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }
    return (0, _react.useCallback)(current => {
      for (var ref of refs) {
        if (ref != null) {
          if (typeof ref === 'function') {
            ref(current);
          } else {
            ref.current = current;
          }
        }
      }
    }, [...refs]);
  }
},331,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAnimatedProps;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _ReactFabricPublicInstanceUtils = require(_dependencyMap[2]);
  var _ReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[3]));
  var _useRefEffect = _interopRequireDefault(require(_dependencyMap[4]));
  var _AnimatedEvent = require(_dependencyMap[5]);
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedProps = _interopRequireDefault(require(_dependencyMap[7]));
  var _react = require(_dependencyMap[8]);
  function useAnimatedProps(props) {
    var _useReducer = (0, _react.useReducer)(count => count + 1, 0),
      _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
      scheduleUpdate = _useReducer2[1];
    var onUpdateRef = (0, _react.useRef)(null);
    var node = (0, _react.useMemo)(() => new _AnimatedProps.default(props, () => onUpdateRef.current?.()), [props]);
    var useNativePropsInFabric = _ReactNativeFeatureFlags.default.shouldUseSetNativePropsInFabric();
    useAnimatedPropsLifecycle(node);
    var refEffect = (0, _react.useCallback)(instance => {
      node.setNativeView(instance);
      onUpdateRef.current = () => {
        if (typeof instance !== 'object' || typeof instance?.setNativeProps !== 'function' || isFabricInstance(instance) && !useNativePropsInFabric) {
          scheduleUpdate();
        } else if (!node.__isNative) {
          instance.setNativeProps(node.__getAnimatedValue());
        }
      };
      var target = getEventTarget(instance);
      var events = [];
      for (var propName in props) {
        var propValue = props[propName];
        if (propValue instanceof _AnimatedEvent.AnimatedEvent && propValue.__isNative) {
          propValue.__attach(target, propName);
          events.push([propName, propValue]);
        }
      }
      return () => {
        onUpdateRef.current = null;
        for (var _ref of events) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var _propName = _ref2[0];
          var _propValue = _ref2[1];
          _propValue.__detach(target, _propName);
        }
      };
    }, [props, node, useNativePropsInFabric]);
    var callbackRef = (0, _useRefEffect.default)(refEffect);
    return [reduceAnimatedProps(node), callbackRef];
  }
  function reduceAnimatedProps(node) {
    return {
      ...node.__getValue(),
      collapsable: false
    };
  }
  function useAnimatedPropsLifecycle(node) {
    var prevNodeRef = (0, _react.useRef)(null);
    var isUnmountingRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(() => {
      _NativeAnimatedHelper.default.API.flushQueue();
    });
    (0, _react.useLayoutEffect)(() => {
      isUnmountingRef.current = false;
      return () => {
        isUnmountingRef.current = true;
      };
    }, []);
    (0, _react.useLayoutEffect)(() => {
      node.__attach();
      if (prevNodeRef.current != null) {
        var prevNode = prevNodeRef.current;
        prevNode.__restoreDefaultValues();
        prevNode.__detach();
        prevNodeRef.current = null;
      }
      return () => {
        if (isUnmountingRef.current) {
          node.__detach();
        } else {
          prevNodeRef.current = node;
        }
      };
    }, [node]);
  }
  function getEventTarget(instance) {
    return typeof instance === 'object' && typeof instance?.getScrollableNode === 'function' ? instance.getScrollableNode() : instance;
  }
  function isFabricInstance(instance) {
    return (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance?.getNativeScrollRef?.()) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance?.getScrollResponder?.()?.getNativeScrollRef?.());
  }
},332,[1,29,333,140,334,306,307,323,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isPublicInstance = isPublicInstance;
  function isPublicInstance(maybeInstance) {
    return maybeInstance != null && (maybeInstance.__nativeTag != null || isLegacyFabricInstance(maybeInstance));
  }
  function isLegacyFabricInstance(maybeInstance) {
    return maybeInstance != null && maybeInstance['_internalInstanceHandle'] != null && maybeInstance['_internalInstanceHandle'].stateNode != null && maybeInstance['_internalInstanceHandle'].stateNode.canonical != null;
  }
},333,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useRefEffect;
  var _react = require(_dependencyMap[0]);
  function useRefEffect(effect) {
    var cleanupRef = (0, _react.useRef)(undefined);
    return (0, _react.useCallback)(instance => {
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = undefined;
      }
      if (instance != null) {
        cleanupRef.current = effect(instance);
      }
    }, [effect]);
  }
},334,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[9]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedAddition = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedAddition(a, b) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedAddition);
      _this = _callSuper(this, AnimatedAddition);
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _inherits2.default)(AnimatedAddition, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        _superPropGet(AnimatedAddition, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        _superPropGet(AnimatedAddition, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},335,[1,10,11,50,52,53,55,314,311,317]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedDiffClamp = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedDiffClamp(a, min, max) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedDiffClamp);
      _this = _callSuper(this, AnimatedDiffClamp);
      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }
    (0, _inherits2.default)(AnimatedDiffClamp, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        _superPropGet(AnimatedDiffClamp, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();
        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        _superPropGet(AnimatedDiffClamp, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},336,[1,10,11,50,52,53,55,314,317]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[9]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[10]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedDivision = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedDivision(a, b) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedDivision);
      _this = _callSuper(this, AnimatedDivision);
      _this._warnedAboutDivideByZero = false;
      if (b === 0 || b instanceof _AnimatedNode.default && b.__getValue() === 0) {
        console.error('Detected potential division by zero in AnimatedDivision');
      }
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _inherits2.default)(AnimatedDivision, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        _superPropGet(AnimatedDivision, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();
        var b = this._b.__getValue();
        if (b === 0) {
          if (!this._warnedAboutDivideByZero) {
            console.error('Detected division by zero in AnimatedDivision');
            this._warnedAboutDivideByZero = true;
          }
          return 0;
        }
        this._warnedAboutDivideByZero = false;
        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        _superPropGet(AnimatedDivision, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},337,[1,10,11,50,52,53,55,314,318,311,317]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedModulo = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedModulo(a, modulus) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedModulo);
      _this = _callSuper(this, AnimatedModulo);
      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }
    (0, _inherits2.default)(AnimatedModulo, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        _superPropGet(AnimatedModulo, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        _superPropGet(AnimatedModulo, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},338,[1,10,11,50,52,53,55,314,317]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[9]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedMultiplication = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedMultiplication(a, b) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedMultiplication);
      _this = _callSuper(this, AnimatedMultiplication);
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _inherits2.default)(AnimatedMultiplication, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        _superPropGet(AnimatedMultiplication, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        _superPropGet(AnimatedMultiplication, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},339,[1,10,11,50,52,53,55,314,311,317]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[9]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedSubtraction = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedSubtraction(a, b) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedSubtraction);
      _this = _callSuper(this, AnimatedSubtraction);
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _inherits2.default)(AnimatedSubtraction, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedSubtraction, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        _superPropGet(AnimatedSubtraction, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() - this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        _superPropGet(AnimatedSubtraction, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'subtraction',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},340,[1,10,11,50,52,53,55,314,311,317]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedNode2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedTracking = exports.default = /*#__PURE__*/function (_AnimatedNode) {
    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedTracking);
      _this = _callSuper(this, AnimatedTracking);
      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(animationConfig);
      _this._callback = callback;
      _this.__attach();
      return _this;
    }
    (0, _inherits2.default)(AnimatedTracking, _AnimatedNode);
    return (0, _createClass2.default)(AnimatedTracking, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this.__isNative = true;
        this._parent.__makeNative(platformConfig);
        _superPropGet(AnimatedTracking, "__makeNative", this, 3)([platformConfig]);
        this._value.__makeNative(platformConfig);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
        if (this._useNativeDriver) {
          var platformConfig = this._animationConfig.platformConfig;
          this.__makeNative(platformConfig);
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);
        _superPropGet(AnimatedTracking, "__detach", this, 3)([]);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass({
          ...this._animationConfig,
          toValue: this._animationConfig.toValue.__getValue()
        }), this._callback);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var animation = new this._animationClass({
          ...this._animationConfig,
          toValue: undefined
        });
        var animationConfig = animation.__getNativeAnimationConfig();
        return {
          type: 'tracking',
          animationId: _NativeAnimatedHelper.default.generateNewAnimationId(),
          animationConfig,
          toValue: this._parent.__getNativeTag(),
          value: this._value.__getNativeTag()
        };
      }
    }]);
  }(_AnimatedNode2.default);
},341,[1,10,11,50,52,53,55,307,318]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _AnimatedEvent = require(_dependencyMap[1]);
  var _AnimatedImplementation = _interopRequireDefault(require(_dependencyMap[2]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[3]));
  var _AnimatedColor = _interopRequireDefault(require(_dependencyMap[4]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[5]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedValueXY = _interopRequireDefault(require(_dependencyMap[8]));
  var inAnimationCallback = false;
  function mockAnimationStart(start) {
    return callback => {
      var guardedCallback = callback == null ? callback : function () {
        if (inAnimationCallback) {
          console.warn('Ignoring recursive animation callback when running mock animations');
          return;
        }
        inAnimationCallback = true;
        try {
          callback(...arguments);
        } finally {
          inAnimationCallback = false;
        }
      };
      start(guardedCallback);
    };
  }
  var emptyAnimation = {
    start: () => {},
    stop: () => {},
    reset: () => {},
    _startNativeLoop: () => {},
    _isUsingNativeDriver: () => {
      return false;
    }
  };
  var mockCompositeAnimation = animations => ({
    ...emptyAnimation,
    start: mockAnimationStart(callback => {
      animations.forEach(animation => animation.start());
      callback?.({
        finished: true
      });
    })
  });
  var spring = function (value, config) {
    var anyValue = value;
    return {
      ...emptyAnimation,
      start: mockAnimationStart(callback => {
        anyValue.setValue(config.toValue);
        callback?.({
          finished: true
        });
      })
    };
  };
  var timing = function (value, config) {
    var anyValue = value;
    return {
      ...emptyAnimation,
      start: mockAnimationStart(callback => {
        anyValue.setValue(config.toValue);
        callback?.({
          finished: true
        });
      })
    };
  };
  var decay = function (value, config) {
    return emptyAnimation;
  };
  var sequence = function (animations) {
    return mockCompositeAnimation(animations);
  };
  var parallel = function (animations, config) {
    return mockCompositeAnimation(animations);
  };
  var delay = function (time) {
    return emptyAnimation;
  };
  var stagger = function (time, animations) {
    return mockCompositeAnimation(animations);
  };
  var loop = function (animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$iterations = _ref.iterations,
      iterations = _ref$iterations === undefined ? -1 : _ref$iterations;
    return emptyAnimation;
  };
  var _default = exports.default = {
    Value: _AnimatedValue.default,
    ValueXY: _AnimatedValueXY.default,
    Color: _AnimatedColor.default,
    Interpolation: _AnimatedInterpolation.default,
    Node: _AnimatedNode.default,
    decay,
    timing,
    spring,
    add: _AnimatedImplementation.default.add,
    subtract: _AnimatedImplementation.default.subtract,
    divide: _AnimatedImplementation.default.divide,
    multiply: _AnimatedImplementation.default.multiply,
    modulo: _AnimatedImplementation.default.modulo,
    diffClamp: _AnimatedImplementation.default.diffClamp,
    delay,
    sequence,
    parallel,
    stagger,
    loop,
    event: _AnimatedImplementation.default.event,
    createAnimatedComponent: _createAnimatedComponent.default,
    attachNativeEvent: _AnimatedEvent.attachNativeEvent,
    forkEvent: _AnimatedImplementation.default.forkEvent,
    unforkEvent: _AnimatedImplementation.default.unforkEvent,
    Event: _AnimatedEvent.AnimatedEvent
  };
},342,[1,306,305,330,322,314,318,311,319]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _FlatList = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var FlatListWithEventThrottle = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_FlatList.default, {
    ...props,
    ref: ref
  }));
  var _default = exports.default = (0, _createAnimatedComponent.default)(FlatListWithEventThrottle);
},343,[1,344,330,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _virtualizedLists = require(_dependencyMap[7]);
  var _memoizeOne = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["numColumns", "columnWrapperStyle", "removeClippedSubviews", "strictMode"];
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var View = require(_dependencyMap[10]);
  var StyleSheet = require(_dependencyMap[11]);
  var deepDiffer = require(_dependencyMap[12]);
  var Platform = require(_dependencyMap[13]);
  var invariant = require(_dependencyMap[14]);
  var React = require(_dependencyMap[15]);
  function removeClippedSubviewsOrDefault(removeClippedSubviews) {
    return removeClippedSubviews ?? false;
  }
  function numColumnsOrDefault(numColumns) {
    return numColumns ?? 1;
  }
  function isArrayLike(data) {
    return typeof Object(data).length === 'number';
  }
  var FlatList = /*#__PURE__*/function (_React$PureComponent) {
    function FlatList(_props) {
      var _this;
      (0, _classCallCheck2.default)(this, FlatList);
      _this = _callSuper(this, FlatList, [_props]);
      _this._virtualizedListPairs = [];
      _this._captureRef = ref => {
        _this._listRef = ref;
      };
      _this._getItem = (data, index) => {
        var numColumns = numColumnsOrDefault(_this.props.numColumns);
        if (numColumns > 1) {
          var ret = [];
          for (var kk = 0; kk < numColumns; kk++) {
            var itemIndex = index * numColumns + kk;
            if (itemIndex < data.length) {
              var _item = data[itemIndex];
              ret.push(_item);
            }
          }
          return ret;
        } else {
          return data[index];
        }
      };
      _this._getItemCount = data => {
        if (data != null && isArrayLike(data)) {
          var numColumns = numColumnsOrDefault(_this.props.numColumns);
          return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;
        } else {
          return 0;
        }
      };
      _this._keyExtractor = (items, index) => {
        var numColumns = numColumnsOrDefault(_this.props.numColumns);
        var keyExtractor = _this.props.keyExtractor ?? _virtualizedLists.keyExtractor;
        if (numColumns > 1) {
          invariant(Array.isArray(items), "FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.", numColumns);
          return items.map((item, kk) => keyExtractor(item, index * numColumns + kk)).join(':');
        }
        return keyExtractor(items, index);
      };
      _this._renderer = (ListItemComponent, renderItem, columnWrapperStyle, numColumns, extraData) => {
        var cols = numColumnsOrDefault(numColumns);
        var render = props => {
          if (ListItemComponent) {
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(ListItemComponent, {
              ...props
            });
          } else if (renderItem) {
            return renderItem(props);
          } else {
            return null;
          }
        };
        var renderProp = info => {
          if (cols > 1) {
            var _item2 = info.item,
              _index = info.index;
            invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(View, {
              style: StyleSheet.compose(styles.row, columnWrapperStyle),
              children: _item2.map((it, kk) => {
                var element = render({
                  item: it,
                  index: _index * cols + kk,
                  separators: info.separators
                });
                return element != null ? /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
                  children: element
                }, kk) : null;
              })
            });
          } else {
            return render(info);
          }
        };
        return ListItemComponent ? {
          ListItemComponent: renderProp
        } : {
          renderItem: renderProp
        };
      };
      _this._memoizedRenderer = (0, _memoizeOne.default)(_this._renderer);
      _this._checkProps(_this.props);
      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(pair => ({
          viewabilityConfig: pair.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
        }));
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(function () {
            invariant(_this.props.onViewableItemsChanged, "Changing the nullability of onViewableItemsChanged is not supported. Once a function or null is supplied that cannot be changed.");
            return _this.props.onViewableItemsChanged(...arguments);
          })
        });
      }
      return _this;
    }
    (0, _inherits2.default)(FlatList, _React$PureComponent);
    return (0, _createClass2.default)(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getNativeScrollRef",
      value: function getNativeScrollRef() {
        if (this._listRef) {
          return this._listRef.getScrollRef();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        invariant(prevProps.numColumns === this.props.numColumns, "Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component.");
        invariant(prevProps.onViewableItemsChanged == null === (this.props.onViewableItemsChanged == null), 'Changing onViewableItemsChanged nullability on the fly is not supported');
        invariant(!deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');
        invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');
        this._checkProps(this.props);
      }
    }, {
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
          getItemCount = props.getItemCount,
          horizontal = props.horizontal,
          columnWrapperStyle = props.columnWrapperStyle,
          onViewableItemsChanged = props.onViewableItemsChanged,
          viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        var numColumns = numColumnsOrDefault(this.props.numColumns);
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');
        if (numColumns > 1) {
          invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
          invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }
        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), "FlatList does not support setting both onViewableItemsChanged and viewabilityConfigCallbackPairs.");
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var numColumns = numColumnsOrDefault(this.props.numColumns);
        var keyExtractor = this.props.keyExtractor ?? _virtualizedLists.keyExtractor;
        v.item.forEach((item, ii) => {
          invariant(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push({
            ...v,
            item,
            key: keyExtractor(item, index),
            index
          });
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        return info => {
          var numColumns = numColumnsOrDefault(this.props.numColumns);
          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var changed = [];
              var viewableItems = [];
              info.viewableItems.forEach(v => this._pushMultiColumnViewable(viewableItems, v));
              info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));
              onViewableItemsChanged({
                viewableItems,
                changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          numColumns = _this$props.numColumns,
          columnWrapperStyle = _this$props.columnWrapperStyle,
          _removeClippedSubviews = _this$props.removeClippedSubviews,
          _this$props$strictMod = _this$props.strictMode,
          strictMode = _this$props$strictMod === undefined ? false : _this$props$strictMod,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var renderer = strictMode ? this._memoizedRenderer : this._renderer;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_virtualizedLists.VirtualizedList, {
          ...restProps,
          getItem: this._getItem,
          getItemCount: this._getItemCount,
          keyExtractor: this._keyExtractor,
          ref: this._captureRef,
          viewabilityConfigCallbackPairs: this._virtualizedListPairs,
          removeClippedSubviews: removeClippedSubviewsOrDefault(_removeClippedSubviews),
          ...renderer(this.props.ListItemComponent, this.props.renderItem, columnWrapperStyle, numColumns, this.props.extraData)
        });
      }
    }]);
  }(React.PureComponent);
  var styles = StyleSheet.create({
    row: {
      flexDirection: 'row'
    }
  });
  module.exports = FlatList;
},344,[1,203,10,11,50,52,55,345,361,243,240,245,130,81,46,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _VirtualizeUtils = require(_dependencyMap[0]);
  module.exports = {
    keyExtractor: _VirtualizeUtils.keyExtractor,
    get VirtualizedList() {
      return require(_dependencyMap[1]);
    },
    get VirtualizedSectionList() {
      return require(_dependencyMap[2]);
    },
    get VirtualizedListContextResetter() {
      var VirtualizedListContext = require(_dependencyMap[3]);
      return VirtualizedListContext.VirtualizedListContextResetter;
    },
    get ViewabilityHelper() {
      return require(_dependencyMap[4]);
    },
    get FillRateHelper() {
      return require(_dependencyMap[5]);
    }
  };
},345,[346,347,360,358,356,353]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.computeWindowedRenderLimits = computeWindowedRenderLimits;
  exports.elementsThatOverlapOffsets = elementsThatOverlapOffsets;
  exports.keyExtractor = keyExtractor;
  exports.newRangeCount = newRangeCount;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  function elementsThatOverlapOffsets(offsets, props, listMetrics) {
    var zoomScale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    var itemCount = props.getItemCount(props.data);
    var result = [];
    for (var offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {
      var currentOffset = offsets[offsetIndex];
      var left = 0;
      var right = itemCount - 1;
      while (left <= right) {
        var mid = left + Math.floor((right - left) / 2);
        var frame = listMetrics.getCellMetricsApprox(mid, props);
        var scaledOffsetStart = frame.offset * zoomScale;
        var scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;
        if (mid === 0 && currentOffset < scaledOffsetStart || mid !== 0 && currentOffset <= scaledOffsetStart) {
          right = mid - 1;
        } else if (currentOffset > scaledOffsetEnd) {
          left = mid + 1;
        } else {
          result[offsetIndex] = mid;
          break;
        }
      }
    }
    return result;
  }
  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }
  function computeWindowedRenderLimits(props, maxToRenderPerBatch, windowSize, prev, listMetrics, scrollMetrics) {
    var itemCount = props.getItemCount(props.data);
    if (itemCount === 0) {
      return {
        first: 0,
        last: -1
      };
    }
    var offset = scrollMetrics.offset,
      velocity = scrollMetrics.velocity,
      visibleLength = scrollMetrics.visibleLength,
      _scrollMetrics$zoomSc = scrollMetrics.zoomScale,
      zoomScale = _scrollMetrics$zoomSc === undefined ? 1 : _scrollMetrics$zoomSc;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - 0.5 * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = listMetrics.getCellMetricsApprox(itemCount - 1, props).offset * zoomScale;
    if (lastItemOffset < overscanBegin) {
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }
    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props, listMetrics, zoomScale),
      _elementsThatOverlapO2 = (0, _slicedToArray2.default)(_elementsThatOverlapO, 4),
      overscanFirst = _elementsThatOverlapO2[0],
      first = _elementsThatOverlapO2[1],
      last = _elementsThatOverlapO2[2],
      overscanLast = _elementsThatOverlapO2[3];
    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first,
      last
    };
    var newCellCount = newRangeCount(prev, visible);
    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }
      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);
      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }
      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }
        first--;
      }
      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }
        last++;
      }
    }
    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first,
        last,
        itemCount,
        overscanFirst,
        overscanLast,
        visible
      }));
    }
    return {
      first,
      last
    };
  }
  function keyExtractor(item, index) {
    if (typeof item === 'object' && item?.key != null) {
      return item.key;
    }
    if (typeof item === 'object' && item?.id != null) {
      return item.id;
    }
    return String(index);
  }
},346,[1,29]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _reactNative = require(_dependencyMap[6]);
  var _Batchinator = _interopRequireDefault(require(_dependencyMap[7]));
  var _clamp = _interopRequireDefault(require(_dependencyMap[8]));
  var _infoLog = _interopRequireDefault(require(_dependencyMap[9]));
  var _CellRenderMask = require(_dependencyMap[10]);
  var _ChildListCollection = _interopRequireDefault(require(_dependencyMap[11]));
  var _FillRateHelper = _interopRequireDefault(require(_dependencyMap[12]));
  var _ListMetricsAggregator = _interopRequireDefault(require(_dependencyMap[13]));
  var _StateSafePureComponent = _interopRequireDefault(require(_dependencyMap[14]));
  var _ViewabilityHelper = _interopRequireDefault(require(_dependencyMap[15]));
  var _VirtualizedListCellRenderer = _interopRequireDefault(require(_dependencyMap[16]));
  var _VirtualizedListContext = require(_dependencyMap[17]);
  var _VirtualizeUtils = require(_dependencyMap[18]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[19]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[20]));
  var React = _interopRequireWildcard(require(_dependencyMap[21]));
  var _VirtualizedListProps = require(_dependencyMap[22]);
  var _jsxRuntime = require(_dependencyMap[23]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ON_EDGE_REACHED_EPSILON = 0.001;
  var _usedIndexForKey = false;
  var _keylessItemComponentName = '';
  function getScrollingThreshold(threshold, visibleLength) {
    return threshold * visibleLength / 2;
  }
  var VirtualizedList = /*#__PURE__*/function (_StateSafePureCompone) {
    function VirtualizedList(_props) {
      var _this;
      (0, _classCallCheck2.default)(this, VirtualizedList);
      _this = _callSuper(this, VirtualizedList, [_props]);
      _this._getScrollMetrics = () => {
        return _this._scrollMetrics;
      };
      _this._getOutermostParentListRef = () => {
        if (_this._isNestedWithSameOrientation()) {
          return _this.context.getOutermostParentListRef();
        } else {
          return _this;
        }
      };
      _this._registerAsNestedChild = childList => {
        _this._nestedChildLists.add(childList.ref, childList.cellKey);
        if (_this._hasInteracted) {
          childList.ref.recordInteraction();
        }
      };
      _this._unregisterAsNestedChild = childList => {
        _this._nestedChildLists.remove(childList.ref);
      };
      _this._onUpdateSeparators = (keys, newProps) => {
        keys.forEach(key => {
          var ref = key != null && _this._cellRefs[key];
          ref && ref.updateSeparatorProps(newProps);
        });
      };
      _this._getSpacerKey = isVertical => isVertical ? 'height' : 'width';
      _this._cellRefs = {};
      _this._listMetrics = new _ListMetricsAggregator.default();
      _this._footerLength = 0;
      _this._hasTriggeredInitialScrollToIndex = false;
      _this._hasInteracted = false;
      _this._hasMore = false;
      _this._hasWarned = {};
      _this._headerLength = 0;
      _this._hiPriInProgress = false;
      _this._indicesToKeys = new Map();
      _this._lastFocusedCellKey = null;
      _this._nestedChildLists = new _ChildListCollection.default();
      _this._offsetFromParentVirtualizedList = 0;
      _this._pendingViewabilityUpdate = false;
      _this._prevParentOffset = 0;
      _this._scrollMetrics = {
        dOffset: 0,
        dt: 10,
        offset: 0,
        timestamp: 0,
        velocity: 0,
        visibleLength: 0,
        zoomScale: 1
      };
      _this._scrollRef = null;
      _this._sentStartForContentLength = 0;
      _this._sentEndForContentLength = 0;
      _this._viewabilityTuples = [];
      _this._captureScrollRef = ref => {
        _this._scrollRef = ref;
      };
      _this._defaultRenderScrollComponent = props => {
        var onRefresh = props.onRefresh;
        if (_this._isNestedWithSameOrientation()) {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            ...props
          });
        } else if (onRefresh) {
          (0, _invariant.default)(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing ?? 'undefined') + '`');
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
            ...props,
            refreshControl: props.refreshControl == null ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
              refreshing: props.refreshing,
              onRefresh: onRefresh,
              progressViewOffset: props.progressViewOffset
            }) : props.refreshControl
          });
        } else {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
            ...props
          });
        }
      };
      _this._onCellLayout = (e, cellKey, cellIndex) => {
        var layoutHasChanged = _this._listMetrics.notifyCellLayout({
          cellIndex,
          cellKey,
          layout: e.nativeEvent.layout,
          orientation: _this._orientation()
        });
        if (layoutHasChanged) {
          _this._scheduleCellsToRenderUpdate();
        }
        _this._triggerRemeasureForChildListsInCell(cellKey);
        _this._computeBlankness();
        _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
      };
      _this._onCellUnmount = cellKey => {
        delete _this._cellRefs[cellKey];
        _this._listMetrics.notifyCellUnmounted(cellKey);
      };
      _this._onLayout = e => {
        if (_this._isNestedWithSameOrientation()) {
          _this.measureLayoutRelativeToContainingList();
        } else {
          _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
        }
        _this.props.onLayout && _this.props.onLayout(e);
        _this._scheduleCellsToRenderUpdate();
        _this._maybeCallOnEdgeReached();
      };
      _this._onLayoutEmpty = e => {
        _this.props.onLayout && _this.props.onLayout(e);
      };
      _this._onLayoutFooter = e => {
        _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());
        _this._footerLength = _this._selectLength(e.nativeEvent.layout);
      };
      _this._onLayoutHeader = e => {
        _this._headerLength = _this._selectLength(e.nativeEvent.layout);
      };
      _this._onContentSizeChange = (width, height) => {
        _this._listMetrics.notifyListContentLayout({
          layout: {
            width,
            height
          },
          orientation: _this._orientation()
        });
        _this._maybeScrollToInitialScrollIndex(width, height);
        if (_this.props.onContentSizeChange) {
          _this.props.onContentSizeChange(width, height);
        }
        _this._scheduleCellsToRenderUpdate();
        _this._maybeCallOnEdgeReached();
      };
      _this._convertParentScrollMetrics = metrics => {
        var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
        var visibleLength = metrics.visibleLength;
        var dOffset = offset - _this._scrollMetrics.offset;
        var contentLength = _this._listMetrics.getContentLength();
        return {
          visibleLength,
          contentLength,
          offset,
          dOffset
        };
      };
      _this._onScroll = e => {
        _this._nestedChildLists.forEach(childList => {
          childList._onScroll(e);
        });
        if (_this.props.onScroll) {
          _this.props.onScroll(e);
        }
        var timestamp = e.timeStamp;
        var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);
        var contentLength = _this._selectLength(e.nativeEvent.contentSize);
        var offset = _this._offsetFromScrollEvent(e);
        var dOffset = offset - _this._scrollMetrics.offset;
        if (_this._isNestedWithSameOrientation()) {
          if (_this._listMetrics.getContentLength() === 0) {
            return;
          }
          var _this$_convertParentS = _this._convertParentScrollMetrics({
            visibleLength,
            offset
          });
          visibleLength = _this$_convertParentS.visibleLength;
          contentLength = _this$_convertParentS.contentLength;
          offset = _this$_convertParentS.offset;
          dOffset = _this$_convertParentS.dOffset;
        }
        var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
        var velocity = dOffset / dt;
        if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
          (0, _infoLog.default)("VirtualizedList: You have a large list that is slow to update - make sure your renderItem function renders components that follow React performance best practices like PureComponent, shouldComponentUpdate, etc.", {
            dt,
            prevDt: _this._scrollMetrics.dt,
            contentLength
          });
          _this._hasWarned.perf = true;
        }
        var zoomScale = e.nativeEvent.zoomScale < 0 ? 1 : e.nativeEvent.zoomScale;
        _this._scrollMetrics = {
          dt,
          dOffset,
          offset,
          timestamp,
          velocity,
          visibleLength,
          zoomScale
        };
        if (_this.state.pendingScrollUpdateCount > 0) {
          _this.setState(state => ({
            pendingScrollUpdateCount: state.pendingScrollUpdateCount - 1
          }));
        }
        _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
        if (!_this.props) {
          return;
        }
        _this._maybeCallOnEdgeReached();
        if (velocity !== 0) {
          _this._fillRateHelper.activate();
        }
        _this._computeBlankness();
        _this._scheduleCellsToRenderUpdate();
      };
      _this._onScrollBeginDrag = e => {
        _this._nestedChildLists.forEach(childList => {
          childList._onScrollBeginDrag(e);
        });
        _this._viewabilityTuples.forEach(tuple => {
          tuple.viewabilityHelper.recordInteraction();
        });
        _this._hasInteracted = true;
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
      };
      _this._onScrollEndDrag = e => {
        _this._nestedChildLists.forEach(childList => {
          childList._onScrollEndDrag(e);
        });
        var velocity = e.nativeEvent.velocity;
        if (velocity) {
          _this._scrollMetrics.velocity = _this._selectOffset(velocity);
        }
        _this._computeBlankness();
        _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
      };
      _this._onMomentumScrollBegin = e => {
        _this._nestedChildLists.forEach(childList => {
          childList._onMomentumScrollBegin(e);
        });
        _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
      };
      _this._onMomentumScrollEnd = e => {
        _this._nestedChildLists.forEach(childList => {
          childList._onMomentumScrollEnd(e);
        });
        _this._scrollMetrics.velocity = 0;
        _this._computeBlankness();
        _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
      };
      _this._updateCellsToRender = () => {
        _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
        _this.setState((state, props) => {
          var cellsAroundViewport = _this._adjustCellsAroundViewport(props, state.cellsAroundViewport, state.pendingScrollUpdateCount);
          var renderMask = VirtualizedList._createRenderMask(props, cellsAroundViewport, _this._getNonViewportRenderRegions(props));
          if (cellsAroundViewport.first === state.cellsAroundViewport.first && cellsAroundViewport.last === state.cellsAroundViewport.last && renderMask.equals(state.renderMask)) {
            return null;
          }
          return {
            cellsAroundViewport,
            renderMask
          };
        });
      };
      _this._createViewToken = (index, isViewable, props) => {
        var data = props.data,
          getItem = props.getItem;
        var item = getItem(data, index);
        return {
          index,
          item,
          key: VirtualizedList._keyExtractor(item, index, props),
          isViewable
        };
      };
      _this._getNonViewportRenderRegions = props => {
        if (!(_this._lastFocusedCellKey && _this._cellRefs[_this._lastFocusedCellKey])) {
          return [];
        }
        var lastFocusedCellRenderer = _this._cellRefs[_this._lastFocusedCellKey];
        var focusedCellIndex = lastFocusedCellRenderer.props.index;
        var itemCount = props.getItemCount(props.data);
        if (focusedCellIndex >= itemCount || VirtualizedList._getItemKey(props, focusedCellIndex) !== _this._lastFocusedCellKey) {
          return [];
        }
        var first = focusedCellIndex;
        var heightOfCellsBeforeFocused = 0;
        for (var i = first - 1; i >= 0 && heightOfCellsBeforeFocused < _this._scrollMetrics.visibleLength; i--) {
          first--;
          heightOfCellsBeforeFocused += _this._listMetrics.getCellMetricsApprox(i, props).length;
        }
        var last = focusedCellIndex;
        var heightOfCellsAfterFocused = 0;
        for (var _i = last + 1; _i < itemCount && heightOfCellsAfterFocused < _this._scrollMetrics.visibleLength; _i++) {
          last++;
          heightOfCellsAfterFocused += _this._listMetrics.getCellMetricsApprox(_i, props).length;
        }
        return [{
          first,
          last
        }];
      };
      _this._checkProps(_props);
      _this._fillRateHelper = new _FillRateHelper.default(_this._listMetrics);
      _this._updateCellsToRenderBatcher = new _Batchinator.default(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod ?? 50);
      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(pair => ({
          viewabilityHelper: new _ViewabilityHelper.default(pair.viewabilityConfig),
          onViewableItemsChanged: pair.onViewableItemsChanged
        }));
      } else {
        var _this$props = _this.props,
          onViewableItemsChanged = _this$props.onViewableItemsChanged,
          viewabilityConfig = _this$props.viewabilityConfig;
        if (onViewableItemsChanged) {
          _this._viewabilityTuples.push({
            viewabilityHelper: new _ViewabilityHelper.default(viewabilityConfig),
            onViewableItemsChanged: onViewableItemsChanged
          });
        }
      }
      var initialRenderRegion = VirtualizedList._initialRenderRegion(_props);
      var minIndexForVisible = _this.props.maintainVisibleContentPosition?.minIndexForVisible ?? 0;
      _this.state = {
        cellsAroundViewport: initialRenderRegion,
        renderMask: VirtualizedList._createRenderMask(_props, initialRenderRegion),
        firstVisibleItemKey: _this.props.getItemCount(_this.props.data) > minIndexForVisible ? VirtualizedList._getItemKey(_this.props, minIndexForVisible) : null,
        pendingScrollUpdateCount: _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 ? 1 : 0
      };
      return _this;
    }
    (0, _inherits2.default)(VirtualizedList, _StateSafePureCompone);
    return (0, _createClass2.default)(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;
        if (veryLast < 0) {
          return;
        }
        var frame = this._listMetrics.getCellMetricsApprox(veryLast, this.props);
        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
        this.scrollToOffset({
          animated,
          offset
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _this$props2 = this.props,
          data = _this$props2.data,
          getItemCount = _this$props2.getItemCount,
          getItemLayout = _this$props2.getItemLayout,
          onScrollToIndexFailed = _this$props2.onScrollToIndexFailed;
        var animated = params.animated,
          index = params.index,
          viewOffset = params.viewOffset,
          viewPosition = params.viewPosition;
        (0, _invariant.default)(index >= 0, `scrollToIndex out of range: requested index ${index} but minimum is 0`);
        (0, _invariant.default)(getItemCount(data) >= 1, `scrollToIndex out of range: item length ${getItemCount(data)} but minimum is 1`);
        (0, _invariant.default)(index < getItemCount(data), `scrollToIndex out of range: requested index ${index} is out of 0 to ${getItemCount(data) - 1}`);
        if (!getItemLayout && index > this._listMetrics.getHighestMeasuredCellIndex()) {
          (0, _invariant.default)(!!onScrollToIndexFailed, "scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, otherwise there is no way to know the location of offscreen indices or handle failures.");
          onScrollToIndexFailed({
            averageItemLength: this._listMetrics.getAverageCellLength(),
            highestMeasuredFrameIndex: this._listMetrics.getHighestMeasuredCellIndex(),
            index
          });
          return;
        }
        var frame = this._listMetrics.getCellMetricsApprox(Math.floor(index), this.props);
        var offset = Math.max(0, this._listMetrics.getCellOffsetApprox(index, this.props) - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
        this.scrollToOffset({
          offset,
          animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _this$props3 = this.props,
          data = _this$props3.data,
          getItem = _this$props3.getItem,
          getItemCount = _this$props3.getItemCount;
        var itemCount = getItemCount(data);
        for (var index = 0; index < itemCount; index++) {
          if (getItem(data, index) === item) {
            this.scrollToIndex({
              ...params,
              index
            });
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
          offset = params.offset;
        var scrollRef = this._scrollRef;
        if (scrollRef == null) {
          return;
        }
        if (scrollRef.scrollTo == null) {
          console.warn("No scrollTo method provided. This may be because you have two nested VirtualizedLists with the same orientation, or because you are using a custom component that does not implement scrollTo.");
          return;
        }
        var _this$_orientation = this._orientation(),
          horizontal = _this$_orientation.horizontal,
          rtl = _this$_orientation.rtl;
        if (horizontal && rtl && !this._listMetrics.hasContentLength()) {
          console.warn('scrollToOffset may not be called in RTL before content is laid out');
          return;
        }
        scrollRef.scrollTo({
          animated,
          ...this._scrollToParamsFromOffset(offset)
        });
      }
    }, {
      key: "_scrollToParamsFromOffset",
      value: function _scrollToParamsFromOffset(offset) {
        var _this$_orientation2 = this._orientation(),
          horizontal = _this$_orientation2.horizontal,
          rtl = _this$_orientation2.rtl;
        if (horizontal && rtl) {
          var cartOffset = this._listMetrics.cartesianOffset(offset + this._scrollMetrics.visibleLength);
          return horizontal ? {
            x: cartOffset
          } : {
            y: cartOffset
          };
        } else {
          return horizontal ? {
            x: offset
          } : {
            y: offset
          };
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._nestedChildLists.forEach(childList => {
          childList.recordInteraction();
        });
        this._viewabilityTuples.forEach(t => {
          t.viewabilityHelper.recordInteraction();
        });
        this._updateViewableItems(this.props, this.state.cellsAroundViewport);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._scrollRef == null) {
          return;
        }
        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return (0, _reactNative.findNodeHandle)(this._scrollRef);
        }
      }
    }, {
      key: "getScrollRef",
      value: function getScrollRef() {
        if (this._scrollRef && this._scrollRef.getScrollRef) {
          return this._scrollRef.getScrollRef();
        } else {
          return this._scrollRef;
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        return this.context?.cellKey || 'rootList';
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }, {
      key: "_checkProps",
      value: function _checkProps(props) {
        var onScroll = props.onScroll,
          windowSize = props.windowSize,
          getItemCount = props.getItemCount,
          data = props.data,
          initialScrollIndex = props.initialScrollIndex;
        (0, _invariant.default)(!onScroll || !onScroll.__isNative, "Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent to support native onScroll events with useNativeDriver");
        (0, _invariant.default)((0, _VirtualizedListProps.windowSizeOrDefault)(windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
        (0, _invariant.default)(getItemCount, 'VirtualizedList: The "getItemCount" prop must be provided');
        var itemCount = getItemCount(data);
        if (initialScrollIndex != null && !this._hasTriggeredInitialScrollToIndex && (initialScrollIndex < 0 || itemCount > 0 && initialScrollIndex >= itemCount) && !this._hasWarned.initialScrollIndex) {
          console.warn(`initialScrollIndex "${initialScrollIndex}" is not valid (list has ${itemCount} items)`);
          this._hasWarned.initialScrollIndex = true;
        }
      }
    }, {
      key: "_adjustCellsAroundViewport",
      value: function _adjustCellsAroundViewport(props, cellsAroundViewport, pendingScrollUpdateCount) {
        var data = props.data,
          getItemCount = props.getItemCount;
        var onEndReachedThreshold = (0, _VirtualizedListProps.onEndReachedThresholdOrDefault)(props.onEndReachedThreshold);
        var _this$_scrollMetrics = this._scrollMetrics,
          offset = _this$_scrollMetrics.offset,
          visibleLength = _this$_scrollMetrics.visibleLength;
        var contentLength = this._listMetrics.getContentLength();
        var distanceFromEnd = contentLength - visibleLength - offset;
        if (visibleLength <= 0 || contentLength <= 0) {
          return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
        }
        var newCellsAroundViewport;
        if (props.disableVirtualization) {
          var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch) : 0;
          newCellsAroundViewport = {
            first: 0,
            last: Math.min(cellsAroundViewport.last + renderAhead, getItemCount(data) - 1)
          };
        } else {
          if (pendingScrollUpdateCount > 0) {
            return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
          }
          newCellsAroundViewport = (0, _VirtualizeUtils.computeWindowedRenderLimits)(props, (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch), (0, _VirtualizedListProps.windowSizeOrDefault)(props.windowSize), cellsAroundViewport, this._listMetrics, this._scrollMetrics);
          (0, _invariant.default)(newCellsAroundViewport.last < getItemCount(data), 'computeWindowedRenderLimits() should return range in-bounds');
        }
        if (this._nestedChildLists.size() > 0) {
          var childIdx = this._findFirstChildWithMore(newCellsAroundViewport.first, newCellsAroundViewport.last);
          newCellsAroundViewport.last = childIdx ?? newCellsAroundViewport.last;
        }
        return newCellsAroundViewport;
      }
    }, {
      key: "_findFirstChildWithMore",
      value: function _findFirstChildWithMore(first, last) {
        for (var ii = first; ii <= last; ii++) {
          var cellKeyForIndex = this._indicesToKeys.get(ii);
          if (cellKeyForIndex != null && this._nestedChildLists.anyInCell(cellKeyForIndex, childList => childList.hasMore())) {
            return ii;
          }
        }
        return null;
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.registerAsNestedChild({
            ref: this,
            cellKey: this.context.cellKey
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.unregisterAsNestedChild({
            ref: this
          });
        }
        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });
        this._viewabilityTuples.forEach(tuple => {
          tuple.viewabilityHelper.dispose();
        });
        this._fillRateHelper.deactivateAndFlush();
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this2 = this;
        var _this$props4 = this.props,
          CellRendererComponent = _this$props4.CellRendererComponent,
          ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,
          ListHeaderComponent = _this$props4.ListHeaderComponent,
          ListItemComponent = _this$props4.ListItemComponent,
          data = _this$props4.data,
          debug = _this$props4.debug,
          getItem = _this$props4.getItem,
          getItemCount = _this$props4.getItemCount,
          getItemLayout = _this$props4.getItemLayout,
          horizontal = _this$props4.horizontal,
          renderItem = _this$props4.renderItem;
        var stickyOffset = ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey;
        last = Math.min(end, last);
        var _loop = function () {
          var item = getItem(data, ii);
          var key = VirtualizedList._keyExtractor(item, ii, _this2.props);
          _this2._indicesToKeys.set(ii, key);
          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }
          var shouldListenForLayout = getItemLayout == null || debug || _this2._fillRateHelper.enabled();
          cells.push(/*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListCellRenderer.default, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            ListItemComponent: ListItemComponent,
            cellKey: key,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this2._onUpdateSeparators,
            onCellFocusCapture: e => _this2._onCellFocusCapture(key),
            onUnmount: _this2._onCellUnmount,
            ref: ref => {
              _this2._cellRefs[key] = ref;
            },
            renderItem: renderItem,
            ...(shouldListenForLayout && {
              onCellLayout: _this2._onCellLayout
            })
          }, key));
          prevCellKey = key;
        };
        for (var ii = first; ii <= last; ii++) {
          _loop();
        }
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context;
        return !!(nestedContext && !!nestedContext.horizontal === (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal));
      }
    }, {
      key: "render",
      value: function render() {
        this._checkProps(this.props);
        var _this$props5 = this.props,
          ListEmptyComponent = _this$props5.ListEmptyComponent,
          ListFooterComponent = _this$props5.ListFooterComponent,
          ListHeaderComponent = _this$props5.ListHeaderComponent;
        var _this$props6 = this.props,
          data = _this$props6.data,
          horizontal = _this$props6.horizontal;
        var inversionStyle = this.props.inverted ? (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];
        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }
          var element = /*#__PURE__*/React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : /*#__PURE__*/(0, _jsxRuntime.jsx)(ListHeaderComponent, {});
          cells.push(/*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
            cellKey: this._getCellKey() + '-header',
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
              collapsable: false,
              onLayout: this._onLayoutHeader,
              style: _reactNative.StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle),
              children: element
            })
          }, "$header"));
        }
        var itemCount = this.props.getItemCount(data);
        if (itemCount === 0 && ListEmptyComponent) {
          var _element = /*#__PURE__*/React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : /*#__PURE__*/(0, _jsxRuntime.jsx)(ListEmptyComponent, {});
          cells.push(/*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
            cellKey: this._getCellKey() + '-empty',
            children: /*#__PURE__*/React.cloneElement(_element, {
              onLayout: event => {
                this._onLayoutEmpty(event);
                if (_element.props.onLayout) {
                  _element.props.onLayout(event);
                }
              },
              style: _reactNative.StyleSheet.compose(inversionStyle, _element.props.style)
            })
          }, "$empty"));
        }
        if (itemCount > 0) {
          _usedIndexForKey = false;
          _keylessItemComponentName = '';
          var spacerKey = this._getSpacerKey(!horizontal);
          var renderRegions = this.state.renderMask.enumerateRegions();
          var lastRegion = renderRegions[renderRegions.length - 1];
          var lastSpacer = lastRegion?.isSpacer ? lastRegion : null;
          for (var section of renderRegions) {
            if (section.isSpacer) {
              if (this.props.disableVirtualization) {
                continue;
              }
              var isLastSpacer = section === lastSpacer;
              var constrainToMeasured = isLastSpacer && !this.props.getItemLayout;
              var last = constrainToMeasured ? (0, _clamp.default)(section.first - 1, section.last, this._listMetrics.getHighestMeasuredCellIndex()) : section.last;
              var firstMetrics = this._listMetrics.getCellMetricsApprox(section.first, this.props);
              var lastMetrics = this._listMetrics.getCellMetricsApprox(last, this.props);
              var spacerSize = lastMetrics.offset + lastMetrics.length - firstMetrics.offset;
              cells.push(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: {
                  [spacerKey]: spacerSize
                }
              }, `$spacer-${section.first}`));
            } else {
              this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, section.first, section.last, inversionStyle);
            }
          }
          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn("VirtualizedList: missing keys for items, make sure to specify a key or id property on each item or provide a custom keyExtractor.", _keylessItemComponentName);
            this._hasWarned.keys = true;
          }
        }
        if (ListFooterComponent) {
          var _element2 = /*#__PURE__*/React.isValidElement(ListFooterComponent) ? ListFooterComponent : /*#__PURE__*/(0, _jsxRuntime.jsx)(ListFooterComponent, {});
          cells.push(/*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
            cellKey: this._getFooterCellKey(),
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
              onLayout: this._onLayoutFooter,
              style: _reactNative.StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle),
              children: _element2
            })
          }, "$footer"));
        }
        var scrollProps = {
          ...this.props,
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollBegin: this._onMomentumScrollBegin,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle ?? 0.0001,
          invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
          stickyHeaderIndices,
          style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style,
          isInvertedVirtualizedList: this.props.inverted,
          maintainVisibleContentPosition: this.props.maintainVisibleContentPosition != null ? {
            ...this.props.maintainVisibleContentPosition,
            minIndexForVisible: this.props.maintainVisibleContentPosition.minIndexForVisible + (this.props.ListHeaderComponent ? 1 : 0)
          } : undefined
        };
        this._hasMore = this.state.cellsAroundViewport.last < itemCount - 1;
        var innerRet = /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListContextProvider, {
          value: {
            cellKey: null,
            getScrollMetrics: this._getScrollMetrics,
            horizontal: (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal),
            getOutermostParentListRef: this._getOutermostParentListRef,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild
          },
          children: /*#__PURE__*/React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
            ref: this._captureScrollRef
          }, cells)
        });
        var ret = innerRet;
        if (this.props.debug) {
          return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.debug,
            children: [ret, this._renderDebugOverlay()]
          });
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props7 = this.props,
          data = _this$props7.data,
          extraData = _this$props7.extraData;
        if (data !== prevProps.data || extraData !== prevProps.extraData) {
          this._viewabilityTuples.forEach(tuple => {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }
        var hiPriInProgress = this._hiPriInProgress;
        this._scheduleCellsToRenderUpdate();
        if (hiPriInProgress) {
          this._hiPriInProgress = false;
        }
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state.cellsAroundViewport, this._scrollMetrics);
      }
    }, {
      key: "_onCellFocusCapture",
      value: function _onCellFocusCapture(cellKey) {
        this._lastFocusedCellKey = cellKey;
        this._updateCellsToRender();
      }
    }, {
      key: "_triggerRemeasureForChildListsInCell",
      value: function _triggerRemeasureForChildListsInCell(cellKey) {
        this._nestedChildLists.forEachInCell(cellKey, childList => {
          childList.measureLayoutRelativeToContainingList();
        });
      }
    }, {
      key: "measureLayoutRelativeToContainingList",
      value: function measureLayoutRelativeToContainingList() {
        try {
          if (!this._scrollRef) {
            return;
          }
          this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), (x, y, width, height) => {
            this._offsetFromParentVirtualizedList = this._selectOffset({
              x,
              y
            });
            this._listMetrics.notifyListContentLayout({
              layout: {
                width,
                height
              },
              orientation: this._orientation()
            });
            var scrollMetrics = this._convertParentScrollMetrics(this.context.getScrollMetrics());
            var metricsChanged = this._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || this._scrollMetrics.offset !== scrollMetrics.offset;
            if (metricsChanged) {
              this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
              this._scrollMetrics.offset = scrollMetrics.offset;
              this._nestedChildLists.forEach(childList => {
                childList.measureLayoutRelativeToContainingList();
              });
            }
          }, error => {
            console.warn("VirtualizedList: Encountered an error while measuring a list's offset from its containing VirtualizedList.");
          });
        } catch (error) {
          console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
        }
      }
    }, {
      key: "_getFooterCellKey",
      value: function _getFooterCellKey() {
        return this._getCellKey() + '-footer';
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / (this._listMetrics.getContentLength() || 1);
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);
        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._listMetrics.getCellMetricsApprox(ii, this.props);
          if (frame.isMounted) {
            framesInLayout.push(frame);
          }
        }
        var windowTop = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.first, this.props).offset;
        var frameLast = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.last, this.props);
        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.debugOverlayBase, styles.debugOverlay],
          children: [framesInLayout.map((f, ii) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
              top: f.offset * normalize,
              height: f.length * normalize
            }]
          }, 'f' + ii)), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
              top: windowTop * normalize,
              height: windowLen * normalize
            }]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
              top: visTop * normalize,
              height: visLen * normalize
            }]
          })]
        });
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !(0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal) ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(_ref) {
        var x = _ref.x,
          y = _ref.y;
        return this._orientation().horizontal ? x : y;
      }
    }, {
      key: "_orientation",
      value: function _orientation() {
        return {
          horizontal: (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal),
          rtl: _reactNative.I18nManager.isRTL
        };
      }
    }, {
      key: "_maybeCallOnEdgeReached",
      value: function _maybeCallOnEdgeReached() {
        var _this$props8 = this.props,
          data = _this$props8.data,
          getItemCount = _this$props8.getItemCount,
          onStartReached = _this$props8.onStartReached,
          onStartReachedThreshold = _this$props8.onStartReachedThreshold,
          onEndReached = _this$props8.onEndReached,
          onEndReachedThreshold = _this$props8.onEndReachedThreshold;
        if (this.state.pendingScrollUpdateCount > 0) {
          return;
        }
        var _this$_scrollMetrics2 = this._scrollMetrics,
          visibleLength = _this$_scrollMetrics2.visibleLength,
          offset = _this$_scrollMetrics2.offset;
        var distanceFromStart = offset;
        var distanceFromEnd = this._listMetrics.getContentLength() - visibleLength - offset;
        if (distanceFromStart < ON_EDGE_REACHED_EPSILON) {
          distanceFromStart = 0;
        }
        if (distanceFromEnd < ON_EDGE_REACHED_EPSILON) {
          distanceFromEnd = 0;
        }
        var DEFAULT_THRESHOLD_PX = 2;
        var startThreshold = onStartReachedThreshold != null ? onStartReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
        var endThreshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
        var isWithinStartThreshold = distanceFromStart <= startThreshold;
        var isWithinEndThreshold = distanceFromEnd <= endThreshold;
        if (onEndReached && this.state.cellsAroundViewport.last === getItemCount(data) - 1 && isWithinEndThreshold && this._listMetrics.getContentLength() !== this._sentEndForContentLength) {
          this._sentEndForContentLength = this._listMetrics.getContentLength();
          onEndReached({
            distanceFromEnd
          });
        } else if (onStartReached != null && this.state.cellsAroundViewport.first === 0 && isWithinStartThreshold && this._listMetrics.getContentLength() !== this._sentStartForContentLength) {
          this._sentStartForContentLength = this._listMetrics.getContentLength();
          onStartReached({
            distanceFromStart
          });
        } else {
          this._sentStartForContentLength = isWithinStartThreshold ? this._sentStartForContentLength : 0;
          this._sentEndForContentLength = isWithinEndThreshold ? this._sentEndForContentLength : 0;
        }
      }
    }, {
      key: "_maybeScrollToInitialScrollIndex",
      value: function _maybeScrollToInitialScrollIndex(contentWidth, contentHeight) {
        if (contentWidth > 0 && contentHeight > 0 && this.props.initialScrollIndex != null && this.props.initialScrollIndex > 0 && !this._hasTriggeredInitialScrollToIndex) {
          if (this.props.contentOffset == null) {
            if (this.props.initialScrollIndex < this.props.getItemCount(this.props.data)) {
              this.scrollToIndex({
                animated: false,
                index: (0, _nullthrows.default)(this.props.initialScrollIndex)
              });
            } else {
              this.scrollToEnd({
                animated: false
              });
            }
          }
          this._hasTriggeredInitialScrollToIndex = true;
        }
      }
    }, {
      key: "_offsetFromScrollEvent",
      value: function _offsetFromScrollEvent(e) {
        var _e$nativeEvent = e.nativeEvent,
          contentOffset = _e$nativeEvent.contentOffset,
          contentSize = _e$nativeEvent.contentSize,
          layoutMeasurement = _e$nativeEvent.layoutMeasurement;
        var _this$_orientation3 = this._orientation(),
          horizontal = _this$_orientation3.horizontal,
          rtl = _this$_orientation3.rtl;
        if (horizontal && rtl) {
          return this._selectLength(contentSize) - (this._selectOffset(contentOffset) + this._selectLength(layoutMeasurement));
        } else {
          return this._selectOffset(contentOffset);
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        if ((this._listMetrics.getAverageCellLength() > 0 || this.props.getItemLayout != null) && this._shouldRenderWithPriority() && !this._hiPriInProgress) {
          this._hiPriInProgress = true;
          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });
          this._updateCellsToRender();
          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_shouldRenderWithPriority",
      value: function _shouldRenderWithPriority() {
        var _this$state$cellsArou = this.state.cellsAroundViewport,
          first = _this$state$cellsArou.first,
          last = _this$state$cellsArou.last;
        var _this$_scrollMetrics3 = this._scrollMetrics,
          offset = _this$_scrollMetrics3.offset,
          visibleLength = _this$_scrollMetrics3.visibleLength,
          velocity = _this$_scrollMetrics3.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;
        var onStartReachedThreshold = (0, _VirtualizedListProps.onStartReachedThresholdOrDefault)(this.props.onStartReachedThreshold);
        var onEndReachedThreshold = (0, _VirtualizedListProps.onEndReachedThresholdOrDefault)(this.props.onEndReachedThreshold);
        if (first > 0) {
          var distTop = offset - this._listMetrics.getCellMetricsApprox(first, this.props).offset;
          hiPri = distTop < 0 || velocity < -2 && distTop < getScrollingThreshold(onStartReachedThreshold, visibleLength);
        }
        if (!hiPri && last >= 0 && last < itemCount - 1) {
          var distBottom = this._listMetrics.getCellMetricsApprox(last, this.props).offset - (offset + visibleLength);
          hiPri = distBottom < 0 || velocity > 2 && distBottom < getScrollingThreshold(onEndReachedThreshold, visibleLength);
        }
        return hiPri;
      }
    }, {
      key: "__getListMetrics",
      value: function __getListMetrics() {
        return this._listMetrics;
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(props, cellsAroundViewport) {
        if (this.state.pendingScrollUpdateCount > 0) {
          return;
        }
        this._viewabilityTuples.forEach(tuple => {
          tuple.viewabilityHelper.onUpdate(props, this._scrollMetrics.offset, this._scrollMetrics.visibleLength, this._listMetrics, this._createViewToken, tuple.onViewableItemsChanged, cellsAroundViewport);
        });
      }
    }], [{
      key: "_findItemIndexWithKey",
      value: function _findItemIndexWithKey(props, key, hint) {
        var itemCount = props.getItemCount(props.data);
        if (hint != null && hint >= 0 && hint < itemCount) {
          var curKey = VirtualizedList._getItemKey(props, hint);
          if (curKey === key) {
            return hint;
          }
        }
        for (var ii = 0; ii < itemCount; ii++) {
          var _curKey = VirtualizedList._getItemKey(props, ii);
          if (_curKey === key) {
            return ii;
          }
        }
        return null;
      }
    }, {
      key: "_getItemKey",
      value: function _getItemKey(props, index) {
        var item = props.getItem(props.data, index);
        return VirtualizedList._keyExtractor(item, index, props);
      }
    }, {
      key: "_createRenderMask",
      value: function _createRenderMask(props, cellsAroundViewport, additionalRegions) {
        var itemCount = props.getItemCount(props.data);
        (0, _invariant.default)(cellsAroundViewport.first >= 0 && cellsAroundViewport.last >= cellsAroundViewport.first - 1 && cellsAroundViewport.last < itemCount, `Invalid cells around viewport "[${cellsAroundViewport.first}, ${cellsAroundViewport.last}]" was passed to VirtualizedList._createRenderMask`);
        var renderMask = new _CellRenderMask.CellRenderMask(itemCount);
        if (itemCount > 0) {
          var allRegions = [cellsAroundViewport, ...(additionalRegions ?? [])];
          for (var region of allRegions) {
            renderMask.addCells(region);
          }
          if (props.initialScrollIndex == null || props.initialScrollIndex <= 0) {
            var initialRegion = VirtualizedList._initialRenderRegion(props);
            renderMask.addCells(initialRegion);
          }
          var stickyIndicesSet = new Set(props.stickyHeaderIndices);
          VirtualizedList._ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellsAroundViewport.first);
        }
        return renderMask;
      }
    }, {
      key: "_initialRenderRegion",
      value: function _initialRenderRegion(props) {
        var itemCount = props.getItemCount(props.data);
        var firstCellIndex = Math.max(0, Math.min(itemCount - 1, Math.floor(props.initialScrollIndex ?? 0)));
        var lastCellIndex = Math.min(itemCount, firstCellIndex + (0, _VirtualizedListProps.initialNumToRenderOrDefault)(props.initialNumToRender)) - 1;
        return {
          first: firstCellIndex,
          last: lastCellIndex
        };
      }
    }, {
      key: "_ensureClosestStickyHeader",
      value: function _ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellIdx) {
        var stickyOffset = props.ListHeaderComponent ? 1 : 0;
        for (var itemIdx = cellIdx - 1; itemIdx >= 0; itemIdx--) {
          if (stickyIndicesSet.has(itemIdx + stickyOffset)) {
            renderMask.addCells({
              first: itemIdx,
              last: itemIdx
            });
            break;
          }
        }
      }
    }, {
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(newProps, prevState) {
        var itemCount = newProps.getItemCount(newProps.data);
        if (itemCount === prevState.renderMask.numCells()) {
          return prevState;
        }
        var maintainVisibleContentPositionAdjustment = null;
        var prevFirstVisibleItemKey = prevState.firstVisibleItemKey;
        var minIndexForVisible = newProps.maintainVisibleContentPosition?.minIndexForVisible ?? 0;
        var newFirstVisibleItemKey = newProps.getItemCount(newProps.data) > minIndexForVisible ? VirtualizedList._getItemKey(newProps, minIndexForVisible) : null;
        if (newProps.maintainVisibleContentPosition != null && prevFirstVisibleItemKey != null && newFirstVisibleItemKey != null) {
          if (newFirstVisibleItemKey !== prevFirstVisibleItemKey) {
            var hint = itemCount - prevState.renderMask.numCells() + minIndexForVisible;
            var firstVisibleItemIndex = VirtualizedList._findItemIndexWithKey(newProps, prevFirstVisibleItemKey, hint);
            maintainVisibleContentPositionAdjustment = firstVisibleItemIndex != null ? firstVisibleItemIndex - minIndexForVisible : null;
          } else {
            maintainVisibleContentPositionAdjustment = null;
          }
        }
        var constrainedCells = VirtualizedList._constrainToItemCount(maintainVisibleContentPositionAdjustment != null ? {
          first: prevState.cellsAroundViewport.first + maintainVisibleContentPositionAdjustment,
          last: prevState.cellsAroundViewport.last + maintainVisibleContentPositionAdjustment
        } : prevState.cellsAroundViewport, newProps);
        return {
          cellsAroundViewport: constrainedCells,
          renderMask: VirtualizedList._createRenderMask(newProps, constrainedCells),
          firstVisibleItemKey: newFirstVisibleItemKey,
          pendingScrollUpdateCount: maintainVisibleContentPositionAdjustment != null ? prevState.pendingScrollUpdateCount + 1 : prevState.pendingScrollUpdateCount
        };
      }
    }, {
      key: "_constrainToItemCount",
      value: function _constrainToItemCount(cells, props) {
        var itemCount = props.getItemCount(props.data);
        var lastPossibleCellIndex = itemCount - 1;
        var maxToRenderPerBatch = (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch);
        var maxFirst = Math.max(0, lastPossibleCellIndex - maxToRenderPerBatch);
        return {
          first: (0, _clamp.default)(0, cells.first, maxFirst),
          last: Math.min(lastPossibleCellIndex, cells.last)
        };
      }
    }, {
      key: "_keyExtractor",
      value: function _keyExtractor(item, index, props) {
        if (props.keyExtractor != null) {
          return props.keyExtractor(item, index);
        }
        var key = (0, _VirtualizeUtils.keyExtractor)(item, index);
        if (key === String(index)) {
          _usedIndexForKey = true;
          if (item.type && item.type.displayName) {
            _keylessItemComponentName = item.type.displayName;
          }
        }
        return key;
      }
    }]);
  }(_StateSafePureComponent.default);
  VirtualizedList.contextType = _VirtualizedListContext.VirtualizedListContext;
  var styles = _reactNative.StyleSheet.create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    },
    debug: {
      flex: 1
    },
    debugOverlayBase: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    debugOverlay: {
      bottom: 0,
      width: 20,
      borderColor: 'blue',
      borderWidth: 1
    },
    debugOverlayFrame: {
      left: 0,
      backgroundColor: 'orange'
    },
    debugOverlayFrameLast: {
      left: 0,
      borderColor: 'green',
      borderWidth: 2
    },
    debugOverlayFrameVis: {
      left: 0,
      borderColor: 'red',
      borderWidth: 2
    }
  });
  module.exports = VirtualizedList;
},347,[1,10,11,50,52,55,45,348,349,350,351,352,353,354,355,356,357,358,346,46,113,125,359,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var _require = require(_dependencyMap[2]),
    InteractionManager = _require.InteractionManager;
  var Batchinator = /*#__PURE__*/function () {
    function Batchinator(callback, delayMS) {
      _classCallCheck(this, Batchinator);
      this._delay = delayMS;
      this._callback = callback;
    }
    return _createClass(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };
        if (this._taskHandle) {
          this._taskHandle.cancel();
          if (!options.abort) {
            this._callback();
          }
          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        if (this._taskHandle) {
          return;
        }
        var timeoutHandle = setTimeout(() => {
          this._taskHandle = InteractionManager.runAfterInteractions(() => {
            this._taskHandle = null;
            this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: () => clearTimeout(timeoutHandle)
        };
      }
    }]);
  }();
  module.exports = Batchinator;
},348,[10,11,45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function clamp(min, value, max) {
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  }
  module.exports = clamp;
},349,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    return console.log(...arguments);
  }
  module.exports = infoLog;
},350,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CellRenderMask = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[4]));
  var CellRenderMask = exports.CellRenderMask = /*#__PURE__*/function () {
    function CellRenderMask(numCells) {
      (0, _classCallCheck2.default)(this, CellRenderMask);
      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');
      this._numCells = numCells;
      if (numCells === 0) {
        this._regions = [];
      } else {
        this._regions = [{
          first: 0,
          last: numCells - 1,
          isSpacer: true
        }];
      }
    }
    return (0, _createClass2.default)(CellRenderMask, [{
      key: "enumerateRegions",
      value: function enumerateRegions() {
        return this._regions;
      }
    }, {
      key: "addCells",
      value: function addCells(cells) {
        (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');
        if (cells.last < cells.first) {
          return;
        }
        var _this$_findRegion = this._findRegion(cells.first),
          _this$_findRegion2 = (0, _slicedToArray2.default)(_this$_findRegion, 2),
          firstIntersect = _this$_findRegion2[0],
          firstIntersectIdx = _this$_findRegion2[1];
        var _this$_findRegion3 = this._findRegion(cells.last),
          _this$_findRegion4 = (0, _slicedToArray2.default)(_this$_findRegion3, 2),
          lastIntersect = _this$_findRegion4[0],
          lastIntersectIdx = _this$_findRegion4[1];
        if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {
          return;
        }
        var newLeadRegion = [];
        var newTailRegion = [];
        var newMainRegion = {
          ...cells,
          isSpacer: false
        };
        if (firstIntersect.first < newMainRegion.first) {
          if (firstIntersect.isSpacer) {
            newLeadRegion.push({
              first: firstIntersect.first,
              last: newMainRegion.first - 1,
              isSpacer: true
            });
          } else {
            newMainRegion.first = firstIntersect.first;
          }
        }
        if (lastIntersect.last > newMainRegion.last) {
          if (lastIntersect.isSpacer) {
            newTailRegion.push({
              first: newMainRegion.last + 1,
              last: lastIntersect.last,
              isSpacer: true
            });
          } else {
            newMainRegion.last = lastIntersect.last;
          }
        }
        var replacementRegions = [...newLeadRegion, newMainRegion, ...newTailRegion];
        var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;
        this._regions.splice(firstIntersectIdx, numRegionsToDelete, ...replacementRegions);
      }
    }, {
      key: "numCells",
      value: function numCells() {
        return this._numCells;
      }
    }, {
      key: "equals",
      value: function equals(other) {
        return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every((region, i) => region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer);
      }
    }, {
      key: "_findRegion",
      value: function _findRegion(cellIdx) {
        var firstIdx = 0;
        var lastIdx = this._regions.length - 1;
        while (firstIdx <= lastIdx) {
          var middleIdx = Math.floor((firstIdx + lastIdx) / 2);
          var middleRegion = this._regions[middleIdx];
          if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {
            return [middleRegion, middleIdx];
          } else if (cellIdx < middleRegion.first) {
            lastIdx = middleIdx - 1;
          } else if (cellIdx > middleRegion.last) {
            firstIdx = middleIdx + 1;
          }
        }
        (0, _invariant.default)(false, `A region was not found containing cellIdx ${cellIdx}`);
      }
    }]);
  }();
},351,[1,29,10,11,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[3]));
  var ChildListCollection = exports.default = /*#__PURE__*/function () {
    function ChildListCollection() {
      (0, _classCallCheck2.default)(this, ChildListCollection);
      this._cellKeyToChildren = new Map();
      this._childrenToCellKey = new Map();
    }
    return (0, _createClass2.default)(ChildListCollection, [{
      key: "add",
      value: function add(list, cellKey) {
        (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');
        var cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();
        cellLists.add(list);
        this._cellKeyToChildren.set(cellKey, cellLists);
        this._childrenToCellKey.set(list, cellKey);
      }
    }, {
      key: "remove",
      value: function remove(list) {
        var cellKey = this._childrenToCellKey.get(list);
        (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');
        this._childrenToCellKey.delete(list);
        var cellLists = this._cellKeyToChildren.get(cellKey);
        (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');
        cellLists.delete(list);
        if (cellLists.size === 0) {
          this._cellKeyToChildren.delete(cellKey);
        }
      }
    }, {
      key: "forEach",
      value: function forEach(fn) {
        for (var listSet of this._cellKeyToChildren.values()) {
          for (var list of listSet) {
            fn(list);
          }
        }
      }
    }, {
      key: "forEachInCell",
      value: function forEachInCell(cellKey, fn) {
        var listSet = this._cellKeyToChildren.get(cellKey) ?? [];
        for (var list of listSet) {
          fn(list);
        }
      }
    }, {
      key: "anyInCell",
      value: function anyInCell(cellKey, fn) {
        var listSet = this._cellKeyToChildren.get(cellKey) ?? [];
        for (var list of listSet) {
          if (fn(list)) {
            return true;
          }
        }
        return false;
      }
    }, {
      key: "size",
      value: function size() {
        return this._childrenToCellKey.size;
      }
    }]);
  }();
},352,[1,10,11,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _ListMetricsAggregator = _interopRequireDefault(require(_dependencyMap[3]));
  var Info = /*#__PURE__*/(0, _createClass2.default)(function Info() {
    (0, _classCallCheck2.default)(this, Info);
    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  });
  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;
  var _sampleRate = null;
  var FillRateHelper = /*#__PURE__*/function () {
    function FillRateHelper(listMetrics) {
      (0, _classCallCheck2.default)(this, FillRateHelper);
      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._listMetrics = listMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();
      this._resetData();
    }
    return (0, _createClass2.default)(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG;
          this._samplesStartTime = global.performance.now();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }
        var start = this._samplesStartTime;
        if (start == null) {
          DEBUG;
          return;
        }
        if (this._info.sample_count < _minSampleCount) {
          this._resetData();
          return;
        }
        var total_time_spent = global.performance.now() - start;
        var info = {
          ...this._info,
          total_time_spent
        };
        _listeners.forEach(listener => listener(info));
        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, cellsAroundViewport, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || cellsAroundViewport.last < cellsAroundViewport.first || this._samplesStartTime == null) {
          return 0;
        }
        var dOffset = scrollMetrics.dOffset,
          offset = scrollMetrics.offset,
          velocity = scrollMetrics.velocity,
          visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
        var now = global.performance.now();
        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }
        this._anyBlankStartTime = null;
        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }
        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = cellsAroundViewport.first;
        var firstFrame = this._listMetrics.getCellMetrics(first, props);
        while (first <= cellsAroundViewport.last && (!firstFrame || !firstFrame.isMounted)) {
          firstFrame = this._listMetrics.getCellMetrics(first, props);
          first++;
        }
        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }
        var blankBottom = 0;
        var last = cellsAroundViewport.last;
        var lastFrame = this._listMetrics.getCellMetrics(last, props);
        while (last >= cellsAroundViewport.first && (!lastFrame || !lastFrame.isMounted)) {
          lastFrame = this._listMetrics.getCellMetrics(last, props);
          last--;
        }
        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }
        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;
        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;
          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }
        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }], [{
      key: "addListener",
      value: function addListener(callback) {
        if (_sampleRate === null) {
          console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');
        }
        _listeners.push(callback);
        return {
          remove: () => {
            _listeners = _listeners.filter(listener => callback !== listener);
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);
  }();
  module.exports = FillRateHelper;
},353,[1,11,10,354]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _VirtualizeUtils = require(_dependencyMap[3]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[4]));
  var ListMetricsAggregator = exports.default = /*#__PURE__*/function () {
    function ListMetricsAggregator() {
      (0, _classCallCheck2.default)(this, ListMetricsAggregator);
      this._averageCellLength = 0;
      this._cellMetrics = new Map();
      this._highestMeasuredCellIndex = 0;
      this._measuredCellsLength = 0;
      this._measuredCellsCount = 0;
      this._orientation = {
        horizontal: false,
        rtl: false
      };
    }
    return (0, _createClass2.default)(ListMetricsAggregator, [{
      key: "notifyCellLayout",
      value: function notifyCellLayout(_ref) {
        var cellIndex = _ref.cellIndex,
          cellKey = _ref.cellKey,
          orientation = _ref.orientation,
          layout = _ref.layout;
        this._invalidateIfOrientationChanged(orientation);
        var next = {
          index: cellIndex,
          length: this._selectLength(layout),
          isMounted: true,
          offset: this.flowRelativeOffset(layout)
        };
        var curr = this._cellMetrics.get(cellKey);
        if (!curr || next.offset !== curr.offset || next.length !== curr.length) {
          if (curr) {
            var dLength = next.length - curr.length;
            this._measuredCellsLength += dLength;
          } else {
            this._measuredCellsLength += next.length;
            this._measuredCellsCount += 1;
          }
          this._averageCellLength = this._measuredCellsLength / this._measuredCellsCount;
          this._cellMetrics.set(cellKey, next);
          this._highestMeasuredCellIndex = Math.max(this._highestMeasuredCellIndex, cellIndex);
          return true;
        } else {
          curr.isMounted = true;
          return false;
        }
      }
    }, {
      key: "notifyCellUnmounted",
      value: function notifyCellUnmounted(cellKey) {
        var curr = this._cellMetrics.get(cellKey);
        if (curr) {
          curr.isMounted = false;
        }
      }
    }, {
      key: "notifyListContentLayout",
      value: function notifyListContentLayout(_ref2) {
        var orientation = _ref2.orientation,
          layout = _ref2.layout;
        this._invalidateIfOrientationChanged(orientation);
        this._contentLength = this._selectLength(layout);
      }
    }, {
      key: "getAverageCellLength",
      value: function getAverageCellLength() {
        return this._averageCellLength;
      }
    }, {
      key: "getHighestMeasuredCellIndex",
      value: function getHighestMeasuredCellIndex() {
        return this._highestMeasuredCellIndex;
      }
    }, {
      key: "getCellMetricsApprox",
      value: function getCellMetricsApprox(index, props) {
        var frame = this.getCellMetrics(index, props);
        if (frame && frame.index === index) {
          return frame;
        } else {
          var data = props.data,
            getItemCount = props.getItemCount;
          (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get frame for out of range index ' + index);
          return {
            length: this._averageCellLength,
            offset: this._averageCellLength * index,
            index,
            isMounted: false
          };
        }
      }
    }, {
      key: "getCellMetrics",
      value: function getCellMetrics(index, props) {
        var data = props.data,
          getItem = props.getItem,
          getItemCount = props.getItemCount,
          getItemLayout = props.getItemLayout;
        (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get metrics for out of range cell index ' + index);
        var keyExtractor = props.keyExtractor ?? _VirtualizeUtils.keyExtractor;
        var frame = this._cellMetrics.get(keyExtractor(getItem(data, index), index));
        if (frame && frame.index === index) {
          return frame;
        }
        if (getItemLayout) {
          var _getItemLayout = getItemLayout(data, index),
            length = _getItemLayout.length,
            offset = _getItemLayout.offset;
          return {
            index,
            length,
            offset,
            isMounted: true
          };
        }
        return null;
      }
    }, {
      key: "getCellOffsetApprox",
      value: function getCellOffsetApprox(index, props) {
        if (Number.isInteger(index)) {
          return this.getCellMetricsApprox(index, props).offset;
        } else {
          var frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);
          var remainder = index - Math.floor(index);
          return frameMetrics.offset + remainder * frameMetrics.length;
        }
      }
    }, {
      key: "getContentLength",
      value: function getContentLength() {
        return this._contentLength ?? 0;
      }
    }, {
      key: "hasContentLength",
      value: function hasContentLength() {
        return this._contentLength != null;
      }
    }, {
      key: "flowRelativeOffset",
      value: function flowRelativeOffset(layout, referenceContentLength) {
        var _this$_orientation = this._orientation,
          horizontal = _this$_orientation.horizontal,
          rtl = _this$_orientation.rtl;
        if (horizontal && rtl) {
          var contentLength = referenceContentLength ?? this._contentLength;
          (0, _invariant.default)(contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');
          return contentLength - (this._selectOffset(layout) + this._selectLength(layout));
        } else {
          return this._selectOffset(layout);
        }
      }
    }, {
      key: "cartesianOffset",
      value: function cartesianOffset(flowRelativeOffset) {
        var _this$_orientation2 = this._orientation,
          horizontal = _this$_orientation2.horizontal,
          rtl = _this$_orientation2.rtl;
        if (horizontal && rtl) {
          (0, _invariant.default)(this._contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');
          return this._contentLength - flowRelativeOffset;
        } else {
          return flowRelativeOffset;
        }
      }
    }, {
      key: "_invalidateIfOrientationChanged",
      value: function _invalidateIfOrientationChanged(orientation) {
        if (orientation.rtl !== this._orientation.rtl) {
          this._cellMetrics.clear();
        }
        if (orientation.horizontal !== this._orientation.horizontal) {
          this._averageCellLength = 0;
          this._highestMeasuredCellIndex = 0;
          this._measuredCellsLength = 0;
          this._measuredCellsCount = 0;
        }
        this._orientation = orientation;
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(_ref3) {
        var width = _ref3.width,
          height = _ref3.height;
        return this._orientation.horizontal ? width : height;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(_ref4) {
        var x = _ref4.x,
          y = _ref4.y;
        return this._orientation.horizontal ? x : y;
      }
    }]);
  }();
},354,[1,10,11,346,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var StateSafePureComponent = exports.default = /*#__PURE__*/function (_React$PureComponent) {
    function StateSafePureComponent(props) {
      var _this;
      (0, _classCallCheck2.default)(this, StateSafePureComponent);
      _this = _callSuper(this, StateSafePureComponent, [props]);
      _this._inAsyncStateUpdate = false;
      _this._installSetStateHooks();
      return _this;
    }
    (0, _inherits2.default)(StateSafePureComponent, _React$PureComponent);
    return (0, _createClass2.default)(StateSafePureComponent, [{
      key: "setState",
      value: function setState(partialState, callback) {
        if (typeof partialState === 'function') {
          _superPropGet(StateSafePureComponent, "setState", this, 3)([(state, props) => {
            this._inAsyncStateUpdate = true;
            var ret;
            try {
              ret = partialState(state, props);
            } catch (err) {
              throw err;
            } finally {
              this._inAsyncStateUpdate = false;
            }
            return ret;
          }, callback]);
        } else {
          _superPropGet(StateSafePureComponent, "setState", this, 3)([partialState, callback]);
        }
      }
    }, {
      key: "_installSetStateHooks",
      value: function _installSetStateHooks() {
        var that = this;
        var props = this.props,
          state = this.state;
        Object.defineProperty(this, 'props', {
          get() {
            (0, _invariant.default)(!that._inAsyncStateUpdate, '"this.props" should not be accessed during state updates');
            return props;
          },
          set(newProps) {
            props = newProps;
          }
        });
        Object.defineProperty(this, 'state', {
          get() {
            (0, _invariant.default)(!that._inAsyncStateUpdate, '"this.state" should not be acceessed during state updates');
            return state;
          },
          set(newState) {
            state = newState;
          }
        });
      }
    }]);
  }(React.PureComponent);
},355,[1,10,11,50,52,53,55,46,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _ListMetricsAggregator = _interopRequireDefault(require(_dependencyMap[4]));
  var invariant = require(_dependencyMap[5]);
  var ViewabilityHelper = /*#__PURE__*/function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };
      (0, _classCallCheck2.default)(this, ViewabilityHelper);
      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }
    return (0, _createClass2.default)(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(props, scrollOffset, viewportHeight, listMetrics, renderRange) {
        var itemCount = props.getItemCount(props.data);
        var _this$_config = this._config,
          itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,
          viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];
        if (itemCount === 0) {
          return viewableIndices;
        }
        var firstVisible = -1;
        var _ref = renderRange || {
            first: 0,
            last: itemCount - 1
          },
          first = _ref.first,
          last = _ref.last;
        if (last >= itemCount) {
          console.warn('Invalid render range computing viewability ' + JSON.stringify({
            renderRange,
            itemCount
          }));
          return [];
        }
        for (var idx = first; idx <= last; idx++) {
          var metrics = listMetrics.getCellMetrics(idx, props);
          if (!metrics) {
            continue;
          }
          var top = Math.floor(metrics.offset - scrollOffset);
          var bottom = Math.floor(top + metrics.length);
          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;
            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }
        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(props, scrollOffset, viewportHeight, listMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var itemCount = props.getItemCount(props.data);
        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !listMetrics.getCellMetrics(0, props)) {
          return;
        }
        var viewableIndices = [];
        if (itemCount) {
          viewableIndices = this.computeViewableItems(props, scrollOffset, viewportHeight, listMetrics, renderRange);
        }
        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every((v, ii) => v === viewableIndices[ii])) {
          return;
        }
        this._viewableIndices = viewableIndices;
        if (this._config.minimumViewTime) {
          var handle = setTimeout(() => {
            this._timers.delete(handle);
            this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);
          this._timers.add(handle);
        } else {
          this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(props, viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        viewableIndicesToCheck = viewableIndicesToCheck.filter(ii => this._viewableIndices.includes(ii));
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(ii => {
          var viewable = createViewToken(ii, true, props);
          return [viewable.key, viewable];
        }));
        var changed = [];
        for (var _ref2 of nextItems) {
          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2);
          var key = _ref3[0];
          var viewable = _ref3[1];
          if (!prevItems.has(key)) {
            changed.push(viewable);
          }
        }
        for (var _ref4 of prevItems) {
          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2);
          var _key = _ref5[0];
          var _viewable = _ref5[1];
          if (!nextItems.has(_key)) {
            changed.push({
              ..._viewable,
              isViewable: false
            });
          }
        }
        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);
  }();
  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);
      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }
  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }
  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }
  module.exports = ViewabilityHelper;
},356,[1,29,10,11,354,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _reactNative = require(_dependencyMap[6]);
  var _VirtualizedListContext = require(_dependencyMap[7]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[8]));
  var React = _interopRequireWildcard(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var CellRenderer = exports.default = /*#__PURE__*/function (_React$Component) {
    function CellRenderer() {
      var _this;
      (0, _classCallCheck2.default)(this, CellRenderer);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, CellRenderer, [...args]);
      _this.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this.props.item
        }
      };
      _this._separators = {
        highlight: () => {
          var _this$props = _this.props,
            cellKey = _this$props.cellKey,
            prevCellKey = _this$props.prevCellKey;
          _this.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: () => {
          var _this$props2 = _this.props,
            cellKey = _this$props2.cellKey,
            prevCellKey = _this$props2.prevCellKey;
          _this.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: (select, newProps) => {
          var _this$props3 = _this.props,
            cellKey = _this$props3.cellKey,
            prevCellKey = _this$props3.prevCellKey;
          _this.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      };
      _this._onLayout = nativeEvent => {
        _this.props.onCellLayout && _this.props.onCellLayout(nativeEvent, _this.props.cellKey, _this.props.index);
      };
      return _this;
    }
    (0, _inherits2.default)(CellRenderer, _React$Component);
    return (0, _createClass2.default)(CellRenderer, [{
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(state => ({
          separatorProps: {
            ...state.separatorProps,
            ...newProps
          }
        }));
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "_renderElement",
      value: function _renderElement(renderItem, ListItemComponent, item, index) {
        if (renderItem && ListItemComponent) {
          console.warn("VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take precedence over renderItem.");
        }
        if (ListItemComponent) {
          return /*#__PURE__*/React.createElement(ListItemComponent, {
            item,
            index,
            separators: this._separators
          });
        }
        if (renderItem) {
          return renderItem({
            item,
            index,
            separators: this._separators
          });
        }
        (0, _invariant.default)(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props4 = this.props,
          CellRendererComponent = _this$props4.CellRendererComponent,
          ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,
          ListItemComponent = _this$props4.ListItemComponent,
          cellKey = _this$props4.cellKey,
          horizontal = _this$props4.horizontal,
          item = _this$props4.item,
          index = _this$props4.index,
          inversionStyle = _this$props4.inversionStyle,
          onCellFocusCapture = _this$props4.onCellFocusCapture,
          onCellLayout = _this$props4.onCellLayout,
          renderItem = _this$props4.renderItem;
        var element = this._renderElement(renderItem, ListItemComponent, item, index);
        var itemSeparator = /*#__PURE__*/React.isValidElement(ItemSeparatorComponent) ? ItemSeparatorComponent : ItemSeparatorComponent && /*#__PURE__*/(0, _jsxRuntime.jsx)(ItemSeparatorComponent, {
          ...this.state.separatorProps
        });
        var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;
        var result = !CellRendererComponent ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: cellStyle,
          onFocusCapture: onCellFocusCapture,
          ...(onCellLayout && {
            onLayout: this._onLayout
          }),
          children: [element, itemSeparator]
        }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)(CellRendererComponent, {
          cellKey: cellKey,
          index: index,
          item: item,
          style: cellStyle,
          onFocusCapture: onCellFocusCapture,
          ...(onCellLayout && {
            onLayout: this._onLayout
          }),
          children: [element, itemSeparator]
        });
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this.props.cellKey,
          children: result
        });
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        return {
          separatorProps: {
            ...prevState.separatorProps,
            leadingItem: props.item
          }
        };
      }
    }]);
  }(React.Component);
  var styles = _reactNative.StyleSheet.create({
    row: {
      flexDirection: 'row'
    },
    rowReverse: {
      flexDirection: 'row-reverse'
    },
    columnReverse: {
      flexDirection: 'column-reverse'
    }
  });
},357,[1,10,11,50,52,55,45,358,46,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.VirtualizedListCellContextProvider = VirtualizedListCellContextProvider;
  exports.VirtualizedListContext = undefined;
  exports.VirtualizedListContextProvider = VirtualizedListContextProvider;
  exports.VirtualizedListContextResetter = VirtualizedListContextResetter;
  var _react = _interopRequireWildcard(require(_dependencyMap[0]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[1]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var VirtualizedListContext = exports.VirtualizedListContext = /*#__PURE__*/React.createContext(null);
  function VirtualizedListContextResetter(_ref) {
    var children = _ref.children;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
      value: null,
      children: children
    });
  }
  function VirtualizedListContextProvider(_ref2) {
    var children = _ref2.children,
      value = _ref2.value;
    var context = (0, _react.useMemo)(() => ({
      cellKey: null,
      getScrollMetrics: value.getScrollMetrics,
      horizontal: value.horizontal,
      getOutermostParentListRef: value.getOutermostParentListRef,
      registerAsNestedChild: value.registerAsNestedChild,
      unregisterAsNestedChild: value.unregisterAsNestedChild
    }), [value.getScrollMetrics, value.horizontal, value.getOutermostParentListRef, value.registerAsNestedChild, value.unregisterAsNestedChild]);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
      value: context,
      children: children
    });
  }
  function VirtualizedListCellContextProvider(_ref3) {
    var cellKey = _ref3.cellKey,
      children = _ref3.children;
    var currContext = (0, _react.useContext)(VirtualizedListContext);
    var context = (0, _react.useMemo)(() => currContext == null ? null : {
      ...currContext,
      cellKey
    }, [currContext, cellKey]);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
      value: context,
      children: children
    });
  }
},358,[125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.horizontalOrDefault = horizontalOrDefault;
  exports.initialNumToRenderOrDefault = initialNumToRenderOrDefault;
  exports.maxToRenderPerBatchOrDefault = maxToRenderPerBatchOrDefault;
  exports.onEndReachedThresholdOrDefault = onEndReachedThresholdOrDefault;
  exports.onStartReachedThresholdOrDefault = onStartReachedThresholdOrDefault;
  exports.windowSizeOrDefault = windowSizeOrDefault;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function horizontalOrDefault(horizontal) {
    return horizontal ?? false;
  }
  function initialNumToRenderOrDefault(initialNumToRender) {
    return initialNumToRender ?? 10;
  }
  function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
    return maxToRenderPerBatch ?? 10;
  }
  function onStartReachedThresholdOrDefault(onStartReachedThreshold) {
    return onStartReachedThreshold ?? 2;
  }
  function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
    return onEndReachedThreshold ?? 2;
  }
  function windowSizeOrDefault(windowSize) {
    return windowSize ?? 21;
  }
},359,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _reactNative = require(_dependencyMap[8]);
  var _VirtualizedList = _interopRequireDefault(require(_dependencyMap[9]));
  var _VirtualizeUtils = require(_dependencyMap[10]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[11]));
  var React = _interopRequireWildcard(require(_dependencyMap[12]));
  var _jsxRuntime = require(_dependencyMap[13]);
  var _excluded = ["ItemSeparatorComponent", "SectionSeparatorComponent", "renderItem", "renderSectionFooter", "renderSectionHeader", "sections", "stickySectionHeadersEnabled"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var VirtualizedSectionList = /*#__PURE__*/function (_React$PureComponent) {
    function VirtualizedSectionList() {
      var _this;
      (0, _classCallCheck2.default)(this, VirtualizedSectionList);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, VirtualizedSectionList, [...args]);
      _this._keyExtractor = (item, index) => {
        var info = _this._subExtractor(index);
        return info && info.key || String(index);
      };
      _this._convertViewable = viewable => {
        (0, _invariant.default)(viewable.index != null, 'Received a broken ViewToken');
        var info = _this._subExtractor(viewable.index);
        if (!info) {
          return null;
        }
        var keyExtractorWithNullableIndex = info.section.keyExtractor;
        var keyExtractorWithNonNullableIndex = _this.props.keyExtractor || _VirtualizeUtils.keyExtractor;
        var key = keyExtractorWithNullableIndex != null ? keyExtractorWithNullableIndex(viewable.item, info.index) : keyExtractorWithNonNullableIndex(viewable.item, info.index ?? 0);
        return {
          ...viewable,
          index: info.index,
          key,
          section: info.section
        };
      };
      _this._onViewableItemsChanged = _ref => {
        var viewableItems = _ref.viewableItems,
          changed = _ref.changed;
        var onViewableItemsChanged = _this.props.onViewableItemsChanged;
        if (onViewableItemsChanged != null) {
          onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
            changed: changed.map(_this._convertViewable, _this).filter(Boolean)
          });
        }
      };
      _this._renderItem = listItemCount => _ref2 => {
        var item = _ref2.item,
          index = _ref2.index;
        var info = _this._subExtractor(index);
        if (!info) {
          return null;
        }
        var infoIndex = info.index;
        if (infoIndex == null) {
          var section = info.section;
          if (info.header === true) {
            var renderSectionHeader = _this.props.renderSectionHeader;
            return renderSectionHeader ? renderSectionHeader({
              section
            }) : null;
          } else {
            var renderSectionFooter = _this.props.renderSectionFooter;
            return renderSectionFooter ? renderSectionFooter({
              section
            }) : null;
          }
        } else {
          var renderItem = info.section.renderItem || _this.props.renderItem;
          var SeparatorComponent = _this._getSeparatorComponent(index, info, listItemCount);
          (0, _invariant.default)(renderItem, 'no renderItem!');
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(ItemWithSeparator, {
            SeparatorComponent: SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            setSelfHighlightCallback: _this._setUpdateHighlightFor,
            setSelfUpdatePropsCallback: _this._setUpdatePropsFor,
            updateHighlightFor: _this._updateHighlightFor,
            updatePropsFor: _this._updatePropsFor,
            renderItem: renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection,
            inverted: !!_this.props.inverted
          });
        }
      };
      _this._updatePropsFor = (cellKey, value) => {
        var updateProps = _this._updatePropsMap[cellKey];
        if (updateProps != null) {
          updateProps(value);
        }
      };
      _this._updateHighlightFor = (cellKey, value) => {
        var updateHighlight = _this._updateHighlightMap[cellKey];
        if (updateHighlight != null) {
          updateHighlight(value);
        }
      };
      _this._setUpdateHighlightFor = (cellKey, updateHighlightFn) => {
        if (updateHighlightFn != null) {
          _this._updateHighlightMap[cellKey] = updateHighlightFn;
        } else {
          delete _this._updateHighlightFor[cellKey];
        }
      };
      _this._setUpdatePropsFor = (cellKey, updatePropsFn) => {
        if (updatePropsFn != null) {
          _this._updatePropsMap[cellKey] = updatePropsFn;
        } else {
          delete _this._updatePropsMap[cellKey];
        }
      };
      _this._updateHighlightMap = {};
      _this._updatePropsMap = {};
      _this._captureRef = ref => {
        _this._listRef = ref;
      };
      return _this;
    }
    (0, _inherits2.default)(VirtualizedSectionList, _React$PureComponent);
    return (0, _createClass2.default)(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex;
        for (var i = 0; i < params.sectionIndex; i++) {
          index += this.props.getItemCount(this.props.sections[i].data) + 2;
        }
        var viewOffset = params.viewOffset || 0;
        if (this._listRef == null) {
          return;
        }
        var listRef = this._listRef;
        if (params.itemIndex > 0 && this.props.stickySectionHeadersEnabled) {
          var frame = listRef.__getListMetrics().getCellMetricsApprox(index - params.itemIndex, listRef.props);
          viewOffset += frame.length;
        }
        var toIndexParams = {
          ...params,
          viewOffset,
          index
        };
        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          ItemSeparatorComponent = _this$props.ItemSeparatorComponent,
          SectionSeparatorComponent = _this$props.SectionSeparatorComponent,
          _renderItem = _this$props.renderItem,
          renderSectionFooter = _this$props.renderSectionFooter,
          renderSectionHeader = _this$props.renderSectionHeader,
          _sections = _this$props.sections,
          stickySectionHeadersEnabled = _this$props.stickySectionHeadersEnabled,
          passThroughProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var listHeaderOffset = this.props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = this.props.stickySectionHeadersEnabled ? [] : undefined;
        var itemCount = 0;
        for (var section of this.props.sections) {
          if (stickyHeaderIndices != null) {
            stickyHeaderIndices.push(itemCount + listHeaderOffset);
          }
          itemCount += 2;
          itemCount += this.props.getItemCount(section.data);
        }
        var renderItem = this._renderItem(itemCount);
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedList.default, {
          ...passThroughProps,
          keyExtractor: this._keyExtractor,
          stickyHeaderIndices: stickyHeaderIndices,
          renderItem: renderItem,
          data: this.props.sections,
          getItem: (sections, index) => this._getItem(this.props, sections, index),
          getItemCount: () => itemCount,
          onViewableItemsChanged: this.props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
          ref: this._captureRef
        });
      }
    }, {
      key: "_getItem",
      value: function _getItem(props, sections, index) {
        if (!sections) {
          return null;
        }
        var itemIdx = index - 1;
        for (var i = 0; i < sections.length; i++) {
          var section = sections[i];
          var sectionData = section.data;
          var itemCount = props.getItemCount(sectionData);
          if (itemIdx === -1 || itemIdx === itemCount) {
            return section;
          } else if (itemIdx < itemCount) {
            return props.getItem(sectionData, itemIdx);
          } else {
            itemIdx -= itemCount + 2;
          }
        }
        return null;
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var _this$props2 = this.props,
          getItem = _this$props2.getItem,
          getItemCount = _this$props2.getItemCount,
          keyExtractor = _this$props2.keyExtractor,
          sections = _this$props2.sections;
        for (var i = 0; i < sections.length; i++) {
          var section = sections[i];
          var sectionData = section.data;
          var key = section.key || String(i);
          itemIndex -= 1;
          if (itemIndex >= getItemCount(sectionData) + 1) {
            itemIndex -= getItemCount(sectionData) + 1;
          } else if (itemIndex === -1) {
            return {
              section,
              key: key + ':header',
              index: null,
              header: true,
              trailingSection: sections[i + 1]
            };
          } else if (itemIndex === getItemCount(sectionData)) {
            return {
              section,
              key: key + ':footer',
              index: null,
              header: false,
              trailingSection: sections[i + 1]
            };
          } else {
            var extractor = section.keyExtractor || keyExtractor || _VirtualizeUtils.keyExtractor;
            return {
              section,
              key: key + ':' + extractor(getItem(sectionData, itemIndex), itemIndex),
              index: itemIndex,
              leadingItem: getItem(sectionData, itemIndex - 1),
              leadingSection: sections[i - 1],
              trailingItem: getItem(sectionData, itemIndex + 1),
              trailingSection: sections[i + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info, listItemCount) {
        info = info || this._subExtractor(index);
        if (!info) {
          return null;
        }
        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === listItemCount - 1;
        var isLastItemInSection = info.index === this.props.getItemCount(info.section.data) - 1;
        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }
        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }
        return null;
      }
    }]);
  }(React.PureComponent);
  function ItemWithSeparator(props) {
    var LeadingSeparatorComponent = props.LeadingSeparatorComponent,
      SeparatorComponent = props.SeparatorComponent,
      cellKey = props.cellKey,
      prevCellKey = props.prevCellKey,
      setSelfHighlightCallback = props.setSelfHighlightCallback,
      updateHighlightFor = props.updateHighlightFor,
      setSelfUpdatePropsCallback = props.setSelfUpdatePropsCallback,
      updatePropsFor = props.updatePropsFor,
      item = props.item,
      index = props.index,
      section = props.section,
      inverted = props.inverted;
    var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      leadingSeparatorHiglighted = _React$useState2[0],
      setLeadingSeparatorHighlighted = _React$useState2[1];
    var _React$useState3 = React.useState(false),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      separatorHighlighted = _React$useState4[0],
      setSeparatorHighlighted = _React$useState4[1];
    var _React$useState5 = React.useState({
        leadingItem: props.leadingItem,
        leadingSection: props.leadingSection,
        section: props.section,
        trailingItem: props.item,
        trailingSection: props.trailingSection
      }),
      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
      leadingSeparatorProps = _React$useState6[0],
      setLeadingSeparatorProps = _React$useState6[1];
    var _React$useState7 = React.useState({
        leadingItem: props.item,
        leadingSection: props.leadingSection,
        section: props.section,
        trailingItem: props.trailingItem,
        trailingSection: props.trailingSection
      }),
      _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
      separatorProps = _React$useState8[0],
      setSeparatorProps = _React$useState8[1];
    React.useEffect(() => {
      setSelfHighlightCallback(cellKey, setSeparatorHighlighted);
      setSelfUpdatePropsCallback(cellKey, setSeparatorProps);
      return () => {
        setSelfUpdatePropsCallback(cellKey, null);
        setSelfHighlightCallback(cellKey, null);
      };
    }, [cellKey, setSelfHighlightCallback, setSeparatorProps, setSelfUpdatePropsCallback]);
    var separators = {
      highlight: () => {
        setLeadingSeparatorHighlighted(true);
        setSeparatorHighlighted(true);
        if (prevCellKey != null) {
          updateHighlightFor(prevCellKey, true);
        }
      },
      unhighlight: () => {
        setLeadingSeparatorHighlighted(false);
        setSeparatorHighlighted(false);
        if (prevCellKey != null) {
          updateHighlightFor(prevCellKey, false);
        }
      },
      updateProps: (select, newProps) => {
        if (select === 'leading') {
          if (LeadingSeparatorComponent != null) {
            setLeadingSeparatorProps({
              ...leadingSeparatorProps,
              ...newProps
            });
          } else if (prevCellKey != null) {
            updatePropsFor(prevCellKey, {
              ...leadingSeparatorProps,
              ...newProps
            });
          }
        } else if (select === 'trailing' && SeparatorComponent != null) {
          setSeparatorProps({
            ...separatorProps,
            ...newProps
          });
        }
      }
    };
    var element = props.renderItem({
      item,
      index,
      section,
      separators
    });
    var leadingSeparator = LeadingSeparatorComponent != null && /*#__PURE__*/(0, _jsxRuntime.jsx)(LeadingSeparatorComponent, {
      highlighted: leadingSeparatorHiglighted,
      ...leadingSeparatorProps
    });
    var separator = SeparatorComponent != null && /*#__PURE__*/(0, _jsxRuntime.jsx)(SeparatorComponent, {
      highlighted: separatorHighlighted,
      ...separatorProps
    });
    return leadingSeparator || separator ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      children: [inverted === false ? leadingSeparator : separator, element, inverted === false ? separator : leadingSeparator]
    }) : element;
  }
  module.exports = VirtualizedSectionList;
},360,[1,29,203,10,11,50,52,55,45,347,346,46,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === 'number' && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
      if (!isEqual(newInputs[i], lastInputs[i])) {
        return false;
      }
    }
    return true;
  }
  function memoizeOne(resultFn, isEqual) {
    if (isEqual === undefined) {
      isEqual = areInputsEqual;
    }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
      var newArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i];
      }
      if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
        return lastResult;
      }
      lastResult = resultFn.apply(this, newArgs);
      calledOnce = true;
      lastThis = this;
      lastArgs = newArgs;
      return lastResult;
    }
    return memoized;
  }
  module.exports = memoizeOne;
},361,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Image = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = (0, _createAnimatedComponent.default)(_Image.default);
},362,[1,363,330,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[4]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[5]));
  var _ImageAnalyticsTagContext = _interopRequireDefault(require(_dependencyMap[6]));
  var _ImageInjection = _interopRequireDefault(require(_dependencyMap[7]));
  var _ImageSourceUtils = require(_dependencyMap[8]);
  var _ImageUtils = require(_dependencyMap[9]);
  var _ImageViewNativeComponent = _interopRequireDefault(require(_dependencyMap[10]));
  var _NativeImageLoaderIOS = _interopRequireDefault(require(_dependencyMap[11]));
  var _resolveAssetSource = _interopRequireDefault(require(_dependencyMap[12]));
  var React = _interopRequireWildcard(require(_dependencyMap[13]));
  var _jsxRuntime = require(_dependencyMap[14]);
  var _excluded = ["aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-selected", "height", "src", "width"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function getSize(uri, success, failure) {
    _NativeImageLoaderIOS.default.getSize(uri).then(_ref => {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        width = _ref2[0],
        height = _ref2[1];
      return success(width, height);
    }).catch(failure || function () {
      console.warn('Failed to get size for image ' + uri);
    });
  }
  function getSizeWithHeaders(uri, headers, success, failure) {
    return _NativeImageLoaderIOS.default.getSizeWithHeaders(uri, headers).then(function (sizes) {
      success(sizes.width, sizes.height);
    }).catch(failure || function () {
      console.warn('Failed to get size for image: ' + uri);
    });
  }
  function prefetchWithMetadata(url, queryRootName, rootTag) {
    if (_NativeImageLoaderIOS.default.prefetchImageWithMetadata) {
      return _NativeImageLoaderIOS.default.prefetchImageWithMetadata(url, queryRootName, rootTag ? rootTag : 0);
    } else {
      return _NativeImageLoaderIOS.default.prefetchImage(url);
    }
  }
  function prefetch(url) {
    return _NativeImageLoaderIOS.default.prefetchImage(url);
  }
  function queryCache(_x) {
    return _queryCache.apply(this, arguments);
  }
  function _queryCache() {
    _queryCache = (0, _asyncToGenerator2.default)(function* (urls) {
      return yield _NativeImageLoaderIOS.default.queryCache(urls);
    });
    return _queryCache.apply(this, arguments);
  }
  var BaseImage = (props, forwardedRef) => {
    var source = (0, _ImageSourceUtils.getImageSourcesFromImageProps)(props) || {
      uri: undefined,
      width: undefined,
      height: undefined
    };
    var sources;
    var style;
    if (Array.isArray(source)) {
      style = (0, _flattenStyle.default)([styles.base, props.style]) || {};
      sources = source;
    } else {
      var _source$width = source.width,
        _width = _source$width === undefined ? props.width : _source$width,
        _source$height = source.height,
        _height = _source$height === undefined ? props.height : _source$height,
        uri = source.uri;
      style = (0, _flattenStyle.default)([{
        width: _width,
        height: _height
      }, styles.base, props.style]) || {};
      sources = [source];
      if (uri === '') {
        console.warn('source.uri should not be an empty string');
      }
    }
    var objectFit = style && style.objectFit ? (0, _ImageUtils.convertObjectFitToResizeMode)(style.objectFit) : null;
    var resizeMode = objectFit || props.resizeMode || style && style.resizeMode || 'cover';
    var tintColor = props.tintColor || style.tintColor;
    if (props.children != null) {
      throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
    }
    var ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaSelected = props['aria-selected'],
      height = props.height,
      src = props.src,
      width = props.width,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var _accessibilityState = {
      busy: ariaBusy ?? props.accessibilityState?.busy,
      checked: ariaChecked ?? props.accessibilityState?.checked,
      disabled: ariaDisabled ?? props.accessibilityState?.disabled,
      expanded: ariaExpanded ?? props.accessibilityState?.expanded,
      selected: ariaSelected ?? props.accessibilityState?.selected
    };
    var accessibilityLabel = props['aria-label'] ?? props.accessibilityLabel;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageAnalyticsTagContext.default.Consumer, {
      children: analyticTag => {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageViewNativeComponent.default, {
          accessibilityState: _accessibilityState,
          ...restProps,
          accessible: props.alt !== undefined ? true : props.accessible,
          accessibilityLabel: accessibilityLabel ?? props.alt,
          ref: forwardedRef,
          style: style,
          resizeMode: resizeMode,
          tintColor: tintColor,
          source: sources,
          internal_analyticTag: analyticTag
        });
      }
    });
  };
  var ImageForwardRef = /*#__PURE__*/React.forwardRef(BaseImage);
  var Image = ImageForwardRef;
  if (_ImageInjection.default.unstable_createImageComponent != null) {
    Image = _ImageInjection.default.unstable_createImageComponent(Image);
  }
  Image.displayName = 'Image';
  Image.getSize = getSize;
  Image.getSizeWithHeaders = getSizeWithHeaders;
  Image.prefetch = prefetch;
  Image.prefetchWithMetadata = prefetchWithMetadata;
  Image.queryCache = queryCache;
  Image.resolveAssetSource = _resolveAssetSource.default;
  Image.propTypes = require(_dependencyMap[15]).ImagePropTypes;
  var styles = _StyleSheet.default.create({
    base: {
      overflow: 'hidden'
    }
  });
  module.exports = Image;
},363,[1,203,40,29,131,245,364,365,368,369,366,370,99,125,243,280]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var Context = /*#__PURE__*/React.createContext(null);
  var _default = exports.default = Context;
},364,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ImageViewNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var _TextInlineImageNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = {
    unstable_createImageComponent: null
  };
},365,[1,366,367,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _ViewConfigIgnore = require(_dependencyMap[2]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
      topLoadStart: {
        registrationName: 'onLoadStart'
      },
      topProgress: {
        registrationName: 'onProgress'
      },
      topError: {
        registrationName: 'onError'
      },
      topPartialLoad: {
        registrationName: 'onPartialLoad'
      },
      topLoad: {
        registrationName: 'onLoad'
      },
      topLoadEnd: {
        registrationName: 'onLoadEnd'
      }
    },
    validAttributes: {
      blurRadius: true,
      capInsets: {
        diff: require(_dependencyMap[4])
      },
      defaultSource: {
        process: require(_dependencyMap[5])
      },
      internal_analyticTag: true,
      resizeMode: true,
      source: true,
      tintColor: {
        process: require(_dependencyMap[6]).default
      },
      ...(0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onLoadStart: true,
        onLoad: true,
        onLoadEnd: true,
        onProgress: true,
        onError: true,
        onPartialLoad: true
      })
    }
  };
  var ImageViewNativeComponent = NativeComponentRegistry.get('RCTImageView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = ImageViewNativeComponent;
},366,[1,87,122,81,108,99,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTTextInlineImage',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
      resizeMode: true,
      src: true,
      tintColor: {
        process: require(_dependencyMap[1]).default
      },
      headers: true
    }
  };
  var TextInlineImage = NativeComponentRegistry.get('RCTTextInlineImage', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = TextInlineImage;
},367,[87,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSourcesFromImageProps = getImageSourcesFromImageProps;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _resolveAssetSource = _interopRequireDefault(require(_dependencyMap[2]));
  function getImageSourcesFromImageProps(imageProps) {
    var source = (0, _resolveAssetSource.default)(imageProps.source);
    var sources;
    var crossOrigin = imageProps.crossOrigin,
      referrerPolicy = imageProps.referrerPolicy,
      src = imageProps.src,
      srcSet = imageProps.srcSet,
      width = imageProps.width,
      height = imageProps.height;
    var headers = {};
    if (crossOrigin === 'use-credentials') {
      headers['Access-Control-Allow-Credentials'] = 'true';
    }
    if (referrerPolicy != null) {
      headers['Referrer-Policy'] = referrerPolicy;
    }
    if (srcSet != null) {
      var sourceList = [];
      var srcSetList = srcSet.split(', ');
      var shouldUseSrcForDefaultScale = true;
      srcSetList.forEach(imageSrc => {
        var _imageSrc$split = imageSrc.split(' '),
          _imageSrc$split2 = (0, _slicedToArray2.default)(_imageSrc$split, 2),
          uri = _imageSrc$split2[0],
          _imageSrc$split2$ = _imageSrc$split2[1],
          xScale = _imageSrc$split2$ === undefined ? '1x' : _imageSrc$split2$;
        if (!xScale.endsWith('x')) {
          console.warn('The provided format for scale is not supported yet. Please use scales like 1x, 2x, etc.');
        } else {
          var scale = parseInt(xScale.split('x')[0], 10);
          if (!isNaN(scale)) {
            shouldUseSrcForDefaultScale = scale === 1 ? false : shouldUseSrcForDefaultScale;
            sourceList.push({
              headers: headers,
              scale,
              uri,
              width,
              height
            });
          }
        }
      });
      if (shouldUseSrcForDefaultScale && src != null) {
        sourceList.push({
          headers: headers,
          scale: 1,
          uri: src,
          width,
          height
        });
      }
      if (sourceList.length === 0) {
        console.warn('The provided value for srcSet is not valid.');
      }
      sources = sourceList;
    } else if (src != null) {
      sources = [{
        uri: src,
        headers: headers,
        width,
        height
      }];
    } else {
      sources = source;
    }
    return sources;
  }
},368,[1,29,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.convertObjectFitToResizeMode = convertObjectFitToResizeMode;
  function convertObjectFitToResizeMode(objectFit) {
    var objectFitMap = {
      contain: 'contain',
      cover: 'cover',
      fill: 'stretch',
      'scale-down': 'contain'
    };
    return objectFitMap[objectFit];
  }
},369,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('ImageLoader');
},370,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _RefreshControl = _interopRequireDefault(require(_dependencyMap[2]));
  var _ScrollView = _interopRequireDefault(require(_dependencyMap[3]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[4]));
  var _splitLayoutProps2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[8]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[9]));
  var _useAnimatedProps5 = _interopRequireDefault(require(_dependencyMap[10]));
  var _react = _interopRequireWildcard(require(_dependencyMap[11]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[12]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var AnimatedScrollView = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
    {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(AnimatedScrollViewWithoutInvertedRefreshControl, {
        scrollEventThrottle: 0.0001,
        ...props,
        ref: forwardedRef
      });
    }
  });
  var AnimatedScrollViewWithInvertedRefreshControl = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
    var _useMemo = (0, _react.useMemo)(() => {
        var _splitLayoutProps = (0, _splitLayoutProps2.default)((0, _flattenStyle.default)(props.style)),
          outer = _splitLayoutProps.outer,
          inner = _splitLayoutProps.inner;
        return {
          intermediatePropsForRefreshControl: {
            style: outer
          },
          intermediatePropsForScrollView: {
            ...props,
            style: inner
          }
        };
      }, [props]),
      intermediatePropsForRefreshControl = _useMemo.intermediatePropsForRefreshControl,
      intermediatePropsForScrollView = _useMemo.intermediatePropsForScrollView;
    var _useAnimatedProps = (0, _useAnimatedProps5.default)(intermediatePropsForRefreshControl),
      _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
      refreshControlAnimatedProps = _useAnimatedProps2[0],
      refreshControlRef = _useAnimatedProps2[1];
    var refreshControl = /*#__PURE__*/React.cloneElement(props.refreshControl, {
      ...refreshControlAnimatedProps,
      ref: refreshControlRef
    });
    var _useAnimatedProps3 = (0, _useAnimatedProps5.default)(intermediatePropsForScrollView),
      _useAnimatedProps4 = (0, _slicedToArray2.default)(_useAnimatedProps3, 2),
      scrollViewAnimatedProps = _useAnimatedProps4[0],
      scrollViewRef = _useAnimatedProps4[1];
    var ref = (0, _useMergeRefs.default)(scrollViewRef, forwardedRef);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ScrollView.default, {
      ...scrollViewAnimatedProps,
      ref: ref,
      refreshControl: refreshControl,
      style: _StyleSheet.default.compose(scrollViewAnimatedProps.style, refreshControlAnimatedProps.style)
    });
  });
  var AnimatedScrollViewWithoutInvertedRefreshControl = (0, _createAnimatedComponent.default)(_ScrollView.default);
  var _default = exports.default = AnimatedScrollView;
},371,[1,29,372,375,131,378,245,81,331,330,332,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AndroidSwipeRefreshLayoutNativeComponent = _interopRequireWildcard(require(_dependencyMap[7]));
  var _PullToRefreshViewNativeComponent = _interopRequireWildcard(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["enabled", "colors", "progressBackgroundColor", "size"],
    _excluded2 = ["tintColor", "titleColor", "title"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var Platform = require(_dependencyMap[10]);
  var React = require(_dependencyMap[11]);
  var RefreshControl = /*#__PURE__*/function (_React$Component) {
    function RefreshControl() {
      var _this;
      (0, _classCallCheck2.default)(this, RefreshControl);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, RefreshControl, [...args]);
      _this._lastNativeRefreshing = false;
      _this._onRefresh = () => {
        _this._lastNativeRefreshing = true;
        _this.props.onRefresh && _this.props.onRefresh();
        _this.forceUpdate();
      };
      _this._setNativeRef = ref => {
        _this._nativeRef = ref;
      };
      return _this;
    }
    (0, _inherits2.default)(RefreshControl, _React$Component);
    return (0, _createClass2.default)(RefreshControl, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativeRefreshing = this.props.refreshing;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.refreshing !== prevProps.refreshing) {
          this._lastNativeRefreshing = this.props.refreshing;
        } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {
          {
            _PullToRefreshViewNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
          }
          this._lastNativeRefreshing = this.props.refreshing;
        }
      }
    }, {
      key: "render",
      value: function render() {
        {
          var _this$props = this.props,
            enabled = _this$props.enabled,
            colors = _this$props.colors,
            progressBackgroundColor = _this$props.progressBackgroundColor,
            size = _this$props.size,
            props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_PullToRefreshViewNativeComponent.default, {
            ...props,
            ref: this._setNativeRef,
            onRefresh: this._onRefresh
          });
        }
      }
    }]);
  }(React.Component);
  module.exports = RefreshControl;
},372,[1,203,10,11,50,52,55,373,374,243,81,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeComponentRegistry = require(_dependencyMap[4]);
  var _require = require(_dependencyMap[5]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var _require2 = require(_dependencyMap[6]),
    dispatchCommand = _require2.dispatchCommand;
  var nativeComponentName = 'AndroidSwipeRefreshLayout';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidSwipeRefreshLayout',
    directEventTypes: {
      topRefresh: {
        registrationName: 'onRefresh'
      }
    },
    validAttributes: {
      enabled: true,
      colors: {
        process: require(_dependencyMap[7])
      },
      progressBackgroundColor: {
        process: require(_dependencyMap[8]).default
      },
      size: true,
      progressViewOffset: true,
      refreshing: true,
      ...ConditionallyIgnoredEventHandlers({
        onRefresh: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
  var Commands = exports.Commands = {
    setNativeRefreshing(ref, value) {
      dispatchCommand(ref, "setNativeRefreshing", [value]);
    }
  };
},373,[1,127,256,125,87,122,61,107,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeComponentRegistry = require(_dependencyMap[4]);
  var _require = require(_dependencyMap[5]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var _require2 = require(_dependencyMap[6]),
    dispatchCommand = _require2.dispatchCommand;
  var nativeComponentName = 'RCTRefreshControl';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTRefreshControl',
    directEventTypes: {
      topRefresh: {
        registrationName: 'onRefresh'
      }
    },
    validAttributes: {
      tintColor: {
        process: require(_dependencyMap[7]).default
      },
      titleColor: {
        process: require(_dependencyMap[7]).default
      },
      title: true,
      progressViewOffset: true,
      refreshing: true,
      ...ConditionallyIgnoredEventHandlers({
        onRefresh: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
  var Commands = exports.Commands = {
    setNativeRefreshing(ref, refreshing) {
      dispatchCommand(ref, "setNativeRefreshing", [refreshing]);
    }
  };
},374,[1,127,256,125,87,122,61,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedImplementation = _interopRequireDefault(require(_dependencyMap[7]));
  var _FrameRateLogger = _interopRequireDefault(require(_dependencyMap[8]));
  var _RendererProxy = require(_dependencyMap[9]);
  var _UIManager = _interopRequireDefault(require(_dependencyMap[10]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[11]));
  var _splitLayoutProps2 = _interopRequireDefault(require(_dependencyMap[12]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[13]));
  var _Dimensions = _interopRequireDefault(require(_dependencyMap[14]));
  var _dismissKeyboard = _interopRequireDefault(require(_dependencyMap[15]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[16]));
  var _Keyboard = _interopRequireDefault(require(_dependencyMap[17]));
  var _TextInputState = _interopRequireDefault(require(_dependencyMap[18]));
  var _View = _interopRequireDefault(require(_dependencyMap[19]));
  var _AndroidHorizontalScrollContentViewNativeComponent = _interopRequireDefault(require(_dependencyMap[20]));
  var _AndroidHorizontalScrollViewNativeComponent = _interopRequireDefault(require(_dependencyMap[21]));
  var _processDecelerationRate = _interopRequireDefault(require(_dependencyMap[22]));
  var _ScrollContentViewNativeComponent = _interopRequireDefault(require(_dependencyMap[23]));
  var _ScrollViewCommands = _interopRequireDefault(require(_dependencyMap[24]));
  var _ScrollViewContext = _interopRequireWildcard(require(_dependencyMap[25]));
  var _ScrollViewNativeComponent = _interopRequireDefault(require(_dependencyMap[26]));
  var _ScrollViewStickyHeader = _interopRequireDefault(require(_dependencyMap[27]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[28]));
  var _memoizeOne = _interopRequireDefault(require(_dependencyMap[29]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[30]));
  var React = _interopRequireWildcard(require(_dependencyMap[31]));
  var _jsxRuntime = require(_dependencyMap[32]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  {
    require(_dependencyMap[33]);
  }
  var _ref = {
      NativeHorizontalScrollViewTuple: [_ScrollViewNativeComponent.default, _ScrollContentViewNativeComponent.default],
      NativeVerticalScrollViewTuple: [_ScrollViewNativeComponent.default, _ScrollContentViewNativeComponent.default]
    },
    NativeHorizontalScrollViewTuple = _ref.NativeHorizontalScrollViewTuple,
    NativeVerticalScrollViewTuple = _ref.NativeVerticalScrollViewTuple;
  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
  var ScrollView = /*#__PURE__*/function (_React$Component) {
    function ScrollView(props) {
      var _this;
      (0, _classCallCheck2.default)(this, ScrollView);
      _this = _callSuper(this, ScrollView, [props]);
      _this._scrollAnimatedValueAttachment = null;
      _this._stickyHeaderRefs = new Map();
      _this._headerLayoutYs = new Map();
      _this._keyboardMetrics = null;
      _this._additionalScrollOffset = 0;
      _this._isTouching = false;
      _this._lastMomentumScrollBeginTime = 0;
      _this._lastMomentumScrollEndTime = 0;
      _this._observedScrollSinceBecomingResponder = false;
      _this._becameResponderWhileAnimating = false;
      _this._preventNegativeScrollOffset = null;
      _this._animated = null;
      _this._subscriptionKeyboardWillShow = null;
      _this._subscriptionKeyboardWillHide = null;
      _this._subscriptionKeyboardDidShow = null;
      _this._subscriptionKeyboardDidHide = null;
      _this.state = {
        layoutHeight: null
      };
      _this.getScrollResponder = () => {
        return _this;
      };
      _this.getScrollableNode = () => {
        return (0, _RendererProxy.findNodeHandle)(_this._scrollView.nativeInstance);
      };
      _this.getInnerViewNode = () => {
        return (0, _RendererProxy.findNodeHandle)(_this._innerView.nativeInstance);
      };
      _this.getInnerViewRef = () => {
        return _this._innerView.nativeInstance;
      };
      _this.getNativeScrollRef = () => {
        return _this._scrollView.nativeInstance;
      };
      _this.scrollTo = (options, deprecatedX, deprecatedAnimated) => {
        var x, y, animated;
        if (typeof options === 'number') {
          console.warn("`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.");
          y = options;
          x = deprecatedX;
          animated = deprecatedAnimated;
        } else if (options) {
          y = options.y;
          x = options.x;
          animated = options.animated;
        }
        if (_this._scrollView.nativeInstance == null) {
          return;
        }
        _ScrollViewCommands.default.scrollTo(_this._scrollView.nativeInstance, x || 0, y || 0, animated !== false);
      };
      _this.scrollToEnd = options => {
        var animated = (options && options.animated) !== false;
        if (_this._scrollView.nativeInstance == null) {
          return;
        }
        _ScrollViewCommands.default.scrollToEnd(_this._scrollView.nativeInstance, animated);
      };
      _this.flashScrollIndicators = () => {
        if (_this._scrollView.nativeInstance == null) {
          return;
        }
        _ScrollViewCommands.default.flashScrollIndicators(_this._scrollView.nativeInstance);
      };
      _this.scrollResponderScrollNativeHandleToKeyboard = (nodeHandle, additionalOffset, preventNegativeScrollOffset) => {
        _this._additionalScrollOffset = additionalOffset || 0;
        _this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;
        if (_this._innerView.nativeInstance == null) {
          return;
        }
        if (typeof nodeHandle === 'number') {
          _UIManager.default.measureLayout(nodeHandle, (0, _nullthrows.default)((0, _RendererProxy.findNodeHandle)(_this)), _this._textInputFocusError, _this._inputMeasureAndScrollToKeyboard);
        } else {
          nodeHandle.measureLayout(_this._innerView.nativeInstance, _this._inputMeasureAndScrollToKeyboard, _this._textInputFocusError);
        }
      };
      _this.scrollResponderZoomTo = (rect, animated) => {
        (0, _invariant.default)(true, 'zoomToRect is not implemented');
        if ('animated' in rect) {
          _this._animated = rect.animated;
          delete rect.animated;
        } else if (typeof animated !== 'undefined') {
          console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
        }
        if (_this._scrollView.nativeInstance == null) {
          return;
        }
        _ScrollViewCommands.default.zoomToRect(_this._scrollView.nativeInstance, rect, animated !== false);
      };
      _this._inputMeasureAndScrollToKeyboard = (left, top, width, height) => {
        var keyboardScreenY = _Dimensions.default.get('window').height;
        var scrollTextInputIntoVisibleRect = () => {
          if (_this._keyboardMetrics != null) {
            keyboardScreenY = _this._keyboardMetrics.screenY;
          }
          var scrollOffsetY = top - keyboardScreenY + height + _this._additionalScrollOffset;
          if (_this._preventNegativeScrollOffset === true) {
            scrollOffsetY = Math.max(0, scrollOffsetY);
          }
          _this.scrollTo({
            x: 0,
            y: scrollOffsetY,
            animated: true
          });
          _this._additionalScrollOffset = 0;
          _this._preventNegativeScrollOffset = false;
        };
        if (_this._keyboardMetrics == null) {
          setTimeout(() => {
            scrollTextInputIntoVisibleRect();
          }, 0);
        } else {
          scrollTextInputIntoVisibleRect();
        }
      };
      _this._handleScroll = e => {
        _this._observedScrollSinceBecomingResponder = true;
        _this.props.onScroll && _this.props.onScroll(e);
      };
      _this._handleLayout = e => {
        if (_this.props.invertStickyHeaders === true) {
          _this.setState({
            layoutHeight: e.nativeEvent.layout.height
          });
        }
        if (_this.props.onLayout) {
          _this.props.onLayout(e);
        }
      };
      _this._handleContentOnLayout = e => {
        var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
        _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);
      };
      _this._innerView = createRefForwarder(instance => instance);
      _this._scrollView = createRefForwarder(nativeInstance => {
        var publicInstance = Object.assign(nativeInstance, {
          getScrollResponder: _this.getScrollResponder,
          getScrollableNode: _this.getScrollableNode,
          getInnerViewNode: _this.getInnerViewNode,
          getInnerViewRef: _this.getInnerViewRef,
          getNativeScrollRef: _this.getNativeScrollRef,
          scrollTo: _this.scrollTo,
          scrollToEnd: _this.scrollToEnd,
          flashScrollIndicators: _this.flashScrollIndicators,
          scrollResponderZoomTo: _this.scrollResponderZoomTo,
          scrollResponderScrollNativeHandleToKeyboard: _this.scrollResponderScrollNativeHandleToKeyboard
        });
        return publicInstance;
      });
      _this.scrollResponderKeyboardWillShow = e => {
        _this._keyboardMetrics = e.endCoordinates;
        _this.props.onKeyboardWillShow && _this.props.onKeyboardWillShow(e);
      };
      _this.scrollResponderKeyboardWillHide = e => {
        _this._keyboardMetrics = null;
        _this.props.onKeyboardWillHide && _this.props.onKeyboardWillHide(e);
      };
      _this.scrollResponderKeyboardDidShow = e => {
        _this._keyboardMetrics = e.endCoordinates;
        _this.props.onKeyboardDidShow && _this.props.onKeyboardDidShow(e);
      };
      _this.scrollResponderKeyboardDidHide = e => {
        _this._keyboardMetrics = null;
        _this.props.onKeyboardDidHide && _this.props.onKeyboardDidHide(e);
      };
      _this._handleMomentumScrollBegin = e => {
        _this._lastMomentumScrollBeginTime = global.performance.now();
        _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
      };
      _this._handleMomentumScrollEnd = e => {
        _FrameRateLogger.default.endScroll();
        _this._lastMomentumScrollEndTime = global.performance.now();
        _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
      };
      _this._handleScrollBeginDrag = e => {
        _FrameRateLogger.default.beginScroll();
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
      };
      _this._handleScrollEndDrag = e => {
        var velocity = e.nativeEvent.velocity;
        if (!_this._isAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
          _FrameRateLogger.default.endScroll();
        }
        _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
      };
      _this._isAnimating = () => {
        var now = global.performance.now();
        var timeSinceLastMomentumScrollEnd = now - _this._lastMomentumScrollEndTime;
        var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || _this._lastMomentumScrollEndTime < _this._lastMomentumScrollBeginTime;
        return isAnimating;
      };
      _this._handleResponderGrant = e => {
        _this._observedScrollSinceBecomingResponder = false;
        _this.props.onResponderGrant && _this.props.onResponderGrant(e);
        _this._becameResponderWhileAnimating = _this._isAnimating();
      };
      _this._handleResponderReject = () => {};
      _this._handleResponderRelease = e => {
        _this._isTouching = e.nativeEvent.touches.length !== 0;
        _this.props.onResponderRelease && _this.props.onResponderRelease(e);
        if (typeof e.target === 'number') {
          return;
        }
        var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
        if (currentlyFocusedTextInput != null && _this.props.keyboardShouldPersistTaps !== true && _this.props.keyboardShouldPersistTaps !== 'always' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedTextInput && !_this._observedScrollSinceBecomingResponder && !_this._becameResponderWhileAnimating) {
          _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
        }
      };
      _this._handleResponderTerminationRequest = () => {
        return !_this._observedScrollSinceBecomingResponder;
      };
      _this._handleScrollShouldSetResponder = () => {
        if (_this.props.disableScrollViewPanResponder === true) {
          return false;
        }
        return _this._isTouching;
      };
      _this._handleStartShouldSetResponder = e => {
        if (_this.props.disableScrollViewPanResponder === true) {
          return false;
        }
        var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
        if (_this.props.keyboardShouldPersistTaps === 'handled' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedInput) {
          return true;
        }
        return false;
      };
      _this._handleStartShouldSetResponderCapture = e => {
        if (_this._isAnimating()) {
          return true;
        }
        if (_this.props.disableScrollViewPanResponder === true) {
          return false;
        }
        var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
        var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
        if (typeof e.target === 'number') {
          return false;
        }
        if (_this._softKeyboardIsDetached()) {
          return false;
        }
        if (keyboardNeverPersistTaps && _this._keyboardIsDismissible() && e.target != null && !_TextInputState.default.isTextInput(e.target)) {
          return true;
        }
        return false;
      };
      _this._keyboardIsDismissible = () => {
        var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
        var hasFocusedTextInput = currentlyFocusedInput != null && _TextInputState.default.isTextInput(currentlyFocusedInput);
        var softKeyboardMayBeOpen = _this._keyboardMetrics != null || _this._keyboardEventsAreUnreliable();
        return hasFocusedTextInput && softKeyboardMayBeOpen;
      };
      _this._softKeyboardIsDetached = () => {
        return _this._keyboardMetrics != null && _this._keyboardMetrics.height === 0;
      };
      _this._keyboardEventsAreUnreliable = () => {
        return false;
      };
      _this._handleTouchEnd = e => {
        var nativeEvent = e.nativeEvent;
        _this._isTouching = nativeEvent.touches.length !== 0;
        var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
        var keyboardNeverPersistsTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
        var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
        if (currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && _this._softKeyboardIsDetached() && _this._keyboardIsDismissible() && keyboardNeverPersistsTaps) {
          _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
        }
        _this.props.onTouchEnd && _this.props.onTouchEnd(e);
      };
      _this._handleTouchCancel = e => {
        _this._isTouching = false;
        _this.props.onTouchCancel && _this.props.onTouchCancel(e);
      };
      _this._handleTouchStart = e => {
        _this._isTouching = true;
        _this.props.onTouchStart && _this.props.onTouchStart(e);
      };
      _this._handleTouchMove = e => {
        _this.props.onTouchMove && _this.props.onTouchMove(e);
      };
      _this._scrollAnimatedValue = new _AnimatedImplementation.default.Value(_this.props.contentOffset?.y ?? 0);
      _this._scrollAnimatedValue.setOffset(_this.props.contentInset?.top ?? 0);
      return _this;
    }
    (0, _inherits2.default)(ScrollView, _React$Component);
    return (0, _createClass2.default)(ScrollView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {
          console.warn(`'keyboardShouldPersistTaps={${this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'}}' is deprecated. ` + `Use 'keyboardShouldPersistTaps="${this.props.keyboardShouldPersistTaps ? 'always' : 'never'}"' instead`);
        }
        this._keyboardMetrics = _Keyboard.default.metrics();
        this._additionalScrollOffset = 0;
        this._subscriptionKeyboardWillShow = _Keyboard.default.addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);
        this._subscriptionKeyboardWillHide = _Keyboard.default.addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);
        this._subscriptionKeyboardDidShow = _Keyboard.default.addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);
        this._subscriptionKeyboardDidHide = _Keyboard.default.addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);
        this._updateAnimatedNodeAttachment();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevContentInsetTop = prevProps.contentInset ? prevProps.contentInset.top : 0;
        var newContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;
        if (prevContentInsetTop !== newContentInsetTop) {
          this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);
        }
        this._updateAnimatedNodeAttachment();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscriptionKeyboardWillShow != null) {
          this._subscriptionKeyboardWillShow.remove();
        }
        if (this._subscriptionKeyboardWillHide != null) {
          this._subscriptionKeyboardWillHide.remove();
        }
        if (this._subscriptionKeyboardDidShow != null) {
          this._subscriptionKeyboardDidShow.remove();
        }
        if (this._subscriptionKeyboardDidHide != null) {
          this._subscriptionKeyboardDidHide.remove();
        }
        if (this._scrollAnimatedValueAttachment) {
          this._scrollAnimatedValueAttachment.detach();
        }
      }
    }, {
      key: "_textInputFocusError",
      value: function _textInputFocusError() {
        console.warn('Error measuring text field.');
      }
    }, {
      key: "_getKeyForIndex",
      value: function _getKeyForIndex(index, childArray) {
        var child = childArray[index];
        return child && child.key;
      }
    }, {
      key: "_updateAnimatedNodeAttachment",
      value: function _updateAnimatedNodeAttachment() {
        if (this._scrollAnimatedValueAttachment) {
          this._scrollAnimatedValueAttachment.detach();
        }
        if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
          this._scrollAnimatedValueAttachment = _AnimatedImplementation.default.attachNativeEvent(this._scrollView.nativeInstance, 'onScroll', [{
            nativeEvent: {
              contentOffset: {
                y: this._scrollAnimatedValue
              }
            }
          }]);
        }
      }
    }, {
      key: "_setStickyHeaderRef",
      value: function _setStickyHeaderRef(key, ref) {
        if (ref) {
          this._stickyHeaderRefs.set(key, ref);
        } else {
          this._stickyHeaderRefs.delete(key);
        }
      }
    }, {
      key: "_onStickyHeaderLayout",
      value: function _onStickyHeaderLayout(index, event, key) {
        var stickyHeaderIndices = this.props.stickyHeaderIndices;
        if (!stickyHeaderIndices) {
          return;
        }
        var childArray = React.Children.toArray(this.props.children);
        if (key !== this._getKeyForIndex(index, childArray)) {
          return;
        }
        var layoutY = event.nativeEvent.layout.y;
        this._headerLayoutYs.set(key, layoutY);
        var indexOfIndex = stickyHeaderIndices.indexOf(index);
        var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];
        if (previousHeaderIndex != null) {
          var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));
          previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _ref2 = this.props.horizontal === true ? NativeHorizontalScrollViewTuple : NativeVerticalScrollViewTuple,
          _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
          NativeDirectionalScrollView = _ref3[0],
          NativeDirectionalScrollContentView = _ref3[1];
        var contentContainerStyle = [this.props.horizontal === true && styles.contentContainerHorizontal, this.props.contentContainerStyle];
        var contentSizeChangeProps = this.props.onContentSizeChange == null ? null : {
          onLayout: this._handleContentOnLayout
        };
        var stickyHeaderIndices = this.props.stickyHeaderIndices;
        var children = this.props.children;
        if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
          var childArray = React.Children.toArray(this.props.children);
          children = childArray.map((child, index) => {
            var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
            if (indexOfIndex > -1) {
              var key = child.key;
              var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
              var StickyHeaderComponent = this.props.StickyHeaderComponent || _ScrollViewStickyHeader.default;
              return /*#__PURE__*/(0, _jsxRuntime.jsx)(StickyHeaderComponent, {
                ref: ref => this._setStickyHeaderRef(key, ref),
                nextHeaderLayoutY: this._headerLayoutYs.get(this._getKeyForIndex(nextIndex, childArray)),
                onLayout: event => this._onStickyHeaderLayout(index, event, key),
                scrollAnimatedValue: this._scrollAnimatedValue,
                inverted: this.props.invertStickyHeaders,
                hiddenOnScroll: this.props.stickyHeaderHiddenOnScroll,
                scrollViewHeight: this.state.layoutHeight,
                children: child
              }, key);
            } else {
              return child;
            }
          });
        }
        children = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ScrollViewContext.default.Provider, {
          value: this.props.horizontal === true ? _ScrollViewContext.HORIZONTAL : _ScrollViewContext.VERTICAL,
          children: children
        });
        var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;
        var contentContainer = /*#__PURE__*/(0, _jsxRuntime.jsx)(NativeDirectionalScrollContentView, {
          ...contentSizeChangeProps,
          ref: this._innerView.getForwardingRef(this.props.innerViewRef),
          style: contentContainerStyle,
          removeClippedSubviews: this.props.removeClippedSubviews,
          collapsable: false,
          children: children
        });
        var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
        var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
        var baseStyle = this.props.horizontal === true ? styles.baseHorizontal : styles.baseVertical;
        var props = {
          ...this.props,
          alwaysBounceHorizontal,
          alwaysBounceVertical,
          style: _StyleSheet.default.compose(baseStyle, this.props.style),
          onContentSizeChange: null,
          onLayout: this._handleLayout,
          onMomentumScrollBegin: this._handleMomentumScrollBegin,
          onMomentumScrollEnd: this._handleMomentumScrollEnd,
          onResponderGrant: this._handleResponderGrant,
          onResponderReject: this._handleResponderReject,
          onResponderRelease: this._handleResponderRelease,
          onResponderTerminationRequest: this._handleResponderTerminationRequest,
          onScrollBeginDrag: this._handleScrollBeginDrag,
          onScrollEndDrag: this._handleScrollEndDrag,
          onScrollShouldSetResponder: this._handleScrollShouldSetResponder,
          onStartShouldSetResponder: this._handleStartShouldSetResponder,
          onStartShouldSetResponderCapture: this._handleStartShouldSetResponderCapture,
          onTouchEnd: this._handleTouchEnd,
          onTouchMove: this._handleTouchMove,
          onTouchStart: this._handleTouchStart,
          onTouchCancel: this._handleTouchCancel,
          onScroll: this._handleScroll,
          scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
          sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
          snapToStart: this.props.snapToStart !== false,
          snapToEnd: this.props.snapToEnd !== false,
          pagingEnabled: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null
        };
        var decelerationRate = this.props.decelerationRate;
        if (decelerationRate != null) {
          props.decelerationRate = (0, _processDecelerationRate.default)(decelerationRate);
        }
        var refreshControl = this.props.refreshControl;
        var scrollViewRef = this._scrollView.getForwardingRef(this.props.scrollViewRef);
        if (refreshControl) {
          {
            return /*#__PURE__*/(0, _jsxRuntime.jsxs)(NativeDirectionalScrollView, {
              ...props,
              ref: scrollViewRef,
              children: [refreshControl, contentContainer]
            });
          }
        }
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(NativeDirectionalScrollView, {
          ...props,
          ref: scrollViewRef,
          children: contentContainer
        });
      }
    }]);
  }(React.Component);
  ScrollView.Context = _ScrollViewContext.default;
  var styles = _StyleSheet.default.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  function createRefForwarder(mutator) {
    var state = {
      getForwardingRef: (0, _memoizeOne.default)(forwardedRef => {
        return nativeInstance => {
          var publicInstance = nativeInstance == null ? null : mutator(nativeInstance);
          state.nativeInstance = nativeInstance;
          state.publicInstance = publicInstance;
          if (forwardedRef != null) {
            if (typeof forwardedRef === 'function') {
              forwardedRef(publicInstance);
            } else {
              forwardedRef.current = publicInstance;
            }
          }
        };
      }),
      nativeInstance: null,
      publicInstance: null
    };
    return state;
  }
  function Wrapper(props, ref) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(ScrollView, {
      ...props,
      scrollViewRef: ref
    });
  }
  Wrapper.displayName = 'ScrollView';
  var ForwardedScrollView = /*#__PURE__*/React.forwardRef(Wrapper);
  ForwardedScrollView.Context = _ScrollViewContext.default;
  ForwardedScrollView.displayName = 'ScrollView';
  module.exports = ForwardedScrollView;
},375,[1,29,10,11,50,52,55,305,376,61,111,131,378,245,102,379,81,380,85,240,383,384,385,386,387,388,389,390,46,361,113,125,243,264]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeFrameRateLogger = _interopRequireDefault(require(_dependencyMap[1]));
  var invariant = require(_dependencyMap[2]);
  var FrameRateLogger = {
    setGlobalOptions: function (options) {
      if (options.debug !== undefined) {
        invariant(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');
      }
      if (_NativeFrameRateLogger.default) {
        var optionsClone = {
          debug: !!options.debug,
          reportStackTraces: !!options.reportStackTraces
        };
        _NativeFrameRateLogger.default.setGlobalOptions(optionsClone);
      }
    },
    setContext: function (context) {
      _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.setContext(context);
    },
    beginScroll() {
      _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.beginScroll();
    },
    endScroll() {
      _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},376,[1,377,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('FrameRateLogger');
},377,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = splitLayoutProps;
  function splitLayoutProps(props) {
    var outer = null;
    var inner = null;
    if (props != null) {
      outer = {};
      inner = {};
      for (var prop of Object.keys(props)) {
        switch (prop) {
          case 'margin':
          case 'marginHorizontal':
          case 'marginVertical':
          case 'marginBottom':
          case 'marginTop':
          case 'marginLeft':
          case 'marginRight':
          case 'flex':
          case 'flexGrow':
          case 'flexShrink':
          case 'flexBasis':
          case 'alignSelf':
          case 'height':
          case 'minHeight':
          case 'maxHeight':
          case 'width':
          case 'minWidth':
          case 'maxWidth':
          case 'position':
          case 'left':
          case 'right':
          case 'bottom':
          case 'top':
          case 'transform':
          case 'transformOrigin':
          case 'rowGap':
          case 'columnGap':
          case 'gap':
            outer[prop] = props[prop];
            break;
          default:
            inner[prop] = props[prop];
            break;
        }
      }
    }
    return {
      outer,
      inner
    };
  }
},378,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var TextInputState = require(_dependencyMap[0]);
  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedInput());
  }
  module.exports = dismissKeyboard;
},379,[85]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[3]));
  var _LayoutAnimation = _interopRequireDefault(require(_dependencyMap[4]));
  var _dismissKeyboard = _interopRequireDefault(require(_dependencyMap[5]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[6]));
  var _NativeKeyboardObserver = _interopRequireDefault(require(_dependencyMap[7]));
  var Keyboard = /*#__PURE__*/function () {
    function Keyboard() {
      (0, _classCallCheck2.default)(this, Keyboard);
      this._emitter = new _NativeEventEmitter.default(_NativeKeyboardObserver.default);
      this.addListener('keyboardDidShow', ev => {
        this._currentlyShowing = ev;
      });
      this.addListener('keyboardDidHide', _ev => {
        this._currentlyShowing = null;
      });
    }
    return (0, _createClass2.default)(Keyboard, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }
    }, {
      key: "dismiss",
      value: function dismiss() {
        (0, _dismissKeyboard.default)();
      }
    }, {
      key: "isVisible",
      value: function isVisible() {
        return !!this._currentlyShowing;
      }
    }, {
      key: "metrics",
      value: function metrics() {
        return this._currentlyShowing?.endCoordinates;
      }
    }, {
      key: "scheduleLayoutAnimation",
      value: function scheduleLayoutAnimation(event) {
        var duration = event.duration,
          easing = event.easing;
        if (duration != null && duration !== 0) {
          _LayoutAnimation.default.configureNext({
            duration: duration,
            update: {
              duration: duration,
              type: easing != null && _LayoutAnimation.default.Types[easing] || 'keyboard'
            }
          });
        }
      }
    }]);
  }();
  module.exports = new Keyboard();
},380,[1,10,11,205,381,379,81,382]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _FabricUIManager = require(_dependencyMap[1]);
  var _ReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var UIManager = require(_dependencyMap[4]);
  var isLayoutAnimationEnabled = _ReactNativeFeatureFlags.default.isLayoutAnimationEnabled();
  function setEnabled(value) {
    isLayoutAnimationEnabled = isLayoutAnimationEnabled;
  }
  function configureNext(config, onAnimationDidEnd, onAnimationDidFail) {
    if (_Platform.default.isDisableAnimations) {
      return;
    }
    if (!isLayoutAnimationEnabled) {
      return;
    }
    var animationCompletionHasRun = false;
    var onAnimationComplete = () => {
      if (animationCompletionHasRun) {
        return;
      }
      animationCompletionHasRun = true;
      clearTimeout(raceWithAnimationId);
      onAnimationDidEnd?.();
    };
    var raceWithAnimationId = setTimeout(onAnimationComplete, (config.duration ?? 0) + 17);
    var FabricUIManager = (0, _FabricUIManager.getFabricUIManager)();
    if (FabricUIManager?.configureNextLayoutAnimation) {
      global?.nativeFabricUIManager?.configureNextLayoutAnimation(config, onAnimationComplete, onAnimationDidFail ?? function () {});
      return;
    }
    if (UIManager?.configureNextLayoutAnimation) {
      UIManager.configureNextLayoutAnimation(config, onAnimationComplete ?? function () {}, onAnimationDidFail ?? function () {});
    }
  }
  function create(duration, type, property) {
    return {
      duration,
      create: {
        type,
        property
      },
      update: {
        type
      },
      delete: {
        type,
        property
      }
    };
  }
  var Presets = {
    easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
    linear: create(500, 'linear', 'opacity'),
    spring: {
      duration: 700,
      create: {
        type: 'linear',
        property: 'opacity'
      },
      update: {
        type: 'spring',
        springDamping: 0.4
      },
      delete: {
        type: 'linear',
        property: 'opacity'
      }
    }
  };
  var LayoutAnimation = {
    configureNext,
    create,
    Types: Object.freeze({
      spring: 'spring',
      linear: 'linear',
      easeInEaseOut: 'easeInEaseOut',
      easeIn: 'easeIn',
      easeOut: 'easeOut',
      keyboard: 'keyboard'
    }),
    Properties: Object.freeze({
      opacity: 'opacity',
      scaleX: 'scaleX',
      scaleY: 'scaleY',
      scaleXY: 'scaleXY'
    }),
    checkConfig() {
      console.error('LayoutAnimation.checkConfig(...) has been disabled.');
    },
    Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring),
    setEnabled
  };
  module.exports = LayoutAnimation;
},381,[1,112,140,81,111]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('KeyboardObserver');
},382,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var nativeComponentName = 'AndroidHorizontalScrollContentView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidHorizontalScrollContentView',
    validAttributes: {
      removeClippedSubviews: true
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},383,[1,256,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidHorizontalScrollView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
      decelerationRate: true,
      disableIntervalMomentum: true,
      endFillColor: {
        process: require(_dependencyMap[1]).default
      },
      fadingEdgeLength: true,
      nestedScrollEnabled: true,
      overScrollMode: true,
      pagingEnabled: true,
      persistentScrollbar: true,
      scrollEnabled: true,
      scrollPerfTag: true,
      sendMomentumEvents: true,
      showsHorizontalScrollIndicator: true,
      snapToAlignment: true,
      snapToEnd: true,
      snapToInterval: true,
      snapToStart: true,
      snapToOffsets: true,
      contentOffset: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderRadius: true,
      borderStyle: true,
      borderRightColor: {
        process: require(_dependencyMap[1]).default
      },
      borderColor: {
        process: require(_dependencyMap[1]).default
      },
      borderBottomColor: {
        process: require(_dependencyMap[1]).default
      },
      borderTopLeftRadius: true,
      borderTopColor: {
        process: require(_dependencyMap[1]).default
      },
      removeClippedSubviews: true,
      borderTopRightRadius: true,
      borderLeftColor: {
        process: require(_dependencyMap[1]).default
      },
      pointerEvents: true
    }
  };
  var AndroidHorizontalScrollViewNativeComponent = NativeComponentRegistry.get('AndroidHorizontalScrollView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = AndroidHorizontalScrollViewNativeComponent;
},384,[87,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      return 0.998;
    } else if (decelerationRate === 'fast') {
      return 0.99;
    }
    return decelerationRate;
  }
  module.exports = processDecelerationRate;
},385,[1,81]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTScrollContentView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {}
  };
  var ScrollContentViewNativeComponent = NativeComponentRegistry.get('RCTScrollContentView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = ScrollContentViewNativeComponent;
},386,[87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = (0, _codegenNativeCommands.default)({
    supportedCommands: ['flashScrollIndicators', 'scrollTo', 'scrollToEnd', 'zoomToRect']
  });
},387,[1,127,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.VERTICAL = exports.HORIZONTAL = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var ScrollViewContext = /*#__PURE__*/React.createContext(null);
  var _default = exports.default = ScrollViewContext;
  var HORIZONTAL = exports.HORIZONTAL = Object.freeze({
    horizontal: true
  });
  var VERTICAL = exports.VERTICAL = Object.freeze({
    horizontal: false
  });
},388,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _ViewConfigIgnore = require(_dependencyMap[2]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
      topMomentumScrollBegin: {
        registrationName: 'onMomentumScrollBegin'
      },
      topMomentumScrollEnd: {
        registrationName: 'onMomentumScrollEnd'
      },
      topScroll: {
        registrationName: 'onScroll'
      },
      topScrollBeginDrag: {
        registrationName: 'onScrollBeginDrag'
      },
      topScrollEndDrag: {
        registrationName: 'onScrollEndDrag'
      },
      topScrollToTop: {
        registrationName: 'onScrollToTop'
      }
    },
    validAttributes: {
      alwaysBounceHorizontal: true,
      alwaysBounceVertical: true,
      automaticallyAdjustContentInsets: true,
      automaticallyAdjustKeyboardInsets: true,
      automaticallyAdjustsScrollIndicatorInsets: true,
      bounces: true,
      bouncesZoom: true,
      canCancelContentTouches: true,
      centerContent: true,
      contentInset: {
        diff: require(_dependencyMap[4])
      },
      contentOffset: {
        diff: require(_dependencyMap[5])
      },
      contentInsetAdjustmentBehavior: true,
      decelerationRate: true,
      directionalLockEnabled: true,
      disableIntervalMomentum: true,
      indicatorStyle: true,
      inverted: true,
      keyboardDismissMode: true,
      maintainVisibleContentPosition: true,
      maximumZoomScale: true,
      minimumZoomScale: true,
      pagingEnabled: true,
      pinchGestureEnabled: true,
      scrollEnabled: true,
      scrollEventThrottle: true,
      scrollIndicatorInsets: {
        diff: require(_dependencyMap[4])
      },
      scrollToOverflowEnabled: true,
      scrollsToTop: true,
      showsHorizontalScrollIndicator: true,
      showsVerticalScrollIndicator: true,
      snapToAlignment: true,
      snapToEnd: true,
      snapToInterval: true,
      snapToOffsets: true,
      snapToStart: true,
      zoomScale: true,
      ...(0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onScrollBeginDrag: true,
        onMomentumScrollEnd: true,
        onScrollEndDrag: true,
        onMomentumScrollBegin: true,
        onScrollToTop: true,
        onScroll: true
      })
    }
  };
  var ScrollViewNativeComponent = NativeComponentRegistry.get('RCTScrollView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = ScrollViewNativeComponent;
},389,[1,87,122,81,108,110]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _Animated = _interopRequireDefault(require(_dependencyMap[2]));
  var _ReactFabricPublicInstanceUtils = require(_dependencyMap[3]);
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[4]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[5]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[6]));
  var _react = _interopRequireWildcard(require(_dependencyMap[7]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[8]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var ScrollViewStickyHeaderWithForwardedRef = /*#__PURE__*/React.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {
    var inverted = props.inverted,
      scrollViewHeight = props.scrollViewHeight,
      hiddenOnScroll = props.hiddenOnScroll,
      scrollAnimatedValue = props.scrollAnimatedValue,
      _nextHeaderLayoutY = props.nextHeaderLayoutY;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      measured = _useState2[0],
      setMeasured = _useState2[1];
    var _useState3 = (0, _react.useState)(0),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      layoutY = _useState4[0],
      setLayoutY = _useState4[1];
    var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      layoutHeight = _useState6[0],
      setLayoutHeight = _useState6[1];
    var _useState7 = (0, _react.useState)(null),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      translateY = _useState8[0],
      setTranslateY = _useState8[1];
    var _useState9 = (0, _react.useState)(_nextHeaderLayoutY),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      nextHeaderLayoutY = _useState10[0],
      setNextHeaderLayoutY = _useState10[1];
    var _useState11 = (0, _react.useState)(false),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      isFabric = _useState12[0],
      setIsFabric = _useState12[1];
    var callbackRef = (0, _react.useCallback)(ref => {
      if (ref == null) {
        return;
      }
      ref.setNextHeaderY = setNextHeaderLayoutY;
      setIsFabric((0, _ReactFabricPublicInstanceUtils.isPublicInstance)(ref));
    }, []);
    var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var offset = (0, _react.useMemo)(() => hiddenOnScroll === true ? _Animated.default.diffClamp(scrollAnimatedValue.interpolate({
      extrapolateLeft: 'clamp',
      inputRange: [layoutY, layoutY + 1],
      outputRange: [0, 1]
    }).interpolate({
      inputRange: [0, 1],
      outputRange: [0, -1]
    }), -layoutHeight, 0) : null, [scrollAnimatedValue, layoutHeight, layoutY, hiddenOnScroll]);
    var _useState13 = (0, _react.useState)(() => {
        var inputRange = [-1, 0];
        var outputRange = [0, 0];
        var initialTranslateY = scrollAnimatedValue.interpolate({
          inputRange,
          outputRange
        });
        if (offset != null) {
          return _Animated.default.add(initialTranslateY, offset);
        }
        return initialTranslateY;
      }),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      animatedTranslateY = _useState14[0],
      setAnimatedTranslateY = _useState14[1];
    var haveReceivedInitialZeroTranslateY = (0, _react.useRef)(true);
    var translateYDebounceTimer = (0, _react.useRef)(null);
    (0, _react.useEffect)(() => {
      if (translateY !== 0 && translateY != null) {
        haveReceivedInitialZeroTranslateY.current = false;
      }
    }, [translateY]);
    var animatedValueListener = (0, _react.useCallback)(_ref => {
      var value = _ref.value;
      var debounceTimeout = 64;
      if (value === 0 && !haveReceivedInitialZeroTranslateY.current) {
        haveReceivedInitialZeroTranslateY.current = true;
        return;
      }
      if (translateYDebounceTimer.current != null) {
        clearTimeout(translateYDebounceTimer.current);
      }
      translateYDebounceTimer.current = setTimeout(() => setTranslateY(value), debounceTimeout);
    }, []);
    (0, _react.useEffect)(() => {
      var inputRange = [-1, 0];
      var outputRange = [0, 0];
      if (measured) {
        if (inverted === true) {
          if (scrollViewHeight != null) {
            var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;
            if (stickStartPoint > 0) {
              inputRange.push(stickStartPoint);
              outputRange.push(0);
              inputRange.push(stickStartPoint + 1);
              outputRange.push(1);
              var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;
              if (collisionPoint > stickStartPoint) {
                inputRange.push(collisionPoint, collisionPoint + 1);
                outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
              }
            }
          }
        } else {
          inputRange.push(layoutY);
          outputRange.push(0);
          var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;
          if (_collisionPoint >= layoutY) {
            inputRange.push(_collisionPoint, _collisionPoint + 1);
            outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
          } else {
            inputRange.push(layoutY + 1);
            outputRange.push(1);
          }
        }
      }
      var newAnimatedTranslateY = scrollAnimatedValue.interpolate({
        inputRange,
        outputRange
      });
      if (offset != null) {
        newAnimatedTranslateY = _Animated.default.add(newAnimatedTranslateY, offset);
      }
      var animatedListenerId;
      if (isFabric) {
        animatedListenerId = newAnimatedTranslateY.addListener(animatedValueListener);
      }
      setAnimatedTranslateY(newAnimatedTranslateY);
      return () => {
        if (animatedListenerId) {
          newAnimatedTranslateY.removeListener(animatedListenerId);
        }
        if (translateYDebounceTimer.current != null) {
          clearTimeout(translateYDebounceTimer.current);
        }
      };
    }, [nextHeaderLayoutY, measured, layoutHeight, layoutY, scrollViewHeight, scrollAnimatedValue, inverted, offset, animatedValueListener, isFabric]);
    var _onLayout = event => {
      setLayoutY(event.nativeEvent.layout.y);
      setLayoutHeight(event.nativeEvent.layout.height);
      setMeasured(true);
      props.onLayout(event);
      var child = React.Children.only(props.children);
      if (child.props.onLayout) {
        child.props.onLayout(event);
      }
    };
    var child = React.Children.only(props.children);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Animated.default.View, {
      collapsable: false,
      nativeID: props.nativeID,
      onLayout: _onLayout,
      ref: ref,
      style: [child.props.style, styles.header, {
        transform: [{
          translateY: animatedTranslateY
        }]
      }],
      children: /*#__PURE__*/React.cloneElement(child, {
        style: styles.fill,
        onLayout: undefined
      })
    });
  });
  var styles = _StyleSheet.default.create({
    header: {
      zIndex: 10,
      position: 'relative'
    },
    fill: {
      flex: 1
    }
  });
  var _default = exports.default = ScrollViewStickyHeaderWithForwardedRef;
},390,[1,29,304,333,245,81,331,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _SectionList = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var SectionListWithEventThrottle = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_SectionList.default, {
    ...props,
    ref: ref
  }));
  var _default = exports.default = (0, _createAnimatedComponent.default)(SectionListWithEventThrottle);
},391,[1,392,330,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _virtualizedLists = require(_dependencyMap[8]);
  var React = _interopRequireWildcard(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  var _excluded = ["stickySectionHeadersEnabled"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var SectionList = exports.default = /*#__PURE__*/function (_React$PureComponent) {
    function SectionList() {
      var _this;
      (0, _classCallCheck2.default)(this, SectionList);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, SectionList, [...args]);
      _this._captureRef = ref => {
        _this._wrapperListRef = ref;
      };
      return _this;
    }
    (0, _inherits2.default)(SectionList, _React$PureComponent);
    return (0, _createClass2.default)(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        if (this._wrapperListRef != null) {
          this._wrapperListRef.scrollToLocation(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          _stickySectionHeadersEnabled = _this$props.stickySectionHeadersEnabled,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var stickySectionHeadersEnabled = _stickySectionHeadersEnabled ?? true;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_virtualizedLists.VirtualizedSectionList, {
          ...restProps,
          stickySectionHeadersEnabled: stickySectionHeadersEnabled,
          ref: this._captureRef,
          getItemCount: items => items.length,
          getItem: (items, index) => items[index]
        });
      }
    }]);
  }(React.PureComponent);
},392,[1,203,10,11,50,52,55,81,345,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Text = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = (0, _createAnimatedComponent.default)(_Text.default);
},393,[1,270,330,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _View = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = (0, _createAnimatedComponent.default)(_View.default);
},394,[1,240,330,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   */

  'use strict';

  module.exports = require(_dependencyMap[0]);
},395,[261]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _View = _interopRequireDefault(require(_dependencyMap[7]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[8]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[9]));
  var _Image = _interopRequireDefault(require(_dependencyMap[10]));
  var React = _interopRequireWildcard(require(_dependencyMap[11]));
  var _jsxRuntime = require(_dependencyMap[12]);
  var _excluded = ["children", "style", "imageStyle", "imageRef", "importantForAccessibility"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ImageBackground = /*#__PURE__*/function (_React$Component) {
    function ImageBackground() {
      var _this;
      (0, _classCallCheck2.default)(this, ImageBackground);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, ImageBackground, [...args]);
      _this._viewRef = null;
      _this._captureRef = ref => {
        _this._viewRef = ref;
      };
      return _this;
    }
    (0, _inherits2.default)(ImageBackground, _React$Component);
    return (0, _createClass2.default)(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;
        if (viewRef) {
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          children = _this$props.children,
          style = _this$props.style,
          imageStyle = _this$props.imageStyle,
          imageRef = _this$props.imageRef,
          importantForAccessibility = _this$props.importantForAccessibility,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var flattenedStyle = (0, _flattenStyle.default)(style);
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
          accessibilityIgnoresInvertColors: true,
          importantForAccessibility: importantForAccessibility,
          style: style,
          ref: this._captureRef,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Image.default, {
            ...props,
            importantForAccessibility: importantForAccessibility,
            style: [_StyleSheet.default.absoluteFill, {
              width: flattenedStyle?.width,
              height: flattenedStyle?.height
            }, imageStyle],
            ref: imageRef
          }), children]
        });
      }
    }]);
  }(React.Component);
  module.exports = ImageBackground;
},396,[1,203,10,11,50,52,55,240,131,245,363,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(require(_dependencyMap[8]));
  var React = _interopRequireWildcard(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var InputAccessoryView = /*#__PURE__*/function (_React$Component) {
    function InputAccessoryView() {
      (0, _classCallCheck2.default)(this, InputAccessoryView);
      return _callSuper(this, InputAccessoryView, arguments);
    }
    (0, _inherits2.default)(InputAccessoryView, _React$Component);
    return (0, _createClass2.default)(InputAccessoryView, [{
      key: "render",
      value: function render() {
        {
          if (React.Children.count(this.props.children) === 0) {
            return null;
          }
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RCTInputAccessoryViewNativeComponent.default, {
            style: [this.props.style, styles.container],
            nativeID: this.props.nativeID,
            backgroundColor: this.props.backgroundColor,
            children: this.props.children
          });
        }
      }
    }]);
  }(React.Component);
  var styles = _StyleSheet.default.create({
    container: {
      position: 'absolute'
    }
  });
  module.exports = InputAccessoryView;
},397,[1,10,11,50,52,55,245,81,398,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var nativeComponentName = 'RCTInputAccessoryView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTInputAccessoryView',
    validAttributes: {
      backgroundColor: {
        process: require(_dependencyMap[3]).default
      }
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},398,[1,256,87,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _LayoutAnimation = _interopRequireDefault(require(_dependencyMap[8]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[9]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[10]));
  var _AccessibilityInfo = _interopRequireDefault(require(_dependencyMap[11]));
  var _View = _interopRequireDefault(require(_dependencyMap[12]));
  var _Keyboard = _interopRequireDefault(require(_dependencyMap[13]));
  var React = _interopRequireWildcard(require(_dependencyMap[14]));
  var _jsxRuntime = require(_dependencyMap[15]);
  var _excluded = ["behavior", "children", "contentContainerStyle", "enabled", "keyboardVerticalOffset", "style", "onLayout"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var KeyboardAvoidingView = /*#__PURE__*/function (_React$Component) {
    function KeyboardAvoidingView(props) {
      var _this;
      (0, _classCallCheck2.default)(this, KeyboardAvoidingView);
      _this = _callSuper(this, KeyboardAvoidingView, [props]);
      _this._frame = null;
      _this._keyboardEvent = null;
      _this._subscriptions = [];
      _this._initialFrameHeight = 0;
      _this._bottom = 0;
      _this._onKeyboardChange = event => {
        _this._keyboardEvent = event;
        _this._updateBottomIfNecessary();
      };
      _this._onLayout = /*#__PURE__*/function () {
        var _ref = (0, _asyncToGenerator2.default)(function* (event) {
          var oldFrame = _this._frame;
          _this._frame = event.nativeEvent.layout;
          if (!_this._initialFrameHeight) {
            _this._initialFrameHeight = _this._frame.height;
          }
          if (!oldFrame || oldFrame.height !== _this._frame.height) {
            yield _this._updateBottomIfNecessary();
          }
          if (_this.props.onLayout) {
            _this.props.onLayout(event);
          }
        });
        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }();
      _this._setBottom = value => {
        var enabled = _this.props.enabled ?? true;
        _this._bottom = value;
        if (enabled) {
          _this.setState({
            bottom: value
          });
        }
      };
      _this._updateBottomIfNecessary = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
        if (_this._keyboardEvent == null) {
          _this._setBottom(0);
          return;
        }
        var _this$_keyboardEvent = _this._keyboardEvent,
          duration = _this$_keyboardEvent.duration,
          easing = _this$_keyboardEvent.easing,
          endCoordinates = _this$_keyboardEvent.endCoordinates;
        var height = yield _this._relativeKeyboardHeight(endCoordinates);
        if (_this._bottom === height) {
          return;
        }
        _this._setBottom(height);
        var enabled = _this.props.enabled ?? true;
        if (enabled && duration && easing) {
          _LayoutAnimation.default.configureNext({
            duration: duration > 10 ? duration : 10,
            update: {
              duration: duration > 10 ? duration : 10,
              type: _LayoutAnimation.default.Types[easing] || 'keyboard'
            }
          });
        }
      });
      _this.state = {
        bottom: 0
      };
      _this.viewRef = /*#__PURE__*/React.createRef();
      return _this;
    }
    (0, _inherits2.default)(KeyboardAvoidingView, _React$Component);
    return (0, _createClass2.default)(KeyboardAvoidingView, [{
      key: "_relativeKeyboardHeight",
      value: function () {
        var _relativeKeyboardHeight2 = (0, _asyncToGenerator2.default)(function* (keyboardFrame) {
          var frame = this._frame;
          if (!frame || !keyboardFrame) {
            return 0;
          }
          if (keyboardFrame.screenY === 0 && (yield _AccessibilityInfo.default.prefersCrossFadeTransitions())) {
            return 0;
          }
          var keyboardY = keyboardFrame.screenY - (this.props.keyboardVerticalOffset ?? 0);
          if (this.props.behavior === 'height') {
            return Math.max(this.state.bottom + frame.y + frame.height - keyboardY, 0);
          }
          return Math.max(frame.y + frame.height - keyboardY, 0);
        });
        function _relativeKeyboardHeight(_x2) {
          return _relativeKeyboardHeight2.apply(this, arguments);
        }
        return _relativeKeyboardHeight;
      }()
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(_, prevState) {
        var enabled = this.props.enabled ?? true;
        if (enabled && this._bottom !== prevState.bottom) {
          this.setState({
            bottom: this._bottom
          });
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        {
          this._subscriptions = [_Keyboard.default.addListener('keyboardWillChangeFrame', this._onKeyboardChange)];
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._subscriptions.forEach(subscription => {
          subscription.remove();
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          behavior = _this$props.behavior,
          children = _this$props.children,
          contentContainerStyle = _this$props.contentContainerStyle,
          _this$props$enabled = _this$props.enabled,
          enabled = _this$props$enabled === undefined ? true : _this$props$enabled,
          _this$props$keyboardV = _this$props.keyboardVerticalOffset,
          keyboardVerticalOffset = _this$props$keyboardV === undefined ? 0 : _this$props$keyboardV,
          style = _this$props.style,
          onLayout = _this$props.onLayout,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var bottomHeight = enabled === true ? this.state.bottom : 0;
        switch (behavior) {
          case 'height':
            var heightStyle;
            if (this._frame != null && this.state.bottom > 0) {
              heightStyle = {
                height: this._initialFrameHeight - bottomHeight,
                flex: 0
              };
            }
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
              ref: this.viewRef,
              style: _StyleSheet.default.compose(style, heightStyle),
              onLayout: this._onLayout,
              ...props,
              children: children
            });
          case 'position':
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
              ref: this.viewRef,
              style: style,
              onLayout: this._onLayout,
              ...props,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
                style: _StyleSheet.default.compose(contentContainerStyle, {
                  bottom: bottomHeight
                }),
                children: children
              })
            });
          case 'padding':
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
              ref: this.viewRef,
              style: _StyleSheet.default.compose(style, {
                paddingBottom: bottomHeight
              }),
              onLayout: this._onLayout,
              ...props,
              children: children
            });
          default:
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
              ref: this.viewRef,
              onLayout: this._onLayout,
              style: style,
              ...props,
              children: children
            });
        }
      }
    }]);
  }(React.Component);
  var _default = exports.default = KeyboardAvoidingView;
},399,[1,203,40,10,11,50,52,55,381,245,81,48,240,380,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[6]));
  var _ModalInjection = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeModalManager = _interopRequireDefault(require(_dependencyMap[8]));
  var _RCTModalHostViewNativeComponent = _interopRequireDefault(require(_dependencyMap[9]));
  var _virtualizedLists = require(_dependencyMap[10]);
  var _jsxRuntime = require(_dependencyMap[11]);
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ScrollView = require(_dependencyMap[12]);
  var View = require(_dependencyMap[13]);
  var AppContainer = require(_dependencyMap[14]);
  var I18nManager = require(_dependencyMap[15]);
  var _require = require(_dependencyMap[16]),
    RootTagContext = _require.RootTagContext;
  var StyleSheet = require(_dependencyMap[17]);
  var Platform = require(_dependencyMap[18]);
  var React = require(_dependencyMap[19]);
  var ModalEventEmitter = _NativeModalManager.default != null ? new _NativeEventEmitter.default(_NativeModalManager.default) : null;
  var uniqueModalIdentifier = 0;
  var Modal = /*#__PURE__*/function (_React$Component) {
    function Modal(props) {
      var _this;
      (0, _classCallCheck2.default)(this, Modal);
      _this = _callSuper(this, Modal, [props]);
      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }
    (0, _inherits2.default)(Modal, _React$Component);
    return (0, _createClass2.default)(Modal, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (ModalEventEmitter) {
          this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', event => {
            if (event.modalID === this._identifier && this.props.onDismiss) {
              this.props.onDismiss();
            }
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {}
    }, {
      key: "render",
      value: function render() {
        if (this.props.visible !== true) {
          return null;
        }
        var containerStyles = {
          backgroundColor: this.props.transparent === true ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType || 'none';
        var presentationStyle = this.props.presentationStyle;
        if (!presentationStyle) {
          presentationStyle = 'fullScreen';
          if (this.props.transparent === true) {
            presentationStyle = 'overFullScreen';
          }
        }
        var innerChildren = this.props.children;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RCTModalHostViewNativeComponent.default, {
          animationType: animationType,
          presentationStyle: presentationStyle,
          transparent: this.props.transparent,
          hardwareAccelerated: this.props.hardwareAccelerated,
          onRequestClose: this.props.onRequestClose,
          onShow: this.props.onShow,
          onDismiss: () => {
            if (this.props.onDismiss) {
              this.props.onDismiss();
            }
          },
          visible: this.props.visible,
          statusBarTranslucent: this.props.statusBarTranslucent,
          identifier: this._identifier,
          style: styles.modal,
          onStartShouldSetResponder: this._shouldSetResponder,
          supportedOrientations: this.props.supportedOrientations,
          onOrientationChange: this.props.onOrientationChange,
          testID: this.props.testID,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_virtualizedLists.VirtualizedListContextResetter, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ScrollView.Context.Provider, {
              value: null,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(View, {
                style: [styles.container, containerStyles],
                collapsable: false,
                children: innerChildren
              })
            })
          })
        });
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }]);
  }(React.Component);
  Modal.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  };
  Modal.contextType = RootTagContext;
  var side = I18nManager.getConstants().isRTL ? 'right' : 'left';
  var styles = StyleSheet.create({
    modal: {
      position: 'absolute'
    },
    container: {
      [side]: 0,
      top: 0,
      flex: 1
    }
  });
  var ExportedModal = _ModalInjection.default.unstable_Modal ?? Modal;
  module.exports = ExportedModal;
},400,[1,10,11,50,52,55,205,401,402,403,345,243,375,240,239,251,246,245,81,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = exports.default = {
    unstable_Modal: null
  };
},401,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('ModalManager');
},402,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var _require = require(_dependencyMap[3]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var nativeComponentName = 'RCTModalHostView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTModalHostView',
    directEventTypes: {
      topRequestClose: {
        registrationName: 'onRequestClose'
      },
      topShow: {
        registrationName: 'onShow'
      },
      topDismiss: {
        registrationName: 'onDismiss'
      },
      topOrientationChange: {
        registrationName: 'onOrientationChange'
      }
    },
    validAttributes: {
      animationType: true,
      presentationStyle: true,
      transparent: true,
      statusBarTranslucent: true,
      hardwareAccelerated: true,
      visible: true,
      animated: true,
      supportedOrientations: true,
      identifier: true,
      ...ConditionallyIgnoredEventHandlers({
        onRequestClose: true,
        onShow: true,
        onDismiss: true,
        onOrientationChange: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},403,[1,256,87,122]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _PressabilityDebug = require(_dependencyMap[3]);
  var _usePressability = _interopRequireDefault(require(_dependencyMap[4]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[5]));
  var _View = _interopRequireDefault(require(_dependencyMap[6]));
  var _useAndroidRippleForView = _interopRequireDefault(require(_dependencyMap[7]));
  var _react = _interopRequireWildcard(require(_dependencyMap[8]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["accessible", "accessibilityState", "aria-live", "android_disableSound", "android_ripple", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-label", "aria-selected", "cancelable", "children", "delayHoverIn", "delayHoverOut", "delayLongPress", "disabled", "focusable", "hitSlop", "onHoverIn", "onHoverOut", "onLongPress", "onPress", "onPressIn", "onPressOut", "pressRetentionOffset", "style", "testOnly_pressed", "unstable_pressDelay"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function Pressable(props, forwardedRef) {
    var accessible = props.accessible,
      accessibilityState = props.accessibilityState,
      ariaLive = props['aria-live'],
      android_disableSound = props.android_disableSound,
      android_ripple = props.android_ripple,
      ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaLabel = props['aria-label'],
      ariaSelected = props['aria-selected'],
      cancelable = props.cancelable,
      children = props.children,
      delayHoverIn = props.delayHoverIn,
      delayHoverOut = props.delayHoverOut,
      delayLongPress = props.delayLongPress,
      disabled = props.disabled,
      focusable = props.focusable,
      hitSlop = props.hitSlop,
      onHoverIn = props.onHoverIn,
      onHoverOut = props.onHoverOut,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      onPressIn = props.onPressIn,
      onPressOut = props.onPressOut,
      pressRetentionOffset = props.pressRetentionOffset,
      style = props.style,
      testOnly_pressed = props.testOnly_pressed,
      unstable_pressDelay = props.unstable_pressDelay,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var viewRef = (0, _react.useRef)(null);
    var mergedRef = (0, _useMergeRefs.default)(forwardedRef, viewRef);
    var android_rippleConfig = (0, _useAndroidRippleForView.default)(android_ripple, viewRef);
    var _usePressState = usePressState(testOnly_pressed === true),
      _usePressState2 = (0, _slicedToArray2.default)(_usePressState, 2),
      pressed = _usePressState2[0],
      setPressed = _usePressState2[1];
    var _accessibilityState = {
      busy: ariaBusy ?? accessibilityState?.busy,
      checked: ariaChecked ?? accessibilityState?.checked,
      disabled: ariaDisabled ?? accessibilityState?.disabled,
      expanded: ariaExpanded ?? accessibilityState?.expanded,
      selected: ariaSelected ?? accessibilityState?.selected
    };
    _accessibilityState = disabled != null ? {
      ..._accessibilityState,
      disabled
    } : _accessibilityState;
    var accessibilityValue = {
      max: props['aria-valuemax'] ?? props.accessibilityValue?.max,
      min: props['aria-valuemin'] ?? props.accessibilityValue?.min,
      now: props['aria-valuenow'] ?? props.accessibilityValue?.now,
      text: props['aria-valuetext'] ?? props.accessibilityValue?.text
    };
    var accessibilityLiveRegion = ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion;
    var accessibilityLabel = ariaLabel ?? props.accessibilityLabel;
    var restPropsWithDefaults = {
      ...restProps,
      ...android_rippleConfig?.viewProps,
      accessible: accessible !== false,
      accessibilityViewIsModal: restProps['aria-modal'] ?? restProps.accessibilityViewIsModal,
      accessibilityLiveRegion,
      accessibilityLabel,
      accessibilityState: _accessibilityState,
      focusable: focusable !== false,
      accessibilityValue,
      hitSlop
    };
    var config = (0, _react.useMemo)(() => ({
      cancelable,
      disabled,
      hitSlop,
      pressRectOffset: pressRetentionOffset,
      android_disableSound,
      delayHoverIn,
      delayHoverOut,
      delayLongPress,
      delayPressIn: unstable_pressDelay,
      onHoverIn,
      onHoverOut,
      onLongPress,
      onPress,
      onPressIn(event) {
        if (android_rippleConfig != null) {
          android_rippleConfig.onPressIn(event);
        }
        setPressed(true);
        if (onPressIn != null) {
          onPressIn(event);
        }
      },
      onPressMove: android_rippleConfig?.onPressMove,
      onPressOut(event) {
        if (android_rippleConfig != null) {
          android_rippleConfig.onPressOut(event);
        }
        setPressed(false);
        if (onPressOut != null) {
          onPressOut(event);
        }
      }
    }), [android_disableSound, android_rippleConfig, cancelable, delayHoverIn, delayHoverOut, delayLongPress, disabled, hitSlop, onHoverIn, onHoverOut, onLongPress, onPress, onPressIn, onPressOut, pressRetentionOffset, setPressed, unstable_pressDelay]);
    var eventHandlers = (0, _usePressability.default)(config);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
      ...restPropsWithDefaults,
      ...eventHandlers,
      ref: mergedRef,
      style: typeof style === 'function' ? style({
        pressed
      }) : style,
      collapsable: false,
      children: [typeof children === 'function' ? children({
        pressed
      }) : children, null]
    });
  }
  function usePressState(forcePressed) {
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      pressed = _useState2[0],
      setPressed = _useState2[1];
    return [pressed || forcePressed, setPressed];
  }
  var MemoedPressable = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(Pressable));
  MemoedPressable.displayName = 'Pressable';
  var _default = exports.default = MemoedPressable;
},404,[1,29,203,271,273,331,240,405,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAndroidRippleForView;
  var _processColor = _interopRequireDefault(require(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[2]));
  var _View = _interopRequireDefault(require(_dependencyMap[3]));
  var _ViewNativeComponent = require(_dependencyMap[4]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[5]));
  var _react = _interopRequireWildcard(require(_dependencyMap[6]));
  var React = _react;
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function useAndroidRippleForView(rippleConfig, viewRef) {
    var _ref = rippleConfig ?? {},
      color = _ref.color,
      borderless = _ref.borderless,
      radius = _ref.radius,
      foreground = _ref.foreground;
    return (0, _react.useMemo)(() => {
      return null;
    }, [borderless, color, foreground, radius, viewRef]);
  }
},405,[1,91,81,240,242,46,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = require(_dependencyMap[0]);
},406,[261]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  var _View = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var exported = require(_dependencyMap[4]).default;
  var _default = exports.default = exported;
},407,[1,81,240,125,408]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var nativeComponentName = 'RCTSafeAreaView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTSafeAreaView',
    validAttributes: {}
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},408,[1,256,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _processColor = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeStatusBarManagerAndroid = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeStatusBarManagerIOS = _interopRequireDefault(require(_dependencyMap[9]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[10]));
  var React = _interopRequireWildcard(require(_dependencyMap[11]));
  var _StatusBar;
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce((prev, cur) => {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }
      return prev;
    }, {
      ...defaultValues
    });
  }
  function createStackEntry(props) {
    var animated = props.animated ?? false;
    var showHideTransition = props.showHideTransition ?? 'fade';
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated,
        transition: showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }
  var StatusBar = /*#__PURE__*/function (_React$Component) {
    function StatusBar() {
      var _this;
      (0, _classCallCheck2.default)(this, StatusBar);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, StatusBar, [...args]);
      _this._stackEntry = null;
      return _this;
    }
    (0, _inherits2.default)(StatusBar, _React$Component);
    return (0, _createClass2.default)(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = StatusBar.pushStackEntry(this.props);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        StatusBar.popStackEntry(this._stackEntry);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;
        {
          _NativeStatusBarManagerIOS.default.setHidden(hidden, animation);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;
        {
          _NativeStatusBarManagerIOS.default.setStyle(style, animated);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        {
          console.warn('`setBackgroundColor` is only available on Android');
          return;
        }
        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        var processedColor = (0, _processColor.default)(color);
        if (processedColor == null) {
          console.warn(`\`StatusBar.setBackgroundColor\`: Color ${color} parsed to null or undefined`);
          return;
        }
        (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');
        _NativeStatusBarManagerAndroid.default.setColor(processedColor, animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        {
          console.warn('`setTranslucent` is only available on Android');
          return;
        }
        StatusBar._defaultProps.translucent = translucent;
        _NativeStatusBarManagerAndroid.default.setTranslucent(translucent);
      }
    }, {
      key: "pushStackEntry",
      value: function pushStackEntry(props) {
        var entry = createStackEntry(props);
        StatusBar._propsStack.push(entry);
        StatusBar._updatePropsStack();
        return entry;
      }
    }, {
      key: "popStackEntry",
      value: function popStackEntry(entry) {
        var index = StatusBar._propsStack.indexOf(entry);
        if (index !== -1) {
          StatusBar._propsStack.splice(index, 1);
        }
        StatusBar._updatePropsStack();
      }
    }, {
      key: "replaceStackEntry",
      value: function replaceStackEntry(entry, props) {
        var newEntry = createStackEntry(props);
        var index = StatusBar._propsStack.indexOf(entry);
        if (index !== -1) {
          StatusBar._propsStack[index] = newEntry;
        }
        StatusBar._updatePropsStack();
        return newEntry;
      }
    }]);
  }(React.Component);
  _StatusBar = StatusBar;
  StatusBar._propsStack = [];
  StatusBar._defaultProps = createStackEntry({
    backgroundColor: 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  });
  StatusBar._updateImmediate = null;
  StatusBar._currentValues = null;
  StatusBar.currentHeight = null;
  StatusBar._updatePropsStack = () => {
    clearImmediate(_StatusBar._updateImmediate);
    _StatusBar._updateImmediate = setImmediate(() => {
      var oldProps = _StatusBar._currentValues;
      var mergedProps = mergePropsStack(_StatusBar._propsStack, _StatusBar._defaultProps);
      {
        if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
          _NativeStatusBarManagerIOS.default.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);
        }
        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
          _NativeStatusBarManagerIOS.default.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
        }
        if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
          _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
        }
      }
      _StatusBar._currentValues = mergedProps;
    });
  };
  module.exports = StatusBar;
},409,[1,10,11,50,52,55,91,81,410,411,46,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
  var constants = null;
  var NativeStatusBarManager = {
    getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    },
    setColor(color, animated) {
      NativeModule.setColor(color, animated);
    },
    setTranslucent(translucent) {
      NativeModule.setTranslucent(translucent);
    },
    setStyle(statusBarStyle) {
      NativeModule.setStyle(statusBarStyle);
    },
    setHidden(hidden) {
      NativeModule.setHidden(hidden);
    }
  };
  var _default = exports.default = NativeStatusBarManager;
},410,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
  var constants = null;
  var NativeStatusBarManager = {
    getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    },
    getHeight(callback) {
      NativeModule.getHeight(callback);
    },
    setNetworkActivityIndicatorVisible(visible) {
      NativeModule.setNetworkActivityIndicatorVisible(visible);
    },
    addListener(eventType) {
      NativeModule.addListener(eventType);
    },
    removeListeners(count) {
      NativeModule.removeListeners(count);
    },
    setStyle(statusBarStyle, animated) {
      NativeModule.setStyle(statusBarStyle, animated);
    },
    setHidden(hidden, withAnimation) {
      NativeModule.setHidden(hidden, withAnimation);
    }
  };
  var _default = exports.default = NativeStatusBarManager;
},411,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[4]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[5]));
  var _AndroidSwitchNativeComponent = _interopRequireWildcard(require(_dependencyMap[6]));
  var _SwitchNativeComponent = _interopRequireWildcard(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["disabled", "ios_backgroundColor", "onChange", "onValueChange", "style", "thumbColor", "trackColor", "value"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var returnsFalse = () => false;
  var returnsTrue = () => true;
  var SwitchWithForwardedRef = /*#__PURE__*/React.forwardRef(function Switch(props, forwardedRef) {
    var disabled = props.disabled,
      ios_backgroundColor = props.ios_backgroundColor,
      onChange = props.onChange,
      onValueChange = props.onValueChange,
      style = props.style,
      thumbColor = props.thumbColor,
      trackColor = props.trackColor,
      value = props.value,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var trackColorForFalse = trackColor?.false;
    var trackColorForTrue = trackColor?.true;
    var nativeSwitchRef = React.useRef(null);
    var ref = (0, _useMergeRefs.default)(nativeSwitchRef, forwardedRef);
    var _React$useState = React.useState({
        value: null
      }),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      native = _React$useState2[0],
      setNative = _React$useState2[1];
    var handleChange = event => {
      onChange?.(event);
      onValueChange?.(event.nativeEvent.value);
      setNative({
        value: event.nativeEvent.value
      });
    };
    React.useLayoutEffect(() => {
      var jsValue = value === true;
      var shouldUpdateNativeSwitch = native.value != null && native.value !== jsValue;
      if (shouldUpdateNativeSwitch && nativeSwitchRef.current?.setNativeProps != null) {
        {
          _SwitchNativeComponent.Commands.setValue(nativeSwitchRef.current, jsValue);
        }
      }
    }, [value, native]);
    {
      var _platformProps = {
        disabled,
        onTintColor: trackColorForTrue,
        style: _StyleSheet.default.compose({
          height: 31,
          width: 51
        }, _StyleSheet.default.compose(style, ios_backgroundColor == null ? null : {
          backgroundColor: ios_backgroundColor,
          borderRadius: 16
        })),
        thumbTintColor: thumbColor,
        tintColor: trackColorForFalse,
        value: value === true
      };
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SwitchNativeComponent.default, {
        ...restProps,
        ..._platformProps,
        accessibilityRole: props.accessibilityRole ?? 'switch',
        onChange: handleChange,
        onResponderTerminationRequest: returnsFalse,
        onStartShouldSetResponder: returnsTrue,
        ref: ref
      });
    }
  });
  var _default = exports.default = SwitchWithForwardedRef;
},412,[1,29,203,245,81,331,413,414,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeComponentRegistry = require(_dependencyMap[4]);
  var _require = require(_dependencyMap[5]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var _require2 = require(_dependencyMap[6]),
    dispatchCommand = _require2.dispatchCommand;
  var nativeComponentName = 'AndroidSwitch';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidSwitch',
    bubblingEventTypes: {
      topChange: {
        phasedRegistrationNames: {
          captured: 'onChangeCapture',
          bubbled: 'onChange'
        }
      }
    },
    validAttributes: {
      disabled: true,
      enabled: true,
      thumbColor: {
        process: require(_dependencyMap[7]).default
      },
      trackColorForFalse: {
        process: require(_dependencyMap[7]).default
      },
      trackColorForTrue: {
        process: require(_dependencyMap[7]).default
      },
      value: true,
      on: true,
      thumbTintColor: {
        process: require(_dependencyMap[7]).default
      },
      trackTintColor: {
        process: require(_dependencyMap[7]).default
      },
      ...ConditionallyIgnoredEventHandlers({
        onChange: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
  var Commands = exports.Commands = {
    setNativeValue(ref, value) {
      dispatchCommand(ref, "setNativeValue", [value]);
    }
  };
},413,[1,127,256,125,87,122,61,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var NativeComponentRegistry = require(_dependencyMap[4]);
  var _require = require(_dependencyMap[5]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var _require2 = require(_dependencyMap[6]),
    dispatchCommand = _require2.dispatchCommand;
  var nativeComponentName = 'RCTSwitch';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTSwitch',
    bubblingEventTypes: {
      topChange: {
        phasedRegistrationNames: {
          captured: 'onChangeCapture',
          bubbled: 'onChange'
        }
      }
    },
    validAttributes: {
      disabled: true,
      value: true,
      tintColor: {
        process: require(_dependencyMap[7]).default
      },
      onTintColor: {
        process: require(_dependencyMap[7]).default
      },
      thumbTintColor: {
        process: require(_dependencyMap[7]).default
      },
      thumbColor: {
        process: require(_dependencyMap[7]).default
      },
      trackColorForFalse: {
        process: require(_dependencyMap[7]).default
      },
      trackColorForTrue: {
        process: require(_dependencyMap[7]).default
      },
      ...ConditionallyIgnoredEventHandlers({
        onChange: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
  var Commands = exports.Commands = {
    setValue(ref, value) {
      dispatchCommand(ref, "setValue", [value]);
    }
  };
},414,[1,127,256,125,87,122,61,91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _usePressability = _interopRequireDefault(require(_dependencyMap[3]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[4]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[5]));
  var _Text = _interopRequireDefault(require(_dependencyMap[6]));
  var _TextAncestor = _interopRequireDefault(require(_dependencyMap[7]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[8]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[9]));
  var _TextInputState = _interopRequireDefault(require(_dependencyMap[10]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[11]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[12]));
  var _react = _interopRequireWildcard(require(_dependencyMap[13]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[14]);
  var _excluded = ["aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-selected", "accessibilityState", "id", "tabIndex", "selection"],
    _excluded2 = ["onBlur", "onFocus"],
    _excluded3 = ["allowFontScaling", "rejectResponderTermination", "underlineColorAndroid", "autoComplete", "textContentType", "readOnly", "editable", "enterKeyHint", "returnKeyType", "inputMode", "showSoftInputOnFocus", "keyboardType"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var AndroidTextInput;
  var AndroidTextInputCommands;
  var RCTSinglelineTextInputView;
  var RCTSinglelineTextInputNativeCommands;
  var RCTMultilineTextInputView;
  var RCTMultilineTextInputNativeCommands;
  {
    RCTSinglelineTextInputView = require(_dependencyMap[15]).default;
    RCTSinglelineTextInputNativeCommands = require(_dependencyMap[15]).Commands;
    RCTMultilineTextInputView = require(_dependencyMap[16]).default;
    RCTMultilineTextInputNativeCommands = require(_dependencyMap[16]).Commands;
  }
  var emptyFunctionThatReturnsTrue = () => true;
  function InternalTextInput(props) {
    var ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaSelected = props['aria-selected'],
      accessibilityState = props.accessibilityState,
      id = props.id,
      tabIndex = props.tabIndex,
      propsSelection = props.selection,
      otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var inputRef = (0, _react.useRef)(null);
    var selection = propsSelection == null ? null : {
      start: propsSelection.start,
      end: propsSelection.end ?? propsSelection.start
    };
    var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      mostRecentEventCount = _useState2[0],
      setMostRecentEventCount = _useState2[1];
    var _useState3 = (0, _react.useState)(props.value),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      lastNativeText = _useState4[0],
      setLastNativeText = _useState4[1];
    var _useState5 = (0, _react.useState)({
        selection,
        mostRecentEventCount
      }),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      lastNativeSelectionState = _useState6[0],
      setLastNativeSelection = _useState6[1];
    var lastNativeSelection = lastNativeSelectionState.selection;
    var viewCommands;
    if (AndroidTextInputCommands) {
      viewCommands = AndroidTextInputCommands;
    } else {
      viewCommands = props.multiline === true ? RCTMultilineTextInputNativeCommands : RCTSinglelineTextInputNativeCommands;
    }
    var text = typeof props.value === 'string' ? props.value : typeof props.defaultValue === 'string' ? props.defaultValue : '';
    (0, _react.useLayoutEffect)(() => {
      var nativeUpdate = {};
      if (lastNativeText !== props.value && typeof props.value === 'string') {
        nativeUpdate.text = props.value;
        setLastNativeText(props.value);
      }
      if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
        nativeUpdate.selection = selection;
        setLastNativeSelection({
          selection,
          mostRecentEventCount
        });
      }
      if (Object.keys(nativeUpdate).length === 0) {
        return;
      }
      if (inputRef.current != null) {
        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, selection?.start ?? -1, selection?.end ?? -1);
      }
    }, [mostRecentEventCount, inputRef, props.value, props.defaultValue, lastNativeText, selection, lastNativeSelection, text, viewCommands]);
    (0, _react.useLayoutEffect)(() => {
      var inputRefValue = inputRef.current;
      if (inputRefValue != null) {
        _TextInputState.default.registerInput(inputRefValue);
        return () => {
          _TextInputState.default.unregisterInput(inputRefValue);
          if (_TextInputState.default.currentlyFocusedInput() === inputRefValue) {
            (0, _nullthrows.default)(inputRefValue).blur();
          }
        };
      }
    }, [inputRef]);
    var setLocalRef = (0, _react.useCallback)(instance => {
      inputRef.current = instance;
      if (instance != null) {
        Object.assign(instance, {
          clear() {
            if (inputRef.current != null) {
              viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, '', 0, 0);
            }
          },
          isFocused() {
            return _TextInputState.default.currentlyFocusedInput() === inputRef.current;
          },
          getNativeRef() {
            return inputRef.current;
          },
          setSelection(start, end) {
            if (inputRef.current != null) {
              viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, null, start, end);
            }
          }
        });
      }
    }, [mostRecentEventCount, viewCommands]);
    var ref = (0, _useMergeRefs.default)(setLocalRef, props.forwardedRef);
    var _onChange = event => {
      var currentText = event.nativeEvent.text;
      props.onChange && props.onChange(event);
      props.onChangeText && props.onChangeText(currentText);
      if (inputRef.current == null) {
        return;
      }
      setLastNativeText(currentText);
      setMostRecentEventCount(event.nativeEvent.eventCount);
    };
    var _onChangeSync = event => {
      var currentText = event.nativeEvent.text;
      props.unstable_onChangeSync && props.unstable_onChangeSync(event);
      props.unstable_onChangeTextSync && props.unstable_onChangeTextSync(currentText);
      if (inputRef.current == null) {
        return;
      }
      setLastNativeText(currentText);
      setMostRecentEventCount(event.nativeEvent.eventCount);
    };
    var _onSelectionChange = event => {
      props.onSelectionChange && props.onSelectionChange(event);
      if (inputRef.current == null) {
        return;
      }
      setLastNativeSelection({
        selection: event.nativeEvent.selection,
        mostRecentEventCount
      });
    };
    var _onFocus = event => {
      _TextInputState.default.focusInput(inputRef.current);
      if (props.onFocus) {
        props.onFocus(event);
      }
    };
    var _onBlur = event => {
      _TextInputState.default.blurInput(inputRef.current);
      if (props.onBlur) {
        props.onBlur(event);
      }
    };
    var _onScroll = event => {
      props.onScroll && props.onScroll(event);
    };
    var textInput = null;
    var multiline = props.multiline ?? false;
    var submitBehavior;
    if (props.submitBehavior != null) {
      if (!multiline && props.submitBehavior === 'newline') {
        submitBehavior = 'blurAndSubmit';
      } else {
        submitBehavior = props.submitBehavior;
      }
    } else if (multiline) {
      if (props.blurOnSubmit === true) {
        submitBehavior = 'blurAndSubmit';
      } else {
        submitBehavior = 'newline';
      }
    } else {
      if (props.blurOnSubmit !== false) {
        submitBehavior = 'blurAndSubmit';
      } else {
        submitBehavior = 'submit';
      }
    }
    var accessible = props.accessible !== false;
    var focusable = props.focusable !== false;
    var config = React.useMemo(() => ({
      hitSlop: props.hitSlop,
      onPress: event => {
        if (props.editable !== false) {
          if (inputRef.current != null) {
            inputRef.current.focus();
          }
        }
      },
      onPressIn: props.onPressIn,
      onPressOut: props.onPressOut,
      cancelable: !props.rejectResponderTermination
    }), [props.editable, props.hitSlop, props.onPressIn, props.onPressOut, props.rejectResponderTermination]);
    var caretHidden = props.caretHidden;
    if (_Platform.default.isTesting) {
      caretHidden = true;
    }
    var _ref = (0, _usePressability.default)(config) || {},
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      eventHandlers = (0, _objectWithoutProperties2.default)(_ref, _excluded2);
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
      _accessibilityState = {
        busy: ariaBusy ?? accessibilityState?.busy,
        checked: ariaChecked ?? accessibilityState?.checked,
        disabled: ariaDisabled ?? accessibilityState?.disabled,
        expanded: ariaExpanded ?? accessibilityState?.expanded,
        selected: ariaSelected ?? accessibilityState?.selected
      };
    }
    var style = (0, _flattenStyle.default)(props.style);
    {
      var RCTTextInputView = props.multiline === true ? RCTMultilineTextInputView : RCTSinglelineTextInputView;
      style = props.multiline === true ? [styles.multilineInput, style] : style;
      var useOnChangeSync = (props.unstable_onChangeSync || props.unstable_onChangeTextSync) && !(props.onChange || props.onChangeText);
      textInput = /*#__PURE__*/(0, _jsxRuntime.jsx)(RCTTextInputView, {
        ref: ref,
        ...otherProps,
        ...eventHandlers,
        accessibilityState: _accessibilityState,
        accessible: accessible,
        submitBehavior: submitBehavior,
        caretHidden: caretHidden,
        dataDetectorTypes: props.dataDetectorTypes,
        focusable: tabIndex !== undefined ? !tabIndex : focusable,
        mostRecentEventCount: mostRecentEventCount,
        nativeID: id ?? props.nativeID,
        onBlur: _onBlur,
        onKeyPressSync: props.unstable_onKeyPressSync,
        onChange: _onChange,
        onChangeSync: useOnChangeSync === true ? _onChangeSync : null,
        onContentSizeChange: props.onContentSizeChange,
        onFocus: _onFocus,
        onScroll: _onScroll,
        onSelectionChange: _onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
        selection: selection,
        style: style,
        text: text
      });
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
      value: true,
      children: textInput
    });
  }
  var enterKeyHintToReturnTypeMap = {
    enter: 'default',
    done: 'done',
    go: 'go',
    next: 'next',
    previous: 'previous',
    search: 'search',
    send: 'send'
  };
  var inputModeToKeyboardTypeMap = {
    none: 'default',
    text: 'default',
    decimal: 'decimal-pad',
    numeric: 'number-pad',
    tel: 'phone-pad',
    search: 'web-search',
    email: 'email-address',
    url: 'url'
  };
  var autoCompleteWebToAutoCompleteAndroidMap = {
    'address-line1': 'postal-address-region',
    'address-line2': 'postal-address-locality',
    bday: 'birthdate-full',
    'bday-day': 'birthdate-day',
    'bday-month': 'birthdate-month',
    'bday-year': 'birthdate-year',
    'cc-csc': 'cc-csc',
    'cc-exp': 'cc-exp',
    'cc-exp-month': 'cc-exp-month',
    'cc-exp-year': 'cc-exp-year',
    'cc-number': 'cc-number',
    country: 'postal-address-country',
    'current-password': 'password',
    email: 'email',
    'honorific-prefix': 'name-prefix',
    'honorific-suffix': 'name-suffix',
    name: 'name',
    'additional-name': 'name-middle',
    'family-name': 'name-family',
    'given-name': 'name-given',
    'new-password': 'password-new',
    off: 'off',
    'one-time-code': 'sms-otp',
    'postal-code': 'postal-code',
    sex: 'gender',
    'street-address': 'street-address',
    tel: 'tel',
    'tel-country-code': 'tel-country-code',
    'tel-national': 'tel-national',
    username: 'username'
  };
  var autoCompleteWebToTextContentTypeMap = {
    'address-line1': 'streetAddressLine1',
    'address-line2': 'streetAddressLine2',
    bday: 'birthdate',
    'bday-day': 'birthdateDay',
    'bday-month': 'birthdateMonth',
    'bday-year': 'birthdateYear',
    'cc-csc': 'creditCardSecurityCode',
    'cc-exp-month': 'creditCardExpirationMonth',
    'cc-exp-year': 'creditCardExpirationYear',
    'cc-exp': 'creditCardExpiration',
    'cc-given-name': 'creditCardGivenName',
    'cc-additional-name': 'creditCardMiddleName',
    'cc-family-name': 'creditCardFamilyName',
    'cc-name': 'creditCardName',
    'cc-number': 'creditCardNumber',
    'cc-type': 'creditCardType',
    'current-password': 'password',
    country: 'countryName',
    email: 'emailAddress',
    name: 'name',
    'additional-name': 'middleName',
    'family-name': 'familyName',
    'given-name': 'givenName',
    nickname: 'nickname',
    'honorific-prefix': 'namePrefix',
    'honorific-suffix': 'nameSuffix',
    'new-password': 'newPassword',
    off: 'none',
    'one-time-code': 'oneTimeCode',
    organization: 'organizationName',
    'organization-title': 'jobTitle',
    'postal-code': 'postalCode',
    'street-address': 'fullStreetAddress',
    tel: 'telephoneNumber',
    url: 'URL',
    username: 'username'
  };
  var ExportedForwardRef = /*#__PURE__*/React.forwardRef(function TextInput(_ref2, forwardedRef) {
    var _ref2$allowFontScalin = _ref2.allowFontScaling,
      allowFontScaling = _ref2$allowFontScalin === undefined ? true : _ref2$allowFontScalin,
      _ref2$rejectResponder = _ref2.rejectResponderTermination,
      rejectResponderTermination = _ref2$rejectResponder === undefined ? true : _ref2$rejectResponder,
      _ref2$underlineColorA = _ref2.underlineColorAndroid,
      underlineColorAndroid = _ref2$underlineColorA === undefined ? 'transparent' : _ref2$underlineColorA,
      autoComplete = _ref2.autoComplete,
      textContentType = _ref2.textContentType,
      readOnly = _ref2.readOnly,
      editable = _ref2.editable,
      enterKeyHint = _ref2.enterKeyHint,
      returnKeyType = _ref2.returnKeyType,
      inputMode = _ref2.inputMode,
      showSoftInputOnFocus = _ref2.showSoftInputOnFocus,
      keyboardType = _ref2.keyboardType,
      restProps = (0, _objectWithoutProperties2.default)(_ref2, _excluded3);
    var style = (0, _flattenStyle.default)(restProps.style);
    if (style?.verticalAlign != null) {
      style.textAlignVertical = verticalAlignToTextAlignVerticalMap[style.verticalAlign];
      delete style.verticalAlign;
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(InternalTextInput, {
      allowFontScaling: allowFontScaling,
      rejectResponderTermination: rejectResponderTermination,
      underlineColorAndroid: underlineColorAndroid,
      editable: readOnly !== undefined ? !readOnly : editable,
      returnKeyType: enterKeyHint ? enterKeyHintToReturnTypeMap[enterKeyHint] : returnKeyType,
      keyboardType: inputMode ? inputModeToKeyboardTypeMap[inputMode] : keyboardType,
      showSoftInputOnFocus: inputMode == null ? showSoftInputOnFocus : inputMode !== 'none',
      autoComplete: undefined,
      textContentType: textContentType != null ? textContentType : autoComplete && autoComplete in autoCompleteWebToTextContentTypeMap ? autoCompleteWebToTextContentTypeMap[autoComplete] : textContentType,
      ...restProps,
      forwardedRef: forwardedRef,
      style: style
    });
  });
  ExportedForwardRef.displayName = 'TextInput';
  ExportedForwardRef.propTypes = require(_dependencyMap[17]).TextInputPropTypes;
  ExportedForwardRef.State = {
    currentlyFocusedInput: _TextInputState.default.currentlyFocusedInput,
    currentlyFocusedField: _TextInputState.default.currentlyFocusedField,
    focusTextInput: _TextInputState.default.focusTextInput,
    blurTextInput: _TextInputState.default.blurTextInput
  };
  var styles = _StyleSheet.default.create({
    multilineInput: {
      paddingTop: 5
    }
  });
  var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
  };
  module.exports = ExportedForwardRef;
},415,[1,29,203,273,131,245,270,241,81,331,85,46,113,125,243,128,416,280]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[2]));
  var _RCTTextInputViewConfig = _interopRequireDefault(require(_dependencyMap[3]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTMultilineTextInputView',
    ..._RCTTextInputViewConfig.default,
    validAttributes: {
      ..._RCTTextInputViewConfig.default.validAttributes,
      dataDetectorTypes: true
    }
  };
  var MultilineTextInputNativeComponent = NativeComponentRegistry.get('RCTMultilineTextInputView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = MultilineTextInputNativeComponent;
},416,[1,87,127,129]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _PressabilityDebug = require(_dependencyMap[2]);
  var _UIManager = _interopRequireDefault(require(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[4]));
  var _SoundManager = _interopRequireDefault(require(_dependencyMap[5]));
  var _BoundingDimensions = _interopRequireDefault(require(_dependencyMap[6]));
  var _Position = _interopRequireDefault(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var extractSingleTouch = nativeEvent => {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;
    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
  };
  var States = {
    NOT_RESPONDER: 'NOT_RESPONDER',
    RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',
    RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',
    RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',
    RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',
    RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
    RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
    ERROR: 'ERROR'
  };
  var baseStatesConditions = {
    NOT_RESPONDER: false,
    RESPONDER_INACTIVE_PRESS_IN: false,
    RESPONDER_INACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_PRESS_IN: false,
    RESPONDER_ACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_LONG_PRESS_IN: false,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: false,
    ERROR: false
  };
  var IsActive = {
    ...baseStatesConditions,
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  };
  var IsPressingIn = {
    ...baseStatesConditions,
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var IsLongPressingIn = {
    ...baseStatesConditions,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var Signals = {
    DELAY: 'DELAY',
    RESPONDER_GRANT: 'RESPONDER_GRANT',
    RESPONDER_RELEASE: 'RESPONDER_RELEASE',
    RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',
    ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',
    LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',
    LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'
  };
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = 370;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixin = {
    componentDidMount: function () {
      if (!_Platform.default.isTV) {
        return;
      }
    },
    componentWillUnmount: function () {
      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function () {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function () {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function () {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function () {
      return true;
    },
    touchableHandleResponderGrant: function (e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;
      this._receiveSignal(Signals.RESPONDER_GRANT, e);
      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }
      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function (e) {
      this.pressInLocation = null;
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function (e) {
      this.pressInLocation = null;
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function (e) {
      if (!this.state.touchable.positionOnActivate) {
        return;
      }
      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;
      if (hitSlop) {
        pressExpandLeft += hitSlop.left || 0;
        pressExpandTop += hitSlop.top || 0;
        pressExpandRight += hitSlop.right || 0;
        pressExpandBottom += hitSlop.bottom || 0;
      }
      var touch = extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }
      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
      if (isTouchWithinActive) {
        var prevState = this.state.touchable.touchState;
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
        var curState = this.state.touchable.touchState;
        if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();
        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    touchableHandleFocus: function (e) {
      this.props.onFocus && this.props.onFocus(e);
    },
    touchableHandleBlur: function (e) {
      this.props.onBlur && this.props.onBlur(e);
    },
    _remeasureMetricsOnActivation: function () {
      var responderID = this.state.touchable.responderID;
      if (responderID == null) {
        return;
      }
      if (typeof responderID === 'number') {
        _UIManager.default.measure(responderID, this._handleQueryLayout);
      } else {
        responderID.measure(this._handleQueryLayout);
      }
    },
    _handleQueryLayout: function (l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }
      this.state.touchable.positionOnActivate && _Position.default.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && _BoundingDimensions.default.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = _Position.default.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = _BoundingDimensions.default.getPooled(w, h);
    },
    _handleDelay: function (e) {
      this.touchableDelayTimeout = null;
      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function (e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;
      if (curState === States.RESPONDER_ACTIVE_PRESS_IN || curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function (signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];
      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }
      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : "host component`");
      }
      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : "<<host component>>`");
      }
      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);
        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function () {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function (state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function (e) {
      var touch = extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX,
        pageY,
        locationX,
        locationY
      };
    },
    _getDistanceBetweenPoints: function (aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function (curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);
      var newIsHighlight = this._isHighlight(nextState);
      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;
      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }
      var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;
      var isActiveTransition = !IsActive[curState] && IsActive[nextState];
      if (isInitialTransition || isActiveTransition) {
        this._remeasureMetricsOnActivation();
      }
      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }
      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }
      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);
            this._endHighlight(e);
          }
          this.touchableHandlePress(e);
        }
      }
      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _startHighlight: function (e) {
      this._savePressInLocation(e);
      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function (e) {
      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(() => {
            this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    },
    withoutDefaultFocusAndBlur: {}
  };
  var touchableHandleFocus = TouchableMixin.touchableHandleFocus,
    touchableHandleBlur = TouchableMixin.touchableHandleBlur,
    TouchableMixinWithoutDefaultFocusAndBlur = (0, _objectWithoutProperties2.default)(TouchableMixin, ["touchableHandleFocus", "touchableHandleBlur"]);
  TouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;
  var Touchable = {
    Mixin: TouchableMixin,
    renderDebugView: _ref => {
      var color = _ref.color,
        hitSlop = _ref.hitSlop;
      return null;
    }
  };
  module.exports = Touchable;
},417,[1,203,271,111,81,275,418,420,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   */

  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _PooledClass = _interopRequireDefault(require(_dependencyMap[1]));
  var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;

  /**
   * PooledClass representing the bounding rectangle of a region.
   *
   * @param {number} width Width of bounding rectangle.
   * @param {number} height Height of bounding rectangle.
   * @constructor BoundingDimensions
   */
  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }
  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  /**
   * @param {HTMLElement} element Element to return `BoundingDimensions` for.
   * @return {BoundingDimensions} Bounding dimensions of `element`.
   */
  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };
  _PooledClass.default.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  module.exports = BoundingDimensions;
},418,[1,419]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[1]));
  var oneArgumentPooler = function (copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var _instance = Klass.instancePool.pop();
      Klass.call(_instance, copyFieldsFrom);
      return _instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };
  var twoArgumentPooler = function (a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var _instance2 = Klass.instancePool.pop();
      Klass.call(_instance2, a1, a2);
      return _instance2;
    } else {
      return new Klass(a1, a2);
    }
  };
  var threeArgumentPooler = function (a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var _instance3 = Klass.instancePool.pop();
      Klass.call(_instance3, a1, a2, a3);
      return _instance3;
    } else {
      return new Klass(a1, a2, a3);
    }
  };
  var fourArgumentPooler = function (a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var _instance4 = Klass.instancePool.pop();
      Klass.call(_instance4, a1, a2, a3, a4);
      return _instance4;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };
  var standardReleaser = function (instance) {
    var Klass = this;
    (0, _invariant.default)(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };
  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;
  var addPoolingTo = function (CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
  };
  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},419,[1,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   */

  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _PooledClass = _interopRequireDefault(require(_dependencyMap[1]));
  var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;

  /**
   * Position does not expose methods for construction via an `HTMLDOMElement`,
   * because it isn't meaningful to construct such a thing without first defining
   * a frame of reference.
   *
   * @param {number} windowStartKey Key that window starts at.
   * @param {number} windowEndKey Key that window ends at.
   */
  function Position(left, top) {
    this.left = left;
    this.top = top;
  }
  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };
  _PooledClass.default.addPoolingTo(Position, twoArgumentPooler);
  module.exports = Position;
},420,[1,419]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _View = _interopRequireDefault(require(_dependencyMap[7]));
  var _Pressability = _interopRequireDefault(require(_dependencyMap[8]));
  var _PressabilityDebug = require(_dependencyMap[9]);
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[10]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[11]));
  var React = _interopRequireWildcard(require(_dependencyMap[12]));
  var _jsxRuntime = require(_dependencyMap[13]);
  var _excluded = ["onBlur", "onFocus"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var TouchableHighlight = /*#__PURE__*/function (_React$Component) {
    function TouchableHighlight() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableHighlight);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, TouchableHighlight, [...args]);
      _this._isMounted = false;
      _this.state = {
        pressability: new _Pressability.default(_this._createPressabilityConfig()),
        extraStyles: _this.props.testOnly_pressed === true ? _this._createExtraStyles() : null
      };
      return _this;
    }
    (0, _inherits2.default)(TouchableHighlight, _React$Component);
    return (0, _createClass2.default)(TouchableHighlight, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled != null ? this.props.disabled : this.props.accessibilityState?.disabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          android_disableSound: this.props.touchSoundDisabled,
          onBlur: event => {
            if (_Platform.default.isTV) {
              this._hideUnderlay();
            }
            if (this.props.onBlur != null) {
              this.props.onBlur(event);
            }
          },
          onFocus: event => {
            if (_Platform.default.isTV) {
              this._showUnderlay();
            }
            if (this.props.onFocus != null) {
              this.props.onFocus(event);
            }
          },
          onLongPress: this.props.onLongPress,
          onPress: event => {
            if (this._hideTimeout != null) {
              clearTimeout(this._hideTimeout);
            }
            if (!_Platform.default.isTV) {
              this._showUnderlay();
              this._hideTimeout = setTimeout(() => {
                this._hideUnderlay();
              }, this.props.delayPressOut ?? 0);
            }
            if (this.props.onPress != null) {
              this.props.onPress(event);
            }
          },
          onPressIn: event => {
            if (this._hideTimeout != null) {
              clearTimeout(this._hideTimeout);
              this._hideTimeout = null;
            }
            this._showUnderlay();
            if (this.props.onPressIn != null) {
              this.props.onPressIn(event);
            }
          },
          onPressOut: event => {
            if (this._hideTimeout == null) {
              this._hideUnderlay();
            }
            if (this.props.onPressOut != null) {
              this.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_createExtraStyles",
      value: function _createExtraStyles() {
        return {
          child: {
            opacity: this.props.activeOpacity ?? 0.85
          },
          underlay: {
            backgroundColor: this.props.underlayColor === undefined ? 'black' : this.props.underlayColor
          }
        };
      }
    }, {
      key: "_showUnderlay",
      value: function _showUnderlay() {
        if (!this._isMounted || !this._hasPressHandler()) {
          return;
        }
        this.setState({
          extraStyles: this._createExtraStyles()
        });
        if (this.props.onShowUnderlay != null) {
          this.props.onShowUnderlay();
        }
      }
    }, {
      key: "_hideUnderlay",
      value: function _hideUnderlay() {
        if (this._hideTimeout != null) {
          clearTimeout(this._hideTimeout);
          this._hideTimeout = null;
        }
        if (this.props.testOnly_pressed === true) {
          return;
        }
        if (this._hasPressHandler()) {
          this.setState({
            extraStyles: null
          });
          if (this.props.onHideUnderlay != null) {
            this.props.onHideUnderlay();
          }
        }
      }
    }, {
      key: "_hasPressHandler",
      value: function _hasPressHandler() {
        return this.props.onPress != null || this.props.onPressIn != null || this.props.onPressOut != null || this.props.onLongPress != null;
      }
    }, {
      key: "render",
      value: function render() {
        var child = React.Children.only(this.props.children);
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var accessibilityState = this.props.disabled != null ? {
          ...this.props.accessibilityState,
          disabled: this.props.disabled
        } : this.props.accessibilityState;
        var accessibilityValue = {
          max: this.props['aria-valuemax'] ?? this.props.accessibilityValue?.max,
          min: this.props['aria-valuemin'] ?? this.props.accessibilityValue?.min,
          now: this.props['aria-valuenow'] ?? this.props.accessibilityValue?.now,
          text: this.props['aria-valuetext'] ?? this.props.accessibilityValue?.text
        };
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
        var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
          accessible: this.props.accessible !== false,
          accessibilityLabel: accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityLanguage: this.props.accessibilityLanguage,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: accessibilityState,
          accessibilityValue: accessibilityValue,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
          accessibilityLiveRegion: accessibilityLiveRegion,
          accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
          style: _StyleSheet.default.compose(this.props.style, this.state.extraStyles?.underlay),
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined,
          nativeID: this.props.id ?? this.props.nativeID,
          testID: this.props.testID,
          ref: this.props.hostRef,
          ...eventHandlersWithoutBlurAndFocus,
          children: [/*#__PURE__*/React.cloneElement(child, {
            style: _StyleSheet.default.compose(child.props.style, this.state.extraStyles?.child)
          }), null]
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
        if (this._hideTimeout != null) {
          clearTimeout(this._hideTimeout);
        }
        this.state.pressability.reset();
      }
    }]);
  }(React.Component);
  var Touchable = /*#__PURE__*/React.forwardRef((props, hostRef) => /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableHighlight, {
    ...props,
    hostRef: hostRef
  }));
  Touchable.displayName = 'TouchableHighlight';
  module.exports = Touchable;
},421,[1,203,10,11,50,52,55,240,274,271,245,81,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _View = _interopRequireDefault(require(_dependencyMap[7]));
  var _Pressability = _interopRequireDefault(require(_dependencyMap[8]));
  var _PressabilityDebug = require(_dependencyMap[9]);
  var React = _interopRequireWildcard(require(_dependencyMap[10]));
  var _jsxRuntime = require(_dependencyMap[11]);
  var _excluded = ["onBlur", "onFocus"],
    _excluded2 = ["aria-disabled"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var PASSTHROUGH_PROPS = ['accessibilityActions', 'accessibilityElementsHidden', 'accessibilityHint', 'accessibilityLanguage', 'accessibilityIgnoresInvertColors', 'accessibilityLabel', 'accessibilityLiveRegion', 'accessibilityRole', 'accessibilityValue', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'accessibilityViewIsModal', 'aria-modal', 'hitSlop', 'importantForAccessibility', 'nativeID', 'onAccessibilityAction', 'onBlur', 'onFocus', 'onLayout', 'testID'];
  var TouchableWithoutFeedback = /*#__PURE__*/function (_React$Component) {
    function TouchableWithoutFeedback() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableWithoutFeedback);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, TouchableWithoutFeedback, [...args]);
      _this.state = {
        pressability: new _Pressability.default(createPressabilityConfig(_this.props))
      };
      return _this;
    }
    (0, _inherits2.default)(TouchableWithoutFeedback, _React$Component);
    return (0, _createClass2.default)(TouchableWithoutFeedback, [{
      key: "render",
      value: function render() {
        var element = React.Children.only(this.props.children);
        var children = [element.props.children];
        var ariaLive = this.props['aria-live'];
        var _accessibilityState = {
          busy: this.props['aria-busy'] ?? this.props.accessibilityState?.busy,
          checked: this.props['aria-checked'] ?? this.props.accessibilityState?.checked,
          disabled: this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,
          expanded: this.props['aria-expanded'] ?? this.props.accessibilityState?.expanded,
          selected: this.props['aria-selected'] ?? this.props.accessibilityState?.selected
        };
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var elementProps = {
          ...eventHandlersWithoutBlurAndFocus,
          accessible: this.props.accessible !== false,
          accessibilityState: this.props.disabled != null ? {
            ..._accessibilityState,
            disabled: this.props.disabled
          } : _accessibilityState,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined,
          accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive ?? this.props.accessibilityLiveRegion,
          nativeID: this.props.id ?? this.props.nativeID
        };
        for (var prop of PASSTHROUGH_PROPS) {
          if (this.props[prop] !== undefined) {
            elementProps[prop] = this.props[prop];
          }
        }
        return /*#__PURE__*/React.cloneElement(element, elementProps, ...children);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.state.pressability.configure(createPressabilityConfig(this.props));
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.state.pressability.reset();
      }
    }]);
  }(React.Component);
  function createPressabilityConfig(_ref) {
    var ariaDisabled = _ref['aria-disabled'],
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded2);
    var accessibilityStateDisabled = ariaDisabled ?? props.accessibilityState?.disabled;
    return {
      cancelable: !props.rejectResponderTermination,
      disabled: props.disabled !== null ? props.disabled : accessibilityStateDisabled,
      hitSlop: props.hitSlop,
      delayLongPress: props.delayLongPress,
      delayPressIn: props.delayPressIn,
      delayPressOut: props.delayPressOut,
      minPressDuration: 0,
      pressRectOffset: props.pressRetentionOffset,
      android_disableSound: props.touchSoundDisabled,
      onBlur: props.onBlur,
      onFocus: props.onFocus,
      onLongPress: props.onLongPress,
      onPress: props.onPress,
      onPressIn: props.onPressIn,
      onPressOut: props.onPressOut
    };
  }
  TouchableWithoutFeedback.displayName = 'TouchableWithoutFeedback';
  module.exports = TouchableWithoutFeedback;
},422,[1,203,10,11,50,52,55,240,274,271,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var VirtualizedList = require(_dependencyMap[0]).VirtualizedList;
  module.exports = VirtualizedList;
},423,[345]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var VirtualizedSectionList = require(_dependencyMap[0]).VirtualizedSectionList;
  module.exports = VirtualizedSectionList;
},424,[345]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _NativeActionSheetManager = _interopRequireDefault(require(_dependencyMap[2]));
  var _excluded = ["tintColor", "cancelButtonTintColor", "destructiveButtonIndex"];
  var processColor = require(_dependencyMap[3]).default;
  var invariant = require(_dependencyMap[4]);
  var ActionSheetIOS = {
    showActionSheetWithOptions(options, callback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
      var tintColor = options.tintColor,
        cancelButtonTintColor = options.cancelButtonTintColor,
        destructiveButtonIndex = options.destructiveButtonIndex,
        remainingOptions = (0, _objectWithoutProperties2.default)(options, _excluded);
      var destructiveButtonIndices = null;
      if (Array.isArray(destructiveButtonIndex)) {
        destructiveButtonIndices = destructiveButtonIndex;
      } else if (typeof destructiveButtonIndex === 'number') {
        destructiveButtonIndices = [destructiveButtonIndex];
      }
      var processedTintColor = processColor(tintColor);
      var processedCancelButtonTintColor = processColor(cancelButtonTintColor);
      invariant(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');
      invariant(processedCancelButtonTintColor == null || typeof processedCancelButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor');
      _NativeActionSheetManager.default.showActionSheetWithOptions({
        ...remainingOptions,
        tintColor: processedTintColor,
        cancelButtonTintColor: processedCancelButtonTintColor,
        destructiveButtonIndices
      }, callback);
    },
    showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
      invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
      _NativeActionSheetManager.default.showShareActionSheetWithOptions({
        ...options,
        tintColor: processColor(options.tintColor)
      }, failureCallback, successCallback);
    },
    dismissActionSheet: () => {
      invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
      if (typeof _NativeActionSheetManager.default.dismissActionSheet === 'function') {
        _NativeActionSheetManager.default.dismissActionSheet();
      }
    }
  };
  module.exports = ActionSheetIOS;
},425,[1,203,426,91,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('ActionSheetManager');
},426,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[2]));
  var _EventEmitter = _interopRequireDefault(require(_dependencyMap[3]));
  var _DebugEnvironment = require(_dependencyMap[4]);
  var _NativeAppearance = _interopRequireDefault(require(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[6]));
  var eventEmitter = new _EventEmitter.default();
  if (_NativeAppearance.default) {
    var nativeEventEmitter = new _NativeEventEmitter.default(_NativeAppearance.default);
    nativeEventEmitter.addListener('appearanceChanged', newAppearance => {
      var colorScheme = newAppearance.colorScheme;
      (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
      eventEmitter.emit('change', {
        colorScheme
      });
    });
  }
  module.exports = {
    getColorScheme() {
      var nativeColorScheme = _NativeAppearance.default == null ? null : _NativeAppearance.default.getColorScheme() || null;
      (0, _invariant.default)(nativeColorScheme === 'dark' || nativeColorScheme === 'light' || nativeColorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
      return nativeColorScheme;
    },
    setColorScheme(colorScheme) {
      var nativeColorScheme = colorScheme == null ? 'unspecified' : colorScheme;
      (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark', 'light' or null?");
      if (_NativeAppearance.default != null && _NativeAppearance.default.setColorScheme != null) {
        _NativeAppearance.default.setColorScheme(nativeColorScheme);
      }
    },
    addChangeListener(listener) {
      return eventEmitter.addListener('change', listener);
    }
  };
},427,[1,205,81,58,428,429,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isAsyncDebugging = undefined;
  var isAsyncDebugging = exports.isAsyncDebugging = false;
},428,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('Appearance');
},429,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[3]));
  var _logError = _interopRequireDefault(require(_dependencyMap[4]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeAppState = _interopRequireDefault(require(_dependencyMap[6]));
  var AppState = /*#__PURE__*/function () {
    function AppState() {
      (0, _classCallCheck2.default)(this, AppState);
      this.currentState = null;
      if (_NativeAppState.default == null) {
        this.isAvailable = false;
      } else {
        this.isAvailable = true;
        var emitter = new _NativeEventEmitter.default(_NativeAppState.default);
        this._emitter = emitter;
        this.currentState = _NativeAppState.default.getConstants().initialAppState;
        var eventUpdated = false;
        emitter.addListener('appStateDidChange', appStateData => {
          eventUpdated = true;
          this.currentState = appStateData.app_state;
        });
        _NativeAppState.default.getCurrentAppState(appStateData => {
          if (!eventUpdated && this.currentState !== appStateData.app_state) {
            this.currentState = appStateData.app_state;
            emitter.emit('appStateDidChange', appStateData);
          }
        }, _logError.default);
      }
    }
    return (0, _createClass2.default)(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        var emitter = this._emitter;
        if (emitter == null) {
          throw new Error('Cannot use AppState when `isAvailable` is false.');
        }
        switch (type) {
          case 'change':
            var changeHandler = handler;
            return emitter.addListener('appStateDidChange', appStateData => {
              changeHandler(appStateData.app_state);
            });
          case 'memoryWarning':
            var memoryWarningHandler = handler;
            return emitter.addListener('memoryWarning', memoryWarningHandler);
          case 'blur':
          case 'focus':
            var focusOrBlurHandler = handler;
            return emitter.addListener('appStateFocusChange', hasFocus => {
              if (type === 'blur' && !hasFocus) {
                focusOrBlurHandler();
              }
              if (type === 'focus' && hasFocus) {
                focusOrBlurHandler();
              }
            });
        }
        throw new Error('Trying to subscribe to unknown event: ' + type);
      }
    }]);
  }();
  module.exports = new AppState();
},430,[1,10,11,205,431,81,432]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var logError = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };
  module.exports = logError;
},431,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('AppState');
},432,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeClipboard = _interopRequireDefault(require(_dependencyMap[1]));
  module.exports = {
    getString() {
      return _NativeClipboard.default.getString();
    },
    setString(content) {
      _NativeClipboard.default.setString(content);
    }
  };
},433,[1,434]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('Clipboard');
},434,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeDeviceInfo = _interopRequireDefault(require(_dependencyMap[1]));
  module.exports = _NativeDeviceInfo.default;
},435,[1,103]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _NativeDevSettings = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var DevSettings = {
    addMenuItem(title, handler) {},
    reload(reason) {},
    onFastRefresh() {}
  };
  module.exports = DevSettings;
},436,[1,205,437,81]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('DevSettings');
},437,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeEventEmitter2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeIntentAndroid = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeLinkingManager = _interopRequireDefault(require(_dependencyMap[9]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[10]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[11]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var Linking = /*#__PURE__*/function (_NativeEventEmitter) {
    function Linking() {
      (0, _classCallCheck2.default)(this, Linking);
      return _callSuper(this, Linking, [(0, _nullthrows.default)(_NativeLinkingManager.default)]);
    }
    (0, _inherits2.default)(Linking, _NativeEventEmitter);
    return (0, _createClass2.default)(Linking, [{
      key: "addEventListener",
      value: function addEventListener(eventType, listener, context) {
        return this.addListener(eventType, listener);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);
        {
          return (0, _nullthrows.default)(_NativeLinkingManager.default).openURL(url);
        }
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);
        {
          return (0, _nullthrows.default)(_NativeLinkingManager.default).canOpenURL(url);
        }
      }
    }, {
      key: "openSettings",
      value: function openSettings() {
        {
          return (0, _nullthrows.default)(_NativeLinkingManager.default).openSettings();
        }
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return (0, _nullthrows.default)(_NativeLinkingManager.default).getInitialURL();
      }
    }, {
      key: "sendIntent",
      value: function sendIntent(action, extras) {
        {
          return new Promise((resolve, reject) => reject(new Error('Unsupported')));
        }
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        (0, _invariant.default)(url, 'Invalid URL: cannot be empty');
      }
    }]);
  }(_NativeEventEmitter2.default);
  module.exports = new Linking();
},438,[1,10,11,50,52,55,205,81,439,440,46,113]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('IntentAndroid');
},439,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('LinkingManager');
},440,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  var _RCTLog = _interopRequireDefault(require(_dependencyMap[2]));
  var LogBox;
  {
    LogBox = {
      install() {},
      uninstall() {},
      isInstalled() {
        return false;
      },
      ignoreLogs(patterns) {},
      ignoreAllLogs(value) {},
      clearAllLogs() {},
      addLog(log) {},
      addException(error) {}
    };
  }
  var _default = exports.default = LogBox;
},441,[1,81,223]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('DialogManagerAndroid');
},442,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var InteractionManager = require(_dependencyMap[0]);
  var TouchHistoryMath = require(_dependencyMap[1]);
  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
  var currentCentroidX = TouchHistoryMath.currentCentroidX;
  var currentCentroidY = TouchHistoryMath.currentCentroidY;
  var PanResponder = {
    _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random(),
        moveX: 0,
        moveY: 0,
        x0: 0,
        y0: 0,
        dx: 0,
        dy: 0,
        vx: 0,
        vy: 0,
        numberActiveTouches: 0,
        _accountsForMovesUpTo: 0
      };
      var panHandlers = {
        onStartShouldSetResponder(event) {
          return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);
        },
        onMoveShouldSetResponder(event) {
          return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);
        },
        onStartShouldSetResponderCapture(event) {
          if (event.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }
          gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;
        },
        onMoveShouldSetResponderCapture(event) {
          var touchHistory = event.touchHistory;
          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }
          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;
        },
        onResponderGrant(event) {
          if (!interactionState.handle) {
            interactionState.handle = InteractionManager.createInteractionHandle();
          }
          gestureState.x0 = currentCentroidX(event.touchHistory);
          gestureState.y0 = currentCentroidY(event.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;
          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(event, gestureState);
          }
          return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);
        },
        onResponderReject(event) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);
        },
        onResponderRelease(event) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);
          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart(event) {
          var touchHistory = event.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          if (config.onPanResponderStart) {
            config.onPanResponderStart(event, gestureState);
          }
        },
        onResponderMove(event) {
          var touchHistory = event.touchHistory;
          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }
          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
          if (config.onPanResponderMove) {
            config.onPanResponderMove(event, gestureState);
          }
        },
        onResponderEnd(event) {
          var touchHistory = event.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);
        },
        onResponderTerminate(event) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);
          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest(event) {
          return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);
        }
      };
      return {
        panHandlers,
        getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };
  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      InteractionManager.clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }
    if (callback) {
      callback(event, gestureState);
    }
  }
  var _default = exports.default = PanResponder;
},443,[312,444]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   */

  var TouchHistoryMath = {
    /**
     * This code is optimized and not intended to look beautiful. This allows
     * computing of touch centroids that have moved after `touchesChangedAfter`
     * timeStamp. You can compute the current centroid involving all touches
     * moves after `touchesChangedAfter`, or you can compute the previous
     * centroid of all touches that were moved after `touchesChangedAfter`.
     *
     * @param {TouchHistoryMath} touchHistory Standard Responder touch track
     * data.
     * @param {number} touchesChangedAfter timeStamp after which moved touches
     * are considered "actively moving" - not just "active".
     * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.
     * @param {boolean} ofCurrent Compute current centroid for actively moving
     * touches vs. previous centroid of now actively moving touches.
     * @return {number} value of centroid in specified dimension.
     */
    centroidDimension: function (touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank;
      var total = 0;
      var count = 0;
      var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
      if (oneTouchData !== null) {
        if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
          total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
          count = 1;
        }
      } else {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrack = touchBank[i];
          if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
            var toAdd = undefined; // Yuck, program temporarily in invalid state.
            if (ofCurrent && isXAxis) {
              toAdd = touchTrack.currentPageX;
            } else if (ofCurrent && !isXAxis) {
              toAdd = touchTrack.currentPageY;
            } else if (!ofCurrent && isXAxis) {
              toAdd = touchTrack.previousPageX;
            } else {
              toAdd = touchTrack.previousPageY;
            }
            total += toAdd;
            count++;
          }
        }
      }
      return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true,
      // isXAxis
      true // ofCurrent
      );
    },
    currentCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false,
      // isXAxis
      true // ofCurrent
      );
    },
    previousCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true,
      // isXAxis
      false // ofCurrent
      );
    },
    previousCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false,
      // isXAxis
      false // ofCurrent
      );
    },
    currentCentroidX: function (touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0,
      // touchesChangedAfter
      true,
      // isXAxis
      true // ofCurrent
      );
    },
    currentCentroidY: function (touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0,
      // touchesChangedAfter
      false,
      // isXAxis
      true // ofCurrent
      );
    },
    noCentroid: -1
  };
  module.exports = TouchHistoryMath;
},444,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _NativeDialogManagerAndroid = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativePermissionsAndroid = _interopRequireDefault(require(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[6]));
  var Platform = require(_dependencyMap[7]);
  var PERMISSION_REQUEST_RESULT = Object.freeze({
    GRANTED: 'granted',
    DENIED: 'denied',
    NEVER_ASK_AGAIN: 'never_ask_again'
  });
  var PERMISSIONS = Object.freeze({
    READ_CALENDAR: 'android.permission.READ_CALENDAR',
    WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
    CAMERA: 'android.permission.CAMERA',
    READ_CONTACTS: 'android.permission.READ_CONTACTS',
    WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
    GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
    ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
    ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
    ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',
    RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
    READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
    CALL_PHONE: 'android.permission.CALL_PHONE',
    READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
    WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
    ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
    READ_VOICEMAIL: 'com.android.voicemail.permission.READ_VOICEMAIL',
    WRITE_VOICEMAIL: 'com.android.voicemail.permission.WRITE_VOICEMAIL',
    USE_SIP: 'android.permission.USE_SIP',
    PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
    BODY_SENSORS: 'android.permission.BODY_SENSORS',
    BODY_SENSORS_BACKGROUND: 'android.permission.BODY_SENSORS_BACKGROUND',
    SEND_SMS: 'android.permission.SEND_SMS',
    RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
    READ_SMS: 'android.permission.READ_SMS',
    RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
    RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
    READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
    READ_MEDIA_IMAGES: 'android.permission.READ_MEDIA_IMAGES',
    READ_MEDIA_VIDEO: 'android.permission.READ_MEDIA_VIDEO',
    READ_MEDIA_AUDIO: 'android.permission.READ_MEDIA_AUDIO',
    READ_MEDIA_VISUAL_USER_SELECTED: 'android.permission.READ_MEDIA_VISUAL_USER_SELECTED',
    WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',
    BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',
    BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',
    BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE',
    ACCESS_MEDIA_LOCATION: 'android.permission.ACCESS_MEDIA_LOCATION',
    ACCEPT_HANDOVER: 'android.permission.ACCEPT_HANDOVER',
    ACTIVITY_RECOGNITION: 'android.permission.ACTIVITY_RECOGNITION',
    ANSWER_PHONE_CALLS: 'android.permission.ANSWER_PHONE_CALLS',
    READ_PHONE_NUMBERS: 'android.permission.READ_PHONE_NUMBERS',
    UWB_RANGING: 'android.permission.UWB_RANGING',
    POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS',
    NEARBY_WIFI_DEVICES: 'android.permission.NEARBY_WIFI_DEVICES'
  });
  var PermissionsAndroid = /*#__PURE__*/function () {
    function PermissionsAndroid() {
      (0, _classCallCheck2.default)(this, PermissionsAndroid);
      this.PERMISSIONS = PERMISSIONS;
      this.RESULTS = PERMISSION_REQUEST_RESULT;
    }
    return (0, _createClass2.default)(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve(false);
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve(false);
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function () {
        var _requestPermission = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
          console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
          {
            console.warn('"PermissionsAndroid" module works only for Android platform.');
            return Promise.resolve(false);
          }
          var response = yield this.request(permission, rationale);
          return response === this.RESULTS.GRANTED;
        });
        function requestPermission(_x, _x2) {
          return _requestPermission.apply(this, arguments);
        }
        return requestPermission;
      }()
    }, {
      key: "request",
      value: function () {
        var _request = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
          {
            console.warn('"PermissionsAndroid" module works only for Android platform.');
            return Promise.resolve(this.RESULTS.DENIED);
          }
          (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
          if (rationale) {
            var shouldShowRationale = yield _NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(permission);
            if (shouldShowRationale && !!_NativeDialogManagerAndroid.default) {
              return new Promise((resolve, reject) => {
                var options = {
                  ...rationale
                };
                _NativeDialogManagerAndroid.default.showAlert(options, () => reject(new Error('Error showing rationale')), () => resolve(_NativePermissionsAndroid.default.requestPermission(permission)));
              });
            }
          }
          return _NativePermissionsAndroid.default.requestPermission(permission);
        });
        function request(_x3, _x4) {
          return _request.apply(this, arguments);
        }
        return request;
      }()
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve({});
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.requestMultiplePermissions(permissions);
      }
    }]);
  }();
  var PermissionsAndroidInstance = new PermissionsAndroid();
  module.exports = PermissionsAndroidInstance;
},445,[1,40,10,11,442,446,46,81]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('PermissionsAndroid');
},446,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativePushNotificationManagerIOS = _interopRequireDefault(require(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[6]));
  var PushNotificationEmitter = new _NativeEventEmitter.default(_NativePushNotificationManagerIOS.default);
  var _notifHandlers = new Map();
  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';
  var PushNotificationIOS = /*#__PURE__*/function () {
    function PushNotificationIOS(nativeNotif) {
      (0, _classCallCheck2.default)(this, PushNotificationIOS);
      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;
      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }
      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(notifKey => {
          var notifVal = nativeNotif[notifKey];
          if (notifKey === 'aps') {
            this._alert = notifVal.alert;
            this._sound = notifVal.sound;
            this._badgeCount = notifVal.badge;
            this._category = notifVal.category;
            this._contentAvailable = notifVal['content-available'];
            this._threadID = notifVal['thread-id'];
          } else {
            this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }
    return (0, _createClass2.default)(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }
        this._remoteNotificationCompleteCallbackCalled = true;
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }, {
      key: "getThreadID",
      value: function getThreadID() {
        return this._threadID;
      }
    }], [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;
        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, notifData => {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, notifData => {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, registrationInfo => {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, errorInfo => {
            handler(errorInfo);
          });
        }
        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener = _notifHandlers.get(type);
        if (!listener) {
          return;
        }
        listener.remove();
        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {
          alert: true,
          badge: true,
          sound: true
        };
        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        }
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        return _NativePushNotificationManagerIOS.default.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        (0, _invariant.default)(typeof callback === 'function', 'Must provide a valid callback');
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        return _NativePushNotificationManagerIOS.default.getInitialNotification().then(notification => {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }, {
      key: "getAuthorizationStatus",
      value: function getAuthorizationStatus(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getAuthorizationStatus(callback);
      }
    }]);
  }();
  PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  };
  module.exports = PushNotificationIOS;
},447,[1,10,11,205,81,448,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('PushNotificationManager');
},448,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _NativeSettingsManager = _interopRequireDefault(require(_dependencyMap[2]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[3]));
  var subscriptions = [];
  var Settings = {
    _settings: _NativeSettingsManager.default && _NativeSettingsManager.default.getConstants().settings,
    get(key) {
      return this._settings[key];
    },
    set(settings) {
      this._settings = Object.assign(this._settings, settings);
      _NativeSettingsManager.default.setValues(settings);
    },
    watchKeys(keys, callback) {
      if (typeof keys === 'string') {
        keys = [keys];
      }
      (0, _invariant.default)(Array.isArray(keys), 'keys should be a string or array of strings');
      var sid = subscriptions.length;
      subscriptions.push({
        keys: keys,
        callback: callback
      });
      return sid;
    },
    clearWatch(watchId) {
      if (watchId < subscriptions.length) {
        subscriptions[watchId] = {
          keys: [],
          callback: null
        };
      }
    },
    _sendObservations(body) {
      Object.keys(body).forEach(key => {
        var newValue = body[key];
        var didChange = this._settings[key] !== newValue;
        this._settings[key] = newValue;
        if (didChange) {
          subscriptions.forEach(sub => {
            if (sub.keys.indexOf(key) !== -1 && sub.callback) {
              sub.callback();
            }
          });
        }
      });
    }
  };
  _RCTDeviceEventEmitter.default.addListener('settingsUpdated', Settings._sendObservations.bind(Settings));
  module.exports = Settings;
},449,[1,49,450,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('SettingsManager');
},450,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeActionSheetManager = _interopRequireDefault(require(_dependencyMap[3]));
  var _NativeShareModule = _interopRequireDefault(require(_dependencyMap[4]));
  var processColor = require(_dependencyMap[5]).default;
  var Platform = require(_dependencyMap[6]);
  var invariant = require(_dependencyMap[7]);
  var Share = /*#__PURE__*/function () {
    function Share() {
      (0, _classCallCheck2.default)(this, Share);
    }
    return (0, _createClass2.default)(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
        {
          return new Promise((resolve, reject) => {
            var tintColor = processColor(options.tintColor);
            invariant(tintColor == null || typeof tintColor === 'number', 'Unexpected color given for options.tintColor');
            invariant(_NativeActionSheetManager.default, 'NativeActionSheetManager is not registered on iOS, but it should be.');
            _NativeActionSheetManager.default.showShareActionSheetWithOptions({
              message: typeof content.message === 'string' ? content.message : undefined,
              url: typeof content.url === 'string' ? content.url : undefined,
              subject: options.subject,
              tintColor: typeof tintColor === 'number' ? tintColor : undefined,
              anchor: typeof options.anchor === 'number' ? options.anchor : undefined,
              excludedActivityTypes: options.excludedActivityTypes
            }, error => reject(error), (success, activityType) => {
              if (success) {
                resolve({
                  action: 'sharedAction',
                  activityType: activityType
                });
              } else {
                resolve({
                  action: 'dismissedAction',
                  activityType: null
                });
              }
            });
          });
        }
      }
    }]);
  }();
  Share.sharedAction = 'sharedAction';
  Share.dismissedAction = 'dismissedAction';
  module.exports = Share;
},451,[1,10,11,426,452,91,81,46]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.get('ShareModule');
},452,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ToastAndroid = {
    SHORT: 0,
    LONG: 0,
    TOP: 0,
    BOTTOM: 0,
    CENTER: 0,
    show: function (message, duration) {
      console.warn('ToastAndroid is not supported on this platform.');
    },
    showWithGravity: function (message, duration, gravity) {
      console.warn('ToastAndroid is not supported on this platform.');
    },
    showWithGravityAndOffset: function (message, duration, gravity, xOffset, yOffset) {
      console.warn('ToastAndroid is not supported on this platform.');
    }
  };
  module.exports = ToastAndroid;
},453,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAnimatedValue;
  var _Animated = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = require(_dependencyMap[2]);
  function useAnimatedValue(initialValue, config) {
    var ref = (0, _react.useRef)(null);
    if (ref.current == null) {
      ref.current = new _Animated.default.Value(initialValue, config);
    }
    return ref.current;
  }
},454,[1,304,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useColorScheme;
  var _Appearance = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = require(_dependencyMap[2]);
  var subscribe = onStoreChange => {
    var appearanceSubscription = _Appearance.default.addChangeListener(onStoreChange);
    return () => appearanceSubscription.remove();
  };
  function useColorScheme() {
    return (0, _react.useSyncExternalStore)(subscribe, _Appearance.default.getColorScheme);
  }
},455,[1,427,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useWindowDimensions;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _Dimensions = _interopRequireDefault(require(_dependencyMap[2]));
  var _react = require(_dependencyMap[3]);
  function useWindowDimensions() {
    var _useState = (0, _react.useState)(() => _Dimensions.default.get('window')),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      dimensions = _useState2[0],
      setDimensions = _useState2[1];
    (0, _react.useEffect)(() => {
      function handleChange(_ref) {
        var window = _ref.window;
        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {
          setDimensions(window);
        }
      }
      var subscription = _Dimensions.default.addEventListener('change', handleChange);
      handleChange({
        window: _Dimensions.default.get('window')
      });
      return () => {
        subscription.remove();
      };
    }, [dimensions]);
    return dimensions;
  }
},456,[1,29,102,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var deepFreezeAndThrowOnMutationInDev = require(_dependencyMap[0]);
  var UTFSequence = deepFreezeAndThrowOnMutationInDev({
    BOM: '\ufeff',
    BULLET: '\u2022',
    BULLET_SP: '\u00A0\u2022\u00A0',
    MIDDOT: '\u00B7',
    MIDDOT_SP: '\u00A0\u00B7\u00A0',
    MIDDOT_KATAKANA: '\u30FB',
    MDASH: '\u2014',
    MDASH_SP: '\u00A0\u2014\u00A0',
    NDASH: '\u2013',
    NDASH_SP: '\u00A0\u2013\u00A0',
    NEWLINE: '\u000A',
    NBSP: '\u00A0',
    PIZZA: '\uD83C\uDF55',
    TRIANGLE_LEFT: '\u25c0',
    TRIANGLE_RIGHT: '\u25b6'
  });
  var _default = exports.default = UTFSequence;
},457,[67]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeVibration = _interopRequireDefault(require(_dependencyMap[1]));
  var Platform = require(_dependencyMap[2]);
  var _vibrating = false;
  var _id = 0;
  var _default_vibration_length = 400;
  function vibrateByPattern(pattern) {
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (_vibrating) {
      return;
    }
    _vibrating = true;
    if (pattern[0] === 0) {
      _NativeVibration.default.vibrate(_default_vibration_length);
      pattern = pattern.slice(1);
    }
    if (pattern.length === 0) {
      _vibrating = false;
      return;
    }
    setTimeout(() => vibrateScheduler(++_id, pattern, repeat, 1), pattern[0]);
  }
  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }
    _NativeVibration.default.vibrate(_default_vibration_length);
    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }
    setTimeout(() => vibrateScheduler(id, pattern, repeat, nextIndex + 1), pattern[nextIndex]);
  }
  var Vibration = {
    vibrate: function () {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _default_vibration_length;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      {
        if (_vibrating) {
          return;
        }
        if (typeof pattern === 'number') {
          _NativeVibration.default.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          vibrateByPattern(pattern, repeat);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function () {
      {
        _vibrating = false;
      }
    }
  };
  module.exports = Vibration;
},458,[1,459,81]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('Vibration');
},459,[79]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var _possibleConstructorReturn = require(_dependencyMap[2]);
  var _getPrototypeOf = require(_dependencyMap[3]);
  var _inherits = require(_dependencyMap[4]);
  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var LogBox = require(_dependencyMap[5]).default;
  var React = require(_dependencyMap[6]);
  var YellowBox;
  {
    YellowBox = /*#__PURE__*/function (_React$Component2) {
      function YellowBox() {
        _classCallCheck(this, YellowBox);
        return _callSuper(this, YellowBox, arguments);
      }
      _inherits(YellowBox, _React$Component2);
      return _createClass(YellowBox, [{
        key: "render",
        value: function render() {
          return null;
        }
      }], [{
        key: "ignoreWarnings",
        value: function ignoreWarnings(patterns) {}
      }, {
        key: "install",
        value: function install() {}
      }, {
        key: "uninstall",
        value: function uninstall() {}
      }]);
    }(React.Component);
  }
  module.exports = YellowBox;
},460,[10,11,50,52,55,441,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DynamicColorIOS = undefined;
  var _PlatformColorValueTypes = require(_dependencyMap[0]);
  var DynamicColorIOS = tuple => {
    return (0, _PlatformColorValueTypes.DynamicColorIOSPrivate)({
      light: tuple.light,
      dark: tuple.dark,
      highContrastLight: tuple.highContrastLight,
      highContrastDark: tuple.highContrastDark
    });
  };
  exports.DynamicColorIOS = DynamicColorIOS;
},461,[94]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.registerWebGlobals = registerWebGlobals;
  function registerWebGlobals() {}
},462,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.LegacyEventEmitter = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';
  /**
   * @deprecated Deprecated in favor of `EventEmitter`.
   */
  var LegacyEventEmitter = exports.LegacyEventEmitter = /*#__PURE__*/function () {
    // @ts-expect-error

    // @ts-expect-error

    function LegacyEventEmitter(nativeModule) {
      (0, _classCallCheck2.default)(this, LegacyEventEmitter);
      this._listenerCount = 0;
      // If the native module is a new module, just return it back as it's already an event emitter.
      // This is for backwards compatibility until we stop using this legacy class in other packages.
      if (nativeModule.__expo_module_name__) {
        // @ts-expect-error
        return nativeModule;
      }
      this._nativeModule = nativeModule;
      this._eventEmitter = new _reactNative.NativeEventEmitter(nativeModule);
    }
    return (0, _createClass2.default)(LegacyEventEmitter, [{
      key: "addListener",
      value: function addListener(eventName, listener) {
        if (!this._listenerCount && false && this._nativeModule.startObserving) {
          this._nativeModule.startObserving();
        }
        this._listenerCount++;
        var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);
        var subscription = {
          [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,
          remove: () => {
            this.removeSubscription(subscription);
          }
        };
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventName) {
        // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0
        var removedListenerCount = this._eventEmitter.listenerCount ?
        // @ts-ignore: this is available since 0.64
        this._eventEmitter.listenerCount(eventName) :
        // @ts-ignore: this is available in older versions
        this._eventEmitter.listeners(eventName).length;
        this._eventEmitter.removeAllListeners(eventName);
        this._listenerCount -= removedListenerCount;
        (0, _invariant.default)(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);
        if (!this._listenerCount && false && this._nativeModule.stopObserving) {
          this._nativeModule.stopObserving();
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];
        if (!nativeEmitterSubscription) {
          return;
        }
        if ('remove' in nativeEmitterSubscription) {
          nativeEmitterSubscription.remove();
        }
        this._listenerCount--;

        // Ensure that the emitter's internal state remains correct even if `removeSubscription` is
        // called again with the same subscription
        delete subscription[nativeEmitterSubscriptionKey];

        // Release closed-over references to the emitter
        subscription.remove = () => {};
        if (!this._listenerCount && false && this._nativeModule.stopObserving) {
          this._nativeModule.stopObserving();
        }
      }
    }, {
      key: "emit",
      value: function emit(eventName) {
        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }
        this._eventEmitter.emit(eventName, ...params);
      }
    }]);
  }();
},463,[1,10,11,46,45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[0]);
  (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
  var _default = exports.default = globalThis.expo.NativeModule;
},464,[44]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  // Copyright © 2024 650 Industries.
  // NOTE: Forcing this to be a client boundary so the errors are a bit clearer. In the future we can
  // make this a shim on the server by ignoring the globals that are missing in React Server contexts (Node.js).
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _reactNative = require(_dependencyMap[0]);
  var LegacyNativeProxy = _reactNative.NativeModules.NativeUnimoduleProxy;
  // Fixes `cannot find name 'global'.` in tests
  // @ts-ignore
  var ExpoNativeProxy = global.expo?.modules?.NativeModulesProxy;
  var modulesConstantsKey = 'modulesConstants';
  var exportedMethodsKey = 'exportedMethods';

  /**
   * @deprecated `NativeModulesProxy` is deprecated and might be removed in the future releases.
   * Use `requireNativeModule` or `requireOptionalNativeModule` instead.
   */
  var NativeModulesProxy = {};
  if (LegacyNativeProxy) {
    // use JSI proxy if available, fallback to legacy RN proxy
    var NativeProxy = ExpoNativeProxy ?? LegacyNativeProxy;
    Object.keys(NativeProxy[exportedMethodsKey]).forEach(moduleName => {
      // copy constants
      NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};

      // copy methods
      NativeProxy[exportedMethodsKey][moduleName].forEach(methodInfo => {
        NativeModulesProxy[moduleName][methodInfo.name] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          // Use the new proxy to call methods on legacy modules, if possible.
          if (ExpoNativeProxy?.callMethod) {
            return ExpoNativeProxy.callMethod(moduleName, methodInfo.name, args);
          }

          // Otherwise fall back to the legacy proxy.
          // This is deprecated and might be removed in SDK47 or later.
          var key = methodInfo.key,
            argumentsCount = methodInfo.argumentsCount;
          if (argumentsCount !== args.length) {
            return Promise.reject(new Error(`Native method ${moduleName}.${methodInfo.name} expects ${argumentsCount} ${argumentsCount === 1 ? 'argument' : 'arguments'} but received ${args.length}`));
          }
          return LegacyNativeProxy.callMethod(moduleName, key, args);
        };
      });

      // These are called by EventEmitter (which is a wrapper for NativeEventEmitter)
      // only on iOS and they use iOS-specific native module, EXReactNativeEventEmitter.
      //
      // On Android only {start,stop}Observing are called on the native module
      // and these should be exported as Expo methods.
      //
      // Before the RN 65, addListener/removeListeners weren't called on Android. However, it no longer stays true.
      // See https://github.com/facebook/react-native/commit/f5502fbda9fe271ff6e1d0da773a3a8ee206a453.
      // That's why, we check if the `EXReactNativeEventEmitter` exists and only if yes, we use it in the listener implementation.
      // Otherwise, those methods are NOOP.
      if (_reactNative.NativeModules.EXReactNativeEventEmitter) {
        NativeModulesProxy[moduleName].addListener = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return _reactNative.NativeModules.EXReactNativeEventEmitter.addProxiedListener(moduleName, ...args);
        };
        NativeModulesProxy[moduleName].removeListeners = function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          return _reactNative.NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);
        };
      } else {
        // Fixes on Android:
        // WARN  `new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.
        // WARN  `new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.
        NativeModulesProxy[moduleName].addListener = () => {};
        NativeModulesProxy[moduleName].removeListeners = () => {};
      }
    });
  } else {
    console.warn(`The "EXNativeModulesProxy" native module is not exported through NativeModules; verify that expo-modules-core's native code is linked properly`);
  }
  var _default = exports.default = NativeModulesProxy;
},465,[45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {},466,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  // Copyright © 2024 650 Industries.

  'use client';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.requireNativeViewManager = requireNativeViewManager;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _react = _interopRequireDefault(require(_dependencyMap[6]));
  var _reactNative = require(_dependencyMap[7]);
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[8]));
  var _requireNativeModule = require(_dependencyMap[9]);
  var _jsxRuntime = require(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); } // To make the transition from React Native's `requireNativeComponent` to Expo's
  // `requireNativeViewManager` as easy as possible, `requireNativeViewManager` is a drop-in
  // replacement for `requireNativeComponent`.
  //
  // For each view manager, we create a wrapper component that accepts all of the props available to
  // the author of the universal module. This wrapper component splits the props into two sets: props
  // passed to React Native's View (ex: style, testID) and custom view props, which are passed to the
  // adapter view component in a prop called `proxiedProperties`.
  /**
 * A map that caches registered native components.
 */
  var nativeComponentsCache = new Map();

  /**
   * Requires a React Native component using the static view config from an Expo module.
   */
  function requireNativeComponent(viewName) {
    return NativeComponentRegistry.get(viewName, () => {
      var viewModuleName = viewName.replace('ViewManagerAdapter_', '');
      var expoViewConfig = globalThis.expo?.getViewConfig(viewModuleName);
      if (!expoViewConfig) {
        console.warn('Unable to get the view config for %s', viewModuleName);
      }
      return {
        uiViewClassName: viewName,
        ...expoViewConfig
      };
    });
  }

  /**
   * Requires a React Native component from cache if possible. This prevents
   * "Tried to register two views with the same name" errors on fast refresh, but
   * also when there are multiple versions of the same package with native component.
   */
  function requireCachedNativeComponent(viewName) {
    var cachedNativeComponent = nativeComponentsCache.get(viewName);
    if (!cachedNativeComponent) {
      var nativeComponent = requireNativeComponent(viewName);
      nativeComponentsCache.set(viewName, nativeComponent);
      return nativeComponent;
    }
    return cachedNativeComponent;
  }

  /**
   * A drop-in replacement for `requireNativeComponent`.
   */
  function requireNativeViewManager(viewName) {
    var viewManagersMetadata = _reactNative.NativeModules.NativeUnimoduleProxy.viewManagersMetadata;
    var viewManagerConfig = viewManagersMetadata?.[viewName];
    var appIdentifier = globalThis.expo?.['__expo_app_identifier__'] ?? '';
    var viewNameSuffix = appIdentifier ? `_${appIdentifier}` : '';
    // Set up the React Native native component, which is an adapter to the universal module's view
    // manager
    var reactNativeViewName = `ViewManagerAdapter_${viewName}${viewNameSuffix}`;
    var ReactNativeComponent = requireCachedNativeComponent(reactNativeViewName);
    var NativeComponent = /*#__PURE__*/function (_React$PureComponent) {
      function NativeComponent() {
        var _this;
        (0, _classCallCheck2.default)(this, NativeComponent);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper(this, NativeComponent, [...args]);
        // This will be accessed from native when the prototype functions are called,
        // in order to find the associated native view.
        _this.nativeTag = null;
        return _this;
      }
      (0, _inherits2.default)(NativeComponent, _React$PureComponent);
      return (0, _createClass2.default)(NativeComponent, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.nativeTag = (0, _reactNative.findNodeHandle)(this);
        }
      }, {
        key: "render",
        value: function render() {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(ReactNativeComponent, {
            ...this.props
          });
        }
      }]);
    }(_react.default.PureComponent);
    NativeComponent.displayName = viewName;
    try {
      var nativeModule = (0, _requireNativeModule.requireNativeModule)(viewName);
      var nativeViewPrototype = nativeModule.ViewPrototype;
      if (nativeViewPrototype) {
        // Assign native view functions to the component prototype so they can be accessed from the ref.
        Object.assign(NativeComponent.prototype, nativeViewPrototype);
      }
    } catch {
      // `requireNativeModule` may throw an error when the native module cannot be found.
      // In some tests we don't mock the entire modules, but we do want to mock native views. For now,
      // until we still have to support the legacy modules proxy and don't have better ways to mock,
      // let's just gracefully skip assigning the prototype functions.
      // See: https://github.com/expo/expo/blob/main/packages/expo-modules-core/src/__tests__/NativeViewManagerAdapter-test.native.tsx
    }
    return NativeComponent;
  }
},467,[1,10,11,50,52,55,125,45,87,468,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.requireNativeModule = requireNativeModule;
  exports.requireOptionalNativeModule = requireOptionalNativeModule;
  var _NativeModulesProxy = _interopRequireDefault(require(_dependencyMap[1]));
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[2]);
  /**
   * Imports the native module registered with given name. In the first place it tries to load
   * the module installed through the JSI host object and then falls back to the bridge proxy module.
   * Notice that the modules loaded from the proxy may not support some features like synchronous functions.
   *
   * @param moduleName Name of the requested native module.
   * @returns Object representing the native module.
   * @throws Error when there is no native module with given name.
   */
  function requireNativeModule(moduleName) {
    var nativeModule = requireOptionalNativeModule(moduleName);
    if (!nativeModule) {
      throw new Error(`Cannot find native module '${moduleName}'`);
    }
    return nativeModule;
  }

  /**
   * Imports the native module registered with the given name. The same as `requireNativeModule`,
   * but returns `null` when the module cannot be found instead of throwing an error.
   *
   * @param moduleName Name of the requested native module.
   * @returns Object representing the native module or `null` when it cannot be found.
   */
  function requireOptionalNativeModule(moduleName) {
    (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
    return globalThis.expo?.modules?.[moduleName] ?? _NativeModulesProxy.default[moduleName] ?? null;
  }
},468,[1,465,44]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _reactNative = require(_dependencyMap[0]);
  var _browser = require(_dependencyMap[1]);
  var nativeSelect = typeof window !== 'undefined' ? _reactNative.Platform.select :
  // process.env.EXPO_OS is injected by `babel-preset-expo` and available in both client and `react-server` environments.
  // Opt to use the env var when possible, and fallback to the React Native Platform module when it's not (arbitrary bundlers and transformers).
  function select(specifics) {
    if (specifics.hasOwnProperty("ios")) {
      return specifics["ios"];
    } else if (specifics.hasOwnProperty('native')) {
      return specifics.native;
    } else if (specifics.hasOwnProperty('default')) {
      return specifics.default;
    }
    // do nothing...
    return undefined;
  };
  var Platform = {
    /**
     * Denotes the currently running platform.
     * Can be one of ios, android, web.
     */
    OS: "ios",
    /**
     * Returns the value with the matching platform.
     * Object keys can be any of ios, android, native, web, default.
     *
     * @ios ios, native, default
     * @android android, native, default
     * @web web, default
     */
    select: nativeSelect,
    /**
     * Denotes if the DOM API is available in the current environment.
     * The DOM is not available in native React runtimes and Node.js.
     */
    isDOMAvailable: _browser.isDOMAvailable,
    /**
     * Denotes if the current environment can attach event listeners
     * to the window. This will return false in native React
     * runtimes and Node.js.
     */
    canUseEventListeners: _browser.canUseEventListeners,
    /**
     * Denotes if the current environment can inspect properties of the
     * screen on which the current window is being rendered. This will
     * return false in native React runtimes and Node.js.
     */
    canUseViewport: _browser.canUseViewport,
    /**
     * If the JavaScript is being executed in a remote JavaScript environment.
     * When `true`, synchronous native invocations cannot be executed.
     */
    isAsyncDebugging: _browser.isAsyncDebugging
  };
  var _default = exports.default = Platform;
},469,[45,470]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isDOMAvailable = exports.isAsyncDebugging = exports.canUseViewport = exports.canUseEventListeners = undefined;
  // In standard node environments there is no DOM API
  var isDOMAvailable = exports.isDOMAvailable = false;
  var canUseEventListeners = exports.canUseEventListeners = false;
  var canUseViewport = exports.canUseViewport = false;
  var isAsyncDebugging = exports.isAsyncDebugging = false;
},470,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[0]);
  (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
  var SharedObject = globalThis.expo.SharedObject;
  var _default = exports.default = SharedObject;
},471,[44]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[0]);
  (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
  var SharedRef = globalThis.expo.SharedRef;
  var _default = exports.default = SharedRef;
},472,[44]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CodedError = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _wrapNativeSuper2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  /**
   * A general error class that should be used for all errors in Expo modules.
   * Guarantees a `code` field that can be used to differentiate between different
   * types of errors without further subclassing Error.
   */
  var CodedError = exports.CodedError = /*#__PURE__*/function (_Error) {
    function CodedError(code, message) {
      var _this;
      (0, _classCallCheck2.default)(this, CodedError);
      _this = _callSuper(this, CodedError, [message]);
      _this.code = code;
      return _this;
    }
    (0, _inherits2.default)(CodedError, _Error);
    return (0, _createClass2.default)(CodedError);
  }(/*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
},473,[1,11,10,50,52,55,71]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UnavailabilityError = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _CodedError2 = require(_dependencyMap[6]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  /**
   * A class for errors to be thrown when a property is accessed which is
   * unavailable, unsupported, or not currently implemented on the running
   * platform.
   */
  var UnavailabilityError = exports.UnavailabilityError = /*#__PURE__*/function (_CodedError) {
    function UnavailabilityError(moduleName, propertyName) {
      (0, _classCallCheck2.default)(this, UnavailabilityError);
      return _callSuper(this, UnavailabilityError, ['ERR_UNAVAILABLE', `The method or property ${moduleName}.${propertyName} is not available on ${"ios"}, are you sure you've linked all the native dependencies properly?`]);
    }
    (0, _inherits2.default)(UnavailabilityError, _CodedError);
    return (0, _createClass2.default)(UnavailabilityError);
  }(_CodedError2.CodedError);
},474,[1,11,10,50,52,55,473,469]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeErrorManager = _interopRequireDefault(require(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[2]));
  var _CodedError = require(_dependencyMap[3]);
  // We have to export `CodedError` via global object to use in later in the C++ code.
  globalThis.ExpoModulesCore_CodedError = _CodedError.CodedError;
},475,[1,476,469,473]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeModulesProxy = _interopRequireDefault(require(_dependencyMap[1]));
  var _default = exports.default = _NativeModulesProxy.default.ExpoModulesCoreErrorManager;
},476,[1,465]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _uuid.default;
    }
  });
  var _uuid = _interopRequireDefault(require(_dependencyMap[1]));
},477,[1,478]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _bytesToUuid = _interopRequireDefault(require(_dependencyMap[1]));
  var _uuid = require(_dependencyMap[2]);
  var nativeUuidv4 = globalThis?.expo?.uuidv4;
  var nativeUuidv5 = globalThis?.expo?.uuidv5;
  function uuidv4() {
    if (!nativeUuidv4) {
      throw Error("Native UUID version 4 generator implementation wasn't found in `expo-modules-core`");
    }
    return nativeUuidv4();
  }
  function uuidv5(name, namespace) {
    var parsedNamespace = Array.isArray(namespace) && namespace.length === 16 ? (0, _bytesToUuid.default)(namespace) : namespace;

    // If parsed namespace is still an array it means that it wasn't valid
    if (Array.isArray(parsedNamespace)) {
      throw new Error('`namespace` must be a valid UUID string or an Array of 16 byte values');
    }
    if (!nativeUuidv5) {
      throw Error("Native UUID type 5 generator implementation wasn't found in `expo-modules-core`");
    }
    return nativeUuidv5(name, parsedNamespace);
  }
  var uuid = {
    v4: uuidv4,
    v5: uuidv5,
    namespace: _uuid.Uuidv5Namespace
  };
  var _default = exports.default = uuid;
},478,[1,479,480]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */
  var byteToHex = [];
  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }
  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
    return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
  }
  var _default = exports.default = bytesToUuid;
},479,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Uuidv5Namespace = undefined;
  /**
   * Collection of utilities used for generating Universally Unique Identifiers.
   */
  /**
   * Default namespaces for UUID v5 defined in RFC 4122
   */
  var Uuidv5Namespace = exports.Uuidv5Namespace = /*#__PURE__*/function (Uuidv5Namespace) {
    // Source of the UUIDs: https://datatracker.ietf.org/doc/html/rfc4122
    Uuidv5Namespace["dns"] = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    Uuidv5Namespace["url"] = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    Uuidv5Namespace["oid"] = "6ba7b812-9dad-11d1-80b4-00c04fd430c8";
    Uuidv5Namespace["x500"] = "6ba7b814-9dad-11d1-80b4-00c04fd430c8";
    return Uuidv5Namespace;
  }({});
},480,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.registerWebModule = registerWebModule;
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[0]);
  /**
   * Registers a web module.
   * @param moduleImplementation – a class that extends `NativeModule`. The class is registered under `globalThis.expo.modules[className]`.
   * @returns A singleton instance of the class passed into arguments.
   */

  function registerWebModule(moduleImplementation) {
    (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
    var moduleName = moduleImplementation.name;
    if (!moduleName) {
      throw new Error('Module implementation must be a class');
    }
    if (!globalThis?.expo?.modules) {
      globalThis.expo.modules = {};
    }
    if (globalThis.expo.modules[moduleName]) {
      return globalThis.expo.modules[moduleName];
    }
    globalThis.expo.modules[moduleName] = new moduleImplementation();
    return globalThis.expo.modules[moduleName];
  }
},481,[44]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {},482,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PermissionStatus = undefined;
  var PermissionStatus = exports.PermissionStatus = /*#__PURE__*/function (PermissionStatus) {
    /**
     * User has granted the permission.
     */
    PermissionStatus["GRANTED"] = "granted";
    /**
     * User hasn't granted or denied the permission yet.
     */
    PermissionStatus["UNDETERMINED"] = "undetermined";
    /**
     * User has denied the permission.
     */
    PermissionStatus["DENIED"] = "denied";
    return PermissionStatus;
  }({});
  /**
   * Permission expiration time. Currently, all permissions are granted permanently.
   */
  /**
   * An object obtained by permissions get and request functions.
   */
},483,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  // Copyright © 2024 650 Industries.

  'use client';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createPermissionHook = createPermissionHook;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _react = require(_dependencyMap[4]);
  var _excluded = ["get", "request"];
  // These types are identical, but improves the readability for suggestions in editors

  /**
   * Get or request permission for protected functionality within the app.
   * It uses separate permission requesters to interact with a single permission.
   * By default, the hook will only retrieve the permission status.
   */
  function usePermission(methods, options) {
    var isMounted = (0, _react.useRef)(true);
    var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      status = _useState2[0],
      setStatus = _useState2[1];
    var _ref = options || {},
      _ref$get = _ref.get,
      get = _ref$get === undefined ? true : _ref$get,
      _ref$request = _ref.request,
      request = _ref$request === undefined ? false : _ref$request,
      permissionOptions = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var getPermission = (0, _react.useCallback)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
      var response = yield methods.getMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : undefined);
      if (isMounted.current) setStatus(response);
      return response;
    }), [methods.getMethod]);
    var requestPermission = (0, _react.useCallback)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
      var response = yield methods.requestMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : undefined);
      if (isMounted.current) setStatus(response);
      return response;
    }), [methods.requestMethod]);
    (0, _react.useEffect)(function runMethods() {
      if (request) requestPermission();
      if (!request && get) getPermission();
    }, [get, request, requestPermission, getPermission]);

    // Workaround for unmounting components receiving state updates
    (0, _react.useEffect)(function didMount() {
      isMounted.current = true;
      return () => {
        isMounted.current = false;
      };
    }, []);
    return [status, requestPermission, getPermission];
  }

  /**
   * Create a new permission hook with the permission methods built-in.
   * This can be used to quickly create specific permission hooks in every module.
   */
  function createPermissionHook(methods) {
    return options => usePermission(methods, options);
  }
},484,[1,40,203,29,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createSnapshotFriendlyRef = createSnapshotFriendlyRef;
  var _react = _interopRequireDefault(require(_dependencyMap[1]));
  /**
   * Create a React ref object that is friendly for snapshots.
   * It will be represented as `[React.ref]` in snapshots.
   * @returns a React ref object.
   */
  function createSnapshotFriendlyRef() {
    return /*#__PURE__*/_react.default.createRef();
  }
},485,[1,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.useReleasingSharedObject = useReleasingSharedObject;
  var _react = require(_dependencyMap[0]);
  /**
   * Returns a shared object, which is automatically cleaned up when the component is unmounted.
   */
  function useReleasingSharedObject(factory, dependencies) {
    var objectRef = (0, _react.useRef)(null);
    var isFastRefresh = (0, _react.useRef)(false);
    var previousDependencies = (0, _react.useRef)(dependencies);
    if (objectRef.current == null) {
      objectRef.current = factory();
    }
    var object = (0, _react.useMemo)(() => {
      var newObject = objectRef.current;
      var dependenciesAreEqual = previousDependencies.current?.length === dependencies.length && dependencies.every((value, index) => value === previousDependencies.current[index]);

      // If the dependencies have changed, release the previous object and create a new one, otherwise this has been called
      // because of a fast refresh, and we don't want to release the object.
      if (!newObject || !dependenciesAreEqual) {
        objectRef.current?.release();
        newObject = factory();
        objectRef.current = newObject;
        previousDependencies.current = dependencies;
      } else {
        isFastRefresh.current = true;
      }
      return newObject;
    }, dependencies);
    (0, _react.useEffect)(() => {
      isFastRefresh.current = false;
      return () => {
        // This will be called on every fast refresh and on unmount, but we only want to release the object on unmount.
        if (!isFastRefresh.current && objectRef.current) {
          objectRef.current.release();
        }
      };
    }, []);
    return object;
  }
},486,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.reloadAppAsync = reloadAppAsync;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  /**
   * Reloads the app. This method works for both release and debug builds.
   *
   * Unlike [`Updates.reloadAsync()`](/versions/latest/sdk/updates/#updatesreloadasync),
   * this function does not use a new update even if one is available. It only reloads the app using the same JavaScript bundle that is currently running.
   *
   * @param reason The reason for reloading the app. This is used only for some platforms.
   */
  function reloadAppAsync() {
    return _reloadAppAsync.apply(this, arguments);
  }
  function _reloadAppAsync() {
    _reloadAppAsync = (0, _asyncToGenerator2.default)(function* () {
      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Reloaded from JS call';
      yield globalThis.expo?.reloadAppAsync(reason);
    });
    return _reloadAppAsync.apply(this, arguments);
  }
},487,[1,40]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.resolveUri = resolveUri;
  exports.selectAssetSource = selectAssetSource;
  var _expoModulesCore = require(_dependencyMap[1]);
  var _reactNative = require(_dependencyMap[2]);
  var _AssetSourceResolver = _interopRequireDefault(require(_dependencyMap[3]));
  var _PlatformUtils = require(_dependencyMap[4]);
  /**
   * Selects the best file for the given asset (ex: choosing the best scale for images) and returns
   * a { uri, hash } pair for the specific asset file.
   *
   * If the asset isn't an image with multiple scales, the first file is selected.
   */
  function selectAssetSource(meta) {
    // This logic is based on that of AssetSourceResolver, with additional support for file hashes and
    // explicitly provided URIs
    var scale = _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get());
    var index = meta.scales.findIndex(s => s === scale);
    var hash = meta.fileHashes ? meta.fileHashes[index] ?? meta.fileHashes[0] : meta.hash;
    // Allow asset processors to directly provide the URL to load
    var uri = meta.fileUris ? meta.fileUris[index] ?? meta.fileUris[0] : meta.uri;
    if (uri) {
      return {
        uri: resolveUri(uri),
        hash
      };
    }
    var fileScale = scale === 1 ? '' : `@${scale}x`;
    var fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';
    var suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}`;
    var params = new URLSearchParams({
      platform: "ios",
      hash: meta.hash
    });
    // For assets with a specified absolute URL, we use the existing origin instead of prepending the
    // development server or production CDN URL origin
    if (/^https?:\/\//.test(meta.httpServerLocation)) {
      var _uri = meta.httpServerLocation + suffix + '?' + params;
      return {
        uri: _uri,
        hash
      };
    }
    // For assets during development using manifest2, we use the development server's URL origin
    var manifest2 = (0, _PlatformUtils.getManifest2)();
    var devServerUrl = manifest2?.extra?.expoGo?.developer ? 'http://' + manifest2.extra.expoGo.debuggerHost : null;
    if (devServerUrl) {
      var baseUrl = new URL(meta.httpServerLocation + suffix, devServerUrl);
      baseUrl.searchParams.set('platform', "ios");
      baseUrl.searchParams.set('hash', meta.hash);
      return {
        uri: baseUrl.href,
        hash
      };
    }
    // Temporary fallback for loading assets in Expo Go home
    if (_reactNative.NativeModules.ExponentKernel) {
      return {
        uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,
        hash
      };
    }
    // In correctly configured apps, we arrive here if the asset is locally available on disk due to
    // being managed by expo-updates, and `getLocalAssetUri(hash)` must return a local URI for this
    // hash. Since the asset is local, we don't have a remote URL and specify an invalid URL (an empty
    // string) as a placeholder.
    return {
      uri: '',
      hash
    };
  }
  /**
   * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is
   * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's
   * base URI.
   */
  function resolveUri(uri) {
    // `manifestBaseUrl` is always an absolute URL or `null`.
    return _PlatformUtils.manifestBaseUrl ? new URL(uri, _PlatformUtils.manifestBaseUrl).href : uri;
  }
},488,[1,42,45,489,490]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _AssetSourceResolver = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_AssetSourceResolver).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _AssetSourceResolver[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _AssetSourceResolver[key];
      }
    });
  });
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = _AssetSourceResolver.default;
},489,[100]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.IS_ENV_WITH_LOCAL_ASSETS = undefined;
  exports.getLocalAssets = getLocalAssets;
  exports.getManifest2 = getManifest2;
  exports.manifestBaseUrl = undefined;
  var _expoConstants = _interopRequireWildcard(require(_dependencyMap[0]));
  var _expoModulesCore = require(_dependencyMap[1]);
  var _AssetUris = require(_dependencyMap[2]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var ExpoUpdates = (0, _expoModulesCore.requireOptionalNativeModule)('ExpoUpdates');
  var isRunningInExpoGo = _expoConstants.default.appOwnership === _expoConstants.AppOwnership.Expo;
  // expo-updates (and Expo Go expo-updates override) manages assets from updates and exposes
  // the ExpoUpdates.localAssets constant containing information about the assets.
  var expoUpdatesIsInstalledAndEnabled = !!ExpoUpdates?.isEnabled;
  var expoUpdatesIsUsingEmbeddedAssets = ExpoUpdates?.isUsingEmbeddedAssets;
  // if expo-updates is installed but we're running directly from the embedded bundle, we don't want
  // to override the AssetSourceResolver.
  var shouldUseUpdatesAssetResolution = expoUpdatesIsInstalledAndEnabled && !expoUpdatesIsUsingEmbeddedAssets;
  // Expo Go always uses the updates module for asset resolution (local assets) since it
  // overrides the expo-updates module.
  var IS_ENV_WITH_LOCAL_ASSETS = exports.IS_ENV_WITH_LOCAL_ASSETS = isRunningInExpoGo || shouldUseUpdatesAssetResolution;
  // Get the localAssets property from the ExpoUpdates native module so that we do
  // not need to include expo-updates as a dependency of expo-asset
  function getLocalAssets() {
    return ExpoUpdates?.localAssets ?? {};
  }
  function getManifest2() {
    return _expoConstants.default.__unsafeNoWarnManifest2;
  }
  // Compute manifest base URL if available
  var manifestBaseUrl = exports.manifestBaseUrl = _expoConstants.default.experienceUrl ? (0, _AssetUris.getManifestBaseUrl)(_expoConstants.default.experienceUrl) : null;
},490,[491,42,494]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "AppOwnership", {
    enumerable: true,
    get: function () {
      return _Constants.AppOwnership;
    }
  });
  Object.defineProperty(exports, "ExecutionEnvironment", {
    enumerable: true,
    get: function () {
      return _Constants.ExecutionEnvironment;
    }
  });
  Object.defineProperty(exports, "UserInterfaceIdiom", {
    enumerable: true,
    get: function () {
      return _Constants.UserInterfaceIdiom;
    }
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _expoModulesCore = require(_dependencyMap[2]);
  var _reactNative = require(_dependencyMap[3]);
  var _Constants = require(_dependencyMap[4]);
  var _ExponentConstants = _interopRequireDefault(require(_dependencyMap[5]));
  if (!_ExponentConstants.default) {
    console.warn("No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?");
  }
  var ExpoUpdates = (0, _expoModulesCore.requireOptionalNativeModule)('ExpoUpdates');
  var rawUpdatesManifest = null;
  // If expo-updates defines a non-empty manifest, prefer that one
  if (ExpoUpdates) {
    var updatesManifest;
    if (ExpoUpdates.manifest) {
      updatesManifest = ExpoUpdates.manifest;
    } else if (ExpoUpdates.manifestString) {
      updatesManifest = JSON.parse(ExpoUpdates.manifestString);
    }
    if (updatesManifest && Object.keys(updatesManifest).length > 0) {
      rawUpdatesManifest = updatesManifest;
    }
  }
  // If dev-launcher defines a non-empty manifest, prefer that one
  var rawDevLauncherManifest = null;
  if (_reactNative.NativeModules.EXDevLauncher) {
    var devLauncherManifest;
    if (_reactNative.NativeModules.EXDevLauncher.manifestString) {
      devLauncherManifest = JSON.parse(_reactNative.NativeModules.EXDevLauncher.manifestString);
    }
    if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {
      rawDevLauncherManifest = devLauncherManifest;
    }
  }
  // Fall back to ExponentConstants.manifest if we don't have one from Updates
  var rawAppConfig = null;
  if (_ExponentConstants.default && _ExponentConstants.default.manifest) {
    var appConfig = _ExponentConstants.default.manifest;
    // On Android we pass the manifest in JSON form so this step is necessary
    if (typeof appConfig === 'string') {
      rawAppConfig = JSON.parse(appConfig);
    } else {
      rawAppConfig = appConfig;
    }
  }
  var rawManifest = rawUpdatesManifest ?? rawDevLauncherManifest ?? rawAppConfig;
  var _ref = _ExponentConstants.default || {},
    name = _ref.name,
    appOwnership = _ref.appOwnership,
    nativeConstants = (0, _objectWithoutProperties2.default)(_ref, ["name", "appOwnership"]);
  var constants = {
    ...nativeConstants,
    // Ensure this is null in bare workflow
    appOwnership: appOwnership ?? null
  };
  Object.defineProperties(constants, {
    /**
     * Use `manifest` property by default.
     * This property is only used for internal purposes.
     * It behaves similarly to the original one, but suppresses warning upon no manifest available.
     * `expo-asset` uses it to prevent users from seeing mentioned warning.
     */
    __unsafeNoWarnManifest: {
      get() {
        var maybeManifest = getManifest(true);
        if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {
          return null;
        }
        return maybeManifest;
      },
      enumerable: false
    },
    __unsafeNoWarnManifest2: {
      get() {
        var maybeManifest = getManifest(true);
        if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {
          return null;
        }
        return maybeManifest;
      },
      enumerable: false
    },
    manifest: {
      get() {
        var maybeManifest = getManifest();
        if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {
          return null;
        }
        return maybeManifest;
      },
      enumerable: true
    },
    manifest2: {
      get() {
        var maybeManifest = getManifest();
        if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {
          return null;
        }
        return maybeManifest;
      },
      enumerable: true
    },
    expoConfig: {
      get() {
        var maybeManifest = getManifest(true);
        if (!maybeManifest) {
          return null;
        }
        // if running an embedded update, maybeManifest is a EmbeddedManifest which doesn't have
        // the expo config. Instead, the embedded expo-constants app.config should be used.
        if (ExpoUpdates && ExpoUpdates.isEmbeddedLaunch) {
          return rawAppConfig;
        }
        if (isExpoUpdatesManifest(maybeManifest)) {
          return maybeManifest.extra?.expoClient ?? null;
        } else if (isEmbeddedManifest(maybeManifest)) {
          return maybeManifest;
        }
        return null;
      },
      enumerable: true
    },
    expoGoConfig: {
      get() {
        var maybeManifest = getManifest(true);
        if (!maybeManifest) {
          return null;
        }
        if (isExpoUpdatesManifest(maybeManifest)) {
          return maybeManifest.extra?.expoGo ?? null;
        } else if (isEmbeddedManifest(maybeManifest)) {
          return maybeManifest;
        }
        return null;
      },
      enumerable: true
    },
    easConfig: {
      get() {
        var maybeManifest = getManifest(true);
        if (!maybeManifest) {
          return null;
        }
        if (isExpoUpdatesManifest(maybeManifest)) {
          return maybeManifest.extra?.eas ?? null;
        } else if (isEmbeddedManifest(maybeManifest)) {
          return maybeManifest;
        }
        return null;
      },
      enumerable: true
    },
    __rawManifest_TEST: {
      get() {
        return rawManifest;
      },
      set(value) {
        rawManifest = value;
      },
      enumerable: false
    }
  });
  function isEmbeddedManifest(manifest) {
    return !isExpoUpdatesManifest(manifest);
  }
  function isExpoUpdatesManifest(manifest) {
    return 'metadata' in manifest;
  }
  function getManifest() {
    var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    if (!rawManifest) {
      var invalidManifestType = rawManifest === null ? 'null' : 'undefined';
      if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Bare && true) {
        if (!suppressWarning) {
          console.warn(`Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`);
        }
      } else if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Standalone) {
        // If we somehow get here, this is a truly exceptional state to be in.
        // Constants.manifest should *always* be defined in those contexts.
        throw new _expoModulesCore.CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', `Constants.manifest is ${invalidManifestType}, must be an object.`);
      }
    }
    return rawManifest;
  }
  var _default = exports.default = constants;
},491,[1,203,42,45,492,493]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UserInterfaceIdiom = exports.ExecutionEnvironment = exports.AppOwnership = undefined;
  var AppOwnership;
  (function (AppOwnership) {
    /**
     * The experience is running inside the Expo Go app.
     * @deprecated Use [`Constants.executionEnvironment`](#executionenvironment) instead.
     */
    AppOwnership["Expo"] = "expo";
  })(AppOwnership || (exports.AppOwnership = AppOwnership = {}));
  // @docsMissing
  var ExecutionEnvironment;
  (function (ExecutionEnvironment) {
    ExecutionEnvironment["Bare"] = "bare";
    ExecutionEnvironment["Standalone"] = "standalone";
    ExecutionEnvironment["StoreClient"] = "storeClient";
  })(ExecutionEnvironment || (exports.ExecutionEnvironment = ExecutionEnvironment = {}));
  // @needsAudit
  /**
   * Current supported values are `handset`, `tablet`, `desktop` and `tv`. CarPlay will show up
   * as `unsupported`.
   */
  var UserInterfaceIdiom;
  (function (UserInterfaceIdiom) {
    UserInterfaceIdiom["Handset"] = "handset";
    UserInterfaceIdiom["Tablet"] = "tablet";
    UserInterfaceIdiom["Desktop"] = "desktop";
    UserInterfaceIdiom["TV"] = "tv";
    UserInterfaceIdiom["Unsupported"] = "unsupported";
  })(UserInterfaceIdiom || (exports.UserInterfaceIdiom = UserInterfaceIdiom = {}));
},492,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _expoModulesCore = require(_dependencyMap[0]);
  var _default = exports.default = (0, _expoModulesCore.requireOptionalNativeModule)('ExponentConstants');
},493,[42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getFileExtension = getFileExtension;
  exports.getFilename = getFilename;
  exports.getManifestBaseUrl = getManifestBaseUrl;
  function getFilename(url) {
    var _URL = new URL(url, 'https://e'),
      pathname = _URL.pathname,
      searchParams = _URL.searchParams;
    // When attached to a dev server, we use `unstable_path` to represent the file path. This ensures
    // the file name is not canonicalized by the browser.
    // NOTE(EvanBacon): This is technically not tied to `__DEV__` as it's possible to use this while bundling in production
    // mode.

    return getBasename(pathname);
  }
  function getBasename(pathname) {
    return pathname.substring(pathname.lastIndexOf('/') + 1);
  }
  function getFileExtension(url) {
    var filename = getFilename(url);
    var dotIndex = filename.lastIndexOf('.');
    // Ignore leading dots for hidden files
    return dotIndex > 0 ? filename.substring(dotIndex) : '';
  }
  /**
   * Returns the base URL from a manifest's URL. For example, given a manifest hosted at
   * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query
   * parameters and fragments also are removed.
   *
   * For an Expo-hosted project with a manifest hosted at https://exp.host/@user/project/index.exp, the
   * base URL would be https://exp.host/@user/project.
   *
   * We also normalize the "exp" protocol to "http" to handle internal URLs with the Expo schemes used
   * to tell the OS to open the URLs in the the Expo client.
   */
  function getManifestBaseUrl(manifestUrl) {
    var urlObject = new URL(manifestUrl);
    var nextProtocol = urlObject.protocol;
    // Change the scheme to http(s) if it is exp(s)
    if (nextProtocol === 'exp:') {
      nextProtocol = 'http:';
    } else if (nextProtocol === 'exps:') {
      nextProtocol = 'https:';
    }
    urlObject.protocol = nextProtocol;
    // Trim filename, query parameters, and fragment, if any
    var directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);
    urlObject.pathname = directory;
    urlObject.search = '';
    urlObject.hash = '';
    // The URL spec doesn't allow for changing the protocol to `http` or `https`
    // without a port set so instead, we'll just swap the protocol manually.
    return urlObject.protocol !== nextProtocol ? urlObject.href.replace(urlObject.protocol, nextProtocol) : urlObject.href;
  }
},494,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.downloadAsync = downloadAsync;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _expoModulesCore = require(_dependencyMap[2]);
  var AssetModule = (0, _expoModulesCore.requireNativeModule)('ExpoAsset');
  /**
   * Downloads the asset from the given URL to a local cache and returns the local URL of the cached
   * file.
   *
   * If there is already a locally cached file and its MD5 hash matches the given `md5Hash` parameter,
   * if present, the remote asset is not downloaded. The `hash` property is included in Metro's asset
   * metadata objects when this module's `hashAssetFiles` plugin is used, which is the typical way the
   * `md5Hash` parameter of this function is provided.
   */
  function downloadAsync(_x, _x2, _x3) {
    return _downloadAsync.apply(this, arguments);
  }
  function _downloadAsync() {
    _downloadAsync = (0, _asyncToGenerator2.default)(function* (url, md5Hash, type) {
      return AssetModule.downloadAsync(url, md5Hash, type);
    });
    return _downloadAsync.apply(this, arguments);
  }
},495,[1,40,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageInfoAsync = getImageInfoAsync;
  exports.isImageType = isImageType;
  var _expoModulesCore = require(_dependencyMap[0]);
  var _AssetUris = require(_dependencyMap[1]);
  /* eslint-env browser */

  function isImageType(type) {
    return /^(jpeg|jpg|gif|png|bmp|webp|heic)$/i.test(type);
  }
  function getImageInfoAsync(url) {
    if (!_expoModulesCore.Platform.isDOMAvailable) {
      return Promise.resolve({
        name: (0, _AssetUris.getFilename)(url),
        width: 0,
        height: 0
      });
    }
    return new Promise((resolve, reject) => {
      var img = new Image();
      img.onerror = reject;
      img.onload = () => {
        resolve({
          name: (0, _AssetUris.getFilename)(url),
          width: img.naturalWidth,
          height: img.naturalHeight
        });
      };
      img.src = url;
    });
  }
},496,[42,494]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLocalAssetUri = getLocalAssetUri;
  var _PlatformUtils = require(_dependencyMap[0]);
  // localAssets are provided by the expo-updates module
  var localAssets = (0, _PlatformUtils.getLocalAssets)();
  /**
   * Returns the URI of a local asset from its hash, or null if the asset is not available locally
   */
  function getLocalAssetUri(hash, type) {
    var localAssetsKey = hash;
    var legacyLocalAssetsKey = `${hash}.${type ?? ''}`;
    switch (true) {
      case localAssetsKey in localAssets:
        {
          return localAssets[localAssetsKey];
        }
      case legacyLocalAssetsKey in localAssets:
        {
          // legacy updates store assets with an extension
          return localAssets[legacyLocalAssetsKey];
        }
      default:
        return null;
    }
  }
},497,[490]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _resolveAssetSource = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_resolveAssetSource).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _resolveAssetSource[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _resolveAssetSource[key];
      }
    });
  });
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var _default = exports.default = _resolveAssetSource.default;
},498,[99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.useAssets = useAssets;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = require(_dependencyMap[2]);
  var _Asset = require(_dependencyMap[3]);
  // @needsAudit
  /**
   * Downloads and stores one or more assets locally.
   * After the assets are loaded, this hook returns a list of asset instances.
   * If something went wrong when loading the assets, an error is returned.
   *
   * > Note, the assets are not "reloaded" when you dynamically change the asset list.
   *
   * @return Returns an array containing:
   * - on the first position, a list of all loaded assets. If they aren't loaded yet, this value is
   *   `undefined`.
   * - on the second position, an error which encountered when loading the assets. If there was no
   *   error, this value is `undefined`.
   *
   * @example
   * ```tsx
   * const [assets, error] = useAssets([require('path/to/asset.jpg'), require('path/to/other.png')]);
   *
   * return assets ? <Image source={assets[0]} /> : null;
   * ```
   */
  function useAssets(moduleIds) {
    var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      assets = _useState2[0],
      setAssets = _useState2[1];
    var _useState3 = (0, _react.useState)(),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      error = _useState4[0],
      setError = _useState4[1];
    (0, _react.useEffect)(() => {
      _Asset.Asset.loadAsync(moduleIds).then(setAssets).catch(setError);
    }, []);
    return [assets, error];
  }
},499,[1,29,125,39]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getExpoGoProjectConfig = getExpoGoProjectConfig;
  exports.isRunningInExpoGo = isRunningInExpoGo;
  var _expoModulesCore = require(_dependencyMap[0]);
  // ExpoGo module is available only when the app is run in Expo Go,
  // otherwise we use `null` instead of throwing an error.
  var NativeExpoGoModule = (() => {
    try {
      return (0, _expoModulesCore.requireNativeModule)('ExpoGo');
    } catch {
      return null;
    }
  })();

  /**
   * Returns a boolean value whether the app is running in Expo Go.
   */
  function isRunningInExpoGo() {
    return NativeExpoGoModule != null;
  }

  /**
   * @hidden
   * Returns an Expo Go project config from the manifest or `null` if the app is not running in Expo Go.
   */
  function getExpoGoProjectConfig() {
    return NativeExpoGoModule?.projectConfig ?? null;
  }
},500,[42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AppEntryNotFound = AppEntryNotFound;
  var _reactNative = require(_dependencyMap[0]);
  var _jsxRuntime = require(_dependencyMap[1]);
  function AppEntryNotFound() {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorTitle,
        children: "App entry not found"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorDescription,
        children: "The app entry point named \"main\" was not registered. This may be due to an uncaught error thrown from a module's top-level code. Refer to the CLI logs and the native device logs for more detail."
      })]
    });
  }
  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      padding: 20,
      backgroundColor: '#f2f2f2'
    },
    errorTitle: {
      fontSize: 24,
      fontWeight: 'bold',
      color: '#d32f2f',
      textAlign: 'center',
      marginBottom: 24
    },
    errorDescription: {
      fontSize: 16,
      color: '#333',
      textAlign: 'center'
    }
  });
},501,[45,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createErrorHandler = createErrorHandler;
  exports.disableErrorHandling = disableErrorHandling;
  // Similar interface to the one used in expo modules.

  var isErrorHandlingEnabled = true;
  var developmentBuildMessage = `If you're trying to use a module that is not supported in Expo Go, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.`;
  function customizeUnavailableMessage(error) {
    error.message += "\n\nIf you're trying to use a module that is not supported in Expo Go, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.";
  }
  function customizeModuleIsMissingMessage(error) {
    error.message = `Your JavaScript code tried to access a native module that doesn't exist. 

${developmentBuildMessage}`;
  }
  function customizeError(error) {
    if ('code' in error && error.code === 'ERR_UNAVAILABLE') {
      customizeUnavailableMessage(error);
    } else if (error.message.includes('Native module cannot be null') ||
    // RN 0.64 and below message
    error.message.includes('`new NativeEventEmitter()` requires a non-null argument.') // RN 0.65+ message
    ) {
      customizeModuleIsMissingMessage(error);
    }
  }
  function errorHandler(originalHandler, error, isFatal) {
    if (error instanceof Error) {
      customizeError(error);
    }
    originalHandler(error, isFatal);
  }
  function createErrorHandler(originalHandler) {
    return (error, isFatal) => {
      if (isErrorHandlingEnabled) {
        errorHandler(originalHandler, error, isFatal);
        return;
      }
      originalHandler(error, isFatal);
    };
  }
  function disableErrorHandling() {
    isErrorHandlingEnabled = false;
  }
},502,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = App;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _reactNativePaper = require(_dependencyMap[4]);
  var _jsxRuntime = require(_dependencyMap[5]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function App() {
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      gameStarted = _useState2[0],
      setGameStarted = _useState2[1];
    var _useState3 = (0, _react.useState)(0),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      userPower = _useState4[0],
      setUserPower = _useState4[1];
    var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      appPower = _useState6[0],
      setAppPower = _useState6[1];
    var _useState7 = (0, _react.useState)(null),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      result = _useState8[0],
      setResult = _useState8[1];
    var _useState9 = (0, _react.useState)(5),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      timer = _useState10[0],
      setTimer = _useState10[1];
    (0, _react.useEffect)(() => {
      var countdown;
      if (gameStarted && timer > 0) {
        countdown = setInterval(() => setTimer(t => t - 1), 1000);
      } else if (gameStarted && timer === 0) {
        clearInterval(countdown);
        var randomAppPower = Math.floor(Math.random() * 100);
        setAppPower(randomAppPower);
        decideWinner(userPower, randomAppPower);
      }
      return () => clearInterval(countdown);
    }, [gameStarted, timer]);
    var decideWinner = (user, app) => {
      if (user > app) setResult("YOU REIGN SUPREME! 👑");else if (user < app) setResult("STREAM USURPED! Try again.");else setResult("IT'S A TIE! Both mighty streams!");
    };
    var handleTap = () => {
      if (gameStarted && timer > 0) setUserPower(p => p + 5);
    };
    var resetGame = () => {
      setGameStarted(false);
      setUserPower(0);
      setAppPower(0);
      setResult(null);
      setTimer(5);
    };
    if (!gameStarted) {
      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: '#FEF3C7'
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            fontSize: 32,
            fontWeight: 'bold',
            marginBottom: 20
          },
          children: "Stream King \uD83D\uDC51"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: () => setGameStarted(true),
          style: {
            backgroundColor: '#FACC15',
            padding: 16,
            borderRadius: 20
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: {
              fontSize: 18,
              fontWeight: 'bold'
            },
            children: "Enter the Throne Room"
          })
        })]
      });
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#DBEAFE',
        padding: 16
      },
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          fontSize: 24,
          fontWeight: 'bold',
          marginBottom: 8
        },
        children: "Tap to Pee! \uD83D\uDCA6"
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: {
          marginBottom: 8
        },
        children: ["Time Left: ", timer, "s"]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNativePaper.ProgressBar, {
        progress: userPower / 100,
        color: "#FFD700",
        style: {
          width: '100%',
          height: 20,
          marginBottom: 20
        }
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleTap,
        style: {
          backgroundColor: '#FDE68A',
          padding: 24,
          borderRadius: 9999,
          marginBottom: 20
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            fontSize: 18,
            fontWeight: 'bold'
          },
          children: "PEE!"
        })
      }), result && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: {
          alignItems: 'center',
          marginTop: 16
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            fontSize: 18,
            fontWeight: 'bold',
            marginBottom: 8
          },
          children: result
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Text, {
          children: ["Your Power: ", userPower]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Text, {
          children: ["App Power: ", appPower]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: resetGame,
          style: {
            marginTop: 16,
            backgroundColor: '#4ADE80',
            padding: 12,
            borderRadius: 12
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: {
              color: '#fff',
              fontWeight: 'bold'
            },
            children: "Play Again"
          })
        })]
      })]
    });
  }
},503,[1,29,125,45,504,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    MD3Colors: true,
    useTheme: true,
    withTheme: true,
    ThemeProvider: true,
    DefaultTheme: true,
    adaptNavigationTheme: true,
    Provider: true,
    PaperProvider: true,
    shadow: true,
    overlay: true,
    configureFonts: true,
    Avatar: true,
    Drawer: true,
    List: true,
    MD2Colors: true,
    AnimatedFAB: true,
    Badge: true,
    ActivityIndicator: true,
    Banner: true,
    BottomNavigation: true,
    Button: true,
    Card: true,
    Checkbox: true,
    Chip: true,
    DataTable: true,
    Dialog: true,
    Divider: true,
    FAB: true,
    HelperText: true,
    Icon: true,
    IconButton: true,
    Menu: true,
    Modal: true,
    Portal: true,
    ProgressBar: true,
    RadioButton: true,
    Searchbar: true,
    Snackbar: true,
    Surface: true,
    Switch: true,
    Appbar: true,
    TouchableRipple: true,
    TextInput: true,
    ToggleButton: true,
    SegmentedButtons: true,
    Tooltip: true,
    Caption: true,
    Headline: true,
    Paragraph: true,
    Subheading: true,
    Title: true,
    Text: true,
    customText: true
  };
  Object.defineProperty(exports, "ActivityIndicator", {
    enumerable: true,
    get: function () {
      return _ActivityIndicator.default;
    }
  });
  Object.defineProperty(exports, "AnimatedFAB", {
    enumerable: true,
    get: function () {
      return _AnimatedFAB.default;
    }
  });
  Object.defineProperty(exports, "Appbar", {
    enumerable: true,
    get: function () {
      return _Appbar.default;
    }
  });
  exports.Avatar = undefined;
  Object.defineProperty(exports, "Badge", {
    enumerable: true,
    get: function () {
      return _Badge.default;
    }
  });
  Object.defineProperty(exports, "Banner", {
    enumerable: true,
    get: function () {
      return _Banner.default;
    }
  });
  Object.defineProperty(exports, "BottomNavigation", {
    enumerable: true,
    get: function () {
      return _BottomNavigation.default;
    }
  });
  Object.defineProperty(exports, "Button", {
    enumerable: true,
    get: function () {
      return _Button.default;
    }
  });
  Object.defineProperty(exports, "Caption", {
    enumerable: true,
    get: function () {
      return _v.Caption;
    }
  });
  Object.defineProperty(exports, "Card", {
    enumerable: true,
    get: function () {
      return _Card.default;
    }
  });
  Object.defineProperty(exports, "Checkbox", {
    enumerable: true,
    get: function () {
      return _Checkbox.default;
    }
  });
  Object.defineProperty(exports, "Chip", {
    enumerable: true,
    get: function () {
      return _Chip.default;
    }
  });
  Object.defineProperty(exports, "DataTable", {
    enumerable: true,
    get: function () {
      return _DataTable.default;
    }
  });
  Object.defineProperty(exports, "DefaultTheme", {
    enumerable: true,
    get: function () {
      return _theming.DefaultTheme;
    }
  });
  Object.defineProperty(exports, "Dialog", {
    enumerable: true,
    get: function () {
      return _Dialog.default;
    }
  });
  Object.defineProperty(exports, "Divider", {
    enumerable: true,
    get: function () {
      return _Divider.default;
    }
  });
  exports.Drawer = undefined;
  Object.defineProperty(exports, "FAB", {
    enumerable: true,
    get: function () {
      return _FAB.default;
    }
  });
  Object.defineProperty(exports, "Headline", {
    enumerable: true,
    get: function () {
      return _v.Headline;
    }
  });
  Object.defineProperty(exports, "HelperText", {
    enumerable: true,
    get: function () {
      return _HelperText.default;
    }
  });
  Object.defineProperty(exports, "Icon", {
    enumerable: true,
    get: function () {
      return _Icon.default;
    }
  });
  Object.defineProperty(exports, "IconButton", {
    enumerable: true,
    get: function () {
      return _IconButton.default;
    }
  });
  exports.MD2Colors = exports.List = undefined;
  Object.defineProperty(exports, "MD3Colors", {
    enumerable: true,
    get: function () {
      return _tokens.MD3Colors;
    }
  });
  Object.defineProperty(exports, "Menu", {
    enumerable: true,
    get: function () {
      return _Menu.default;
    }
  });
  Object.defineProperty(exports, "Modal", {
    enumerable: true,
    get: function () {
      return _Modal.default;
    }
  });
  Object.defineProperty(exports, "PaperProvider", {
    enumerable: true,
    get: function () {
      return _PaperProvider.default;
    }
  });
  Object.defineProperty(exports, "Paragraph", {
    enumerable: true,
    get: function () {
      return _v.Paragraph;
    }
  });
  Object.defineProperty(exports, "Portal", {
    enumerable: true,
    get: function () {
      return _Portal.default;
    }
  });
  Object.defineProperty(exports, "ProgressBar", {
    enumerable: true,
    get: function () {
      return _ProgressBar.default;
    }
  });
  Object.defineProperty(exports, "Provider", {
    enumerable: true,
    get: function () {
      return _PaperProvider.default;
    }
  });
  Object.defineProperty(exports, "RadioButton", {
    enumerable: true,
    get: function () {
      return _RadioButton.default;
    }
  });
  Object.defineProperty(exports, "Searchbar", {
    enumerable: true,
    get: function () {
      return _Searchbar.default;
    }
  });
  Object.defineProperty(exports, "SegmentedButtons", {
    enumerable: true,
    get: function () {
      return _SegmentedButtons.default;
    }
  });
  Object.defineProperty(exports, "Snackbar", {
    enumerable: true,
    get: function () {
      return _Snackbar.default;
    }
  });
  Object.defineProperty(exports, "Subheading", {
    enumerable: true,
    get: function () {
      return _v.Subheading;
    }
  });
  Object.defineProperty(exports, "Surface", {
    enumerable: true,
    get: function () {
      return _Surface.default;
    }
  });
  Object.defineProperty(exports, "Switch", {
    enumerable: true,
    get: function () {
      return _Switch.default;
    }
  });
  Object.defineProperty(exports, "Text", {
    enumerable: true,
    get: function () {
      return _Text.default;
    }
  });
  Object.defineProperty(exports, "TextInput", {
    enumerable: true,
    get: function () {
      return _TextInput.default;
    }
  });
  Object.defineProperty(exports, "ThemeProvider", {
    enumerable: true,
    get: function () {
      return _theming.ThemeProvider;
    }
  });
  Object.defineProperty(exports, "Title", {
    enumerable: true,
    get: function () {
      return _v.Title;
    }
  });
  Object.defineProperty(exports, "ToggleButton", {
    enumerable: true,
    get: function () {
      return _ToggleButton.default;
    }
  });
  Object.defineProperty(exports, "Tooltip", {
    enumerable: true,
    get: function () {
      return _Tooltip.default;
    }
  });
  Object.defineProperty(exports, "TouchableRipple", {
    enumerable: true,
    get: function () {
      return _TouchableRipple.default;
    }
  });
  Object.defineProperty(exports, "adaptNavigationTheme", {
    enumerable: true,
    get: function () {
      return _theming.adaptNavigationTheme;
    }
  });
  Object.defineProperty(exports, "configureFonts", {
    enumerable: true,
    get: function () {
      return _fonts.default;
    }
  });
  Object.defineProperty(exports, "customText", {
    enumerable: true,
    get: function () {
      return _Text.customText;
    }
  });
  Object.defineProperty(exports, "overlay", {
    enumerable: true,
    get: function () {
      return _overlay.default;
    }
  });
  Object.defineProperty(exports, "shadow", {
    enumerable: true,
    get: function () {
      return _shadow.default;
    }
  });
  Object.defineProperty(exports, "useTheme", {
    enumerable: true,
    get: function () {
      return _theming.useTheme;
    }
  });
  Object.defineProperty(exports, "withTheme", {
    enumerable: true,
    get: function () {
      return _theming.withTheme;
    }
  });
  var _tokens = require(_dependencyMap[1]);
  var _theming = require(_dependencyMap[2]);
  var _themes = require(_dependencyMap[3]);
  Object.keys(_themes).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _themes[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _themes[key];
      }
    });
  });
  var _PaperProvider = _interopRequireDefault(require(_dependencyMap[4]));
  var _shadow = _interopRequireDefault(require(_dependencyMap[5]));
  var _overlay = _interopRequireDefault(require(_dependencyMap[6]));
  var _fonts = _interopRequireDefault(require(_dependencyMap[7]));
  var Avatar = _interopRequireWildcard(require(_dependencyMap[8]));
  exports.Avatar = Avatar;
  var Drawer = _interopRequireWildcard(require(_dependencyMap[9]));
  exports.Drawer = Drawer;
  var List = _interopRequireWildcard(require(_dependencyMap[10]));
  exports.List = List;
  var MD2Colors = _interopRequireWildcard(require(_dependencyMap[11]));
  exports.MD2Colors = MD2Colors;
  var _AnimatedFAB = _interopRequireWildcard(require(_dependencyMap[12]));
  Object.keys(_AnimatedFAB).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _AnimatedFAB[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _AnimatedFAB[key];
      }
    });
  });
  var _Badge = _interopRequireDefault(require(_dependencyMap[13]));
  var _ActivityIndicator = _interopRequireDefault(require(_dependencyMap[14]));
  var _Banner = _interopRequireDefault(require(_dependencyMap[15]));
  var _BottomNavigation = _interopRequireDefault(require(_dependencyMap[16]));
  var _Button = _interopRequireDefault(require(_dependencyMap[17]));
  var _Card = _interopRequireDefault(require(_dependencyMap[18]));
  var _Checkbox = _interopRequireDefault(require(_dependencyMap[19]));
  var _Chip = _interopRequireDefault(require(_dependencyMap[20]));
  var _DataTable = _interopRequireDefault(require(_dependencyMap[21]));
  var _Dialog = _interopRequireDefault(require(_dependencyMap[22]));
  var _Divider = _interopRequireDefault(require(_dependencyMap[23]));
  var _FAB = _interopRequireDefault(require(_dependencyMap[24]));
  var _HelperText = _interopRequireDefault(require(_dependencyMap[25]));
  var _Icon = _interopRequireDefault(require(_dependencyMap[26]));
  var _IconButton = _interopRequireDefault(require(_dependencyMap[27]));
  var _Menu = _interopRequireDefault(require(_dependencyMap[28]));
  var _Modal = _interopRequireDefault(require(_dependencyMap[29]));
  var _Portal = _interopRequireDefault(require(_dependencyMap[30]));
  var _ProgressBar = _interopRequireDefault(require(_dependencyMap[31]));
  var _RadioButton = _interopRequireDefault(require(_dependencyMap[32]));
  var _Searchbar = _interopRequireDefault(require(_dependencyMap[33]));
  var _Snackbar = _interopRequireDefault(require(_dependencyMap[34]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[35]));
  var _Switch = _interopRequireDefault(require(_dependencyMap[36]));
  var _Appbar = _interopRequireDefault(require(_dependencyMap[37]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[38]));
  var _TextInput = _interopRequireDefault(require(_dependencyMap[39]));
  var _ToggleButton = _interopRequireDefault(require(_dependencyMap[40]));
  var _SegmentedButtons = _interopRequireDefault(require(_dependencyMap[41]));
  var _Tooltip = _interopRequireDefault(require(_dependencyMap[42]));
  var _v = require(_dependencyMap[43]);
  var _Text = _interopRequireWildcard(require(_dependencyMap[44]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
},504,[1,505,506,524,531,565,566,526,567,578,588,529,597,585,601,602,607,605,616,624,630,632,649,587,656,659,570,636,639,655,645,661,662,669,670,599,671,673,580,682,697,702,705,707,573]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.typescale = exports.tokens = exports.MD3Colors = undefined;
  var _reactNative = require(_dependencyMap[0]);
  var ref = {
    palette: {
      primary100: 'rgba(255, 255, 255, 1)',
      primary99: 'rgba(255, 251, 254, 1)',
      primary95: 'rgba(246, 237, 255, 1)',
      primary90: 'rgba(234, 221, 255, 1)',
      primary80: 'rgba(208, 188, 255, 1)',
      primary70: 'rgba(182, 157, 248, 1)',
      primary60: 'rgba(154, 130, 219, 1)',
      primary50: 'rgba(127, 103, 190, 1)',
      primary40: 'rgba(103, 80, 164, 1)',
      primary30: 'rgba(79, 55, 139, 1)',
      primary20: 'rgba(56, 30, 114, 1)',
      primary10: 'rgba(33, 0, 93, 1)',
      primary0: 'rgba(0, 0, 0, 1)',
      secondary100: 'rgba(255, 255, 255, 1)',
      secondary99: 'rgba(255, 251, 254, 1)',
      secondary95: 'rgba(246, 237, 255, 1)',
      secondary90: 'rgba(232, 222, 248, 1)',
      secondary80: 'rgba(204, 194, 220, 1)',
      secondary70: 'rgba(176, 167, 192, 1)',
      secondary60: 'rgba(149, 141, 165, 1)',
      secondary50: 'rgba(122, 114, 137, 1)',
      secondary40: 'rgba(98, 91, 113, 1)',
      secondary30: 'rgba(74, 68, 88, 1)',
      secondary20: 'rgba(51, 45, 65, 1)',
      secondary10: 'rgba(29, 25, 43, 1)',
      secondary0: 'rgba(0, 0, 0, 1)',
      tertiary100: 'rgba(255, 255, 255, 1)',
      tertiary99: 'rgba(255, 251, 250, 1)',
      tertiary95: 'rgba(255, 236, 241, 1)',
      tertiary90: 'rgba(255, 216, 228, 1)',
      tertiary80: 'rgba(239, 184, 200, 1)',
      tertiary70: 'rgba(210, 157, 172, 1)',
      tertiary60: 'rgba(181, 131, 146, 1)',
      tertiary50: 'rgba(152, 105, 119, 1)',
      tertiary40: 'rgba(125, 82, 96, 1)',
      tertiary30: 'rgba(99, 59, 72, 1)',
      tertiary20: 'rgba(73, 37, 50, 1)',
      tertiary10: 'rgba(49, 17, 29, 1)',
      tertiary0: 'rgba(0, 0, 0, 1)',
      neutral100: 'rgba(255, 255, 255, 1)',
      neutral99: 'rgba(255, 251, 254, 1)',
      neutral95: 'rgba(244, 239, 244, 1)',
      neutral90: 'rgba(230, 225, 229, 1)',
      neutral80: 'rgba(201, 197, 202, 1)',
      neutral70: 'rgba(174, 170, 174, 1)',
      neutral60: 'rgba(147, 144, 148, 1)',
      neutral50: 'rgba(120, 117, 121, 1)',
      neutral40: 'rgba(96, 93, 98, 1)',
      neutral30: 'rgba(72, 70, 73, 1)',
      neutral20: 'rgba(49, 48, 51, 1)',
      neutral10: 'rgba(28, 27, 31, 1)',
      neutral0: 'rgba(0, 0, 0, 1)',
      neutralVariant100: 'rgba(255, 255, 255, 1)',
      neutralVariant99: 'rgba(255, 251, 254, 1)',
      neutralVariant95: 'rgba(245, 238, 250, 1)',
      neutralVariant90: 'rgba(231, 224, 236, 1)',
      neutralVariant80: 'rgba(202, 196, 208, 1)',
      neutralVariant70: 'rgba(174, 169, 180, 1)',
      neutralVariant60: 'rgba(147, 143, 153, 1)',
      neutralVariant50: 'rgba(121, 116, 126, 1)',
      neutralVariant40: 'rgba(96, 93, 102, 1)',
      neutralVariant30: 'rgba(73, 69, 79, 1)',
      neutralVariant20: 'rgba(50, 47, 55, 1)',
      neutralVariant10: 'rgba(29, 26, 34, 1)',
      neutralVariant0: 'rgba(0, 0, 0, 1)',
      error100: 'rgba(255, 255, 255, 1)',
      error99: 'rgba(255, 251, 249, 1)',
      error95: 'rgba(252, 238, 238, 1)',
      error90: 'rgba(249, 222, 220, 1)',
      error80: 'rgba(242, 184, 181, 1)',
      error70: 'rgba(236, 146, 142, 1)',
      error60: 'rgba(228, 105, 98, 1)',
      error50: 'rgba(220, 54, 46, 1)',
      error40: 'rgba(179, 38, 30, 1)',
      error30: 'rgba(140, 29, 24, 1)',
      error20: 'rgba(96, 20, 16, 1)',
      error10: 'rgba(65, 14, 11, 1)',
      error0: 'rgba(0, 0, 0, 1)'
    },
    typeface: {
      brandRegular: 'System',
      weightRegular: '400',
      plainMedium: 'System',
      weightMedium: '500'
    },
    opacity: {
      level1: 0.08,
      level2: 0.12,
      level3: 0.16,
      level4: 0.38
    }
  };
  var regularType = {
    fontFamily: ref.typeface.brandRegular,
    letterSpacing: 0,
    fontWeight: ref.typeface.weightRegular
  };
  var mediumType = {
    fontFamily: ref.typeface.plainMedium,
    letterSpacing: 0.15,
    fontWeight: ref.typeface.weightMedium
  };
  var typescale = exports.typescale = {
    displayLarge: {
      ...regularType,
      lineHeight: 64,
      fontSize: 57
    },
    displayMedium: {
      ...regularType,
      lineHeight: 52,
      fontSize: 45
    },
    displaySmall: {
      ...regularType,
      lineHeight: 44,
      fontSize: 36
    },
    headlineLarge: {
      ...regularType,
      lineHeight: 40,
      fontSize: 32
    },
    headlineMedium: {
      ...regularType,
      lineHeight: 36,
      fontSize: 28
    },
    headlineSmall: {
      ...regularType,
      lineHeight: 32,
      fontSize: 24
    },
    titleLarge: {
      ...regularType,
      lineHeight: 28,
      fontSize: 22
    },
    titleMedium: {
      ...mediumType,
      lineHeight: 24,
      fontSize: 16
    },
    titleSmall: {
      ...mediumType,
      letterSpacing: 0.1,
      lineHeight: 20,
      fontSize: 14
    },
    labelLarge: {
      ...mediumType,
      letterSpacing: 0.1,
      lineHeight: 20,
      fontSize: 14
    },
    labelMedium: {
      ...mediumType,
      letterSpacing: 0.5,
      lineHeight: 16,
      fontSize: 12
    },
    labelSmall: {
      ...mediumType,
      letterSpacing: 0.5,
      lineHeight: 16,
      fontSize: 11
    },
    bodyLarge: {
      ...mediumType,
      fontWeight: ref.typeface.weightRegular,
      fontFamily: ref.typeface.brandRegular,
      lineHeight: 24,
      fontSize: 16
    },
    bodyMedium: {
      ...mediumType,
      fontWeight: ref.typeface.weightRegular,
      fontFamily: ref.typeface.brandRegular,
      letterSpacing: 0.25,
      lineHeight: 20,
      fontSize: 14
    },
    bodySmall: {
      ...mediumType,
      fontWeight: ref.typeface.weightRegular,
      fontFamily: ref.typeface.brandRegular,
      letterSpacing: 0.4,
      lineHeight: 16,
      fontSize: 12
    },
    default: {
      ...regularType
    }
  };
  var tokens = exports.tokens = {
    md: {
      ref,
      sys: {
        typescale
      }
    }
  };
  var MD3Colors = exports.MD3Colors = ref.palette;
},505,[45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ThemeProvider = exports.DefaultTheme = undefined;
  exports.adaptNavigationTheme = adaptNavigationTheme;
  exports.useInternalTheme = exports.useAppTheme = exports.getTheme = exports.getDynamicThemeElevations = exports.defaultThemesByVersion = undefined;
  exports.useTheme = useTheme;
  exports.withTheme = exports.withInternalTheme = undefined;
  var _reactThemeProvider = require(_dependencyMap[1]);
  var _color = _interopRequireDefault(require(_dependencyMap[2]));
  var _themes = require(_dependencyMap[3]);
  var DefaultTheme = exports.DefaultTheme = _themes.MD3LightTheme;
  var _createTheming = (0, _reactThemeProvider.createTheming)(_themes.MD3LightTheme),
    ThemeProvider = exports.ThemeProvider = _createTheming.ThemeProvider,
    withTheme = exports.withTheme = _createTheming.withTheme,
    useAppTheme = exports.useAppTheme = _createTheming.useTheme;
  function useTheme(overrides) {
    return useAppTheme(overrides);
  }
  var useInternalTheme = themeOverrides => useAppTheme(themeOverrides);
  exports.useInternalTheme = useInternalTheme;
  var withInternalTheme = WrappedComponent => withTheme(WrappedComponent);
  exports.withInternalTheme = withInternalTheme;
  var defaultThemesByVersion = exports.defaultThemesByVersion = {
    2: {
      light: _themes.MD2LightTheme,
      dark: _themes.MD2DarkTheme
    },
    3: {
      light: _themes.MD3LightTheme,
      dark: _themes.MD3DarkTheme
    }
  };
  var getTheme = function () {
    var isDark = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var isV3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var themeVersion = isV3 ? 3 : 2;
    var scheme = isDark ? 'dark' : 'light';
    return defaultThemesByVersion[themeVersion][scheme];
  };

  // eslint-disable-next-line no-redeclare

  // eslint-disable-next-line no-redeclare

  // eslint-disable-next-line no-redeclare
  exports.getTheme = getTheme;
  // eslint-disable-next-line no-redeclare
  function adaptNavigationTheme(themes) {
    var reactNavigationLight = themes.reactNavigationLight,
      reactNavigationDark = themes.reactNavigationDark,
      materialLight = themes.materialLight,
      materialDark = themes.materialDark;
    var getAdaptedTheme = (navigationTheme, MD3Theme) => {
      return {
        ...navigationTheme,
        colors: {
          ...navigationTheme.colors,
          primary: MD3Theme.colors.primary,
          background: MD3Theme.colors.background,
          card: MD3Theme.colors.elevation.level2,
          text: MD3Theme.colors.onSurface,
          border: MD3Theme.colors.outline,
          notification: MD3Theme.colors.error
        }
      };
    };
    var MD3Themes = {
      light: materialLight || _themes.MD3LightTheme,
      dark: materialDark || _themes.MD3DarkTheme
    };
    if (reactNavigationLight && reactNavigationDark) {
      var modes = ['light', 'dark'];
      var NavigationThemes = {
        light: reactNavigationLight,
        dark: reactNavigationDark
      };
      var _modes$reduce = modes.reduce((prev, curr) => {
          return {
            ...prev,
            [curr]: getAdaptedTheme(NavigationThemes[curr], MD3Themes[curr])
          };
        }, {
          light: reactNavigationLight,
          dark: reactNavigationDark
        }),
        adaptedLight = _modes$reduce.light,
        adaptedDark = _modes$reduce.dark;
      return {
        LightTheme: adaptedLight,
        DarkTheme: adaptedDark
      };
    }
    if (reactNavigationDark) {
      return {
        DarkTheme: getAdaptedTheme(reactNavigationDark, MD3Themes.dark)
      };
    }
    return {
      LightTheme: getAdaptedTheme(reactNavigationLight, MD3Themes.light)
    };
  }
  var getDynamicThemeElevations = scheme => {
    var elevationValues = ['transparent', 0.05, 0.08, 0.11, 0.12, 0.14];
    return elevationValues.reduce((elevations, elevationValue, index) => {
      return {
        ...elevations,
        [`level${index}`]: index === 0 ? elevationValue : (0, _color.default)(scheme.surface).mix((0, _color.default)(scheme.primary), elevationValue).rgb().string()
      };
    }, {});
  };
  exports.getDynamicThemeElevations = getDynamicThemeElevations;
},506,[1,507,515,524]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  var _createTheming = _interopRequireDefault(require(_dependencyMap[0]));
  exports.createTheming = _createTheming.default;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }
},507,[508]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = createTheming;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _deepmerge = _interopRequireDefault(require(_dependencyMap[1]));
  var _createThemeProvider = _interopRequireDefault(require(_dependencyMap[2]));
  var _createWithTheme = _interopRequireDefault(require(_dependencyMap[3]));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function createTheming(defaultTheme) {
    var ThemeContext = React.createContext(defaultTheme);
    var ThemeProvider = (0, _createThemeProvider.default)(defaultTheme, ThemeContext);
    var withTheme = (0, _createWithTheme.default)(ThemeProvider, ThemeContext);
    var useTheme = function useTheme(overrides) {
      var theme = React.useContext(ThemeContext);
      var result = React.useMemo(function () {
        return theme && overrides ? (0, _deepmerge.default)(theme, overrides) : theme || overrides;
      }, [theme, overrides]);
      return result;
    };
    return {
      ThemeContext: ThemeContext,
      ThemeProvider: ThemeProvider,
      withTheme: withTheme,
      useTheme: useTheme
    };
  }
},508,[125,509,510,511]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.deepmerge = factory());
  })(this, function () {
    'use strict';

    var isMergeableObject = function isMergeableObject(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === 'object';
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
    }

    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function (element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === 'function' ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
        return target.propertyIsEnumerable(symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function (key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function (key) {
        if (!options.isMergeableObject(source[key]) || !target[key]) {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        } else {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error('first argument should be an array');
      }
      return array.reduce(function (prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    return deepmerge_1;
  });
},509,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function createThemeProvider(defaultTheme, ThemeContext) {
    var _class, _temp;
    return _temp = _class = /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(ThemeProvider, _React$Component);
      function ThemeProvider() {
        return _React$Component.apply(this, arguments) || this;
      }
      var _proto = ThemeProvider.prototype;
      _proto.render = function render() {
        return React.createElement(ThemeContext.Provider, {
          value: this.props.theme
        }, this.props.children);
      };
      return ThemeProvider;
    }(React.Component), _defineProperty(_class, "defaultProps", {
      theme: defaultTheme
    }), _temp;
  }
  var _default = createThemeProvider;
  exports.default = _default;
},510,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _deepmerge = _interopRequireDefault(require(_dependencyMap[1]));
  var _hoistNonReactStatics = _interopRequireDefault(require(_dependencyMap[2]));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _assertThisInitialized(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var createWithTheme = function createWithTheme(ThemeProvider, ThemeContext) {
    return function withTheme(Comp) {
      var ThemedComponent = /*#__PURE__*/
      function (_React$Component) {
        _inheritsLoose(ThemedComponent, _React$Component);
        function ThemedComponent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
          _defineProperty(_assertThisInitialized(_this), "_previous", undefined);
          _defineProperty(_assertThisInitialized(_this), "_merge", function (a, b) {
            var previous = _this._previous;
            if (previous && previous.a === a && previous.b === b) {
              return previous.result;
            }
            var result = a && b && a !== b ? (0, _deepmerge.default)(a, b) : a || b;
            _this._previous = {
              a: a,
              b: b,
              result: result
            };
            return result;
          });
          return _this;
        }
        var _proto = ThemedComponent.prototype;
        _proto.render = function render() {
          var _this2 = this;
          var _this$props = this.props,
            _reactThemeProviderForwardedRef = _this$props._reactThemeProviderForwardedRef,
            rest = _objectWithoutPropertiesLoose(_this$props, ["_reactThemeProviderForwardedRef"]);
          return React.createElement(ThemeContext.Consumer, null, function (theme) {
            return React.createElement(Comp, _extends({}, rest, {
              theme: _this2._merge(theme, rest.theme),
              ref: _reactThemeProviderForwardedRef
            }));
          });
        };
        return ThemedComponent;
      }(React.Component);
      var ResultComponent = React.forwardRef(function (props, ref) {
        return React.createElement(ThemedComponent, _extends({}, props, {
          _reactThemeProviderForwardedRef: ref
        }));
      });
      ResultComponent.displayName = "withTheme(" + (Comp.displayName || Comp.name) + ")";
      (0, _hoistNonReactStatics.default)(ResultComponent, Comp);
      return ResultComponent;
    };
  };
  var _default = createWithTheme;
  exports.default = _default;
},511,[125,509,512]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var reactIs = require(_dependencyMap[0]);

  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */
  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
  TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
  function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) {
      return MEMO_STATICS;
    } // React v16.12 and above

    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
  }
  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;
  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      // don't hoist over string (html) components
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);
        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }
      var keys = getOwnPropertyNames(sourceComponent);
      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }
      var targetStatics = getStatics(targetComponent);
      var sourceStatics = getStatics(sourceComponent);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
          try {
            // Avoid failures from read-only properties
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }
    }
    return targetComponent;
  }
  module.exports = hoistNonReactStatics;
},512,[513]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = require(_dependencyMap[0]);
  }
},513,[514]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  'use strict';

  var b = "function" === typeof Symbol && Symbol.for,
    c = b ? Symbol.for("react.element") : 60103,
    d = b ? Symbol.for("react.portal") : 60106,
    e = b ? Symbol.for("react.fragment") : 60107,
    f = b ? Symbol.for("react.strict_mode") : 60108,
    g = b ? Symbol.for("react.profiler") : 60114,
    h = b ? Symbol.for("react.provider") : 60109,
    k = b ? Symbol.for("react.context") : 60110,
    l = b ? Symbol.for("react.async_mode") : 60111,
    m = b ? Symbol.for("react.concurrent_mode") : 60111,
    n = b ? Symbol.for("react.forward_ref") : 60112,
    p = b ? Symbol.for("react.suspense") : 60113,
    q = b ? Symbol.for("react.suspense_list") : 60120,
    r = b ? Symbol.for("react.memo") : 60115,
    t = b ? Symbol.for("react.lazy") : 60116,
    v = b ? Symbol.for("react.block") : 60121,
    w = b ? Symbol.for("react.fundamental") : 60117,
    x = b ? Symbol.for("react.responder") : 60118,
    y = b ? Symbol.for("react.scope") : 60119;
  function z(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;
      switch (u) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;
            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case t:
                case r:
                case h:
                  return a;
                default:
                  return u;
              }
          }
        case d:
          return u;
      }
    }
  }
  function A(a) {
    return z(a) === m;
  }
  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Lazy = t;
  exports.Memo = r;
  exports.Portal = d;
  exports.Profiler = g;
  exports.StrictMode = f;
  exports.Suspense = p;
  exports.isAsyncMode = function (a) {
    return A(a) || z(a) === l;
  };
  exports.isConcurrentMode = A;
  exports.isContextConsumer = function (a) {
    return z(a) === k;
  };
  exports.isContextProvider = function (a) {
    return z(a) === h;
  };
  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };
  exports.isForwardRef = function (a) {
    return z(a) === n;
  };
  exports.isFragment = function (a) {
    return z(a) === e;
  };
  exports.isLazy = function (a) {
    return z(a) === t;
  };
  exports.isMemo = function (a) {
    return z(a) === r;
  };
  exports.isPortal = function (a) {
    return z(a) === d;
  };
  exports.isProfiler = function (a) {
    return z(a) === g;
  };
  exports.isStrictMode = function (a) {
    return z(a) === f;
  };
  exports.isSuspense = function (a) {
    return z(a) === p;
  };
  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
  };
  exports.typeOf = z;
},514,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var colorString = require(_dependencyMap[0]);
  var convert = require(_dependencyMap[1]);
  var _slice = [].slice;
  var skippedModels = [
  // to be honest, I don't really feel like keyword belongs in color convert, but eh.
  'keyword',
  // gray conflicts with some method names, and has its own method defined.
  'gray',
  // shouldn't really be in color-convert either...
  'hex'];
  var hashedModelKeys = {};
  Object.keys(convert).forEach(function (model) {
    hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
  });
  var limiters = {};
  function Color(obj, model) {
    if (!(this instanceof Color)) {
      return new Color(obj, model);
    }
    if (model && model in skippedModels) {
      model = null;
    }
    if (model && !(model in convert)) {
      throw new Error('Unknown model: ' + model);
    }
    var i;
    var channels;
    if (obj == null) {
      // eslint-disable-line no-eq-null,eqeqeq
      this.model = 'rgb';
      this.color = [0, 0, 0];
      this.valpha = 1;
    } else if (obj instanceof Color) {
      this.model = obj.model;
      this.color = obj.color.slice();
      this.valpha = obj.valpha;
    } else if (typeof obj === 'string') {
      var result = colorString.get(obj);
      if (result === null) {
        throw new Error('Unable to parse color from string: ' + obj);
      }
      this.model = result.model;
      channels = convert[this.model].channels;
      this.color = result.value.slice(0, channels);
      this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
    } else if (obj.length) {
      this.model = model || 'rgb';
      channels = convert[this.model].channels;
      var newArr = _slice.call(obj, 0, channels);
      this.color = zeroArray(newArr, channels);
      this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
    } else if (typeof obj === 'number') {
      // this is always RGB - can be converted later on.
      obj &= 0xFFFFFF;
      this.model = 'rgb';
      this.color = [obj >> 16 & 0xFF, obj >> 8 & 0xFF, obj & 0xFF];
      this.valpha = 1;
    } else {
      this.valpha = 1;
      var keys = Object.keys(obj);
      if ('alpha' in obj) {
        keys.splice(keys.indexOf('alpha'), 1);
        this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
      }
      var hashedKeys = keys.sort().join('');
      if (!(hashedKeys in hashedModelKeys)) {
        throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
      }
      this.model = hashedModelKeys[hashedKeys];
      var labels = convert[this.model].labels;
      var color = [];
      for (i = 0; i < labels.length; i++) {
        color.push(obj[labels[i]]);
      }
      this.color = zeroArray(color);
    }

    // perform limitations (clamping, etc.)
    if (limiters[this.model]) {
      channels = convert[this.model].channels;
      for (i = 0; i < channels; i++) {
        var limit = limiters[this.model][i];
        if (limit) {
          this.color[i] = limit(this.color[i]);
        }
      }
    }
    this.valpha = Math.max(0, Math.min(1, this.valpha));
    if (Object.freeze) {
      Object.freeze(this);
    }
  }
  Color.prototype = {
    toString: function () {
      return this.string();
    },
    toJSON: function () {
      return this[this.model]();
    },
    string: function (places) {
      var self = this.model in colorString.to ? this : this.rgb();
      self = self.round(typeof places === 'number' ? places : 1);
      var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
      return colorString.to[self.model](args);
    },
    percentString: function (places) {
      var self = this.rgb().round(typeof places === 'number' ? places : 1);
      var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
      return colorString.to.rgb.percent(args);
    },
    array: function () {
      return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
    },
    object: function () {
      var result = {};
      var channels = convert[this.model].channels;
      var labels = convert[this.model].labels;
      for (var i = 0; i < channels; i++) {
        result[labels[i]] = this.color[i];
      }
      if (this.valpha !== 1) {
        result.alpha = this.valpha;
      }
      return result;
    },
    unitArray: function () {
      var rgb = this.rgb().color;
      rgb[0] /= 255;
      rgb[1] /= 255;
      rgb[2] /= 255;
      if (this.valpha !== 1) {
        rgb.push(this.valpha);
      }
      return rgb;
    },
    unitObject: function () {
      var rgb = this.rgb().object();
      rgb.r /= 255;
      rgb.g /= 255;
      rgb.b /= 255;
      if (this.valpha !== 1) {
        rgb.alpha = this.valpha;
      }
      return rgb;
    },
    round: function (places) {
      places = Math.max(places || 0, 0);
      return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
    },
    alpha: function (val) {
      if (arguments.length) {
        return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
      }
      return this.valpha;
    },
    // rgb
    red: getset('rgb', 0, maxfn(255)),
    green: getset('rgb', 1, maxfn(255)),
    blue: getset('rgb', 2, maxfn(255)),
    hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) {
      return (val % 360 + 360) % 360;
    }),
    // eslint-disable-line brace-style

    saturationl: getset('hsl', 1, maxfn(100)),
    lightness: getset('hsl', 2, maxfn(100)),
    saturationv: getset('hsv', 1, maxfn(100)),
    value: getset('hsv', 2, maxfn(100)),
    chroma: getset('hcg', 1, maxfn(100)),
    gray: getset('hcg', 2, maxfn(100)),
    white: getset('hwb', 1, maxfn(100)),
    wblack: getset('hwb', 2, maxfn(100)),
    cyan: getset('cmyk', 0, maxfn(100)),
    magenta: getset('cmyk', 1, maxfn(100)),
    yellow: getset('cmyk', 2, maxfn(100)),
    black: getset('cmyk', 3, maxfn(100)),
    x: getset('xyz', 0, maxfn(100)),
    y: getset('xyz', 1, maxfn(100)),
    z: getset('xyz', 2, maxfn(100)),
    l: getset('lab', 0, maxfn(100)),
    a: getset('lab', 1),
    b: getset('lab', 2),
    keyword: function (val) {
      if (arguments.length) {
        return new Color(val);
      }
      return convert[this.model].keyword(this.color);
    },
    hex: function (val) {
      if (arguments.length) {
        return new Color(val);
      }
      return colorString.to.hex(this.rgb().round().color);
    },
    rgbNumber: function () {
      var rgb = this.rgb().color;
      return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;
    },
    luminosity: function () {
      // http://www.w3.org/TR/WCAG20/#relativeluminancedef
      var rgb = this.rgb().color;
      var lum = [];
      for (var i = 0; i < rgb.length; i++) {
        var chan = rgb[i] / 255;
        lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
      }
      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    },
    contrast: function (color2) {
      // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
      var lum1 = this.luminosity();
      var lum2 = color2.luminosity();
      if (lum1 > lum2) {
        return (lum1 + 0.05) / (lum2 + 0.05);
      }
      return (lum2 + 0.05) / (lum1 + 0.05);
    },
    level: function (color2) {
      var contrastRatio = this.contrast(color2);
      if (contrastRatio >= 7.1) {
        return 'AAA';
      }
      return contrastRatio >= 4.5 ? 'AA' : '';
    },
    isDark: function () {
      // YIQ equation from http://24ways.org/2010/calculating-color-contrast
      var rgb = this.rgb().color;
      var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
      return yiq < 128;
    },
    isLight: function () {
      return !this.isDark();
    },
    negate: function () {
      var rgb = this.rgb();
      for (var i = 0; i < 3; i++) {
        rgb.color[i] = 255 - rgb.color[i];
      }
      return rgb;
    },
    lighten: function (ratio) {
      var hsl = this.hsl();
      hsl.color[2] += hsl.color[2] * ratio;
      return hsl;
    },
    darken: function (ratio) {
      var hsl = this.hsl();
      hsl.color[2] -= hsl.color[2] * ratio;
      return hsl;
    },
    saturate: function (ratio) {
      var hsl = this.hsl();
      hsl.color[1] += hsl.color[1] * ratio;
      return hsl;
    },
    desaturate: function (ratio) {
      var hsl = this.hsl();
      hsl.color[1] -= hsl.color[1] * ratio;
      return hsl;
    },
    whiten: function (ratio) {
      var hwb = this.hwb();
      hwb.color[1] += hwb.color[1] * ratio;
      return hwb;
    },
    blacken: function (ratio) {
      var hwb = this.hwb();
      hwb.color[2] += hwb.color[2] * ratio;
      return hwb;
    },
    grayscale: function () {
      // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
      var rgb = this.rgb().color;
      var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
      return Color.rgb(val, val, val);
    },
    fade: function (ratio) {
      return this.alpha(this.valpha - this.valpha * ratio);
    },
    opaquer: function (ratio) {
      return this.alpha(this.valpha + this.valpha * ratio);
    },
    rotate: function (degrees) {
      var hsl = this.hsl();
      var hue = hsl.color[0];
      hue = (hue + degrees) % 360;
      hue = hue < 0 ? 360 + hue : hue;
      hsl.color[0] = hue;
      return hsl;
    },
    mix: function (mixinColor, weight) {
      // ported from sass implementation in C
      // https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
      if (!mixinColor || !mixinColor.rgb) {
        throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
      }
      var color1 = mixinColor.rgb();
      var color2 = this.rgb();
      var p = weight === undefined ? 0.5 : weight;
      var w = 2 * p - 1;
      var a = color1.alpha() - color2.alpha();
      var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
      var w2 = 1 - w1;
      return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
    }
  };

  // model conversion methods and static constructors
  Object.keys(convert).forEach(function (model) {
    if (skippedModels.indexOf(model) !== -1) {
      return;
    }
    var channels = convert[model].channels;

    // conversion methods
    Color.prototype[model] = function () {
      if (this.model === model) {
        return new Color(this);
      }
      if (arguments.length) {
        return new Color(arguments, model);
      }
      var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
      return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
    };

    // 'static' construction methods
    Color[model] = function (color) {
      if (typeof color === 'number') {
        color = zeroArray(_slice.call(arguments), channels);
      }
      return new Color(color, model);
    };
  });
  function roundTo(num, places) {
    return Number(num.toFixed(places));
  }
  function roundToPlace(places) {
    return function (num) {
      return roundTo(num, places);
    };
  }
  function getset(model, channel, modifier) {
    model = Array.isArray(model) ? model : [model];
    model.forEach(function (m) {
      (limiters[m] || (limiters[m] = []))[channel] = modifier;
    });
    model = model[0];
    return function (val) {
      var result;
      if (arguments.length) {
        if (modifier) {
          val = modifier(val);
        }
        result = this[model]();
        result.color[channel] = val;
        return result;
      }
      result = this[model]().color[channel];
      if (modifier) {
        result = modifier(result);
      }
      return result;
    };
  }
  function maxfn(max) {
    return function (v) {
      return Math.max(0, Math.min(max, v));
    };
  }
  function assertArray(val) {
    return Array.isArray(val) ? val : [val];
  }
  function zeroArray(arr, length) {
    for (var i = 0; i < length; i++) {
      if (typeof arr[i] !== 'number') {
        arr[i] = 0;
      }
    }
    return arr;
  }
  module.exports = Color;
},515,[516,520]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /* MIT license */
  var colorNames = require(_dependencyMap[0]);
  var swizzle = require(_dependencyMap[1]);
  var hasOwnProperty = Object.hasOwnProperty;
  var reverseNames = Object.create(null);

  // create a list of reverse color names
  for (var name in colorNames) {
    if (hasOwnProperty.call(colorNames, name)) {
      reverseNames[colorNames[name]] = name;
    }
  }
  var cs = module.exports = {
    to: {},
    get: {}
  };
  cs.get = function (string) {
    var prefix = string.substring(0, 3).toLowerCase();
    var val;
    var model;
    switch (prefix) {
      case 'hsl':
        val = cs.get.hsl(string);
        model = 'hsl';
        break;
      case 'hwb':
        val = cs.get.hwb(string);
        model = 'hwb';
        break;
      default:
        val = cs.get.rgb(string);
        model = 'rgb';
        break;
    }
    if (!val) {
      return null;
    }
    return {
      model: model,
      value: val
    };
  };
  cs.get.rgb = function (string) {
    if (!string) {
      return null;
    }
    var abbr = /^#([a-f0-9]{3,4})$/i;
    var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
    var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
    var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
    var keyword = /^(\w+)$/;
    var rgb = [0, 0, 0, 1];
    var match;
    var i;
    var hexAlpha;
    if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];
      for (i = 0; i < 3; i++) {
        // https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
        var i2 = i * 2;
        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
      }
      if (hexAlpha) {
        rgb[3] = parseInt(hexAlpha, 16) / 255;
      }
    } else if (match = string.match(abbr)) {
      match = match[1];
      hexAlpha = match[3];
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i] + match[i], 16);
      }
      if (hexAlpha) {
        rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
      }
    } else if (match = string.match(rgba)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i + 1], 0);
      }
      if (match[4]) {
        if (match[5]) {
          rgb[3] = parseFloat(match[4]) * 0.01;
        } else {
          rgb[3] = parseFloat(match[4]);
        }
      }
    } else if (match = string.match(per)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      if (match[4]) {
        if (match[5]) {
          rgb[3] = parseFloat(match[4]) * 0.01;
        } else {
          rgb[3] = parseFloat(match[4]);
        }
      }
    } else if (match = string.match(keyword)) {
      if (match[1] === 'transparent') {
        return [0, 0, 0, 0];
      }
      if (!hasOwnProperty.call(colorNames, match[1])) {
        return null;
      }
      rgb = colorNames[match[1]];
      rgb[3] = 1;
      return rgb;
    } else {
      return null;
    }
    for (i = 0; i < 3; i++) {
      rgb[i] = clamp(rgb[i], 0, 255);
    }
    rgb[3] = clamp(rgb[3], 0, 1);
    return rgb;
  };
  cs.get.hsl = function (string) {
    if (!string) {
      return null;
    }
    var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
    var match = string.match(hsl);
    if (match) {
      var alpha = parseFloat(match[4]);
      var h = (parseFloat(match[1]) % 360 + 360) % 360;
      var s = clamp(parseFloat(match[2]), 0, 100);
      var l = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
    }
    return null;
  };
  cs.get.hwb = function (string) {
    if (!string) {
      return null;
    }
    var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
    var match = string.match(hwb);
    if (match) {
      var alpha = parseFloat(match[4]);
      var h = (parseFloat(match[1]) % 360 + 360) % 360;
      var w = clamp(parseFloat(match[2]), 0, 100);
      var b = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
    }
    return null;
  };
  cs.to.hex = function () {
    var rgba = swizzle(arguments);
    return '#' + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : '');
  };
  cs.to.rgb = function () {
    var rgba = swizzle(arguments);
    return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')' : 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
  };
  cs.to.rgb.percent = function () {
    var rgba = swizzle(arguments);
    var r = Math.round(rgba[0] / 255 * 100);
    var g = Math.round(rgba[1] / 255 * 100);
    var b = Math.round(rgba[2] / 255 * 100);
    return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)' : 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
  };
  cs.to.hsl = function () {
    var hsla = swizzle(arguments);
    return hsla.length < 4 || hsla[3] === 1 ? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)' : 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
  };

  // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
  // (hwb have alpha optional & 1 is default value)
  cs.to.hwb = function () {
    var hwba = swizzle(arguments);
    var a = '';
    if (hwba.length >= 4 && hwba[3] !== 1) {
      a = ', ' + hwba[3];
    }
    return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
  };
  cs.to.keyword = function (rgb) {
    return reverseNames[rgb.slice(0, 3)];
  };

  // helpers
  function clamp(num, min, max) {
    return Math.min(Math.max(min, num), max);
  }
  function hexDouble(num) {
    var str = Math.round(num).toString(16).toUpperCase();
    return str.length < 2 ? '0' + str : str;
  }
},516,[517,518]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
},517,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var isArrayish = require(_dependencyMap[0]);
  var concat = Array.prototype.concat;
  var slice = Array.prototype.slice;
  var swizzle = module.exports = function swizzle(args) {
    var results = [];
    for (var i = 0, len = args.length; i < len; i++) {
      var arg = args[i];
      if (isArrayish(arg)) {
        // http://jsperf.com/javascript-array-concat-vs-push/98
        results = concat.call(results, slice.call(arg));
      } else {
        results.push(arg);
      }
    }
    return results;
  };
  swizzle.wrap = function (fn) {
    return function () {
      return fn(swizzle(arguments));
    };
  };
},518,[519]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = function isArrayish(obj) {
    if (!obj || typeof obj === 'string') {
      return false;
    }
    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== 'String');
  };
},519,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var conversions = require(_dependencyMap[0]);
  var route = require(_dependencyMap[1]);
  var convert = {};
  var models = Object.keys(conversions);
  function wrapRaw(fn) {
    var wrappedFn = function (args) {
      if (args === undefined || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      return fn(args);
    };

    // preserve .conversion property if there is one
    if ('conversion' in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    var wrappedFn = function (args) {
      if (args === undefined || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      var result = fn(args);

      // we're assuming the result is an array here.
      // see notice in conversions.js; don't use box types
      // in conversion functions.
      if (typeof result === 'object') {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };

    // preserve .conversion property if there is one
    if ('conversion' in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach(function (fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], 'channels', {
      value: conversions[fromModel].channels
    });
    Object.defineProperty(convert[fromModel], 'labels', {
      value: conversions[fromModel].labels
    });
    var routes = route(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function (toModel) {
      var fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  module.exports = convert;
},520,[521,523]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /* MIT license */
  var cssKeywords = require(_dependencyMap[0]);

  // NOTE: conversions should only return primitive values (i.e. arrays, or
  //       values that give correct `typeof` results).
  //       do not use box values types (i.e. Number(), String(), etc.)

  var reverseKeywords = {};
  for (var key in cssKeywords) {
    if (cssKeywords.hasOwnProperty(key)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
  }
  var convert = module.exports = {
    rgb: {
      channels: 3,
      labels: 'rgb'
    },
    hsl: {
      channels: 3,
      labels: 'hsl'
    },
    hsv: {
      channels: 3,
      labels: 'hsv'
    },
    hwb: {
      channels: 3,
      labels: 'hwb'
    },
    cmyk: {
      channels: 4,
      labels: 'cmyk'
    },
    xyz: {
      channels: 3,
      labels: 'xyz'
    },
    lab: {
      channels: 3,
      labels: 'lab'
    },
    lch: {
      channels: 3,
      labels: 'lch'
    },
    hex: {
      channels: 1,
      labels: ['hex']
    },
    keyword: {
      channels: 1,
      labels: ['keyword']
    },
    ansi16: {
      channels: 1,
      labels: ['ansi16']
    },
    ansi256: {
      channels: 1,
      labels: ['ansi256']
    },
    hcg: {
      channels: 3,
      labels: ['h', 'c', 'g']
    },
    apple: {
      channels: 3,
      labels: ['r16', 'g16', 'b16']
    },
    gray: {
      channels: 1,
      labels: ['gray']
    }
  };

  // hide .channels and .labels properties
  for (var model in convert) {
    if (convert.hasOwnProperty(model)) {
      if (!('channels' in convert[model])) {
        throw new Error('missing channels property: ' + model);
      }
      if (!('labels' in convert[model])) {
        throw new Error('missing channel labels property: ' + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error('channel and label counts mismatch: ' + model);
      }
      var channels = convert[model].channels;
      var labels = convert[model].labels;
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], 'channels', {
        value: channels
      });
      Object.defineProperty(convert[model], 'labels', {
        value: labels
      });
    }
  }
  convert.rgb.hsl = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert.rgb.hsv = function (rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function (c) {
      return (v - c) / 6 / diff + 0.5;
    };
    if (diff === 0) {
      h = s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 0.3333333333333333 + rdif - bdif;
      } else if (b === v) {
        h = 0.6666666666666666 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [h * 360, s * 100, v * 100];
  };
  convert.rgb.hwb = function (rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 0.00392156862745098 * Math.min(r, Math.min(g, b));
    b = 1 - 0.00392156862745098 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert.rgb.cmyk = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };

  /**
   * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
   * */
  function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
  }
  convert.rgb.keyword = function (rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for (var keyword in cssKeywords) {
      if (cssKeywords.hasOwnProperty(keyword)) {
        var value = cssKeywords[keyword];

        // Compute comparative distance
        var distance = comparativeDistance(rgb, value);

        // Check if its less, if so set as closest
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function (keyword) {
    return cssKeywords[keyword];
  };
  convert.rgb.xyz = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;

    // assume sRGB
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };
  convert.rgb.lab = function (rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
    y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
    z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.hsl.rgb = function (hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    t1 = 2 * l - t2;
    rgb = [0, 0, 0];
    for (var i = 0; i < 3; i++) {
      t3 = h + 0.3333333333333333 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (0.6666666666666666 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function (hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert.hsv.rgb = function (hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert.hsv.hsl = function (hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };

  // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
  convert.hwb.rgb = function (hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;

    // wh + bl cant be > 1
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 0x01) !== 0) {
      f = 1 - f;
    }
    n = wh + f * (v - wh); // linear interpolation

    var r;
    var g;
    var b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert.cmyk.rgb = function (cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.rgb = function (xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.0570;

    // assume sRGB
    r = r > 0.0031308 ? 1.055 * Math.pow(r, 0.4166666666666667) - 0.055 : r * 12.92;
    g = g > 0.0031308 ? 1.055 * Math.pow(g, 0.4166666666666667) - 0.055 : g * 12.92;
    b = b > 0.0031308 ? 1.055 * Math.pow(b, 0.4166666666666667) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.lab = function (xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
    y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
    z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.lab.xyz = function (lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 0.008856 ? y2 : (y - 0.13793103448275862) / 7.787;
    x = x2 > 0.008856 ? x2 : (x - 0.13793103448275862) / 7.787;
    z = z2 > 0.008856 ? z2 : (z - 0.13793103448275862) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };
  convert.lab.lch = function (lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };
  convert.lch.lab = function (lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [l, a, b];
  };
  convert.rgb.ansi16 = function (args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert.hsv.ansi16 = function (args) {
    // optimization here; we already know the value and don't need to get
    // it converted for us.
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };
  convert.rgb.ansi256 = function (args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];

    // we use the extended greyscale palette here, with the exception of
    // black and white. normal palette only has 4 greyscale shades.
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };
  convert.ansi16.rgb = function (args) {
    var color = args % 10;

    // handle greyscale
    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert.ansi256.rgb = function (args) {
    // handle greyscale
    if (args >= 232) {
      var c = (args - 232) * 10 + 8;
      return [c, c, c];
    }
    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert.rgb.hex = function (args) {
    var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
  };
  convert.hex.rgb = function (args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    var colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split('').map(function (char) {
        return char + char;
      }).join('');
    }
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 0xFF;
    var g = integer >> 8 & 0xFF;
    var b = integer & 0xFF;
    return [r, g, b];
  };
  convert.rgb.hcg = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma + 4;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function (hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;
    if (l < 0.5) {
      c = 2.0 * s * l;
    } else {
      c = 2.0 * s * (1.0 - l);
    }
    if (c < 1.0) {
      f = (l - 0.5 * c) / (1.0 - c);
    }
    return [hsl[0], c * 100, f * 100];
  };
  convert.hsv.hcg = function (hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;
    if (c < 1.0) {
      f = (v - c) / (1 - c);
    }
    return [hsv[0], c * 100, f * 100];
  };
  convert.hcg.rgb = function (hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c === 0.0) {
      return [g * 255, g * 255, g * 255];
    }
    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1.0 - c) * g;
    return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
  };
  convert.hcg.hsv = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    var f = 0;
    if (v > 0.0) {
      f = c / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert.hcg.hsl = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1.0 - c) + 0.5 * c;
    var s = 0;
    if (l > 0.0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1.0) {
      s = c / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert.hcg.hwb = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };
  convert.hwb.hcg = function (hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;
    if (c < 1) {
      g = (v - c) / (1 - c);
    }
    return [hwb[0], c * 100, g * 100];
  };
  convert.apple.rgb = function (apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function (rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function (args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert.gray.hsl = convert.gray.hsv = function (args) {
    return [0, 0, args[0]];
  };
  convert.gray.hwb = function (gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function (gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function (gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function (gray) {
    var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
  };
  convert.rgb.gray = function (rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
},521,[522]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
},522,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var conversions = require(_dependencyMap[0]);

  /*
  	this function routes a model to all other models.
  
  	all functions that are routed have a property `.conversion` attached
  	to the returned synthetic function. This property is an array
  	of strings, each with the steps in between the 'from' and 'to'
  	color models (inclusive).
  
  	conversions that are not possible simply are not included.
  */

  function buildGraph() {
    var graph = {};
    // https://jsperf.com/object-keys-vs-for-in-with-closure/3
    var models = Object.keys(conversions);
    for (var len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        // http://jsperf.com/1-vs-infinity
        // micro-opt, but this is simple.
        distance: -1,
        parent: null
      };
    }
    return graph;
  }

  // https://en.wikipedia.org/wiki/Breadth-first_search
  function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [fromModel]; // unshift -> queue -> pop

    graph[fromModel].distance = 0;
    while (queue.length) {
      var current = queue.pop();
      var adjacents = Object.keys(conversions[current]);
      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node = graph[adjacent];
        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function (args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    var path = [graph[toModel].parent, toModel];
    var fn = conversions[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path.unshift(graph[cur].parent);
      fn = link(conversions[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }
    fn.conversion = path;
    return fn;
  }
  module.exports = function (fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);
    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node = graph[toModel];
      if (node.parent === null) {
        // no possible conversion, or this node is the source model.
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
  };
},523,[521]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "MD2DarkTheme", {
    enumerable: true,
    get: function () {
      return _DarkTheme2.MD2DarkTheme;
    }
  });
  Object.defineProperty(exports, "MD2LightTheme", {
    enumerable: true,
    get: function () {
      return _LightTheme2.MD2LightTheme;
    }
  });
  Object.defineProperty(exports, "MD3DarkTheme", {
    enumerable: true,
    get: function () {
      return _DarkTheme.MD3DarkTheme;
    }
  });
  Object.defineProperty(exports, "MD3LightTheme", {
    enumerable: true,
    get: function () {
      return _LightTheme.MD3LightTheme;
    }
  });
  var _LightTheme = require(_dependencyMap[0]);
  var _DarkTheme = require(_dependencyMap[1]);
  var _LightTheme2 = require(_dependencyMap[2]);
  var _DarkTheme2 = require(_dependencyMap[3]);
},524,[525,527,528,530]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MD3LightTheme = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var _tokens = require(_dependencyMap[2]);
  var _fonts = _interopRequireDefault(require(_dependencyMap[3]));
  var _tokens$md$ref = _tokens.tokens.md.ref,
    palette = _tokens$md$ref.palette,
    opacity = _tokens$md$ref.opacity;
  var MD3LightTheme = exports.MD3LightTheme = {
    dark: false,
    roundness: 4,
    version: 3,
    isV3: true,
    colors: {
      primary: palette.primary40,
      primaryContainer: palette.primary90,
      secondary: palette.secondary40,
      secondaryContainer: palette.secondary90,
      tertiary: palette.tertiary40,
      tertiaryContainer: palette.tertiary90,
      surface: palette.neutral99,
      surfaceVariant: palette.neutralVariant90,
      surfaceDisabled: (0, _color.default)(palette.neutral10).alpha(opacity.level2).rgb().string(),
      background: palette.neutral99,
      error: palette.error40,
      errorContainer: palette.error90,
      onPrimary: palette.primary100,
      onPrimaryContainer: palette.primary10,
      onSecondary: palette.secondary100,
      onSecondaryContainer: palette.secondary10,
      onTertiary: palette.tertiary100,
      onTertiaryContainer: palette.tertiary10,
      onSurface: palette.neutral10,
      onSurfaceVariant: palette.neutralVariant30,
      onSurfaceDisabled: (0, _color.default)(palette.neutral10).alpha(opacity.level4).rgb().string(),
      onError: palette.error100,
      onErrorContainer: palette.error10,
      onBackground: palette.neutral10,
      outline: palette.neutralVariant50,
      outlineVariant: palette.neutralVariant80,
      inverseSurface: palette.neutral20,
      inverseOnSurface: palette.neutral95,
      inversePrimary: palette.primary80,
      shadow: palette.neutral0,
      scrim: palette.neutral0,
      backdrop: (0, _color.default)(_tokens.MD3Colors.neutralVariant20).alpha(0.4).rgb().string(),
      elevation: {
        level0: 'transparent',
        // Note: Color values with transparency cause RN to transfer shadows to children nodes
        // instead of View component in Surface. Providing solid background fixes the issue.
        // Opaque color values generated with `palette.primary99` used as background
        level1: 'rgb(247, 243, 249)',
        // palette.primary40, alpha 0.05
        level2: 'rgb(243, 237, 246)',
        // palette.primary40, alpha 0.08
        level3: 'rgb(238, 232, 244)',
        // palette.primary40, alpha 0.11
        level4: 'rgb(236, 230, 243)',
        // palette.primary40, alpha 0.12
        level5: 'rgb(233, 227, 241)' // palette.primary40, alpha 0.14
      }
    },
    fonts: (0, _fonts.default)(),
    animation: {
      scale: 1.0
    }
  };
},525,[1,515,505,526]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = configureFonts;
  exports.fontConfig = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _tokens = require(_dependencyMap[3]);
  var fontConfig = exports.fontConfig = {
    web: {
      regular: {
        fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
        fontWeight: '400'
      },
      medium: {
        fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
        fontWeight: '500'
      },
      light: {
        fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
        fontWeight: '300'
      },
      thin: {
        fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
        fontWeight: '100'
      }
    },
    ios: {
      regular: {
        fontFamily: 'System',
        fontWeight: '400'
      },
      medium: {
        fontFamily: 'System',
        fontWeight: '500'
      },
      light: {
        fontFamily: 'System',
        fontWeight: '300'
      },
      thin: {
        fontFamily: 'System',
        fontWeight: '100'
      }
    },
    default: {
      regular: {
        fontFamily: 'sans-serif',
        fontWeight: 'normal'
      },
      medium: {
        fontFamily: 'sans-serif-medium',
        fontWeight: 'normal'
      },
      light: {
        fontFamily: 'sans-serif-light',
        fontWeight: 'normal'
      },
      thin: {
        fontFamily: 'sans-serif-thin',
        fontWeight: 'normal'
      }
    }
  };
  function configureV2Fonts(config) {
    var fonts = _reactNative.Platform.select({
      ...fontConfig,
      ...config
    });
    return fonts;
  }
  function configureV3Fonts(config) {
    if (!config) {
      return _tokens.typescale;
    }
    var isFlatConfig = Object.keys(config).every(key => typeof config[key] !== 'object');
    if (isFlatConfig) {
      return Object.fromEntries(Object.entries(_tokens.typescale).map(_ref => {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          variantName = _ref2[0],
          variantProperties = _ref2[1];
        return [variantName, {
          ...variantProperties,
          ...config
        }];
      }));
    }
    return Object.assign({}, _tokens.typescale, ...Object.entries(config).map(_ref3 => {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        variantName = _ref4[0],
        variantProperties = _ref4[1];
      return {
        [variantName]: {
          ..._tokens.typescale[variantName],
          ...variantProperties
        }
      };
    }));
  }

  // eslint-disable-next-line no-redeclare

  // eslint-disable-next-line no-redeclare

  // eslint-disable-next-line no-redeclare

  // eslint-disable-next-line no-redeclare

  // eslint-disable-next-line no-redeclare

  // eslint-disable-next-line no-redeclare
  function configureFonts(params) {
    var _ref5 = params || {},
      _ref5$isV = _ref5.isV3,
      isV3 = _ref5$isV === undefined ? true : _ref5$isV,
      config = _ref5.config;
    if (isV3) {
      return configureV3Fonts(config);
    }
    return configureV2Fonts(config);
  }
},526,[1,29,45,505]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MD3DarkTheme = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var _LightTheme = require(_dependencyMap[2]);
  var _tokens = require(_dependencyMap[3]);
  var _tokens$md$ref = _tokens.tokens.md.ref,
    palette = _tokens$md$ref.palette,
    opacity = _tokens$md$ref.opacity;
  var MD3DarkTheme = exports.MD3DarkTheme = {
    ..._LightTheme.MD3LightTheme,
    dark: true,
    mode: 'adaptive',
    version: 3,
    isV3: true,
    colors: {
      primary: palette.primary80,
      primaryContainer: palette.primary30,
      secondary: palette.secondary80,
      secondaryContainer: palette.secondary30,
      tertiary: palette.tertiary80,
      tertiaryContainer: palette.tertiary30,
      surface: palette.neutral10,
      surfaceVariant: palette.neutralVariant30,
      surfaceDisabled: (0, _color.default)(palette.neutral90).alpha(opacity.level2).rgb().string(),
      background: palette.neutral10,
      error: palette.error80,
      errorContainer: palette.error30,
      onPrimary: palette.primary20,
      onPrimaryContainer: palette.primary90,
      onSecondary: palette.secondary20,
      onSecondaryContainer: palette.secondary90,
      onTertiary: palette.tertiary20,
      onTertiaryContainer: palette.tertiary90,
      onSurface: palette.neutral90,
      onSurfaceVariant: palette.neutralVariant80,
      onSurfaceDisabled: (0, _color.default)(palette.neutral90).alpha(opacity.level4).rgb().string(),
      onError: palette.error20,
      onErrorContainer: palette.error80,
      onBackground: palette.neutral90,
      outline: palette.neutralVariant60,
      outlineVariant: palette.neutralVariant30,
      inverseSurface: palette.neutral90,
      inverseOnSurface: palette.neutral20,
      inversePrimary: palette.primary40,
      shadow: palette.neutral0,
      scrim: palette.neutral0,
      backdrop: (0, _color.default)(_tokens.MD3Colors.neutralVariant20).alpha(0.4).rgb().string(),
      elevation: {
        level0: 'transparent',
        // Note: Color values with transparency cause RN to transfer shadows to children nodes
        // instead of View component in Surface. Providing solid background fixes the issue.
        // Opaque color values generated with `palette.primary80` used as background
        level1: 'rgb(37, 35, 42)',
        // palette.primary80, alpha 0.05
        level2: 'rgb(44, 40, 49)',
        // palette.primary80, alpha 0.08
        level3: 'rgb(49, 44, 56)',
        // palette.primary80, alpha 0.11
        level4: 'rgb(51, 46, 58)',
        // palette.primary80, alpha 0.12
        level5: 'rgb(52, 49, 63)' // palette.primary80, alpha 0.14
      }
    }
  };
},527,[1,515,525,505]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MD2LightTheme = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var _colors = require(_dependencyMap[2]);
  var _fonts = _interopRequireDefault(require(_dependencyMap[3]));
  var MD2LightTheme = exports.MD2LightTheme = {
    dark: false,
    roundness: 4,
    version: 2,
    isV3: false,
    colors: {
      primary: '#6200ee',
      accent: '#03dac4',
      background: '#f6f6f6',
      surface: _colors.white,
      error: '#B00020',
      text: _colors.black,
      onSurface: '#000000',
      disabled: (0, _color.default)(_colors.black).alpha(0.26).rgb().string(),
      placeholder: (0, _color.default)(_colors.black).alpha(0.54).rgb().string(),
      backdrop: (0, _color.default)(_colors.black).alpha(0.5).rgb().string(),
      notification: _colors.pinkA400,
      tooltip: 'rgba(28, 27, 31, 1)'
    },
    fonts: (0, _fonts.default)({
      isV3: false
    }),
    animation: {
      scale: 1.0
    }
  };
},528,[1,515,529,526]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.green800 = exports.green700 = exports.green600 = exports.green500 = exports.green50 = exports.green400 = exports.green300 = exports.green200 = exports.green100 = exports.deepPurpleA700 = exports.deepPurpleA400 = exports.deepPurpleA200 = exports.deepPurpleA100 = exports.deepPurple900 = exports.deepPurple800 = exports.deepPurple700 = exports.deepPurple600 = exports.deepPurple500 = exports.deepPurple50 = exports.deepPurple400 = exports.deepPurple300 = exports.deepPurple200 = exports.deepPurple100 = exports.deepOrangeA700 = exports.deepOrangeA400 = exports.deepOrangeA200 = exports.deepOrangeA100 = exports.deepOrange900 = exports.deepOrange800 = exports.deepOrange700 = exports.deepOrange600 = exports.deepOrange500 = exports.deepOrange50 = exports.deepOrange400 = exports.deepOrange300 = exports.deepOrange200 = exports.deepOrange100 = exports.cyanA700 = exports.cyanA400 = exports.cyanA200 = exports.cyanA100 = exports.cyan900 = exports.cyan800 = exports.cyan700 = exports.cyan600 = exports.cyan500 = exports.cyan50 = exports.cyan400 = exports.cyan300 = exports.cyan200 = exports.cyan100 = exports.brown900 = exports.brown800 = exports.brown700 = exports.brown600 = exports.brown500 = exports.brown50 = exports.brown400 = exports.brown300 = exports.brown200 = exports.brown100 = exports.blueGrey900 = exports.blueGrey800 = exports.blueGrey700 = exports.blueGrey600 = exports.blueGrey500 = exports.blueGrey50 = exports.blueGrey400 = exports.blueGrey300 = exports.blueGrey200 = exports.blueGrey100 = exports.blueA700 = exports.blueA400 = exports.blueA200 = exports.blueA100 = exports.blue900 = exports.blue800 = exports.blue700 = exports.blue600 = exports.blue500 = exports.blue50 = exports.blue400 = exports.blue300 = exports.blue200 = exports.blue100 = exports.black = exports.amberA700 = exports.amberA400 = exports.amberA200 = exports.amberA100 = exports.amber900 = exports.amber800 = exports.amber700 = exports.amber600 = exports.amber500 = exports.amber50 = exports.amber400 = exports.amber300 = exports.amber200 = exports.amber100 = undefined;
  exports.purple100 = exports.pinkA700 = exports.pinkA400 = exports.pinkA200 = exports.pinkA100 = exports.pink900 = exports.pink800 = exports.pink700 = exports.pink600 = exports.pink500 = exports.pink50 = exports.pink400 = exports.pink300 = exports.pink200 = exports.pink100 = exports.orangeA700 = exports.orangeA400 = exports.orangeA200 = exports.orangeA100 = exports.orange900 = exports.orange800 = exports.orange700 = exports.orange600 = exports.orange500 = exports.orange50 = exports.orange400 = exports.orange300 = exports.orange200 = exports.orange100 = exports.limeA700 = exports.limeA400 = exports.limeA200 = exports.limeA100 = exports.lime900 = exports.lime800 = exports.lime700 = exports.lime600 = exports.lime500 = exports.lime50 = exports.lime400 = exports.lime300 = exports.lime200 = exports.lime100 = exports.lightGreenA700 = exports.lightGreenA400 = exports.lightGreenA200 = exports.lightGreenA100 = exports.lightGreen900 = exports.lightGreen800 = exports.lightGreen700 = exports.lightGreen600 = exports.lightGreen500 = exports.lightGreen50 = exports.lightGreen400 = exports.lightGreen300 = exports.lightGreen200 = exports.lightGreen100 = exports.lightBlueA700 = exports.lightBlueA400 = exports.lightBlueA200 = exports.lightBlueA100 = exports.lightBlue900 = exports.lightBlue800 = exports.lightBlue700 = exports.lightBlue600 = exports.lightBlue500 = exports.lightBlue50 = exports.lightBlue400 = exports.lightBlue300 = exports.lightBlue200 = exports.lightBlue100 = exports.indigoA700 = exports.indigoA400 = exports.indigoA200 = exports.indigoA100 = exports.indigo900 = exports.indigo800 = exports.indigo700 = exports.indigo600 = exports.indigo500 = exports.indigo50 = exports.indigo400 = exports.indigo300 = exports.indigo200 = exports.indigo100 = exports.grey900 = exports.grey800 = exports.grey700 = exports.grey600 = exports.grey500 = exports.grey50 = exports.grey400 = exports.grey300 = exports.grey200 = exports.grey100 = exports.greenA700 = exports.greenA400 = exports.greenA200 = exports.greenA100 = exports.green900 = undefined;
  exports.yellowA700 = exports.yellowA400 = exports.yellowA200 = exports.yellowA100 = exports.yellow900 = exports.yellow800 = exports.yellow700 = exports.yellow600 = exports.yellow500 = exports.yellow50 = exports.yellow400 = exports.yellow300 = exports.yellow200 = exports.yellow100 = exports.white = exports.transparent = exports.tealA700 = exports.tealA400 = exports.tealA200 = exports.tealA100 = exports.teal900 = exports.teal800 = exports.teal700 = exports.teal600 = exports.teal500 = exports.teal50 = exports.teal400 = exports.teal300 = exports.teal200 = exports.teal100 = exports.redA700 = exports.redA400 = exports.redA200 = exports.redA100 = exports.red900 = exports.red800 = exports.red700 = exports.red600 = exports.red500 = exports.red50 = exports.red400 = exports.red300 = exports.red200 = exports.red100 = exports.purpleA700 = exports.purpleA400 = exports.purpleA200 = exports.purpleA100 = exports.purple900 = exports.purple800 = exports.purple700 = exports.purple600 = exports.purple500 = exports.purple50 = exports.purple400 = exports.purple300 = exports.purple200 = undefined;
  var transparent = exports.transparent = 'rgba(255, 255, 255, 0)';
  var red50 = exports.red50 = '#ffebee';
  var red100 = exports.red100 = '#ffcdd2';
  var red200 = exports.red200 = '#ef9a9a';
  var red300 = exports.red300 = '#e57373';
  var red400 = exports.red400 = '#ef5350';
  var red500 = exports.red500 = '#f44336';
  var red600 = exports.red600 = '#e53935';
  var red700 = exports.red700 = '#d32f2f';
  var red800 = exports.red800 = '#c62828';
  var red900 = exports.red900 = '#b71c1c';
  var redA100 = exports.redA100 = '#ff8a80';
  var redA200 = exports.redA200 = '#ff5252';
  var redA400 = exports.redA400 = '#ff1744';
  var redA700 = exports.redA700 = '#d50000';
  var pink50 = exports.pink50 = '#fce4ec';
  var pink100 = exports.pink100 = '#f8bbd0';
  var pink200 = exports.pink200 = '#f48fb1';
  var pink300 = exports.pink300 = '#f06292';
  var pink400 = exports.pink400 = '#ec407a';
  var pink500 = exports.pink500 = '#e91e63';
  var pink600 = exports.pink600 = '#d81b60';
  var pink700 = exports.pink700 = '#c2185b';
  var pink800 = exports.pink800 = '#ad1457';
  var pink900 = exports.pink900 = '#880e4f';
  var pinkA100 = exports.pinkA100 = '#ff80ab';
  var pinkA200 = exports.pinkA200 = '#ff4081';
  var pinkA400 = exports.pinkA400 = '#f50057';
  var pinkA700 = exports.pinkA700 = '#c51162';
  var purple50 = exports.purple50 = '#f3e5f5';
  var purple100 = exports.purple100 = '#e1bee7';
  var purple200 = exports.purple200 = '#ce93d8';
  var purple300 = exports.purple300 = '#ba68c8';
  var purple400 = exports.purple400 = '#ab47bc';
  var purple500 = exports.purple500 = '#9c27b0';
  var purple600 = exports.purple600 = '#8e24aa';
  var purple700 = exports.purple700 = '#7b1fa2';
  var purple800 = exports.purple800 = '#6a1b9a';
  var purple900 = exports.purple900 = '#4a148c';
  var purpleA100 = exports.purpleA100 = '#ea80fc';
  var purpleA200 = exports.purpleA200 = '#e040fb';
  var purpleA400 = exports.purpleA400 = '#d500f9';
  var purpleA700 = exports.purpleA700 = '#aa00ff';
  var deepPurple50 = exports.deepPurple50 = '#ede7f6';
  var deepPurple100 = exports.deepPurple100 = '#d1c4e9';
  var deepPurple200 = exports.deepPurple200 = '#b39ddb';
  var deepPurple300 = exports.deepPurple300 = '#9575cd';
  var deepPurple400 = exports.deepPurple400 = '#7e57c2';
  var deepPurple500 = exports.deepPurple500 = '#673ab7';
  var deepPurple600 = exports.deepPurple600 = '#5e35b1';
  var deepPurple700 = exports.deepPurple700 = '#512da8';
  var deepPurple800 = exports.deepPurple800 = '#4527a0';
  var deepPurple900 = exports.deepPurple900 = '#311b92';
  var deepPurpleA100 = exports.deepPurpleA100 = '#b388ff';
  var deepPurpleA200 = exports.deepPurpleA200 = '#7c4dff';
  var deepPurpleA400 = exports.deepPurpleA400 = '#651fff';
  var deepPurpleA700 = exports.deepPurpleA700 = '#6200ea';
  var indigo50 = exports.indigo50 = '#e8eaf6';
  var indigo100 = exports.indigo100 = '#c5cae9';
  var indigo200 = exports.indigo200 = '#9fa8da';
  var indigo300 = exports.indigo300 = '#7986cb';
  var indigo400 = exports.indigo400 = '#5c6bc0';
  var indigo500 = exports.indigo500 = '#3f51b5';
  var indigo600 = exports.indigo600 = '#3949ab';
  var indigo700 = exports.indigo700 = '#303f9f';
  var indigo800 = exports.indigo800 = '#283593';
  var indigo900 = exports.indigo900 = '#1a237e';
  var indigoA100 = exports.indigoA100 = '#8c9eff';
  var indigoA200 = exports.indigoA200 = '#536dfe';
  var indigoA400 = exports.indigoA400 = '#3d5afe';
  var indigoA700 = exports.indigoA700 = '#304ffe';
  var blue50 = exports.blue50 = '#e3f2fd';
  var blue100 = exports.blue100 = '#bbdefb';
  var blue200 = exports.blue200 = '#90caf9';
  var blue300 = exports.blue300 = '#64b5f6';
  var blue400 = exports.blue400 = '#42a5f5';
  var blue500 = exports.blue500 = '#2196f3';
  var blue600 = exports.blue600 = '#1e88e5';
  var blue700 = exports.blue700 = '#1976d2';
  var blue800 = exports.blue800 = '#1565c0';
  var blue900 = exports.blue900 = '#0d47a1';
  var blueA100 = exports.blueA100 = '#82b1ff';
  var blueA200 = exports.blueA200 = '#448aff';
  var blueA400 = exports.blueA400 = '#2979ff';
  var blueA700 = exports.blueA700 = '#2962ff';
  var lightBlue50 = exports.lightBlue50 = '#e1f5fe';
  var lightBlue100 = exports.lightBlue100 = '#b3e5fc';
  var lightBlue200 = exports.lightBlue200 = '#81d4fa';
  var lightBlue300 = exports.lightBlue300 = '#4fc3f7';
  var lightBlue400 = exports.lightBlue400 = '#29b6f6';
  var lightBlue500 = exports.lightBlue500 = '#03a9f4';
  var lightBlue600 = exports.lightBlue600 = '#039be5';
  var lightBlue700 = exports.lightBlue700 = '#0288d1';
  var lightBlue800 = exports.lightBlue800 = '#0277bd';
  var lightBlue900 = exports.lightBlue900 = '#01579b';
  var lightBlueA100 = exports.lightBlueA100 = '#80d8ff';
  var lightBlueA200 = exports.lightBlueA200 = '#40c4ff';
  var lightBlueA400 = exports.lightBlueA400 = '#00b0ff';
  var lightBlueA700 = exports.lightBlueA700 = '#0091ea';
  var cyan50 = exports.cyan50 = '#e0f7fa';
  var cyan100 = exports.cyan100 = '#b2ebf2';
  var cyan200 = exports.cyan200 = '#80deea';
  var cyan300 = exports.cyan300 = '#4dd0e1';
  var cyan400 = exports.cyan400 = '#26c6da';
  var cyan500 = exports.cyan500 = '#00bcd4';
  var cyan600 = exports.cyan600 = '#00acc1';
  var cyan700 = exports.cyan700 = '#0097a7';
  var cyan800 = exports.cyan800 = '#00838f';
  var cyan900 = exports.cyan900 = '#006064';
  var cyanA100 = exports.cyanA100 = '#84ffff';
  var cyanA200 = exports.cyanA200 = '#18ffff';
  var cyanA400 = exports.cyanA400 = '#00e5ff';
  var cyanA700 = exports.cyanA700 = '#00b8d4';
  var teal50 = exports.teal50 = '#e0f2f1';
  var teal100 = exports.teal100 = '#b2dfdb';
  var teal200 = exports.teal200 = '#80cbc4';
  var teal300 = exports.teal300 = '#4db6ac';
  var teal400 = exports.teal400 = '#26a69a';
  var teal500 = exports.teal500 = '#009688';
  var teal600 = exports.teal600 = '#00897b';
  var teal700 = exports.teal700 = '#00796b';
  var teal800 = exports.teal800 = '#00695c';
  var teal900 = exports.teal900 = '#004d40';
  var tealA100 = exports.tealA100 = '#a7ffeb';
  var tealA200 = exports.tealA200 = '#64ffda';
  var tealA400 = exports.tealA400 = '#1de9b6';
  var tealA700 = exports.tealA700 = '#00bfa5';
  var green50 = exports.green50 = '#e8f5e9';
  var green100 = exports.green100 = '#c8e6c9';
  var green200 = exports.green200 = '#a5d6a7';
  var green300 = exports.green300 = '#81c784';
  var green400 = exports.green400 = '#66bb6a';
  var green500 = exports.green500 = '#4caf50';
  var green600 = exports.green600 = '#43a047';
  var green700 = exports.green700 = '#388e3c';
  var green800 = exports.green800 = '#2e7d32';
  var green900 = exports.green900 = '#1b5e20';
  var greenA100 = exports.greenA100 = '#b9f6ca';
  var greenA200 = exports.greenA200 = '#69f0ae';
  var greenA400 = exports.greenA400 = '#00e676';
  var greenA700 = exports.greenA700 = '#00c853';
  var lightGreen50 = exports.lightGreen50 = '#f1f8e9';
  var lightGreen100 = exports.lightGreen100 = '#dcedc8';
  var lightGreen200 = exports.lightGreen200 = '#c5e1a5';
  var lightGreen300 = exports.lightGreen300 = '#aed581';
  var lightGreen400 = exports.lightGreen400 = '#9ccc65';
  var lightGreen500 = exports.lightGreen500 = '#8bc34a';
  var lightGreen600 = exports.lightGreen600 = '#7cb342';
  var lightGreen700 = exports.lightGreen700 = '#689f38';
  var lightGreen800 = exports.lightGreen800 = '#558b2f';
  var lightGreen900 = exports.lightGreen900 = '#33691e';
  var lightGreenA100 = exports.lightGreenA100 = '#ccff90';
  var lightGreenA200 = exports.lightGreenA200 = '#b2ff59';
  var lightGreenA400 = exports.lightGreenA400 = '#76ff03';
  var lightGreenA700 = exports.lightGreenA700 = '#64dd17';
  var lime50 = exports.lime50 = '#f9fbe7';
  var lime100 = exports.lime100 = '#f0f4c3';
  var lime200 = exports.lime200 = '#e6ee9c';
  var lime300 = exports.lime300 = '#dce775';
  var lime400 = exports.lime400 = '#d4e157';
  var lime500 = exports.lime500 = '#cddc39';
  var lime600 = exports.lime600 = '#c0ca33';
  var lime700 = exports.lime700 = '#afb42b';
  var lime800 = exports.lime800 = '#9e9d24';
  var lime900 = exports.lime900 = '#827717';
  var limeA100 = exports.limeA100 = '#f4ff81';
  var limeA200 = exports.limeA200 = '#eeff41';
  var limeA400 = exports.limeA400 = '#c6ff00';
  var limeA700 = exports.limeA700 = '#aeea00';
  var yellow50 = exports.yellow50 = '#fffde7';
  var yellow100 = exports.yellow100 = '#fff9c4';
  var yellow200 = exports.yellow200 = '#fff59d';
  var yellow300 = exports.yellow300 = '#fff176';
  var yellow400 = exports.yellow400 = '#ffee58';
  var yellow500 = exports.yellow500 = '#ffeb3b';
  var yellow600 = exports.yellow600 = '#fdd835';
  var yellow700 = exports.yellow700 = '#fbc02d';
  var yellow800 = exports.yellow800 = '#f9a825';
  var yellow900 = exports.yellow900 = '#f57f17';
  var yellowA100 = exports.yellowA100 = '#ffff8d';
  var yellowA200 = exports.yellowA200 = '#ffff00';
  var yellowA400 = exports.yellowA400 = '#ffea00';
  var yellowA700 = exports.yellowA700 = '#ffd600';
  var amber50 = exports.amber50 = '#fff8e1';
  var amber100 = exports.amber100 = '#ffecb3';
  var amber200 = exports.amber200 = '#ffe082';
  var amber300 = exports.amber300 = '#ffd54f';
  var amber400 = exports.amber400 = '#ffca28';
  var amber500 = exports.amber500 = '#ffc107';
  var amber600 = exports.amber600 = '#ffb300';
  var amber700 = exports.amber700 = '#ffa000';
  var amber800 = exports.amber800 = '#ff8f00';
  var amber900 = exports.amber900 = '#ff6f00';
  var amberA100 = exports.amberA100 = '#ffe57f';
  var amberA200 = exports.amberA200 = '#ffd740';
  var amberA400 = exports.amberA400 = '#ffc400';
  var amberA700 = exports.amberA700 = '#ffab00';
  var orange50 = exports.orange50 = '#fff3e0';
  var orange100 = exports.orange100 = '#ffe0b2';
  var orange200 = exports.orange200 = '#ffcc80';
  var orange300 = exports.orange300 = '#ffb74d';
  var orange400 = exports.orange400 = '#ffa726';
  var orange500 = exports.orange500 = '#ff9800';
  var orange600 = exports.orange600 = '#fb8c00';
  var orange700 = exports.orange700 = '#f57c00';
  var orange800 = exports.orange800 = '#ef6c00';
  var orange900 = exports.orange900 = '#e65100';
  var orangeA100 = exports.orangeA100 = '#ffd180';
  var orangeA200 = exports.orangeA200 = '#ffab40';
  var orangeA400 = exports.orangeA400 = '#ff9100';
  var orangeA700 = exports.orangeA700 = '#ff6d00';
  var deepOrange50 = exports.deepOrange50 = '#fbe9e7';
  var deepOrange100 = exports.deepOrange100 = '#ffccbc';
  var deepOrange200 = exports.deepOrange200 = '#ffab91';
  var deepOrange300 = exports.deepOrange300 = '#ff8a65';
  var deepOrange400 = exports.deepOrange400 = '#ff7043';
  var deepOrange500 = exports.deepOrange500 = '#ff5722';
  var deepOrange600 = exports.deepOrange600 = '#f4511e';
  var deepOrange700 = exports.deepOrange700 = '#e64a19';
  var deepOrange800 = exports.deepOrange800 = '#d84315';
  var deepOrange900 = exports.deepOrange900 = '#bf360c';
  var deepOrangeA100 = exports.deepOrangeA100 = '#ff9e80';
  var deepOrangeA200 = exports.deepOrangeA200 = '#ff6e40';
  var deepOrangeA400 = exports.deepOrangeA400 = '#ff3d00';
  var deepOrangeA700 = exports.deepOrangeA700 = '#dd2c00';
  var brown50 = exports.brown50 = '#efebe9';
  var brown100 = exports.brown100 = '#d7ccc8';
  var brown200 = exports.brown200 = '#bcaaa4';
  var brown300 = exports.brown300 = '#a1887f';
  var brown400 = exports.brown400 = '#8d6e63';
  var brown500 = exports.brown500 = '#795548';
  var brown600 = exports.brown600 = '#6d4c41';
  var brown700 = exports.brown700 = '#5d4037';
  var brown800 = exports.brown800 = '#4e342e';
  var brown900 = exports.brown900 = '#3e2723';
  var blueGrey50 = exports.blueGrey50 = '#eceff1';
  var blueGrey100 = exports.blueGrey100 = '#cfd8dc';
  var blueGrey200 = exports.blueGrey200 = '#b0bec5';
  var blueGrey300 = exports.blueGrey300 = '#90a4ae';
  var blueGrey400 = exports.blueGrey400 = '#78909c';
  var blueGrey500 = exports.blueGrey500 = '#607d8b';
  var blueGrey600 = exports.blueGrey600 = '#546e7a';
  var blueGrey700 = exports.blueGrey700 = '#455a64';
  var blueGrey800 = exports.blueGrey800 = '#37474f';
  var blueGrey900 = exports.blueGrey900 = '#263238';
  var grey50 = exports.grey50 = '#fafafa';
  var grey100 = exports.grey100 = '#f5f5f5';
  var grey200 = exports.grey200 = '#eeeeee';
  var grey300 = exports.grey300 = '#e0e0e0';
  var grey400 = exports.grey400 = '#bdbdbd';
  var grey500 = exports.grey500 = '#9e9e9e';
  var grey600 = exports.grey600 = '#757575';
  var grey700 = exports.grey700 = '#616161';
  var grey800 = exports.grey800 = '#424242';
  var grey900 = exports.grey900 = '#212121';
  var black = exports.black = '#000000';
  var white = exports.white = '#ffffff';
},529,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MD2DarkTheme = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var _colors = require(_dependencyMap[2]);
  var _LightTheme = require(_dependencyMap[3]);
  var _fonts = _interopRequireDefault(require(_dependencyMap[4]));
  var MD2DarkTheme = exports.MD2DarkTheme = {
    ..._LightTheme.MD2LightTheme,
    dark: true,
    mode: 'adaptive',
    version: 2,
    isV3: false,
    colors: {
      ..._LightTheme.MD2LightTheme.colors,
      primary: '#BB86FC',
      accent: '#03dac6',
      background: '#121212',
      surface: '#121212',
      error: '#CF6679',
      onSurface: '#FFFFFF',
      text: _colors.white,
      disabled: (0, _color.default)(_colors.white).alpha(0.38).rgb().string(),
      placeholder: (0, _color.default)(_colors.white).alpha(0.54).rgb().string(),
      backdrop: (0, _color.default)(_colors.black).alpha(0.5).rgb().string(),
      notification: _colors.pinkA100,
      tooltip: 'rgba(230, 225, 229, 1)'
    },
    fonts: (0, _fonts.default)({
      isV3: false
    })
  };
},530,[1,515,529,528,526]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _SafeAreaProviderCompat = _interopRequireDefault(require(_dependencyMap[4]));
  var _settings = require(_dependencyMap[5]);
  var _theming = require(_dependencyMap[6]);
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[7]));
  var _PortalHost = _interopRequireDefault(require(_dependencyMap[8]));
  var _addEventListener = require(_dependencyMap[9]);
  var _jsxRuntime = require(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var PaperProvider = props => {
    var isOnlyVersionInTheme = props.theme && Object.keys(props.theme).length === 1 && props.theme.version;
    var colorSchemeName = (!props.theme || isOnlyVersionInTheme) && _reactNative.Appearance?.getColorScheme() || 'light';
    var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      reduceMotionEnabled = _React$useState2[0],
      setReduceMotionEnabled = _React$useState2[1];
    var _React$useState3 = React.useState(colorSchemeName),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      colorScheme = _React$useState4[0],
      setColorScheme = _React$useState4[1];
    var handleAppearanceChange = preferences => {
      var colorScheme = preferences.colorScheme;
      setColorScheme(colorScheme);
    };
    React.useEffect(() => {
      var subscription;
      if (!props.theme) {
        subscription = (0, _addEventListener.addEventListener)(_reactNative.AccessibilityInfo, 'reduceMotionChanged', setReduceMotionEnabled);
      }
      return () => {
        if (!props.theme) {
          subscription?.remove();
        }
      };
    }, [props.theme]);
    React.useEffect(() => {
      var appearanceSubscription;
      if (!props.theme || isOnlyVersionInTheme) {
        appearanceSubscription = _reactNative.Appearance?.addChangeListener(handleAppearanceChange);
      }
      return () => {
        if (!props.theme || isOnlyVersionInTheme) {
          if (appearanceSubscription) {
            appearanceSubscription.remove();
          } else {
            // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions
            _reactNative.Appearance?.removeChangeListener(handleAppearanceChange);
          }
        }
      };
    }, [props.theme, isOnlyVersionInTheme]);
    var getTheme = () => {
      var themeVersion = props.theme?.version || 3;
      var scheme = colorScheme || 'light';
      var defaultThemeBase = _theming.defaultThemesByVersion[themeVersion][scheme];
      var extendedThemeBase = {
        ...defaultThemeBase,
        ...props.theme,
        version: themeVersion,
        animation: {
          ...props.theme?.animation,
          scale: reduceMotionEnabled ? 0 : 1
        }
      };
      return {
        ...extendedThemeBase,
        isV3: extendedThemeBase.version === 3
      };
    };
    var children = props.children,
      settings = props.settings;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SafeAreaProviderCompat.default, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_PortalHost.default, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_settings.Provider, {
          value: {
            icon: _MaterialCommunityIcon.default,
            rippleEffectEnabled: true,
            ...settings
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_theming.ThemeProvider, {
            theme: getTheme(),
            children: children
          })
        })
      })
    });
  };
  var _default = exports.default = PaperProvider;
},531,[1,29,125,45,532,542,506,543,562,564,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = SafeAreaProviderCompat;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  var _reactNativeSafeAreaContext = require(_dependencyMap[2]);
  var _jsxRuntime = require(_dependencyMap[3]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Ported from @react-navigation https://github.com/react-navigation/react-navigation/blob/main/packages/elements/src/SafeAreaProviderCompat.tsx
   */

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
    _Dimensions$get$width = _Dimensions$get.width,
    width = _Dimensions$get$width === undefined ? 0 : _Dimensions$get$width,
    _Dimensions$get$heigh = _Dimensions$get.height,
    height = _Dimensions$get$heigh === undefined ? 0 : _Dimensions$get$heigh;

  // To support SSR on web, we need to have empty insets for initial values
  // Otherwise there can be mismatch between SSR and client output
  // We also need to specify empty values to support tests environments
  var initialMetrics = _reactNativeSafeAreaContext.initialWindowMetrics == null ? {
    frame: {
      x: 0,
      y: 0,
      width,
      height
    },
    insets: {
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    }
  } : _reactNativeSafeAreaContext.initialWindowMetrics;
  function SafeAreaProviderCompat(_ref) {
    var children = _ref.children,
      style = _ref.style;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNativeSafeAreaContext.SafeAreaInsetsContext.Consumer, {
      children: insets => {
        if (insets) {
          // If we already have insets, don't wrap the stack in another safe area provider
          // This avoids an issue with updates at the cost of potentially incorrect values
          // https://github.com/react-navigation/react-navigation/issues/174
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.container, style],
            children: children
          });
        }
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNativeSafeAreaContext.SafeAreaProvider, {
          initialMetrics: initialMetrics,
          style: style,
          children: children
        });
      }
    });
  }
  SafeAreaProviderCompat.initialMetrics = initialMetrics;
  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},532,[125,45,533,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _SafeAreaContext = require(_dependencyMap[0]);
  Object.keys(_SafeAreaContext).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _SafeAreaContext[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _SafeAreaContext[key];
      }
    });
  });
  var _SafeAreaView = require(_dependencyMap[1]);
  Object.keys(_SafeAreaView).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _SafeAreaView[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _SafeAreaView[key];
      }
    });
  });
  var _InitialWindow = require(_dependencyMap[2]);
  Object.keys(_InitialWindow).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _InitialWindow[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _InitialWindow[key];
      }
    });
  });
  var _SafeArea = require(_dependencyMap[3]);
  Object.keys(_SafeArea).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _SafeArea[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _SafeArea[key];
      }
    });
  });
},533,[534,537,539,541]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SafeAreaInsetsContext = exports.SafeAreaFrameContext = exports.SafeAreaContext = exports.SafeAreaConsumer = undefined;
  exports.SafeAreaProvider = SafeAreaProvider;
  exports.useSafeArea = useSafeArea;
  exports.useSafeAreaFrame = useSafeAreaFrame;
  exports.useSafeAreaInsets = useSafeAreaInsets;
  exports.withSafeAreaInsets = withSafeAreaInsets;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _NativeSafeAreaProvider = require(_dependencyMap[5]);
  var _jsxRuntime = require(_dependencyMap[6]);
  var _excluded = ["children", "initialMetrics", "initialSafeAreaInsets", "style"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var isDev = false;
  var SafeAreaInsetsContext = exports.SafeAreaInsetsContext = /*#__PURE__*/React.createContext(null);
  var SafeAreaFrameContext = exports.SafeAreaFrameContext = /*#__PURE__*/React.createContext(null);
  function SafeAreaProvider(_ref) {
    var children = _ref.children,
      initialMetrics = _ref.initialMetrics,
      initialSafeAreaInsets = _ref.initialSafeAreaInsets,
      style = _ref.style,
      others = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var parentInsets = useParentSafeAreaInsets();
    var parentFrame = useParentSafeAreaFrame();
    var _React$useState = React.useState(initialMetrics?.insets ?? initialSafeAreaInsets ?? parentInsets ?? null),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      insets = _React$useState2[0],
      setInsets = _React$useState2[1];
    var _React$useState3 = React.useState(initialMetrics?.frame ?? parentFrame ?? {
        // Backwards compat so we render anyway if we don't have frame.
        x: 0,
        y: 0,
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height
      }),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      frame = _React$useState4[0],
      setFrame = _React$useState4[1];
    var onInsetsChange = React.useCallback(event => {
      var _event$nativeEvent = event.nativeEvent,
        nextFrame = _event$nativeEvent.frame,
        nextInsets = _event$nativeEvent.insets;
      setFrame(curFrame => {
        if (
        // Backwards compat with old native code that won't send frame.
        nextFrame && (nextFrame.height !== curFrame.height || nextFrame.width !== curFrame.width || nextFrame.x !== curFrame.x || nextFrame.y !== curFrame.y)) {
          return nextFrame;
        } else {
          return curFrame;
        }
      });
      setInsets(curInsets => {
        if (!curInsets || nextInsets.bottom !== curInsets.bottom || nextInsets.left !== curInsets.left || nextInsets.right !== curInsets.right || nextInsets.top !== curInsets.top) {
          return nextInsets;
        } else {
          return curInsets;
        }
      });
    }, []);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_NativeSafeAreaProvider.NativeSafeAreaProvider, {
      style: [styles.fill, style],
      onInsetsChange: onInsetsChange,
      ...others,
      children: insets != null ? /*#__PURE__*/(0, _jsxRuntime.jsx)(SafeAreaFrameContext.Provider, {
        value: frame,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(SafeAreaInsetsContext.Provider, {
          value: insets,
          children: children
        })
      }) : null
    });
  }
  var styles = _reactNative.StyleSheet.create({
    fill: {
      flex: 1
    }
  });
  function useParentSafeAreaInsets() {
    return React.useContext(SafeAreaInsetsContext);
  }
  function useParentSafeAreaFrame() {
    return React.useContext(SafeAreaFrameContext);
  }
  var NO_INSETS_ERROR = 'No safe area value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.';
  function useSafeAreaInsets() {
    var insets = React.useContext(SafeAreaInsetsContext);
    if (insets == null) {
      throw new Error(NO_INSETS_ERROR);
    }
    return insets;
  }
  function useSafeAreaFrame() {
    var frame = React.useContext(SafeAreaFrameContext);
    if (frame == null) {
      throw new Error(NO_INSETS_ERROR);
    }
    return frame;
  }
  function withSafeAreaInsets(WrappedComponent) {
    return /*#__PURE__*/React.forwardRef((props, ref) => {
      var insets = useSafeAreaInsets();
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(WrappedComponent, {
        ...props,
        insets: insets,
        ref: ref
      });
    });
  }

  /**
   * @deprecated
   */
  function useSafeArea() {
    return useSafeAreaInsets();
  }

  /**
   * @deprecated
   */
  var SafeAreaConsumer = exports.SafeAreaConsumer = SafeAreaInsetsContext.Consumer;

  /**
   * @deprecated
   */
  var SafeAreaContext = exports.SafeAreaContext = SafeAreaInsetsContext;
},534,[1,29,203,125,45,535,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "NativeSafeAreaProvider", {
    enumerable: true,
    get: function () {
      return _NativeSafeAreaProvider.default;
    }
  });
  var _NativeSafeAreaProvider = _interopRequireDefault(require(_dependencyMap[1]));
},535,[1,536]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var _require = require(_dependencyMap[3]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var nativeComponentName = 'RNCSafeAreaProvider';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNCSafeAreaProvider',
    directEventTypes: {
      topInsetsChange: {
        registrationName: 'onInsetsChange'
      }
    },
    validAttributes: {
      ...ConditionallyIgnoredEventHandlers({
        onInsetsChange: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},536,[1,256,87,122]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SafeAreaView = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = _interopRequireWildcard(require(_dependencyMap[2]));
  var React = _react;
  var _NativeSafeAreaView = _interopRequireDefault(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  var _excluded = ["edges"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var defaultEdges = {
    top: 'additive',
    left: 'additive',
    bottom: 'additive',
    right: 'additive'
  };
  var SafeAreaView = exports.SafeAreaView = /*#__PURE__*/React.forwardRef((_ref, ref) => {
    var edges = _ref.edges,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var nativeEdges = (0, _react.useMemo)(() => {
      if (edges == null) {
        return defaultEdges;
      }
      var edgesObj = Array.isArray(edges) ? edges.reduce((acc, edge) => {
        acc[edge] = 'additive';
        return acc;
      }, {}) :
      // ts has trouble with refining readonly arrays.
      edges;

      // make sure that we always pass all edges, required for fabric
      var requiredEdges = {
        top: edgesObj.top ?? 'off',
        right: edgesObj.right ?? 'off',
        bottom: edgesObj.bottom ?? 'off',
        left: edgesObj.left ?? 'off'
      };
      return requiredEdges;
    }, [edges]);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_NativeSafeAreaView.default, {
      ...props,
      edges: nativeEdges,
      ref: ref
    });
  });
},537,[1,203,125,538,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var nativeComponentName = 'RNCSafeAreaView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNCSafeAreaView',
    validAttributes: {
      mode: true,
      edges: true
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},538,[1,256,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialWindowSafeAreaInsets = exports.initialWindowMetrics = undefined;
  var _NativeSafeAreaContext = _interopRequireDefault(require(_dependencyMap[1]));
  var initialWindowMetrics = exports.initialWindowMetrics = _NativeSafeAreaContext.default?.getConstants?.()?.initialWindowMetrics ?? null;

  /**
   * @deprecated
   */
  var initialWindowSafeAreaInsets = exports.initialWindowSafeAreaInsets = initialWindowMetrics?.insets;
},539,[1,540]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _reactNative = require(_dependencyMap[0]);
  var _default = exports.default = _reactNative.TurboModuleRegistry.get('RNCSafeAreaContext');
},540,[45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
},541,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SettingsContext = exports.Provider = exports.Consumer = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var SettingsContext = exports.SettingsContext = /*#__PURE__*/React.createContext({
    icon: _MaterialCommunityIcon.default,
    rippleEffectEnabled: true
  });
  var Provider = exports.Provider = SettingsContext.Provider,
    Consumer = exports.Consumer = SettingsContext.Consumer;
},542,[1,125,543]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.accessibilityProps = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _colors = require(_dependencyMap[4]);
  var _jsxRuntime = require(_dependencyMap[5]);
  var _excluded = ["name", "color", "size"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var MaterialCommunityIcons;
  try {
    // Optionally require vector-icons
    MaterialCommunityIcons = require(_dependencyMap[6]).default;
  } catch (e) {
    var isErrorLogged = false;

    // Fallback component for icons
    MaterialCommunityIcons = _ref => {
      var name = _ref.name,
        color = _ref.color,
        size = _ref.size,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      /* eslint-disable no-console */
      if (!isErrorLogged) {
        if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {
          console.error(e);
        }
        console.warn(`Tried to use the icon '${name}' in a component from 'react-native-paper', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.`, `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/docs/guides/icons`);
        isErrorLogged = true;
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
        ...rest,
        style: [styles.icon, {
          color,
          fontSize: size
        }]
        // @ts-expect-error: Text doesn't support this, but it seems to affect TouchableNativeFeedback
        ,
        pointerEvents: "none",
        selectable: false,
        children: "\u25A1"
      });
    };
  }
  var accessibilityProps = exports.accessibilityProps = {
    accessibilityElementsHidden: true,
    importantForAccessibility: 'no-hide-descendants'
  };
  var defaultIcon = _ref2 => {
    var name = _ref2.name,
      _ref2$color = _ref2.color,
      color = _ref2$color === undefined ? _colors.black : _ref2$color,
      size = _ref2.size,
      direction = _ref2.direction,
      allowFontScaling = _ref2.allowFontScaling,
      testID = _ref2.testID;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(MaterialCommunityIcons, {
      allowFontScaling: allowFontScaling,
      name: name,
      color: color,
      size: size,
      style: [{
        transform: [{
          scaleX: direction === 'rtl' ? -1 : 1
        }],
        lineHeight: size
      }, styles.icon],
      pointerEvents: "none",
      selectable: false,
      testID: testID,
      ...accessibilityProps
    });
  };
  var styles = _reactNative.StyleSheet.create({
    // eslint-disable-next-line react-native/no-color-literals
    icon: {
      backgroundColor: 'transparent'
    }
  });
  var _default = exports.default = defaultIcon;
},543,[1,203,125,45,529,243,544]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _MaterialCommunityIcons = _interopRequireDefault(require(_dependencyMap[1]));
  var _default = exports.default = _MaterialCommunityIcons.default;
},544,[1,545]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use client";

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createIconSet = _interopRequireDefault(require(_dependencyMap[1]));
  var _MaterialCommunityIcons = _interopRequireDefault(require(_dependencyMap[2]));
  var _MaterialCommunityIcons2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _default = exports.default = (0, _createIconSet.default)(_MaterialCommunityIcons2.default, 'material-community', _MaterialCommunityIcons.default);
},545,[1,546,560,561]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "DEFAULT_ICON_COLOR", {
    enumerable: true,
    get: function () {
      return _createIconSet.DEFAULT_ICON_COLOR;
    }
  });
  Object.defineProperty(exports, "DEFAULT_ICON_SIZE", {
    enumerable: true,
    get: function () {
      return _createIconSet.DEFAULT_ICON_SIZE;
    }
  });
  exports.default = _default;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var Font = _interopRequireWildcard(require(_dependencyMap[7]));
  var _react = _interopRequireDefault(require(_dependencyMap[8]));
  var _reactNative = require(_dependencyMap[9]);
  var _createIconSet = _interopRequireWildcard(require(_dependencyMap[10]));
  var _iconButton = _interopRequireDefault(require(_dependencyMap[11]));
  var _jsxRuntime = require(_dependencyMap[12]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _default(glyphMap, fontName, expoAssetId, fontStyle) {
    var _Icon;
    var font = {
      [fontName]: expoAssetId
    };
    var RNVIconComponent = (0, _createIconSet.default)(glyphMap, fontName, null, fontStyle);
    return _Icon = /*#__PURE__*/function (_React$Component) {
      function Icon() {
        var _this;
        (0, _classCallCheck2.default)(this, Icon);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper(this, Icon, [...args]);
        _this._mounted = false;
        _this.state = {
          fontIsLoaded: Font.isLoaded(fontName)
        };
        return _this;
      }
      (0, _inherits2.default)(Icon, _React$Component);
      return (0, _createClass2.default)(Icon, [{
        key: "componentDidMount",
        value: function () {
          var _componentDidMount = (0, _asyncToGenerator2.default)(function* () {
            this._mounted = true;
            if (!this.state.fontIsLoaded) {
              yield Font.loadAsync(font);
              /* eslint-disable react/no-did-mount-set-state */
              this._mounted && this.setState({
                fontIsLoaded: true
              });
            }
          });
          function componentDidMount() {
            return _componentDidMount.apply(this, arguments);
          }
          return componentDidMount;
        }()
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._mounted = false;
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          if (this._icon) {
            this._icon.setNativeProps(props);
          }
        }
      }, {
        key: "render",
        value: function render() {
          if (!this.state.fontIsLoaded) {
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {});
          }
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(RNVIconComponent, {
            ref: view => {
              this._icon = view;
            },
            ...this.props
          });
        }
      }]);
    }(_react.default.Component), _Icon.defaultProps = RNVIconComponent.defaultProps, _Icon.Button = (0, _iconButton.default)(_Icon), _Icon.glyphMap = glyphMap, _Icon.getRawGlyphMap = () => glyphMap, _Icon.getFontFamily = () => fontName, _Icon.loadFont = () => Font.loadAsync(font), _Icon.font = font, _Icon;
  }
},546,[1,40,10,11,50,52,55,547,125,45,555,558,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    useFonts: true
  };
  Object.defineProperty(exports, "useFonts", {
    enumerable: true,
    get: function () {
      return _FontHooks.useFonts;
    }
  });
  var _Font = require(_dependencyMap[0]);
  Object.keys(_Font).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _Font[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _Font[key];
      }
    });
  });
  var _FontHooks = require(_dependencyMap[1]);
},547,[548,554]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "FontDisplay", {
    enumerable: true,
    get: function () {
      return _Font.FontDisplay;
    }
  });
  exports.getLoadedFonts = getLoadedFonts;
  exports.isLoaded = isLoaded;
  exports.isLoading = isLoading;
  exports.loadAsync = loadAsync;
  exports.unloadAllAsync = unloadAllAsync;
  exports.unloadAsync = unloadAsync;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _expoModulesCore = require(_dependencyMap[2]);
  var _ExpoFontLoader = _interopRequireDefault(require(_dependencyMap[3]));
  var _Font = require(_dependencyMap[4]);
  var _FontLoader = require(_dependencyMap[5]);
  var _memory = require(_dependencyMap[6]);
  var _server = require(_dependencyMap[7]);
  // @needsAudit
  /**
   * Synchronously detect if the font for `fontFamily` has finished loading.
   *
   * @param fontFamily The name used to load the `FontResource`.
   * @return Returns `true` if the font has fully loaded.
   */
  function isLoaded(fontFamily) {
    return (0, _memory.isLoadedNative)(fontFamily);
  }
  /**
   * Synchronously get all the fonts that have been loaded.
   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.
   *
   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).
   */
  function getLoadedFonts() {
    return _ExpoFontLoader.default.getLoadedFonts();
  }
  // @needsAudit
  /**
   * Synchronously detect if the font for `fontFamily` is still being loaded.
   *
   * @param fontFamily The name used to load the `FontResource`.
   * @returns Returns `true` if the font is still loading.
   */
  function isLoading(fontFamily) {
    return fontFamily in _memory.loadPromises;
  }
  // @needsAudit
  /**
   * An efficient method for loading fonts from static or remote resources which can then be used
   * with the platform's native text elements. In the browser, this generates a `@font-face` block in
   * a shared style sheet for fonts. No CSS is needed to use this method.
   *
   * > **Note**: We recommend using the [config plugin](#configuration-in-appjsonappconfigjs) instead whenever possible.
   *
   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)
   * with React Native `Text` elements.
   * @param source The font asset that should be loaded into the `fontFamily` namespace.
   *
   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the
   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.
   */
  function loadAsync(fontFamilyOrFontMap, source) {
    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.
    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the
    // standard Expo SDK style guide.
    var isServer = false;
    if (typeof fontFamilyOrFontMap === 'object') {
      if (source) {
        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \`loadAsync()\` can only be used with a \`string\` value as the first argument.`));
      }
      var fontMap = fontFamilyOrFontMap;
      var names = Object.keys(fontMap);
      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});
    }
    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);
  }
  function loadFontInNamespaceAsync(_x, _x2) {
    return _loadFontInNamespaceAsync.apply(this, arguments);
  } // @needsAudit
  /**
   * Unloads all the custom fonts. This is used for testing.
   * @hidden
   */
  function _loadFontInNamespaceAsync() {
    _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {
      if (!source) {
        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { "${fontFamily}": ${source} }. Expected asset of type \`FontSource\` for fontFamily of name: "${fontFamily}"`);
      }
      // we consult the native module to see if the font is already loaded
      // this is slower than checking the cache but can help avoid loading the same font n times
      if (isLoaded(fontFamily)) {
        return;
      }
      if (_memory.loadPromises.hasOwnProperty(fontFamily)) {
        return _memory.loadPromises[fontFamily];
      }
      // Important: we want all callers that concurrently try to load the same font to await the same
      // promise. If we're here, we haven't created the promise yet. To ensure we create only one
      // promise in the program, we need to create the promise synchronously without yielding the event
      // loop from this point.
      var asset = (0, _FontLoader.getAssetForSource)(source);
      _memory.loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);
          (0, _memory.markLoaded)(fontFamily);
        } finally {
          delete _memory.loadPromises[fontFamily];
        }
      })();
      yield _memory.loadPromises[fontFamily];
    });
    return _loadFontInNamespaceAsync.apply(this, arguments);
  }
  function unloadAllAsync() {
    return _unloadAllAsync.apply(this, arguments);
  } // @needsAudit
  /**
   * Unload custom fonts matching the `fontFamily`s and display values provided.
   * This is used for testing.
   *
   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.
   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load
   * the custom font originally.
   * @hidden
   */
  function _unloadAllAsync() {
    _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {
      if (!_ExpoFontLoader.default.unloadAllAsync) {
        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');
      }
      if (Object.keys(_memory.loadPromises).length) {
        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);
      }
      (0, _memory.purgeCache)();
      yield _ExpoFontLoader.default.unloadAllAsync();
    });
    return _unloadAllAsync.apply(this, arguments);
  }
  function unloadAsync(_x3, _x4) {
    return _unloadAsync.apply(this, arguments);
  }
  function _unloadAsync() {
    _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {
      if (!_ExpoFontLoader.default.unloadAsync) {
        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');
      }
      if (typeof fontFamilyOrFontMap === 'object') {
        if (options) {
          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \`unloadAsync()\` can only be used with a \`string\` value as the first argument.`);
        }
        var fontMap = fontFamilyOrFontMap;
        var names = Object.keys(fontMap);
        yield Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));
        return;
      }
      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);
    });
    return _unloadAsync.apply(this, arguments);
  }
  function unloadFontInNamespaceAsync(_x5, _x6) {
    return _unloadFontInNamespaceAsync.apply(this, arguments);
  }
  function _unloadFontInNamespaceAsync() {
    _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {
      if (!isLoaded(fontFamily)) {
        return;
      } else {
        (0, _memory.purgeFontFamilyFromCache)(fontFamily);
      }
      // Important: we want all callers that concurrently try to load the same font to await the same
      // promise. If we're here, we haven't created the promise yet. To ensure we create only one
      // promise in the program, we need to create the promise synchronously without yielding the event
      // loop from this point.
      if (!fontFamily) {
        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);
      }
      yield _ExpoFontLoader.default.unloadAsync(fontFamily, options);
    });
    return _unloadFontInNamespaceAsync.apply(this, arguments);
  }
},548,[1,40,42,549,550,551,552,553]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _expoModulesCore = require(_dependencyMap[0]);
  var _default = exports.default = (0, _expoModulesCore.requireNativeModule)('ExpoFontLoader');
},549,[42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FontDisplay = undefined;
  // @needsAudit
  /**
   * Sets the [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display)
   * for a given typeface. The default font value on web is `FontDisplay.AUTO`.
   * Even though setting the `fontDisplay` does nothing on native platforms, the default behavior
   * emulates `FontDisplay.SWAP` on flagship devices like iOS, Samsung, Pixel, etc. Default
   * functionality varies on One Plus devices. In the browser this value is set in the generated
   * `@font-face` CSS block and not as a style property meaning you cannot dynamically change this
   * value based on the element it's used in.
   * @platform web
   */
  var FontDisplay;
  (function (FontDisplay) {
    /**
     * __(Default)__ The font display strategy is defined by the user agent or platform.
     * This generally defaults to the text being invisible until the font is loaded.
     * Good for buttons or banners that require a specific treatment.
     */
    FontDisplay["AUTO"] = "auto";
    /**
     * Fallback text is rendered immediately with a default font while the desired font is loaded.
     * This is good for making the content appear to load instantly and is usually preferred.
     */
    FontDisplay["SWAP"] = "swap";
    /**
     * The text will be invisible until the font has loaded. If the font fails to load then nothing
     * will appear - it's best to turn this off when debugging missing text.
     */
    FontDisplay["BLOCK"] = "block";
    /**
     * Splits the behavior between `SWAP` and `BLOCK`.
     * There will be a [100ms timeout](https://developers.google.com/web/updates/2016/02/font-display?hl=en)
     * where the text with a custom font is invisible, after that the text will either swap to the
     * styled text or it'll show the unstyled text and continue to load the custom font. This is good
     * for buttons that need a custom font but should also be quickly available to screen-readers.
     */
    FontDisplay["FALLBACK"] = "fallback";
    /**
     * This works almost identically to `FALLBACK`, the only difference is that the browser will
     * decide to load the font based on slow connection speed or critical resource demand.
     */
    FontDisplay["OPTIONAL"] = "optional";
  })(FontDisplay || (exports.FontDisplay = FontDisplay = {}));
},550,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAssetForSource = getAssetForSource;
  exports.loadSingleFontAsync = loadSingleFontAsync;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _expoAsset = require(_dependencyMap[2]);
  var _expoModulesCore = require(_dependencyMap[3]);
  var _ExpoFontLoader = _interopRequireDefault(require(_dependencyMap[4]));
  function getAssetForSource(source) {
    if (source instanceof _expoAsset.Asset) {
      return source;
    }
    if (typeof source === 'string') {
      return _expoAsset.Asset.fromURI(source);
    } else if (typeof source === 'number') {
      return _expoAsset.Asset.fromModule(source);
    } else if (typeof source === 'object' && typeof source.uri !== 'undefined') {
      return getAssetForSource(source.uri);
    }
    // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'
    // We can't have a string here, we would have thrown an error if !isWeb
    // or returned Asset.fromModule if isWeb.
    return source;
  }
  function loadSingleFontAsync(_x, _x2) {
    return _loadSingleFontAsync.apply(this, arguments);
  }
  function _loadSingleFontAsync() {
    _loadSingleFontAsync = (0, _asyncToGenerator2.default)(function* (name, input) {
      var asset = input;
      if (!asset.downloadAsync) {
        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, '`loadSingleFontAsync` expected resource of type `Asset` from expo-asset on native');
      }
      yield asset.downloadAsync();
      if (!asset.downloaded) {
        throw new _expoModulesCore.CodedError(`ERR_DOWNLOAD`, `Failed to download asset for font "${name}"`);
      }
      yield _ExpoFontLoader.default.loadAsync(name, asset.localUri);
    });
    return _loadSingleFontAsync.apply(this, arguments);
  }
},551,[1,40,37,42,549]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isLoadedInCache = isLoadedInCache;
  exports.isLoadedNative = isLoadedNative;
  exports.loadPromises = undefined;
  exports.markLoaded = markLoaded;
  exports.purgeCache = purgeCache;
  exports.purgeFontFamilyFromCache = purgeFontFamilyFromCache;
  var _ExpoFontLoader = _interopRequireDefault(require(_dependencyMap[1]));
  var loadPromises = exports.loadPromises = {};
  // cache the value on the js side for fast access to the fonts that are loaded
  var cache = {};
  function markLoaded(fontFamily) {
    cache[fontFamily] = true;
  }
  function isLoadedInCache(fontFamily) {
    return fontFamily in cache;
  }
  function isLoadedNative(fontFamily) {
    if (isLoadedInCache(fontFamily)) {
      return true;
    } else {
      var loadedNativeFonts = _ExpoFontLoader.default.getLoadedFonts();
      loadedNativeFonts.forEach(font => {
        cache[font] = true;
      });
      return fontFamily in cache;
    }
  }
  function purgeFontFamilyFromCache(fontFamily) {
    delete cache[fontFamily];
  }
  function purgeCache() {
    cache = {};
  }
},552,[1,549]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getServerResources = getServerResources;
  exports.registerStaticFont = registerStaticFont;
  exports.resetServerContext = resetServerContext;
  var _expoModulesCore = require(_dependencyMap[1]);
  var _ExpoFontLoader = _interopRequireDefault(require(_dependencyMap[2]));
  var _FontLoader = require(_dependencyMap[3]);
  /**
   * @returns the server resources that should be statically extracted.
   * @private
   */
  function getServerResources() {
    return _ExpoFontLoader.default.getServerResources();
  }
  /**
   * @returns clear the server resources from the global scope.
   * @private
   */
  function resetServerContext() {
    return _ExpoFontLoader.default.resetServerContext();
  }
  function registerStaticFont(fontFamily, source) {
    // MUST BE A SYNC FUNCTION!
    if (!source) {
      throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { "${fontFamily}": ${source} }. Expected asset of type \`FontSource\` for fontFamily of name: "${fontFamily}"`);
    }
    var asset = (0, _FontLoader.getAssetForSource)(source);
    (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);
  }
},553,[1,42,549,551]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.useFonts = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = require(_dependencyMap[2]);
  var _Font = require(_dependencyMap[3]);
  function isMapLoaded(map) {
    if (typeof map === 'string') {
      return (0, _Font.isLoaded)(map);
    } else {
      return Object.keys(map).every(fontFamily => (0, _Font.isLoaded)(fontFamily));
    }
  }
  function useRuntimeFonts(map) {
    var _useState = (0, _react.useState)(
      // For web rehydration, we need to check if the fonts are already loaded during the static render.
      // Native will also benefit from this optimization.
      isMapLoaded(map)),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      loaded = _useState2[0],
      setLoaded = _useState2[1];
    var _useState3 = (0, _react.useState)(null),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      error = _useState4[0],
      setError = _useState4[1];
    (0, _react.useEffect)(() => {
      var isMounted = true;
      (0, _Font.loadAsync)(map).then(() => {
        if (isMounted) {
          setLoaded(true);
        }
      }).catch(error => {
        if (isMounted) {
          setError(error);
        }
      });
      return () => {
        isMounted = false;
      };
    }, []);
    return [loaded, error];
  }
  function useStaticFonts(map) {
    (0, _Font.loadAsync)(map);
    return [true, null];
  }
  // @needsAudit
  /**
   * Load a map of fonts with [`loadAsync`](#loadasyncfontfamilyorfontmap-source). This returns a `boolean` if the fonts are
   * loaded and ready to use. It also returns an error if something went wrong, to use in development.
   *
   * > Note, the fonts are not "reloaded" when you dynamically change the font map.
   *
   * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can
   * use the key in the `fontFamily` style prop of a `Text` element.
   *
   * @return
   * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished
   * loading.
   * - __error__ (`Error | null`) - An error encountered when loading the fonts.
   *
   * @example
   * ```tsx
   * const [loaded, error] = useFonts({ ... });
   * ```
   */
  var useFonts = exports.useFonts = typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;
},554,[1,29,125,548]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NativeIconAPI = exports.DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_COLOR = undefined;
  exports.default = createIconSet;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _react = _interopRequireWildcard(require(_dependencyMap[8]));
  var _reactNative = require(_dependencyMap[9]);
  var _ensureNativeModuleAvailable = _interopRequireDefault(require(_dependencyMap[10]));
  var _createIconSourceCache = _interopRequireDefault(require(_dependencyMap[11]));
  var _iconButton = _interopRequireDefault(require(_dependencyMap[12]));
  var _jsxRuntime = require(_dependencyMap[13]);
  var _excluded = ["name", "size", "color", "style", "children"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var NativeIconAPI = exports.NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
  var DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_SIZE = 12;
  var DEFAULT_ICON_COLOR = exports.DEFAULT_ICON_COLOR = 'black';
  function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {
    // Android doesn't care about actual fontFamily name, it will only look in fonts folder.
    var fontBasename = fontFile ? fontFile.replace(/\.(otf|ttf)$/, '') : fontFamily;
    var fontReference = fontFamily;
    var Icon = /*#__PURE__*/function (_PureComponent) {
      function Icon() {
        var _this;
        (0, _classCallCheck2.default)(this, Icon);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper(this, Icon, [...args]);
        _this.root = null;
        return _this;
      }
      (0, _inherits2.default)(Icon, _PureComponent);
      return (0, _createClass2.default)(Icon, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
            name = _this$props.name,
            size = _this$props.size,
            color = _this$props.color,
            style = _this$props.style,
            children = _this$props.children,
            props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
          var glyph = name ? glyphMap[name] || '?' : '';
          if (typeof glyph === 'number') {
            glyph = String.fromCodePoint(glyph);
          }
          var styleDefaults = {
            fontSize: size,
            color
          };
          var styleOverrides = {
            fontFamily: fontReference,
            fontWeight: 'normal',
            fontStyle: 'normal'
          };
          props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];
          return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Text, {
            selectable: false,
            ...props,
            children: [glyph, children]
          });
        }
      }]);
    }(_react.PureComponent);
    Icon.defaultProps = {
      size: DEFAULT_ICON_SIZE,
      allowFontScaling: false
    };
    var imageSourceCache = (0, _createIconSourceCache.default)();
    function resolveGlyph(name) {
      var glyph = glyphMap[name] || '?';
      if (typeof glyph === 'number') {
        return String.fromCodePoint(glyph);
      }
      return glyph;
    }
    function getImageSourceSync(name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      (0, _ensureNativeModuleAvailable.default)();
      var glyph = resolveGlyph(name);
      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = `${glyph}:${size}:${processedColor}`;
      if (imageSourceCache.has(cacheKey)) {
        return imageSourceCache.get(cacheKey);
      }
      try {
        var imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);
        var value = {
          uri: imagePath,
          scale: _reactNative.PixelRatio.get()
        };
        imageSourceCache.setValue(cacheKey, value);
        return value;
      } catch (error) {
        imageSourceCache.setError(cacheKey, error);
        throw error;
      }
    }
    function getImageSource(_x) {
      return _getImageSource.apply(this, arguments);
    }
    function _getImageSource() {
      _getImageSource = (0, _asyncToGenerator2.default)(function* (name) {
        var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
        var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
        (0, _ensureNativeModuleAvailable.default)();
        var glyph = resolveGlyph(name);
        var processedColor = (0, _reactNative.processColor)(color);
        var cacheKey = `${glyph}:${size}:${processedColor}`;
        if (imageSourceCache.has(cacheKey)) {
          return imageSourceCache.get(cacheKey);
        }
        try {
          var imagePath = yield NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor);
          var value = {
            uri: imagePath,
            scale: _reactNative.PixelRatio.get()
          };
          imageSourceCache.setValue(cacheKey, value);
          return value;
        } catch (error) {
          imageSourceCache.setError(cacheKey, error);
          throw error;
        }
      });
      return _getImageSource.apply(this, arguments);
    }
    function loadFont() {
      return _loadFont.apply(this, arguments);
    }
    function _loadFont() {
      _loadFont = (0, _asyncToGenerator2.default)(function* () {
        var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;
        {
          (0, _ensureNativeModuleAvailable.default)();
          if (!file) {
            throw new Error('Unable to load font, because no file was specified. ');
          }
          yield NativeIconAPI.loadFontWithFileName(...file.split('.'));
        }
      });
      return _loadFont.apply(this, arguments);
    }
    function hasIcon(name) {
      return Object.prototype.hasOwnProperty.call(glyphMap, name);
    }
    function getRawGlyphMap() {
      return glyphMap;
    }
    function getFontFamily() {
      return fontReference;
    }
    Icon.Button = (0, _iconButton.default)(Icon);
    Icon.getImageSource = getImageSource;
    Icon.getImageSourceSync = getImageSourceSync;
    Icon.loadFont = loadFont;
    Icon.hasIcon = hasIcon;
    Icon.getRawGlyphMap = getRawGlyphMap;
    Icon.getFontFamily = getFontFamily;
    return Icon;
  }
},555,[1,40,203,10,11,50,52,55,125,45,556,557,558,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ensureNativeModuleAvailable;
  var _reactNative = require(_dependencyMap[0]);
  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
  function ensureNativeModuleAvailable() {
    if (!NativeIconAPI) {
      throw new Error('The native RNVectorIcons API is not available, did you properly integrate the module? Please verify your autolinking setup and recompile.');
    }
  }
},556,[45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconSourceCache;
  var TYPE_VALUE = 'value';
  var TYPE_ERROR = 'error';
  function createIconSourceCache() {
    var cache = new Map();
    var setValue = (key, value) => cache.set(key, {
      type: TYPE_VALUE,
      data: value
    });
    var setError = (key, error) => cache.set(key, {
      type: TYPE_ERROR,
      data: error
    });
    var has = key => cache.has(key);
    var get = key => {
      if (!cache.has(key)) {
        return undefined;
      }
      var _cache$get = cache.get(key),
        type = _cache$get.type,
        data = _cache$get.data;
      if (type === TYPE_ERROR) {
        throw data;
      }
      return data;
    };
    return {
      setValue,
      setError,
      has,
      get
    };
  }
},557,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconButtonComponent;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _react = _interopRequireWildcard(require(_dependencyMap[7]));
  var _propTypes = _interopRequireDefault(require(_dependencyMap[8]));
  var _reactNative = require(_dependencyMap[9]);
  var _objectUtils = require(_dependencyMap[10]);
  var _jsxRuntime = require(_dependencyMap[11]);
  var _excluded = ["style", "iconStyle", "children"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center',
      padding: 8
    },
    touchable: {
      overflow: 'hidden'
    },
    icon: {
      marginRight: 10
    },
    text: {
      fontWeight: '600',
      backgroundColor: 'transparent'
    }
  });
  var IOS7_BLUE = '#007AFF';
  var TEXT_PROP_NAMES = ['ellipsizeMode', 'numberOfLines', 'textBreakStrategy', 'selectable', 'suppressHighlighting', 'allowFontScaling', 'adjustsFontSizeToFit', 'minimumFontScale'];
  var TOUCHABLE_PROP_NAMES = ['accessible', 'accessibilityLabel', 'accessibilityHint', 'accessibilityComponentType', 'accessibilityRole', 'accessibilityStates', 'accessibilityTraits', 'onFocus', 'onBlur', 'disabled', 'onPress', 'onPressIn', 'onPressOut', 'onLayout', 'onLongPress', 'nativeID', 'testID', 'delayPressIn', 'delayPressOut', 'delayLongPress', 'activeOpacity', 'underlayColor', 'selectionColor', 'onShowUnderlay', 'onHideUnderlay', 'hasTVPreferredFocus', 'tvParallaxProperties'];
  function createIconButtonComponent(Icon) {
    var _IconButton;
    return _IconButton = /*#__PURE__*/function (_PureComponent) {
      function IconButton() {
        (0, _classCallCheck2.default)(this, IconButton);
        return _callSuper(this, IconButton, arguments);
      }
      (0, _inherits2.default)(IconButton, _PureComponent);
      return (0, _createClass2.default)(IconButton, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
            style = _this$props.style,
            iconStyle = _this$props.iconStyle,
            children = _this$props.children,
            restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
          var iconProps = (0, _objectUtils.pick)(restProps, TEXT_PROP_NAMES, 'style', 'name', 'size', 'color');
          var touchableProps = (0, _objectUtils.pick)(restProps, TOUCHABLE_PROP_NAMES);
          var props = (0, _objectUtils.omit)(restProps, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
          iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;
          var colorStyle = (0, _objectUtils.pick)(this.props, 'color');
          var blockStyle = (0, _objectUtils.pick)(this.props, 'backgroundColor', 'borderRadius');
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TouchableHighlight, {
            style: [styles.touchable, blockStyle],
            ...touchableProps,
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: [styles.container, blockStyle, style],
              ...props,
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Icon, {
                ...iconProps
              }), typeof children === 'string' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.text, colorStyle],
                selectable: false,
                children: children
              }) : children]
            })
          });
        }
      }]);
    }(_react.PureComponent), _IconButton.propTypes = {
      backgroundColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      borderRadius: _propTypes.default.number,
      color: _propTypes.default.any,
      // eslint-disable-line react/forbid-prop-types
      size: _propTypes.default.number,
      iconStyle: _propTypes.default.any,
      // eslint-disable-line react/forbid-prop-types
      style: _propTypes.default.any,
      // eslint-disable-line react/forbid-prop-types
      children: _propTypes.default.node
    }, _IconButton.defaultProps = {
      backgroundColor: IOS7_BLUE,
      borderRadius: 5,
      color: 'white',
      size: 20
    }, _IconButton;
  }
},558,[1,203,10,11,50,52,55,125,284,45,559,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var pick = function (obj) {
    for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      keys[_key - 1] = arguments[_key];
    }
    return keys.flat().filter(key => Object.prototype.hasOwnProperty.call(obj, key)).reduce((acc, key) => {
      acc[key] = obj[key];
      return acc;
    }, {});
  };
  var omit = function (obj) {
    for (var _len2 = arguments.length, keysToOmit = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      keysToOmit[_key2 - 1] = arguments[_key2];
    }
    var keysToOmitSet = new Set(keysToOmit.flat());
    return Object.getOwnPropertyNames(obj).filter(key => !keysToOmitSet.has(key)).reduce((acc, key) => {
      acc[key] = obj[key];
      return acc;
    }, {});
  };
  module.exports = {
    pick,
    omit
  };
},559,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/Fonts",
    "scales": [1],
    "hash": "b62641afc9ab487008e996a5c5865e56",
    "name": "MaterialCommunityIcons",
    "type": "ttf",
    "fileHashes": ["b62641afc9ab487008e996a5c5865e56"]
  });
},560,[41]);
__d(function(global, require, _importDefaultUnused, _importAllUnused, module, exports, _dependencyMapUnused) {
  module.exports = {
  "ab-testing": 983497,
  "abacus": 988896,
  "abjad-arabic": 987944,
  "abjad-hebrew": 987945,
  "abugida-devanagari": 987946,
  "abugida-thai": 987947,
  "access-point": 983043,
  "access-point-check": 988472,
  "access-point-minus": 988473,
  "access-point-network": 983042,
  "access-point-network-off": 986081,
  "access-point-off": 988433,
  "access-point-plus": 988474,
  "access-point-remove": 988475,
  "account": 983044,
  "account-alert": 983045,
  "account-alert-outline": 985936,
  "account-arrow-down": 989288,
  "account-arrow-down-outline": 989289,
  "account-arrow-left": 985937,
  "account-arrow-left-outline": 985938,
  "account-arrow-right": 985939,
  "account-arrow-right-outline": 985940,
  "account-arrow-up": 989287,
  "account-arrow-up-outline": 989290,
  "account-box": 983046,
  "account-box-multiple": 985396,
  "account-box-multiple-outline": 987146,
  "account-box-outline": 983047,
  "account-cancel": 987871,
  "account-cancel-outline": 987872,
  "account-cash": 987287,
  "account-cash-outline": 987288,
  "account-check": 983048,
  "account-check-outline": 986082,
  "account-child": 985737,
  "account-child-circle": 985738,
  "account-child-outline": 987336,
  "account-circle": 983049,
  "account-circle-outline": 985941,
  "account-clock": 985942,
  "account-clock-outline": 985943,
  "account-cog": 988016,
  "account-cog-outline": 988017,
  "account-convert": 983050,
  "account-convert-outline": 987905,
  "account-cowboy-hat": 986779,
  "account-cowboy-hat-outline": 989171,
  "account-details": 984625,
  "account-details-outline": 988018,
  "account-edit": 984764,
  "account-edit-outline": 987131,
  "account-eye": 984096,
  "account-eye-outline": 987771,
  "account-filter": 985398,
  "account-filter-outline": 987037,
  "account-group": 985161,
  "account-group-outline": 985944,
  "account-hard-hat": 984501,
  "account-heart": 985241,
  "account-heart-outline": 986083,
  "account-injury": 989205,
  "account-injury-outline": 989206,
  "account-key": 983051,
  "account-key-outline": 986084,
  "account-lock": 987486,
  "account-lock-open": 989536,
  "account-lock-open-outline": 989537,
  "account-lock-outline": 987487,
  "account-minus": 983053,
  "account-minus-outline": 985836,
  "account-multiple": 983054,
  "account-multiple-check": 985285,
  "account-multiple-check-outline": 987646,
  "account-multiple-minus": 984531,
  "account-multiple-minus-outline": 986085,
  "account-multiple-outline": 983055,
  "account-multiple-plus": 983056,
  "account-multiple-plus-outline": 985088,
  "account-multiple-remove": 987658,
  "account-multiple-remove-outline": 987659,
  "account-music": 985091,
  "account-music-outline": 986345,
  "account-network": 983057,
  "account-network-outline": 986086,
  "account-off": 983058,
  "account-off-outline": 986087,
  "account-outline": 983059,
  "account-plus": 983060,
  "account-plus-outline": 985089,
  "account-question": 985945,
  "account-question-outline": 985946,
  "account-reactivate": 988459,
  "account-reactivate-outline": 988460,
  "account-remove": 983061,
  "account-remove-outline": 985837,
  "account-search": 983062,
  "account-search-outline": 985397,
  "account-settings": 984624,
  "account-settings-outline": 987337,
  "account-star": 983063,
  "account-star-outline": 986088,
  "account-supervisor": 985739,
  "account-supervisor-circle": 985740,
  "account-supervisor-circle-outline": 988396,
  "account-supervisor-outline": 987437,
  "account-switch": 983065,
  "account-switch-outline": 984267,
  "account-sync": 989467,
  "account-sync-outline": 989468,
  "account-tie": 986339,
  "account-tie-hat": 989336,
  "account-tie-hat-outline": 989337,
  "account-tie-outline": 987338,
  "account-tie-voice": 987912,
  "account-tie-voice-off": 987914,
  "account-tie-voice-off-outline": 987915,
  "account-tie-voice-outline": 987913,
  "account-voice": 984523,
  "account-voice-off": 986836,
  "account-wrench": 989338,
  "account-wrench-outline": 989339,
  "adjust": 983066,
  "advertisements": 989482,
  "advertisements-off": 989483,
  "air-conditioner": 983067,
  "air-filter": 986435,
  "air-horn": 986540,
  "air-humidifier": 987289,
  "air-humidifier-off": 988262,
  "air-purifier": 986436,
  "airbag": 986089,
  "airballoon": 983068,
  "airballoon-outline": 987147,
  "airplane": 983069,
  "airplane-alert": 989306,
  "airplane-check": 989307,
  "airplane-clock": 989308,
  "airplane-cog": 989309,
  "airplane-edit": 989310,
  "airplane-landing": 984532,
  "airplane-marker": 989311,
  "airplane-minus": 989312,
  "airplane-off": 983070,
  "airplane-plus": 989313,
  "airplane-remove": 989314,
  "airplane-search": 989315,
  "airplane-settings": 989316,
  "airplane-takeoff": 984533,
  "airport": 985163,
  "alarm": 983072,
  "alarm-bell": 984974,
  "alarm-check": 983073,
  "alarm-light": 984975,
  "alarm-light-off": 988958,
  "alarm-light-off-outline": 988959,
  "alarm-light-outline": 986090,
  "alarm-multiple": 983074,
  "alarm-note": 986737,
  "alarm-note-off": 986738,
  "alarm-off": 983075,
  "alarm-panel": 988612,
  "alarm-panel-outline": 988613,
  "alarm-plus": 983076,
  "alarm-snooze": 984718,
  "album": 983077,
  "alert": 983078,
  "alert-box": 983079,
  "alert-box-outline": 986340,
  "alert-circle": 983080,
  "alert-circle-check": 987629,
  "alert-circle-check-outline": 987630,
  "alert-circle-outline": 984534,
  "alert-decagram": 984765,
  "alert-decagram-outline": 986341,
  "alert-minus": 988347,
  "alert-minus-outline": 988350,
  "alert-octagon": 983081,
  "alert-octagon-outline": 986342,
  "alert-octagram": 984935,
  "alert-octagram-outline": 986343,
  "alert-outline": 983082,
  "alert-plus": 988346,
  "alert-plus-outline": 988349,
  "alert-remove": 988348,
  "alert-remove-outline": 988351,
  "alert-rhombus": 987598,
  "alert-rhombus-outline": 987599,
  "alien": 985242,
  "alien-outline": 987339,
  "align-horizontal-center": 987587,
  "align-horizontal-distribute": 989538,
  "align-horizontal-left": 987586,
  "align-horizontal-right": 987588,
  "align-vertical-bottom": 987589,
  "align-vertical-center": 987590,
  "align-vertical-distribute": 989539,
  "align-vertical-top": 987591,
  "all-inclusive": 984766,
  "all-inclusive-box": 989325,
  "all-inclusive-box-outline": 989326,
  "allergy": 987736,
  "alpha": 983083,
  "alpha-a": 985838,
  "alpha-a-box": 985864,
  "alpha-a-box-outline": 986091,
  "alpha-a-circle": 986092,
  "alpha-a-circle-outline": 986093,
  "alpha-b": 985839,
  "alpha-b-box": 985865,
  "alpha-b-box-outline": 986094,
  "alpha-b-circle": 986095,
  "alpha-b-circle-outline": 986096,
  "alpha-c": 985840,
  "alpha-c-box": 985866,
  "alpha-c-box-outline": 986097,
  "alpha-c-circle": 986098,
  "alpha-c-circle-outline": 986099,
  "alpha-d": 985841,
  "alpha-d-box": 985867,
  "alpha-d-box-outline": 986100,
  "alpha-d-circle": 986101,
  "alpha-d-circle-outline": 986102,
  "alpha-e": 985842,
  "alpha-e-box": 985868,
  "alpha-e-box-outline": 986103,
  "alpha-e-circle": 986104,
  "alpha-e-circle-outline": 986105,
  "alpha-f": 985843,
  "alpha-f-box": 985869,
  "alpha-f-box-outline": 986106,
  "alpha-f-circle": 986107,
  "alpha-f-circle-outline": 986108,
  "alpha-g": 985844,
  "alpha-g-box": 985870,
  "alpha-g-box-outline": 986109,
  "alpha-g-circle": 986110,
  "alpha-g-circle-outline": 986111,
  "alpha-h": 985845,
  "alpha-h-box": 985871,
  "alpha-h-box-outline": 986112,
  "alpha-h-circle": 986113,
  "alpha-h-circle-outline": 986114,
  "alpha-i": 985846,
  "alpha-i-box": 985872,
  "alpha-i-box-outline": 986115,
  "alpha-i-circle": 986116,
  "alpha-i-circle-outline": 986117,
  "alpha-j": 985847,
  "alpha-j-box": 985873,
  "alpha-j-box-outline": 986118,
  "alpha-j-circle": 986119,
  "alpha-j-circle-outline": 986120,
  "alpha-k": 985848,
  "alpha-k-box": 985874,
  "alpha-k-box-outline": 986121,
  "alpha-k-circle": 986122,
  "alpha-k-circle-outline": 986123,
  "alpha-l": 985849,
  "alpha-l-box": 985875,
  "alpha-l-box-outline": 986124,
  "alpha-l-circle": 986125,
  "alpha-l-circle-outline": 986126,
  "alpha-m": 985850,
  "alpha-m-box": 985876,
  "alpha-m-box-outline": 986127,
  "alpha-m-circle": 986128,
  "alpha-m-circle-outline": 986129,
  "alpha-n": 985851,
  "alpha-n-box": 985877,
  "alpha-n-box-outline": 986130,
  "alpha-n-circle": 986131,
  "alpha-n-circle-outline": 986132,
  "alpha-o": 985852,
  "alpha-o-box": 985878,
  "alpha-o-box-outline": 986133,
  "alpha-o-circle": 986134,
  "alpha-o-circle-outline": 986135,
  "alpha-p": 985853,
  "alpha-p-box": 985879,
  "alpha-p-box-outline": 986136,
  "alpha-p-circle": 986137,
  "alpha-p-circle-outline": 986138,
  "alpha-q": 985854,
  "alpha-q-box": 985880,
  "alpha-q-box-outline": 986139,
  "alpha-q-circle": 986140,
  "alpha-q-circle-outline": 986141,
  "alpha-r": 985855,
  "alpha-r-box": 985881,
  "alpha-r-box-outline": 986142,
  "alpha-r-circle": 986143,
  "alpha-r-circle-outline": 986144,
  "alpha-s": 985856,
  "alpha-s-box": 985882,
  "alpha-s-box-outline": 986145,
  "alpha-s-circle": 986146,
  "alpha-s-circle-outline": 986147,
  "alpha-t": 985857,
  "alpha-t-box": 985883,
  "alpha-t-box-outline": 986148,
  "alpha-t-circle": 986149,
  "alpha-t-circle-outline": 986150,
  "alpha-u": 985858,
  "alpha-u-box": 985884,
  "alpha-u-box-outline": 986151,
  "alpha-u-circle": 986152,
  "alpha-u-circle-outline": 986153,
  "alpha-v": 985859,
  "alpha-v-box": 985885,
  "alpha-v-box-outline": 986154,
  "alpha-v-circle": 986155,
  "alpha-v-circle-outline": 986156,
  "alpha-w": 985860,
  "alpha-w-box": 985886,
  "alpha-w-box-outline": 986157,
  "alpha-w-circle": 986158,
  "alpha-w-circle-outline": 986159,
  "alpha-x": 985861,
  "alpha-x-box": 985887,
  "alpha-x-box-outline": 986160,
  "alpha-x-circle": 986161,
  "alpha-x-circle-outline": 986162,
  "alpha-y": 985862,
  "alpha-y-box": 985888,
  "alpha-y-box-outline": 986163,
  "alpha-y-circle": 986164,
  "alpha-y-circle-outline": 986165,
  "alpha-z": 985863,
  "alpha-z-box": 985889,
  "alpha-z-box-outline": 986166,
  "alpha-z-circle": 986167,
  "alpha-z-circle-outline": 986168,
  "alphabet-aurebesh": 987948,
  "alphabet-cyrillic": 987949,
  "alphabet-greek": 987950,
  "alphabet-latin": 987951,
  "alphabet-piqad": 987952,
  "alphabet-tengwar": 987959,
  "alphabetical": 983084,
  "alphabetical-off": 987148,
  "alphabetical-variant": 987149,
  "alphabetical-variant-off": 987150,
  "altimeter": 984535,
  "ambulance": 983087,
  "ammunition": 986344,
  "ampersand": 985741,
  "amplifier": 983088,
  "amplifier-off": 987573,
  "anchor": 983089,
  "android": 983090,
  "android-messages": 986437,
  "android-studio": 983092,
  "angle-acute": 985399,
  "angle-obtuse": 985400,
  "angle-right": 985401,
  "angular": 984754,
  "angularjs": 984767,
  "animation": 984536,
  "animation-outline": 985743,
  "animation-play": 985402,
  "animation-play-outline": 985744,
  "ansible": 987290,
  "antenna": 987417,
  "anvil": 985243,
  "apache-kafka": 987151,
  "api": 987291,
  "api-off": 987735,
  "apple": 983093,
  "apple-finder": 983094,
  "apple-icloud": 983096,
  "apple-ios": 983095,
  "apple-keyboard-caps": 984626,
  "apple-keyboard-command": 984627,
  "apple-keyboard-control": 984628,
  "apple-keyboard-option": 984629,
  "apple-keyboard-shift": 984630,
  "apple-safari": 983097,
  "application": 985286,
  "application-array": 987381,
  "application-array-outline": 987382,
  "application-braces": 987383,
  "application-braces-outline": 987384,
  "application-brackets": 986251,
  "application-brackets-outline": 986252,
  "application-cog": 984693,
  "application-cog-outline": 988535,
  "application-edit": 983214,
  "application-edit-outline": 984601,
  "application-export": 986541,
  "application-import": 986542,
  "application-outline": 984596,
  "application-parentheses": 987385,
  "application-parentheses-outline": 987386,
  "application-settings": 985952,
  "application-settings-outline": 988501,
  "application-variable": 987387,
  "application-variable-outline": 987388,
  "approximately-equal": 987038,
  "approximately-equal-box": 987039,
  "apps": 983099,
  "apps-box": 986438,
  "arch": 985287,
  "archive": 983100,
  "archive-alert": 988413,
  "archive-alert-outline": 988414,
  "archive-arrow-down": 987737,
  "archive-arrow-down-outline": 987738,
  "archive-arrow-up": 987739,
  "archive-arrow-up-outline": 987740,
  "archive-cancel": 989003,
  "archive-cancel-outline": 989004,
  "archive-check": 989005,
  "archive-check-outline": 989006,
  "archive-clock": 989007,
  "archive-clock-outline": 989008,
  "archive-cog": 989009,
  "archive-cog-outline": 989010,
  "archive-edit": 989011,
  "archive-edit-outline": 989012,
  "archive-eye": 989013,
  "archive-eye-outline": 989014,
  "archive-lock": 989015,
  "archive-lock-open": 989016,
  "archive-lock-open-outline": 989017,
  "archive-lock-outline": 989018,
  "archive-marker": 989019,
  "archive-marker-outline": 989020,
  "archive-minus": 989021,
  "archive-minus-outline": 989022,
  "archive-music": 989023,
  "archive-music-outline": 989024,
  "archive-off": 989025,
  "archive-off-outline": 989026,
  "archive-outline": 987662,
  "archive-plus": 989027,
  "archive-plus-outline": 989028,
  "archive-refresh": 989029,
  "archive-refresh-outline": 989030,
  "archive-remove": 989031,
  "archive-remove-outline": 989032,
  "archive-search": 989033,
  "archive-search-outline": 989034,
  "archive-settings": 989035,
  "archive-settings-outline": 989036,
  "archive-star": 989037,
  "archive-star-outline": 989038,
  "archive-sync": 989039,
  "archive-sync-outline": 989040,
  "arm-flex": 987095,
  "arm-flex-outline": 987094,
  "arrange-bring-forward": 983101,
  "arrange-bring-to-front": 983102,
  "arrange-send-backward": 983103,
  "arrange-send-to-back": 983104,
  "arrow-all": 983105,
  "arrow-bottom-left": 983106,
  "arrow-bottom-left-bold-box": 989540,
  "arrow-bottom-left-bold-box-outline": 989541,
  "arrow-bottom-left-bold-outline": 985527,
  "arrow-bottom-left-thick": 985528,
  "arrow-bottom-left-thin": 989622,
  "arrow-bottom-left-thin-circle-outline": 988566,
  "arrow-bottom-right": 983107,
  "arrow-bottom-right-bold-box": 989542,
  "arrow-bottom-right-bold-box-outline": 989543,
  "arrow-bottom-right-bold-outline": 985529,
  "arrow-bottom-right-thick": 985530,
  "arrow-bottom-right-thin": 989623,
  "arrow-bottom-right-thin-circle-outline": 988565,
  "arrow-collapse": 984597,
  "arrow-collapse-all": 983108,
  "arrow-collapse-down": 984978,
  "arrow-collapse-horizontal": 985164,
  "arrow-collapse-left": 984979,
  "arrow-collapse-right": 984980,
  "arrow-collapse-up": 984981,
  "arrow-collapse-vertical": 985165,
  "arrow-decision": 985531,
  "arrow-decision-auto": 985532,
  "arrow-decision-auto-outline": 985533,
  "arrow-decision-outline": 985534,
  "arrow-down": 983109,
  "arrow-down-bold": 984878,
  "arrow-down-bold-box": 984879,
  "arrow-down-bold-box-outline": 984880,
  "arrow-down-bold-circle": 983111,
  "arrow-down-bold-circle-outline": 983112,
  "arrow-down-bold-hexagon-outline": 983113,
  "arrow-down-bold-outline": 985535,
  "arrow-down-box": 984768,
  "arrow-down-circle": 986331,
  "arrow-down-circle-outline": 986332,
  "arrow-down-drop-circle": 983114,
  "arrow-down-drop-circle-outline": 983115,
  "arrow-down-left": 989089,
  "arrow-down-left-bold": 989090,
  "arrow-down-right": 989091,
  "arrow-down-right-bold": 989092,
  "arrow-down-thick": 983110,
  "arrow-down-thin": 989619,
  "arrow-down-thin-circle-outline": 988569,
  "arrow-expand": 984598,
  "arrow-expand-all": 983116,
  "arrow-expand-down": 984982,
  "arrow-expand-horizontal": 985166,
  "arrow-expand-left": 984983,
  "arrow-expand-right": 984984,
  "arrow-expand-up": 984985,
  "arrow-expand-vertical": 985167,
  "arrow-horizontal-lock": 987483,
  "arrow-left": 983117,
  "arrow-left-bold": 984881,
  "arrow-left-bold-box": 984882,
  "arrow-left-bold-box-outline": 984883,
  "arrow-left-bold-circle": 983119,
  "arrow-left-bold-circle-outline": 983120,
  "arrow-left-bold-hexagon-outline": 983121,
  "arrow-left-bold-outline": 985536,
  "arrow-left-bottom": 989093,
  "arrow-left-bottom-bold": 989094,
  "arrow-left-box": 984769,
  "arrow-left-circle": 986333,
  "arrow-left-circle-outline": 986334,
  "arrow-left-drop-circle": 983122,
  "arrow-left-drop-circle-outline": 983123,
  "arrow-left-right": 986739,
  "arrow-left-right-bold": 986740,
  "arrow-left-right-bold-outline": 985537,
  "arrow-left-thick": 983118,
  "arrow-left-thin": 989617,
  "arrow-left-thin-circle-outline": 988570,
  "arrow-left-top": 989095,
  "arrow-left-top-bold": 989096,
  "arrow-projectile": 989248,
  "arrow-projectile-multiple": 989247,
  "arrow-right": 983124,
  "arrow-right-bold": 984884,
  "arrow-right-bold-box": 984885,
  "arrow-right-bold-box-outline": 984886,
  "arrow-right-bold-circle": 983126,
  "arrow-right-bold-circle-outline": 983127,
  "arrow-right-bold-hexagon-outline": 983128,
  "arrow-right-bold-outline": 985538,
  "arrow-right-bottom": 989097,
  "arrow-right-bottom-bold": 989098,
  "arrow-right-box": 984770,
  "arrow-right-circle": 986335,
  "arrow-right-circle-outline": 986336,
  "arrow-right-drop-circle": 983129,
  "arrow-right-drop-circle-outline": 983130,
  "arrow-right-thick": 983125,
  "arrow-right-thin": 989616,
  "arrow-right-thin-circle-outline": 988568,
  "arrow-right-top": 989099,
  "arrow-right-top-bold": 989100,
  "arrow-split-horizontal": 985403,
  "arrow-split-vertical": 985404,
  "arrow-top-left": 983131,
  "arrow-top-left-bold-box": 989544,
  "arrow-top-left-bold-box-outline": 989545,
  "arrow-top-left-bold-outline": 985539,
  "arrow-top-left-bottom-right": 986741,
  "arrow-top-left-bottom-right-bold": 986742,
  "arrow-top-left-thick": 985540,
  "arrow-top-left-thin": 989621,
  "arrow-top-left-thin-circle-outline": 988563,
  "arrow-top-right": 983132,
  "arrow-top-right-bold-box": 989546,
  "arrow-top-right-bold-box-outline": 989547,
  "arrow-top-right-bold-outline": 985541,
  "arrow-top-right-bottom-left": 986743,
  "arrow-top-right-bottom-left-bold": 986744,
  "arrow-top-right-thick": 985542,
  "arrow-top-right-thin": 989620,
  "arrow-top-right-thin-circle-outline": 988564,
  "arrow-u-down-left": 989101,
  "arrow-u-down-left-bold": 989102,
  "arrow-u-down-right": 989103,
  "arrow-u-down-right-bold": 989104,
  "arrow-u-left-bottom": 989105,
  "arrow-u-left-bottom-bold": 989106,
  "arrow-u-left-top": 989107,
  "arrow-u-left-top-bold": 989108,
  "arrow-u-right-bottom": 989109,
  "arrow-u-right-bottom-bold": 989110,
  "arrow-u-right-top": 989111,
  "arrow-u-right-top-bold": 989112,
  "arrow-u-up-left": 989113,
  "arrow-u-up-left-bold": 989114,
  "arrow-u-up-right": 989115,
  "arrow-u-up-right-bold": 989116,
  "arrow-up": 983133,
  "arrow-up-bold": 984887,
  "arrow-up-bold-box": 984888,
  "arrow-up-bold-box-outline": 984889,
  "arrow-up-bold-circle": 983135,
  "arrow-up-bold-circle-outline": 983136,
  "arrow-up-bold-hexagon-outline": 983137,
  "arrow-up-bold-outline": 985543,
  "arrow-up-box": 984771,
  "arrow-up-circle": 986337,
  "arrow-up-circle-outline": 986338,
  "arrow-up-down": 986745,
  "arrow-up-down-bold": 986746,
  "arrow-up-down-bold-outline": 985544,
  "arrow-up-drop-circle": 983138,
  "arrow-up-drop-circle-outline": 983139,
  "arrow-up-left": 989117,
  "arrow-up-left-bold": 989118,
  "arrow-up-right": 989119,
  "arrow-up-right-bold": 989120,
  "arrow-up-thick": 983134,
  "arrow-up-thin": 989618,
  "arrow-up-thin-circle-outline": 988567,
  "arrow-vertical-lock": 987484,
  "artstation": 985947,
  "aspect-ratio": 985636,
  "assistant": 983140,
  "asterisk": 984772,
  "at": 983141,
  "atlassian": 985092,
  "atm": 986439,
  "atom": 984936,
  "atom-variant": 986747,
  "attachment": 983142,
  "audio-input-rca": 989291,
  "audio-input-stereo-minijack": 989292,
  "audio-input-xlr": 989293,
  "audio-video": 985405,
  "audio-video-off": 987574,
  "augmented-reality": 985168,
  "auto-download": 988030,
  "auto-fix": 983144,
  "auto-upload": 983145,
  "autorenew": 983146,
  "av-timer": 983147,
  "aws": 986639,
  "axe": 985288,
  "axe-battle": 989250,
  "axis": 986440,
  "axis-arrow": 986441,
  "axis-arrow-info": 988174,
  "axis-arrow-lock": 986442,
  "axis-lock": 986443,
  "axis-x-arrow": 986444,
  "axis-x-arrow-lock": 986445,
  "axis-x-rotate-clockwise": 986446,
  "axis-x-rotate-counterclockwise": 986447,
  "axis-x-y-arrow-lock": 986448,
  "axis-y-arrow": 986449,
  "axis-y-arrow-lock": 986450,
  "axis-y-rotate-clockwise": 986451,
  "axis-y-rotate-counterclockwise": 986452,
  "axis-z-arrow": 986453,
  "axis-z-arrow-lock": 986454,
  "axis-z-rotate-clockwise": 986455,
  "axis-z-rotate-counterclockwise": 986456,
  "babel": 985637,
  "baby": 983148,
  "baby-bottle": 986937,
  "baby-bottle-outline": 986938,
  "baby-buggy": 988128,
  "baby-carriage": 984719,
  "baby-carriage-off": 987040,
  "baby-face": 986748,
  "baby-face-outline": 986749,
  "backburger": 983149,
  "backspace": 983150,
  "backspace-outline": 985948,
  "backspace-reverse": 986750,
  "backspace-reverse-outline": 986751,
  "backup-restore": 983151,
  "bacteria": 986837,
  "bacteria-outline": 986838,
  "badge-account": 986535,
  "badge-account-alert": 986536,
  "badge-account-alert-outline": 986537,
  "badge-account-horizontal": 986637,
  "badge-account-horizontal-outline": 986638,
  "badge-account-outline": 986538,
  "badminton": 985169,
  "bag-carry-on": 986939,
  "bag-carry-on-check": 986469,
  "bag-carry-on-off": 986940,
  "bag-checked": 986941,
  "bag-personal": 986640,
  "bag-personal-off": 986641,
  "bag-personal-off-outline": 986642,
  "bag-personal-outline": 986643,
  "bag-suitcase": 988555,
  "bag-suitcase-off": 988557,
  "bag-suitcase-off-outline": 988558,
  "bag-suitcase-outline": 988556,
  "baguette": 986942,
  "balcony": 989207,
  "balloon": 985638,
  "ballot": 985545,
  "ballot-outline": 985546,
  "ballot-recount": 986169,
  "ballot-recount-outline": 986170,
  "bandage": 986543,
  "bank": 983152,
  "bank-check": 988757,
  "bank-minus": 986544,
  "bank-off": 988758,
  "bank-off-outline": 988759,
  "bank-outline": 986752,
  "bank-plus": 986545,
  "bank-remove": 986546,
  "bank-transfer": 985639,
  "bank-transfer-in": 985640,
  "bank-transfer-out": 985641,
  "barcode": 983153,
  "barcode-off": 987702,
  "barcode-scan": 983154,
  "barley": 983155,
  "barley-off": 985949,
  "barn": 985950,
  "barrel": 983156,
  "baseball": 985170,
  "baseball-bat": 985171,
  "baseball-diamond": 988652,
  "baseball-diamond-outline": 988653,
  "bash": 987523,
  "basket": 983158,
  "basket-check": 989413,
  "basket-check-outline": 989414,
  "basket-fill": 983159,
  "basket-minus": 988451,
  "basket-minus-outline": 988452,
  "basket-off": 988453,
  "basket-off-outline": 988454,
  "basket-outline": 987521,
  "basket-plus": 988455,
  "basket-plus-outline": 988456,
  "basket-remove": 988457,
  "basket-remove-outline": 988458,
  "basket-unfill": 983160,
  "basketball": 985094,
  "basketball-hoop": 986171,
  "basketball-hoop-outline": 986172,
  "bat": 985951,
  "bathtub": 989208,
  "bathtub-outline": 989209,
  "battery": 983161,
  "battery-10": 983162,
  "battery-10-bluetooth": 985406,
  "battery-20": 983163,
  "battery-20-bluetooth": 985407,
  "battery-30": 983164,
  "battery-30-bluetooth": 985408,
  "battery-40": 983165,
  "battery-40-bluetooth": 985409,
  "battery-50": 983166,
  "battery-50-bluetooth": 985410,
  "battery-60": 983167,
  "battery-60-bluetooth": 985411,
  "battery-70": 983168,
  "battery-70-bluetooth": 985412,
  "battery-80": 983169,
  "battery-80-bluetooth": 985413,
  "battery-90": 983170,
  "battery-90-bluetooth": 985414,
  "battery-alert": 983171,
  "battery-alert-bluetooth": 985415,
  "battery-alert-variant": 987340,
  "battery-alert-variant-outline": 987341,
  "battery-arrow-down": 989150,
  "battery-arrow-down-outline": 989151,
  "battery-arrow-up": 989152,
  "battery-arrow-up-outline": 989153,
  "battery-bluetooth": 985416,
  "battery-bluetooth-variant": 985417,
  "battery-charging": 983172,
  "battery-charging-10": 985244,
  "battery-charging-100": 983173,
  "battery-charging-20": 983174,
  "battery-charging-30": 983175,
  "battery-charging-40": 983176,
  "battery-charging-50": 985245,
  "battery-charging-60": 983177,
  "battery-charging-70": 985246,
  "battery-charging-80": 983178,
  "battery-charging-90": 983179,
  "battery-charging-high": 987814,
  "battery-charging-low": 987812,
  "battery-charging-medium": 987813,
  "battery-charging-outline": 985247,
  "battery-charging-wireless": 985095,
  "battery-charging-wireless-10": 985096,
  "battery-charging-wireless-20": 985097,
  "battery-charging-wireless-30": 985098,
  "battery-charging-wireless-40": 985099,
  "battery-charging-wireless-50": 985100,
  "battery-charging-wireless-60": 985101,
  "battery-charging-wireless-70": 985102,
  "battery-charging-wireless-80": 985103,
  "battery-charging-wireless-90": 985104,
  "battery-charging-wireless-alert": 985105,
  "battery-charging-wireless-outline": 985106,
  "battery-check": 989154,
  "battery-check-outline": 989155,
  "battery-heart": 987663,
  "battery-heart-outline": 987664,
  "battery-heart-variant": 987665,
  "battery-high": 987811,
  "battery-lock": 989084,
  "battery-lock-open": 989085,
  "battery-low": 987809,
  "battery-medium": 987810,
  "battery-minus": 989156,
  "battery-minus-outline": 989157,
  "battery-minus-variant": 983180,
  "battery-negative": 983181,
  "battery-off": 987741,
  "battery-off-outline": 987742,
  "battery-outline": 983182,
  "battery-plus": 989158,
  "battery-plus-outline": 989159,
  "battery-plus-variant": 983183,
  "battery-positive": 983184,
  "battery-remove": 989160,
  "battery-remove-outline": 989161,
  "battery-sync": 989236,
  "battery-sync-outline": 989237,
  "battery-unknown": 983185,
  "battery-unknown-bluetooth": 985418,
  "beach": 983186,
  "beaker": 986346,
  "beaker-alert": 987689,
  "beaker-alert-outline": 987690,
  "beaker-check": 987691,
  "beaker-check-outline": 987692,
  "beaker-minus": 987693,
  "beaker-minus-outline": 987694,
  "beaker-outline": 984720,
  "beaker-plus": 987695,
  "beaker-plus-outline": 987696,
  "beaker-question": 987697,
  "beaker-question-outline": 987698,
  "beaker-remove": 987699,
  "beaker-remove-outline": 987700,
  "bed": 983779,
  "bed-double": 987092,
  "bed-double-outline": 987091,
  "bed-empty": 985248,
  "bed-king": 987090,
  "bed-king-outline": 987089,
  "bed-outline": 983193,
  "bed-queen": 987088,
  "bed-queen-outline": 987099,
  "bed-single": 987245,
  "bed-single-outline": 987246,
  "bee": 987041,
  "bee-flower": 987042,
  "beehive-off-outline": 988141,
  "beehive-outline": 987342,
  "beekeeper": 988386,
  "beer": 983192,
  "beer-outline": 987916,
  "bell": 983194,
  "bell-alert": 986457,
  "bell-alert-outline": 986753,
  "bell-badge": 987499,
  "bell-badge-outline": 983416,
  "bell-cancel": 988135,
  "bell-cancel-outline": 988136,
  "bell-check": 987621,
  "bell-check-outline": 987622,
  "bell-circle": 986458,
  "bell-circle-outline": 986459,
  "bell-minus": 988137,
  "bell-minus-outline": 988138,
  "bell-off": 983195,
  "bell-off-outline": 985745,
  "bell-outline": 983196,
  "bell-plus": 983197,
  "bell-plus-outline": 985746,
  "bell-remove": 988139,
  "bell-remove-outline": 988140,
  "bell-ring": 983198,
  "bell-ring-outline": 983199,
  "bell-sleep": 983200,
  "bell-sleep-outline": 985747,
  "beta": 983201,
  "betamax": 985547,
  "biathlon": 986644,
  "bicycle": 987292,
  "bicycle-basket": 987701,
  "bicycle-cargo": 989340,
  "bicycle-electric": 988596,
  "bicycle-penny-farthing": 988649,
  "bike": 983203,
  "bike-fast": 987423,
  "billboard": 987152,
  "billiards": 985953,
  "billiards-rack": 985954,
  "binoculars": 983205,
  "bio": 983206,
  "biohazard": 983207,
  "bird": 988614,
  "bitbucket": 983208,
  "bitcoin": 985107,
  "black-mesa": 983209,
  "blender": 986347,
  "blender-outline": 989210,
  "blender-software": 983211,
  "blinds": 983212,
  "blinds-open": 987153,
  "block-helper": 983213,
  "blood-bag": 986348,
  "bluetooth": 983215,
  "bluetooth-audio": 983216,
  "bluetooth-connect": 983217,
  "bluetooth-off": 983218,
  "bluetooth-settings": 983219,
  "bluetooth-transfer": 983220,
  "blur": 983221,
  "blur-linear": 983222,
  "blur-off": 983223,
  "blur-radial": 983224,
  "bolt": 986547,
  "bomb": 984721,
  "bomb-off": 984773,
  "bone": 983225,
  "book": 983226,
  "book-account": 988077,
  "book-account-outline": 988078,
  "book-alert": 988796,
  "book-alert-outline": 988797,
  "book-alphabet": 984605,
  "book-arrow-down": 988798,
  "book-arrow-down-outline": 988799,
  "book-arrow-left": 988800,
  "book-arrow-left-outline": 988801,
  "book-arrow-right": 988802,
  "book-arrow-right-outline": 988803,
  "book-arrow-up": 988804,
  "book-arrow-up-outline": 988805,
  "book-cancel": 988806,
  "book-cancel-outline": 988807,
  "book-check": 988403,
  "book-check-outline": 988404,
  "book-clock": 988808,
  "book-clock-outline": 988809,
  "book-cog": 988810,
  "book-cog-outline": 988811,
  "book-cross": 983202,
  "book-edit": 988812,
  "book-edit-outline": 988813,
  "book-education": 988873,
  "book-education-outline": 988874,
  "book-information-variant": 987247,
  "book-lock": 984986,
  "book-lock-open": 984987,
  "book-lock-open-outline": 988814,
  "book-lock-outline": 988815,
  "book-marker": 988816,
  "book-marker-outline": 988817,
  "book-minus": 984537,
  "book-minus-multiple": 985748,
  "book-minus-multiple-outline": 985355,
  "book-minus-outline": 988818,
  "book-multiple": 983227,
  "book-multiple-outline": 984118,
  "book-music": 983143,
  "book-music-outline": 988819,
  "book-off": 988820,
  "book-off-outline": 988821,
  "book-open": 983229,
  "book-open-blank-variant": 983230,
  "book-open-outline": 985955,
  "book-open-page-variant": 984538,
  "book-open-page-variant-outline": 988630,
  "book-open-variant": 988407,
  "book-outline": 985956,
  "book-play": 986754,
  "book-play-outline": 986755,
  "book-plus": 984539,
  "book-plus-multiple": 985749,
  "book-plus-multiple-outline": 985822,
  "book-plus-outline": 988822,
  "book-refresh": 988823,
  "book-refresh-outline": 988824,
  "book-remove": 985751,
  "book-remove-multiple": 985750,
  "book-remove-multiple-outline": 984266,
  "book-remove-outline": 988825,
  "book-search": 986756,
  "book-search-outline": 986757,
  "book-settings": 988826,
  "book-settings-outline": 988827,
  "book-sync": 988828,
  "book-sync-outline": 988872,
  "book-variant": 983231,
  "book-variant-multiple": 983228,
  "bookmark": 983232,
  "bookmark-box-multiple": 989548,
  "bookmark-box-multiple-outline": 989549,
  "bookmark-check": 983233,
  "bookmark-check-outline": 988027,
  "bookmark-minus": 985548,
  "bookmark-minus-outline": 985549,
  "bookmark-multiple": 986645,
  "bookmark-multiple-outline": 986646,
  "bookmark-music": 983234,
  "bookmark-music-outline": 988025,
  "bookmark-off": 985550,
  "bookmark-off-outline": 985551,
  "bookmark-outline": 983235,
  "bookmark-plus": 983237,
  "bookmark-plus-outline": 983236,
  "bookmark-remove": 983238,
  "bookmark-remove-outline": 988026,
  "bookshelf": 987743,
  "boom-gate": 986758,
  "boom-gate-alert": 986759,
  "boom-gate-alert-outline": 986760,
  "boom-gate-arrow-down": 986761,
  "boom-gate-arrow-down-outline": 986762,
  "boom-gate-arrow-up": 986764,
  "boom-gate-arrow-up-outline": 986765,
  "boom-gate-outline": 986763,
  "boom-gate-up": 989177,
  "boom-gate-up-outline": 989178,
  "boombox": 984540,
  "boomerang": 987343,
  "bootstrap": 984774,
  "border-all": 983239,
  "border-all-variant": 985249,
  "border-bottom": 983240,
  "border-bottom-variant": 985250,
  "border-color": 983241,
  "border-horizontal": 983242,
  "border-inside": 983243,
  "border-left": 983244,
  "border-left-variant": 985251,
  "border-none": 983245,
  "border-none-variant": 985252,
  "border-outside": 983246,
  "border-right": 983247,
  "border-right-variant": 985253,
  "border-style": 983248,
  "border-top": 983249,
  "border-top-variant": 985254,
  "border-vertical": 983250,
  "bottle-soda": 987248,
  "bottle-soda-classic": 987249,
  "bottle-soda-classic-outline": 988003,
  "bottle-soda-outline": 987250,
  "bottle-tonic": 987438,
  "bottle-tonic-outline": 987439,
  "bottle-tonic-plus": 987440,
  "bottle-tonic-plus-outline": 987441,
  "bottle-tonic-skull": 987442,
  "bottle-tonic-skull-outline": 987443,
  "bottle-wine": 985172,
  "bottle-wine-outline": 987920,
  "bow-arrow": 989249,
  "bow-tie": 984696,
  "bowl": 983694,
  "bowl-mix": 984599,
  "bowl-mix-outline": 983780,
  "bowl-outline": 983721,
  "bowling": 983251,
  "box": 983252,
  "box-cutter": 983253,
  "box-cutter-off": 985930,
  "box-shadow": 984631,
  "boxing-glove": 985957,
  "braille": 985552,
  "brain": 985553,
  "bread-slice": 986350,
  "bread-slice-outline": 986351,
  "bridge": 984600,
  "briefcase": 983254,
  "briefcase-account": 986352,
  "briefcase-account-outline": 986353,
  "briefcase-check": 983255,
  "briefcase-check-outline": 987934,
  "briefcase-clock": 987344,
  "briefcase-clock-outline": 987345,
  "briefcase-download": 983256,
  "briefcase-download-outline": 986173,
  "briefcase-edit": 985752,
  "briefcase-edit-outline": 986174,
  "briefcase-eye": 989145,
  "briefcase-eye-outline": 989146,
  "briefcase-minus": 985642,
  "briefcase-minus-outline": 986175,
  "briefcase-off": 988760,
  "briefcase-off-outline": 988761,
  "briefcase-outline": 985108,
  "briefcase-plus": 985643,
  "briefcase-plus-outline": 986176,
  "briefcase-remove": 985644,
  "briefcase-remove-outline": 986177,
  "briefcase-search": 985645,
  "briefcase-search-outline": 986178,
  "briefcase-upload": 983257,
  "briefcase-upload-outline": 986179,
  "briefcase-variant": 988308,
  "briefcase-variant-off": 988762,
  "briefcase-variant-off-outline": 988763,
  "briefcase-variant-outline": 988309,
  "brightness-1": 983258,
  "brightness-2": 983259,
  "brightness-3": 983260,
  "brightness-4": 983261,
  "brightness-5": 983262,
  "brightness-6": 983263,
  "brightness-7": 983264,
  "brightness-auto": 983265,
  "brightness-percent": 986354,
  "broadcast": 988960,
  "broadcast-off": 988961,
  "broom": 983266,
  "brush": 983267,
  "brush-off": 989041,
  "brush-variant": 989203,
  "bucket": 988181,
  "bucket-outline": 988182,
  "buffet": 984440,
  "bug": 983268,
  "bug-check": 985646,
  "bug-check-outline": 985647,
  "bug-outline": 985648,
  "bugle": 986548,
  "bulldozer": 985890,
  "bullet": 986355,
  "bulletin-board": 983269,
  "bullhorn": 983270,
  "bullhorn-outline": 985891,
  "bullhorn-variant": 989550,
  "bullhorn-variant-outline": 989551,
  "bullseye": 984541,
  "bullseye-arrow": 985289,
  "bulma": 987879,
  "bunk-bed": 987906,
  "bunk-bed-outline": 983191,
  "bus": 983271,
  "bus-alert": 985753,
  "bus-articulated-end": 984988,
  "bus-articulated-front": 984989,
  "bus-clock": 985290,
  "bus-double-decker": 984990,
  "bus-electric": 989469,
  "bus-marker": 987666,
  "bus-multiple": 986943,
  "bus-school": 984991,
  "bus-side": 984992,
  "bus-stop": 987154,
  "bus-stop-covered": 987155,
  "bus-stop-uncovered": 987156,
  "butterfly": 988553,
  "butterfly-outline": 988554,
  "cabin-a-frame": 989324,
  "cable-data": 988052,
  "cached": 983272,
  "cactus": 986549,
  "cake": 983273,
  "cake-layered": 983274,
  "cake-variant": 983275,
  "cake-variant-outline": 989168,
  "calculator": 983276,
  "calculator-variant": 985754,
  "calculator-variant-outline": 988582,
  "calendar": 983277,
  "calendar-account": 986839,
  "calendar-account-outline": 986840,
  "calendar-alert": 985649,
  "calendar-arrow-left": 987444,
  "calendar-arrow-right": 987445,
  "calendar-blank": 983278,
  "calendar-blank-multiple": 987251,
  "calendar-blank-outline": 985958,
  "calendar-check": 983279,
  "calendar-check-outline": 986180,
  "calendar-clock": 983280,
  "calendar-clock-outline": 988897,
  "calendar-collapse-horizontal": 989341,
  "calendar-cursor": 988539,
  "calendar-edit": 985255,
  "calendar-end": 988780,
  "calendar-expand-horizontal": 989342,
  "calendar-export": 985892,
  "calendar-heart": 985554,
  "calendar-import": 985893,
  "calendar-lock": 988737,
  "calendar-lock-outline": 988738,
  "calendar-minus": 986460,
  "calendar-month": 986647,
  "calendar-month-outline": 986648,
  "calendar-multiple": 983281,
  "calendar-multiple-check": 983282,
  "calendar-multiselect": 985650,
  "calendar-outline": 985959,
  "calendar-plus": 983283,
  "calendar-question": 984722,
  "calendar-range": 984697,
  "calendar-range-outline": 985960,
  "calendar-refresh": 983521,
  "calendar-refresh-outline": 983555,
  "calendar-remove": 983284,
  "calendar-remove-outline": 986181,
  "calendar-search": 985420,
  "calendar-star": 985555,
  "calendar-start": 988781,
  "calendar-sync": 986766,
  "calendar-sync-outline": 986767,
  "calendar-text": 983285,
  "calendar-text-outline": 986182,
  "calendar-today": 983286,
  "calendar-week": 985651,
  "calendar-week-begin": 985652,
  "calendar-weekend": 986841,
  "calendar-weekend-outline": 986842,
  "call-made": 983287,
  "call-merge": 983288,
  "call-missed": 983289,
  "call-received": 983290,
  "call-split": 983291,
  "camcorder": 983292,
  "camcorder-off": 983295,
  "camera": 983296,
  "camera-account": 985291,
  "camera-burst": 984723,
  "camera-control": 985961,
  "camera-document": 989297,
  "camera-document-off": 989298,
  "camera-enhance": 983297,
  "camera-enhance-outline": 985962,
  "camera-flip": 988633,
  "camera-flip-outline": 988634,
  "camera-front": 983298,
  "camera-front-variant": 983299,
  "camera-gopro": 984993,
  "camera-image": 985292,
  "camera-iris": 983300,
  "camera-marker": 989607,
  "camera-marker-outline": 989608,
  "camera-metering-center": 984994,
  "camera-metering-matrix": 984995,
  "camera-metering-partial": 984996,
  "camera-metering-spot": 984997,
  "camera-off": 984543,
  "camera-off-outline": 989631,
  "camera-outline": 986461,
  "camera-party-mode": 983301,
  "camera-plus": 986843,
  "camera-plus-outline": 986844,
  "camera-rear": 983302,
  "camera-rear-variant": 983303,
  "camera-retake": 986649,
  "camera-retake-outline": 986650,
  "camera-switch": 983304,
  "camera-switch-outline": 985162,
  "camera-timer": 983305,
  "camera-wireless": 986550,
  "camera-wireless-outline": 986551,
  "campfire": 986845,
  "cancel": 984890,
  "candelabra": 989138,
  "candelabra-fire": 989139,
  "candle": 984546,
  "candy": 989552,
  "candy-off": 989553,
  "candy-off-outline": 989554,
  "candy-outline": 989555,
  "candycane": 983306,
  "cannabis": 984998,
  "cannabis-off": 988782,
  "caps-lock": 985755,
  "car": 983307,
  "car-2-plus": 987157,
  "car-3-plus": 987158,
  "car-arrow-left": 988082,
  "car-arrow-right": 988083,
  "car-back": 986651,
  "car-battery": 983308,
  "car-brake-abs": 986183,
  "car-brake-alert": 986184,
  "car-brake-fluid-level": 989449,
  "car-brake-hold": 986462,
  "car-brake-low-pressure": 989450,
  "car-brake-parking": 986463,
  "car-brake-retarder": 987159,
  "car-brake-temperature": 989451,
  "car-brake-worn-linings": 989452,
  "car-child-seat": 987043,
  "car-clock": 989556,
  "car-clutch": 987160,
  "car-cog": 988108,
  "car-connected": 983309,
  "car-convertible": 984999,
  "car-coolant-level": 987161,
  "car-cruise-control": 986464,
  "car-defrost-front": 986465,
  "car-defrost-rear": 986466,
  "car-door": 985963,
  "car-door-lock": 987293,
  "car-electric": 985964,
  "car-electric-outline": 988597,
  "car-emergency": 988687,
  "car-esp": 986185,
  "car-estate": 985000,
  "car-hatchback": 985001,
  "car-info": 987582,
  "car-key": 985965,
  "car-lifted-pickup": 988461,
  "car-light-alert": 989453,
  "car-light-dimmed": 986186,
  "car-light-fog": 986187,
  "car-light-high": 986188,
  "car-limousine": 985293,
  "car-multiple": 985966,
  "car-off": 986652,
  "car-outline": 988397,
  "car-parking-lights": 986467,
  "car-pickup": 985002,
  "car-seat": 987044,
  "car-seat-cooler": 987045,
  "car-seat-heater": 987046,
  "car-select": 989305,
  "car-settings": 988109,
  "car-shift-pattern": 986944,
  "car-side": 985003,
  "car-speed-limiter": 989454,
  "car-sports": 985004,
  "car-tire-alert": 986189,
  "car-traction-control": 986468,
  "car-turbocharger": 987162,
  "car-wash": 983310,
  "car-windshield": 987163,
  "car-windshield-outline": 987164,
  "car-wireless": 989304,
  "car-wrench": 989204,
  "carabiner": 988352,
  "caravan": 985005,
  "card": 985967,
  "card-account-details": 984530,
  "card-account-details-outline": 986539,
  "card-account-details-star": 983715,
  "card-account-details-star-outline": 984795,
  "card-account-mail": 983438,
  "card-account-mail-outline": 986776,
  "card-account-phone": 986777,
  "card-account-phone-outline": 986778,
  "card-bulleted": 985968,
  "card-bulleted-off": 985969,
  "card-bulleted-off-outline": 985970,
  "card-bulleted-outline": 985971,
  "card-bulleted-settings": 985972,
  "card-bulleted-settings-outline": 985973,
  "card-minus": 988672,
  "card-minus-outline": 988673,
  "card-multiple": 989169,
  "card-multiple-outline": 989170,
  "card-off": 988674,
  "card-off-outline": 988675,
  "card-outline": 985974,
  "card-plus": 987647,
  "card-plus-outline": 987648,
  "card-remove": 988676,
  "card-remove-outline": 988677,
  "card-search": 987252,
  "card-search-outline": 987253,
  "card-text": 985975,
  "card-text-outline": 985976,
  "cards": 984632,
  "cards-club": 985294,
  "cards-club-outline": 989343,
  "cards-diamond": 985295,
  "cards-diamond-outline": 987165,
  "cards-heart": 985296,
  "cards-heart-outline": 989344,
  "cards-outline": 984633,
  "cards-playing": 989345,
  "cards-playing-club": 989346,
  "cards-playing-club-multiple": 989347,
  "cards-playing-club-multiple-outline": 989348,
  "cards-playing-club-outline": 989349,
  "cards-playing-diamond": 989350,
  "cards-playing-diamond-multiple": 989351,
  "cards-playing-diamond-multiple-outline": 989352,
  "cards-playing-diamond-outline": 989353,
  "cards-playing-heart": 989354,
  "cards-playing-heart-multiple": 989355,
  "cards-playing-heart-multiple-outline": 989356,
  "cards-playing-heart-outline": 989357,
  "cards-playing-outline": 984634,
  "cards-playing-spade": 989358,
  "cards-playing-spade-multiple": 989359,
  "cards-playing-spade-multiple-outline": 989360,
  "cards-playing-spade-outline": 989361,
  "cards-spade": 985297,
  "cards-spade-outline": 989362,
  "cards-variant": 984775,
  "carrot": 983311,
  "cart": 983312,
  "cart-arrow-down": 986470,
  "cart-arrow-right": 986190,
  "cart-arrow-up": 986471,
  "cart-check": 988650,
  "cart-heart": 989408,
  "cart-minus": 986472,
  "cart-off": 984683,
  "cart-outline": 983313,
  "cart-plus": 983314,
  "cart-remove": 986473,
  "cart-variant": 988651,
  "case-sensitive-alt": 983315,
  "cash": 983316,
  "cash-100": 983317,
  "cash-check": 988398,
  "cash-fast": 989276,
  "cash-lock": 988394,
  "cash-lock-open": 988395,
  "cash-marker": 986552,
  "cash-minus": 987744,
  "cash-multiple": 983318,
  "cash-plus": 987745,
  "cash-refund": 985756,
  "cash-register": 986356,
  "cash-remove": 987746,
  "cassette": 985556,
  "cast": 983320,
  "cast-audio": 987166,
  "cast-audio-variant": 989001,
  "cast-connected": 983321,
  "cast-education": 986653,
  "cast-off": 984970,
  "cast-variant": 983071,
  "castle": 983322,
  "cat": 983323,
  "cctv": 985006,
  "cctv-off": 989279,
  "ceiling-fan": 989079,
  "ceiling-fan-light": 989080,
  "ceiling-light": 984937,
  "ceiling-light-multiple": 989405,
  "ceiling-light-multiple-outline": 989406,
  "ceiling-light-outline": 989127,
  "cellphone": 983324,
  "cellphone-arrow-down": 985557,
  "cellphone-basic": 983326,
  "cellphone-charging": 988055,
  "cellphone-check": 989181,
  "cellphone-cog": 985425,
  "cellphone-dock": 983327,
  "cellphone-information": 986945,
  "cellphone-key": 985422,
  "cellphone-link": 983329,
  "cellphone-link-off": 983330,
  "cellphone-lock": 985423,
  "cellphone-marker": 989242,
  "cellphone-message": 985299,
  "cellphone-message-off": 987346,
  "cellphone-nfc": 986768,
  "cellphone-nfc-off": 987864,
  "cellphone-off": 985424,
  "cellphone-play": 987167,
  "cellphone-remove": 985421,
  "cellphone-screenshot": 985653,
  "cellphone-settings": 983331,
  "cellphone-sound": 985426,
  "cellphone-text": 985298,
  "cellphone-wireless": 985109,
  "centos": 987418,
  "certificate": 983332,
  "certificate-outline": 987528,
  "chair-rolling": 986952,
  "chair-school": 983333,
  "chandelier": 989075,
  "charity": 986191,
  "chart-arc": 983334,
  "chart-areaspline": 983335,
  "chart-areaspline-variant": 986769,
  "chart-bar": 983336,
  "chart-bar-stacked": 984938,
  "chart-bell-curve": 986192,
  "chart-bell-curve-cumulative": 987047,
  "chart-box": 988493,
  "chart-box-outline": 988494,
  "chart-box-plus-outline": 988495,
  "chart-bubble": 984547,
  "chart-donut": 985007,
  "chart-donut-variant": 985008,
  "chart-gantt": 984684,
  "chart-histogram": 983337,
  "chart-line": 983338,
  "chart-line-stacked": 984939,
  "chart-line-variant": 985009,
  "chart-multiline": 985300,
  "chart-multiple": 987667,
  "chart-pie": 983339,
  "chart-ppf": 988032,
  "chart-sankey": 987615,
  "chart-sankey-variant": 987616,
  "chart-scatter-plot": 986770,
  "chart-scatter-plot-hexbin": 984685,
  "chart-timeline": 984686,
  "chart-timeline-variant": 986771,
  "chart-timeline-variant-shimmer": 988598,
  "chart-tree": 986772,
  "chart-waterfall": 989464,
  "chat": 985977,
  "chat-alert": 985978,
  "chat-alert-outline": 987849,
  "chat-minus": 988176,
  "chat-minus-outline": 988179,
  "chat-outline": 986846,
  "chat-plus": 988175,
  "chat-plus-outline": 988178,
  "chat-processing": 985979,
  "chat-processing-outline": 987850,
  "chat-question": 988984,
  "chat-question-outline": 988985,
  "chat-remove": 988177,
  "chat-remove-outline": 988180,
  "chat-sleep": 987857,
  "chat-sleep-outline": 987858,
  "check": 983340,
  "check-all": 983341,
  "check-bold": 986654,
  "check-circle": 984544,
  "check-circle-outline": 984545,
  "check-decagram": 984977,
  "check-decagram-outline": 988992,
  "check-network": 986195,
  "check-network-outline": 986196,
  "check-outline": 985173,
  "check-underline": 986655,
  "check-underline-circle": 986656,
  "check-underline-circle-outline": 986657,
  "checkbook": 985757,
  "checkbox-blank": 983342,
  "checkbox-blank-badge": 987510,
  "checkbox-blank-badge-outline": 983319,
  "checkbox-blank-circle": 983343,
  "checkbox-blank-circle-outline": 983344,
  "checkbox-blank-off": 987884,
  "checkbox-blank-off-outline": 987885,
  "checkbox-blank-outline": 983345,
  "checkbox-intermediate": 985174,
  "checkbox-marked": 983346,
  "checkbox-marked-circle": 983347,
  "checkbox-marked-circle-outline": 983348,
  "checkbox-marked-circle-plus-outline": 989479,
  "checkbox-marked-outline": 983349,
  "checkbox-multiple-blank": 983350,
  "checkbox-multiple-blank-circle": 984635,
  "checkbox-multiple-blank-circle-outline": 984636,
  "checkbox-multiple-blank-outline": 983351,
  "checkbox-multiple-marked": 983352,
  "checkbox-multiple-marked-circle": 984637,
  "checkbox-multiple-marked-circle-outline": 984638,
  "checkbox-multiple-marked-outline": 983353,
  "checkbox-multiple-outline": 986193,
  "checkbox-outline": 986194,
  "checkerboard": 983354,
  "checkerboard-minus": 987650,
  "checkerboard-plus": 987649,
  "checkerboard-remove": 987651,
  "cheese": 987833,
  "cheese-off": 988142,
  "chef-hat": 985980,
  "chemical-weapon": 983355,
  "chess-bishop": 985180,
  "chess-king": 985175,
  "chess-knight": 985176,
  "chess-pawn": 985177,
  "chess-queen": 985178,
  "chess-rook": 985179,
  "chevron-double-down": 983356,
  "chevron-double-left": 983357,
  "chevron-double-right": 983358,
  "chevron-double-up": 983359,
  "chevron-down": 983360,
  "chevron-down-box": 985558,
  "chevron-down-box-outline": 985559,
  "chevron-down-circle": 985894,
  "chevron-down-circle-outline": 985895,
  "chevron-left": 983361,
  "chevron-left-box": 985560,
  "chevron-left-box-outline": 985561,
  "chevron-left-circle": 985896,
  "chevron-left-circle-outline": 985897,
  "chevron-right": 983362,
  "chevron-right-box": 985562,
  "chevron-right-box-outline": 985563,
  "chevron-right-circle": 985898,
  "chevron-right-circle-outline": 985899,
  "chevron-triple-down": 986553,
  "chevron-triple-left": 986554,
  "chevron-triple-right": 986555,
  "chevron-triple-up": 986556,
  "chevron-up": 983363,
  "chevron-up-box": 985564,
  "chevron-up-box-outline": 985565,
  "chevron-up-circle": 985900,
  "chevron-up-circle-outline": 985901,
  "chili-alert": 989162,
  "chili-alert-outline": 989163,
  "chili-hot": 985010,
  "chili-hot-outline": 989164,
  "chili-medium": 985011,
  "chili-medium-outline": 989165,
  "chili-mild": 985012,
  "chili-mild-outline": 989166,
  "chili-off": 988263,
  "chili-off-outline": 989167,
  "chip": 984602,
  "church": 983364,
  "cigar": 987529,
  "cigar-off": 988187,
  "circle": 984933,
  "circle-box": 988636,
  "circle-box-outline": 988637,
  "circle-double": 986773,
  "circle-edit-outline": 985301,
  "circle-expand": 986774,
  "circle-half": 988053,
  "circle-half-full": 988054,
  "circle-medium": 985566,
  "circle-multiple": 985912,
  "circle-multiple-outline": 984725,
  "circle-off-outline": 987347,
  "circle-opacity": 989267,
  "circle-outline": 984934,
  "circle-slice-1": 985758,
  "circle-slice-2": 985759,
  "circle-slice-3": 985760,
  "circle-slice-4": 985761,
  "circle-slice-5": 985762,
  "circle-slice-6": 985763,
  "circle-slice-7": 985764,
  "circle-slice-8": 985765,
  "circle-small": 985567,
  "circular-saw": 986658,
  "city": 983366,
  "city-variant": 985654,
  "city-variant-outline": 985655,
  "clipboard": 983367,
  "clipboard-account": 983368,
  "clipboard-account-outline": 986197,
  "clipboard-alert": 983369,
  "clipboard-alert-outline": 986359,
  "clipboard-arrow-down": 983370,
  "clipboard-arrow-down-outline": 986198,
  "clipboard-arrow-left": 983371,
  "clipboard-arrow-left-outline": 986360,
  "clipboard-arrow-right": 986361,
  "clipboard-arrow-right-outline": 986362,
  "clipboard-arrow-up": 986199,
  "clipboard-arrow-up-outline": 986200,
  "clipboard-check": 983374,
  "clipboard-check-multiple": 987747,
  "clipboard-check-multiple-outline": 987748,
  "clipboard-check-outline": 985256,
  "clipboard-clock": 988898,
  "clipboard-clock-outline": 988899,
  "clipboard-edit": 988389,
  "clipboard-edit-outline": 988390,
  "clipboard-file": 987749,
  "clipboard-file-outline": 987750,
  "clipboard-flow": 984776,
  "clipboard-flow-outline": 987415,
  "clipboard-list": 987348,
  "clipboard-list-outline": 987349,
  "clipboard-minus": 988696,
  "clipboard-minus-outline": 988697,
  "clipboard-multiple": 987751,
  "clipboard-multiple-outline": 987752,
  "clipboard-off": 988698,
  "clipboard-off-outline": 988699,
  "clipboard-outline": 983372,
  "clipboard-play": 986201,
  "clipboard-play-multiple": 987753,
  "clipboard-play-multiple-outline": 987754,
  "clipboard-play-outline": 986202,
  "clipboard-plus": 984913,
  "clipboard-plus-outline": 987935,
  "clipboard-pulse": 985181,
  "clipboard-pulse-outline": 985182,
  "clipboard-remove": 988700,
  "clipboard-remove-outline": 988701,
  "clipboard-search": 988702,
  "clipboard-search-outline": 988703,
  "clipboard-text": 983373,
  "clipboard-text-clock": 989433,
  "clipboard-text-clock-outline": 989434,
  "clipboard-text-multiple": 987755,
  "clipboard-text-multiple-outline": 987756,
  "clipboard-text-off": 988704,
  "clipboard-text-off-outline": 988705,
  "clipboard-text-outline": 985656,
  "clipboard-text-play": 986203,
  "clipboard-text-play-outline": 986204,
  "clipboard-text-search": 988706,
  "clipboard-text-search-outline": 988707,
  "clippy": 983375,
  "clock": 985428,
  "clock-alert": 985429,
  "clock-alert-outline": 984526,
  "clock-check": 987048,
  "clock-check-outline": 987049,
  "clock-digital": 986775,
  "clock-edit": 989626,
  "clock-edit-outline": 989627,
  "clock-end": 983377,
  "clock-fast": 983378,
  "clock-in": 983379,
  "clock-minus": 989283,
  "clock-minus-outline": 989284,
  "clock-out": 983380,
  "clock-outline": 983376,
  "clock-plus": 989281,
  "clock-plus-outline": 989282,
  "clock-remove": 989285,
  "clock-remove-outline": 989286,
  "clock-start": 983381,
  "clock-time-eight": 988230,
  "clock-time-eight-outline": 988242,
  "clock-time-eleven": 988233,
  "clock-time-eleven-outline": 988245,
  "clock-time-five": 988227,
  "clock-time-five-outline": 988239,
  "clock-time-four": 988226,
  "clock-time-four-outline": 988238,
  "clock-time-nine": 988231,
  "clock-time-nine-outline": 988243,
  "clock-time-one": 988223,
  "clock-time-one-outline": 988235,
  "clock-time-seven": 988229,
  "clock-time-seven-outline": 988241,
  "clock-time-six": 988228,
  "clock-time-six-outline": 988240,
  "clock-time-ten": 988232,
  "clock-time-ten-outline": 988244,
  "clock-time-three": 988225,
  "clock-time-three-outline": 988237,
  "clock-time-twelve": 988234,
  "clock-time-twelve-outline": 988246,
  "clock-time-two": 988224,
  "clock-time-two-outline": 988236,
  "close": 983382,
  "close-box": 983383,
  "close-box-multiple": 986205,
  "close-box-multiple-outline": 986206,
  "close-box-outline": 983384,
  "close-circle": 983385,
  "close-circle-multiple": 984618,
  "close-circle-multiple-outline": 985219,
  "close-circle-outline": 983386,
  "close-network": 983387,
  "close-network-outline": 986207,
  "close-octagon": 983388,
  "close-octagon-outline": 983389,
  "close-outline": 984777,
  "close-thick": 988056,
  "closed-caption": 983390,
  "closed-caption-outline": 986557,
  "cloud": 983391,
  "cloud-alert": 985568,
  "cloud-braces": 985013,
  "cloud-check": 983392,
  "cloud-check-outline": 987852,
  "cloud-circle": 983393,
  "cloud-download": 983394,
  "cloud-download-outline": 985981,
  "cloud-lock": 987633,
  "cloud-lock-outline": 987634,
  "cloud-off-outline": 983396,
  "cloud-outline": 983395,
  "cloud-print": 983397,
  "cloud-print-outline": 983398,
  "cloud-question": 985657,
  "cloud-refresh": 984362,
  "cloud-search": 985430,
  "cloud-search-outline": 985431,
  "cloud-sync": 984639,
  "cloud-sync-outline": 987862,
  "cloud-tags": 985014,
  "cloud-upload": 983399,
  "cloud-upload-outline": 985982,
  "clover": 985110,
  "coach-lamp": 987168,
  "coat-rack": 987294,
  "code-array": 983400,
  "code-braces": 983401,
  "code-braces-box": 987350,
  "code-brackets": 983402,
  "code-equal": 983403,
  "code-greater-than": 983404,
  "code-greater-than-or-equal": 983405,
  "code-json": 984614,
  "code-less-than": 983406,
  "code-less-than-or-equal": 983407,
  "code-not-equal": 983408,
  "code-not-equal-variant": 983409,
  "code-parentheses": 983410,
  "code-parentheses-box": 987351,
  "code-string": 983411,
  "code-tags": 983412,
  "code-tags-check": 984724,
  "codepen": 983413,
  "coffee": 983414,
  "coffee-maker": 987295,
  "coffee-maker-check": 989489,
  "coffee-maker-check-outline": 989490,
  "coffee-maker-outline": 989211,
  "coffee-off": 987050,
  "coffee-off-outline": 987051,
  "coffee-outline": 984778,
  "coffee-to-go": 983415,
  "coffee-to-go-outline": 987918,
  "coffin": 985983,
  "cog": 984211,
  "cog-box": 984212,
  "cog-clockwise": 987613,
  "cog-counterclockwise": 987614,
  "cog-off": 988110,
  "cog-off-outline": 988111,
  "cog-outline": 985275,
  "cog-pause": 989491,
  "cog-pause-outline": 989492,
  "cog-play": 989493,
  "cog-play-outline": 989494,
  "cog-refresh": 988254,
  "cog-refresh-outline": 988255,
  "cog-stop": 989495,
  "cog-stop-outline": 989496,
  "cog-sync": 988256,
  "cog-sync-outline": 988257,
  "cog-transfer": 987227,
  "cog-transfer-outline": 987228,
  "cogs": 985302,
  "collage": 984640,
  "collapse-all": 985766,
  "collapse-all-outline": 985767,
  "color-helper": 983417,
  "comma": 986659,
  "comma-box": 986667,
  "comma-box-outline": 986660,
  "comma-circle": 986661,
  "comma-circle-outline": 986662,
  "comment": 983418,
  "comment-account": 983419,
  "comment-account-outline": 983420,
  "comment-alert": 983421,
  "comment-alert-outline": 983422,
  "comment-arrow-left": 985569,
  "comment-arrow-left-outline": 985570,
  "comment-arrow-right": 985571,
  "comment-arrow-right-outline": 985572,
  "comment-bookmark": 988590,
  "comment-bookmark-outline": 988591,
  "comment-check": 983423,
  "comment-check-outline": 983424,
  "comment-edit": 987583,
  "comment-edit-outline": 987844,
  "comment-eye": 985658,
  "comment-eye-outline": 985659,
  "comment-flash": 988592,
  "comment-flash-outline": 988593,
  "comment-minus": 988639,
  "comment-minus-outline": 988640,
  "comment-multiple": 985183,
  "comment-multiple-outline": 983425,
  "comment-off": 988641,
  "comment-off-outline": 988642,
  "comment-outline": 983426,
  "comment-plus": 985573,
  "comment-plus-outline": 983427,
  "comment-processing": 983428,
  "comment-processing-outline": 983429,
  "comment-question": 985111,
  "comment-question-outline": 983430,
  "comment-quote": 987169,
  "comment-quote-outline": 987170,
  "comment-remove": 984542,
  "comment-remove-outline": 983431,
  "comment-search": 985660,
  "comment-search-outline": 985661,
  "comment-text": 983432,
  "comment-text-multiple": 985184,
  "comment-text-multiple-outline": 985185,
  "comment-text-outline": 983433,
  "compare": 983434,
  "compare-horizontal": 988306,
  "compare-remove": 989363,
  "compare-vertical": 988307,
  "compass": 983435,
  "compass-off": 985984,
  "compass-off-outline": 985985,
  "compass-outline": 983436,
  "compass-rose": 988034,
  "cone": 989516,
  "cone-off": 989517,
  "connection": 988694,
  "console": 983437,
  "console-line": 985015,
  "console-network": 985257,
  "console-network-outline": 986208,
  "consolidate": 987352,
  "contactless-payment": 986474,
  "contactless-payment-circle": 983841,
  "contactless-payment-circle-outline": 984072,
  "contacts": 984779,
  "contacts-outline": 984504,
  "contain": 985662,
  "contain-end": 985663,
  "contain-start": 985664,
  "content-copy": 983439,
  "content-cut": 983440,
  "content-duplicate": 983441,
  "content-paste": 983442,
  "content-save": 983443,
  "content-save-alert": 986946,
  "content-save-alert-outline": 986947,
  "content-save-all": 983444,
  "content-save-all-outline": 986948,
  "content-save-check": 989418,
  "content-save-check-outline": 989419,
  "content-save-cog": 988251,
  "content-save-cog-outline": 988252,
  "content-save-edit": 986363,
  "content-save-edit-outline": 986364,
  "content-save-move": 986663,
  "content-save-move-outline": 986664,
  "content-save-off": 988739,
  "content-save-off-outline": 988740,
  "content-save-outline": 985112,
  "content-save-settings": 984603,
  "content-save-settings-outline": 985902,
  "contrast": 983445,
  "contrast-box": 983446,
  "contrast-circle": 983447,
  "controller-classic": 985986,
  "controller-classic-outline": 985987,
  "cookie": 983448,
  "cookie-alert": 988880,
  "cookie-alert-outline": 988881,
  "cookie-check": 988882,
  "cookie-check-outline": 988883,
  "cookie-clock": 988900,
  "cookie-clock-outline": 988901,
  "cookie-cog": 988884,
  "cookie-cog-outline": 988885,
  "cookie-edit": 988902,
  "cookie-edit-outline": 988903,
  "cookie-lock": 988904,
  "cookie-lock-outline": 988905,
  "cookie-minus": 988890,
  "cookie-minus-outline": 988891,
  "cookie-off": 988906,
  "cookie-off-outline": 988907,
  "cookie-outline": 988894,
  "cookie-plus": 988886,
  "cookie-plus-outline": 988887,
  "cookie-refresh": 988908,
  "cookie-refresh-outline": 988909,
  "cookie-remove": 988888,
  "cookie-remove-outline": 988889,
  "cookie-settings": 988892,
  "cookie-settings-outline": 988893,
  "coolant-temperature": 984008,
  "copyleft": 989497,
  "copyright": 984550,
  "cordova": 985432,
  "corn": 985016,
  "corn-off": 988143,
  "cosine-wave": 988281,
  "counter": 983449,
  "countertop": 989212,
  "countertop-outline": 989213,
  "cow": 983450,
  "cow-off": 989436,
  "cpu-32-bit": 986847,
  "cpu-64-bit": 986848,
  "cradle": 989579,
  "cradle-outline": 989585,
  "crane": 985186,
  "creation": 984692,
  "creative-commons": 986475,
  "credit-card": 987119,
  "credit-card-check": 988112,
  "credit-card-check-outline": 988113,
  "credit-card-chip": 989455,
  "credit-card-chip-outline": 989456,
  "credit-card-clock": 986849,
  "credit-card-clock-outline": 986850,
  "credit-card-edit": 989143,
  "credit-card-edit-outline": 989144,
  "credit-card-fast": 989457,
  "credit-card-fast-outline": 989458,
  "credit-card-lock": 989415,
  "credit-card-lock-outline": 989416,
  "credit-card-marker": 984744,
  "credit-card-marker-outline": 986558,
  "credit-card-minus": 987052,
  "credit-card-minus-outline": 987053,
  "credit-card-multiple": 987120,
  "credit-card-multiple-outline": 983452,
  "credit-card-off": 987121,
  "credit-card-off-outline": 984548,
  "credit-card-outline": 983451,
  "credit-card-plus": 987122,
  "credit-card-plus-outline": 984694,
  "credit-card-refresh": 988741,
  "credit-card-refresh-outline": 988742,
  "credit-card-refund": 987123,
  "credit-card-refund-outline": 985768,
  "credit-card-remove": 987054,
  "credit-card-remove-outline": 987055,
  "credit-card-scan": 987124,
  "credit-card-scan-outline": 983453,
  "credit-card-search": 988743,
  "credit-card-search-outline": 988744,
  "credit-card-settings": 987125,
  "credit-card-settings-outline": 985303,
  "credit-card-sync": 988745,
  "credit-card-sync-outline": 988746,
  "credit-card-wireless": 985090,
  "credit-card-wireless-off": 984442,
  "credit-card-wireless-off-outline": 984443,
  "credit-card-wireless-outline": 986476,
  "cricket": 986477,
  "crop": 983454,
  "crop-free": 983455,
  "crop-landscape": 983456,
  "crop-portrait": 983457,
  "crop-rotate": 984726,
  "crop-square": 983458,
  "cross": 985427,
  "cross-bolnisi": 986349,
  "cross-celtic": 986357,
  "cross-outline": 986358,
  "crosshairs": 983459,
  "crosshairs-gps": 983460,
  "crosshairs-off": 986949,
  "crosshairs-question": 987446,
  "crowd": 989557,
  "crown": 983461,
  "crown-circle": 989148,
  "crown-circle-outline": 989149,
  "crown-outline": 987600,
  "cryengine": 985433,
  "crystal-ball": 985903,
  "cube": 983462,
  "cube-off": 988188,
  "cube-off-outline": 988189,
  "cube-outline": 983463,
  "cube-scan": 985988,
  "cube-send": 983464,
  "cube-unfolded": 983465,
  "cup": 983466,
  "cup-off": 984549,
  "cup-off-outline": 988029,
  "cup-outline": 987919,
  "cup-water": 983467,
  "cupboard": 986950,
  "cupboard-outline": 986951,
  "cupcake": 985434,
  "curling": 985187,
  "currency-bdt": 985188,
  "currency-brl": 985989,
  "currency-btc": 983468,
  "currency-cny": 985018,
  "currency-eth": 985019,
  "currency-eur": 983469,
  "currency-eur-off": 987925,
  "currency-gbp": 983470,
  "currency-ils": 986209,
  "currency-inr": 983471,
  "currency-jpy": 985020,
  "currency-krw": 985021,
  "currency-kzt": 985189,
  "currency-mnt": 988434,
  "currency-ngn": 983472,
  "currency-php": 985574,
  "currency-rial": 986780,
  "currency-rub": 983473,
  "currency-rupee": 989558,
  "currency-sign": 985022,
  "currency-try": 983474,
  "currency-twd": 985023,
  "currency-usd": 983489,
  "currency-usd-off": 984698,
  "current-ac": 988288,
  "current-dc": 985436,
  "cursor-default": 983488,
  "cursor-default-click": 986365,
  "cursor-default-click-outline": 986366,
  "cursor-default-gesture": 987431,
  "cursor-default-gesture-outline": 987432,
  "cursor-default-outline": 983487,
  "cursor-move": 983486,
  "cursor-pointer": 983485,
  "cursor-text": 984551,
  "curtains": 989254,
  "curtains-closed": 989255,
  "cylinder": 989518,
  "cylinder-off": 989519,
  "dance-ballroom": 988667,
  "dance-pole": 988536,
  "data-matrix": 988476,
  "data-matrix-edit": 988477,
  "data-matrix-minus": 988478,
  "data-matrix-plus": 988479,
  "data-matrix-remove": 988480,
  "data-matrix-scan": 988481,
  "database": 983484,
  "database-alert": 988730,
  "database-alert-outline": 988708,
  "database-arrow-down": 988731,
  "database-arrow-down-outline": 988709,
  "database-arrow-left": 988732,
  "database-arrow-left-outline": 988710,
  "database-arrow-right": 988733,
  "database-arrow-right-outline": 988711,
  "database-arrow-up": 988734,
  "database-arrow-up-outline": 988712,
  "database-check": 985769,
  "database-check-outline": 988713,
  "database-clock": 988735,
  "database-clock-outline": 988714,
  "database-cog": 988747,
  "database-cog-outline": 988748,
  "database-edit": 985990,
  "database-edit-outline": 988715,
  "database-export": 985438,
  "database-export-outline": 988716,
  "database-eye": 989471,
  "database-eye-off": 989472,
  "database-eye-off-outline": 989473,
  "database-eye-outline": 989474,
  "database-import": 985437,
  "database-import-outline": 988717,
  "database-lock": 985770,
  "database-lock-outline": 988718,
  "database-marker": 987894,
  "database-marker-outline": 988719,
  "database-minus": 983483,
  "database-minus-outline": 988720,
  "database-off": 988736,
  "database-off-outline": 988721,
  "database-outline": 988722,
  "database-plus": 983482,
  "database-plus-outline": 988723,
  "database-refresh": 984514,
  "database-refresh-outline": 988724,
  "database-remove": 986368,
  "database-remove-outline": 988725,
  "database-search": 985190,
  "database-search-outline": 988726,
  "database-settings": 986369,
  "database-settings-outline": 988727,
  "database-sync": 986367,
  "database-sync-outline": 988728,
  "death-star": 985304,
  "death-star-variant": 985305,
  "deathly-hallows": 985991,
  "debian": 985306,
  "debug-step-into": 983481,
  "debug-step-out": 983480,
  "debug-step-over": 983479,
  "decagram": 984940,
  "decagram-outline": 984941,
  "decimal": 987297,
  "decimal-comma": 987298,
  "decimal-comma-decrease": 987299,
  "decimal-comma-increase": 987300,
  "decimal-decrease": 983478,
  "decimal-increase": 983477,
  "delete": 983476,
  "delete-alert": 987301,
  "delete-alert-outline": 987302,
  "delete-circle": 984707,
  "delete-circle-outline": 985992,
  "delete-clock": 988502,
  "delete-clock-outline": 988503,
  "delete-empty": 984780,
  "delete-empty-outline": 986781,
  "delete-forever": 984552,
  "delete-forever-outline": 985993,
  "delete-off": 987303,
  "delete-off-outline": 987304,
  "delete-outline": 985575,
  "delete-restore": 985113,
  "delete-sweep": 984553,
  "delete-sweep-outline": 986210,
  "delete-variant": 983475,
  "delta": 983490,
  "desk": 987705,
  "desk-lamp": 985439,
  "deskphone": 983491,
  "desktop-classic": 985024,
  "desktop-mac": 983492,
  "desktop-mac-dashboard": 985576,
  "desktop-tower": 983493,
  "desktop-tower-monitor": 985771,
  "details": 983494,
  "dev-to": 986478,
  "developer-board": 984727,
  "deviantart": 983495,
  "devices": 987056,
  "dharmachakra": 985419,
  "diabetes": 987430,
  "dialpad": 984604,
  "diameter": 986211,
  "diameter-outline": 986212,
  "diameter-variant": 986213,
  "diamond": 985994,
  "diamond-outline": 985995,
  "diamond-stone": 983496,
  "dice-1": 983498,
  "dice-1-outline": 987466,
  "dice-2": 983499,
  "dice-2-outline": 987467,
  "dice-3": 983500,
  "dice-3-outline": 987468,
  "dice-4": 983501,
  "dice-4-outline": 987469,
  "dice-5": 983502,
  "dice-5-outline": 987470,
  "dice-6": 983503,
  "dice-6-outline": 987471,
  "dice-d10": 987475,
  "dice-d10-outline": 984943,
  "dice-d12": 987476,
  "dice-d12-outline": 985191,
  "dice-d20": 987477,
  "dice-d20-outline": 984554,
  "dice-d4": 987472,
  "dice-d4-outline": 984555,
  "dice-d6": 987473,
  "dice-d6-outline": 984557,
  "dice-d8": 987474,
  "dice-d8-outline": 984556,
  "dice-multiple": 984942,
  "dice-multiple-outline": 987478,
  "digital-ocean": 987703,
  "dip-switch": 985025,
  "directions": 983504,
  "directions-fork": 984641,
  "disc": 984558,
  "disc-alert": 983505,
  "disc-player": 985440,
  "discord": 984687,
  "dishwasher": 985772,
  "dishwasher-alert": 987576,
  "dishwasher-off": 987577,
  "disqus": 983506,
  "distribute-horizontal-center": 987593,
  "distribute-horizontal-left": 987592,
  "distribute-horizontal-right": 987594,
  "distribute-vertical-bottom": 987595,
  "distribute-vertical-center": 987596,
  "distribute-vertical-top": 987597,
  "diversify": 989303,
  "diving": 989559,
  "diving-flippers": 986559,
  "diving-helmet": 986560,
  "diving-scuba": 986561,
  "diving-scuba-flag": 986562,
  "diving-scuba-tank": 986563,
  "diving-scuba-tank-multiple": 986564,
  "diving-snorkel": 986565,
  "division": 983508,
  "division-box": 983509,
  "dlna": 985665,
  "dna": 984708,
  "dns": 983510,
  "dns-outline": 985996,
  "dock-bottom": 987305,
  "dock-left": 987306,
  "dock-right": 987307,
  "dock-top": 988435,
  "dock-window": 987308,
  "docker": 985192,
  "doctor": 985666,
  "dog": 985667,
  "dog-service": 985773,
  "dog-side": 985668,
  "dog-side-off": 988910,
  "dolby": 984755,
  "dolly": 986782,
  "dolphin": 989364,
  "domain": 983511,
  "domain-off": 986479,
  "domain-plus": 987309,
  "domain-remove": 987310,
  "dome-light": 988190,
  "domino-mask": 987171,
  "donkey": 985026,
  "door": 985114,
  "door-closed": 985115,
  "door-closed-lock": 987311,
  "door-open": 985116,
  "door-sliding": 989214,
  "door-sliding-lock": 989215,
  "door-sliding-open": 989216,
  "doorbell": 987878,
  "doorbell-video": 985193,
  "dot-net": 985774,
  "dots-circle": 989560,
  "dots-grid": 988668,
  "dots-hexagon": 988671,
  "dots-horizontal": 983512,
  "dots-horizontal-circle": 985027,
  "dots-horizontal-circle-outline": 985997,
  "dots-square": 988669,
  "dots-triangle": 988670,
  "dots-vertical": 983513,
  "dots-vertical-circle": 985028,
  "dots-vertical-circle-outline": 985998,
  "download": 983514,
  "download-box": 988258,
  "download-box-outline": 988259,
  "download-circle": 988260,
  "download-circle-outline": 988261,
  "download-lock": 987936,
  "download-lock-outline": 987937,
  "download-multiple": 985577,
  "download-network": 984820,
  "download-network-outline": 986214,
  "download-off": 987312,
  "download-off-outline": 987313,
  "download-outline": 985999,
  "drag": 983515,
  "drag-horizontal": 983516,
  "drag-horizontal-variant": 987888,
  "drag-variant": 986000,
  "drag-vertical": 983517,
  "drag-vertical-variant": 987889,
  "drama-masks": 986370,
  "draw": 986953,
  "draw-pen": 989625,
  "drawing": 983518,
  "drawing-box": 983519,
  "dresser": 986954,
  "dresser-outline": 986955,
  "drone": 983522,
  "dropbox": 983523,
  "drupal": 983524,
  "duck": 983525,
  "dumbbell": 983526,
  "dump-truck": 986215,
  "ear-hearing": 985029,
  "ear-hearing-off": 985669,
  "earbuds": 989263,
  "earbuds-off": 989264,
  "earbuds-off-outline": 989265,
  "earbuds-outline": 989266,
  "earth": 983527,
  "earth-arrow-right": 987921,
  "earth-box": 984781,
  "earth-box-minus": 988167,
  "earth-box-off": 984782,
  "earth-box-plus": 988166,
  "earth-box-remove": 988168,
  "earth-minus": 988164,
  "earth-off": 983528,
  "earth-plus": 988163,
  "earth-remove": 988165,
  "egg": 985775,
  "egg-easter": 985776,
  "egg-fried": 989258,
  "egg-off": 988144,
  "egg-off-outline": 988145,
  "egg-outline": 988146,
  "eiffel-tower": 988523,
  "eight-track": 985578,
  "eject": 983530,
  "eject-outline": 986001,
  "electric-switch": 986783,
  "electric-switch-closed": 987353,
  "electron-framework": 987172,
  "elephant": 985030,
  "elevation-decline": 983531,
  "elevation-rise": 983532,
  "elevator": 983533,
  "elevator-down": 987842,
  "elevator-passenger": 988033,
  "elevator-passenger-off": 989561,
  "elevator-passenger-off-outline": 989562,
  "elevator-passenger-outline": 989563,
  "elevator-up": 987841,
  "ellipse": 986784,
  "ellipse-outline": 986785,
  "email": 983534,
  "email-alert": 984783,
  "email-alert-outline": 986434,
  "email-box": 986371,
  "email-check": 985777,
  "email-check-outline": 985778,
  "email-edit": 986851,
  "email-edit-outline": 986852,
  "email-fast": 989295,
  "email-fast-outline": 989296,
  "email-lock": 983537,
  "email-mark-as-unread": 986002,
  "email-minus": 986853,
  "email-minus-outline": 986854,
  "email-multiple": 986855,
  "email-multiple-outline": 986856,
  "email-newsletter": 987057,
  "email-off": 988131,
  "email-off-outline": 988132,
  "email-open": 983535,
  "email-open-multiple": 986857,
  "email-open-multiple-outline": 986858,
  "email-open-outline": 984559,
  "email-outline": 983536,
  "email-plus": 985579,
  "email-plus-outline": 985580,
  "email-receive": 987354,
  "email-receive-outline": 987355,
  "email-remove": 988769,
  "email-remove-outline": 988770,
  "email-seal": 989531,
  "email-seal-outline": 989532,
  "email-search": 985441,
  "email-search-outline": 985442,
  "email-send": 987356,
  "email-send-outline": 987357,
  "email-sync": 987847,
  "email-sync-outline": 987848,
  "email-variant": 984560,
  "ember": 985904,
  "emby": 984756,
  "emoticon": 986216,
  "emoticon-angry": 986217,
  "emoticon-angry-outline": 986218,
  "emoticon-confused": 987358,
  "emoticon-confused-outline": 987359,
  "emoticon-cool": 986219,
  "emoticon-cool-outline": 983539,
  "emoticon-cry": 986220,
  "emoticon-cry-outline": 986221,
  "emoticon-dead": 986222,
  "emoticon-dead-outline": 984731,
  "emoticon-devil": 986223,
  "emoticon-devil-outline": 983540,
  "emoticon-excited": 986224,
  "emoticon-excited-outline": 984732,
  "emoticon-frown": 986956,
  "emoticon-frown-outline": 986957,
  "emoticon-happy": 986225,
  "emoticon-happy-outline": 983541,
  "emoticon-kiss": 986226,
  "emoticon-kiss-outline": 986227,
  "emoticon-lol": 987668,
  "emoticon-lol-outline": 987669,
  "emoticon-neutral": 986228,
  "emoticon-neutral-outline": 983542,
  "emoticon-outline": 983538,
  "emoticon-poop": 983543,
  "emoticon-poop-outline": 986229,
  "emoticon-sad": 986230,
  "emoticon-sad-outline": 983544,
  "emoticon-sick": 988540,
  "emoticon-sick-outline": 988541,
  "emoticon-tongue": 983545,
  "emoticon-tongue-outline": 986231,
  "emoticon-wink": 986232,
  "emoticon-wink-outline": 986233,
  "engine": 983546,
  "engine-off": 985670,
  "engine-off-outline": 985671,
  "engine-outline": 983547,
  "epsilon": 987360,
  "equal": 983548,
  "equal-box": 983549,
  "equalizer": 986786,
  "equalizer-outline": 986787,
  "eraser": 983550,
  "eraser-variant": 984642,
  "escalator": 983551,
  "escalator-box": 988057,
  "escalator-down": 987840,
  "escalator-up": 987839,
  "eslint": 986234,
  "et": 985779,
  "ethereum": 985194,
  "ethernet": 983552,
  "ethernet-cable": 983553,
  "ethernet-cable-off": 983554,
  "ev-plug-ccs1": 988441,
  "ev-plug-ccs2": 988442,
  "ev-plug-chademo": 988443,
  "ev-plug-tesla": 988444,
  "ev-plug-type1": 988445,
  "ev-plug-type2": 988446,
  "ev-station": 984561,
  "evernote": 983556,
  "excavator": 987173,
  "exclamation": 983557,
  "exclamation-thick": 987704,
  "exit-run": 985672,
  "exit-to-app": 983558,
  "expand-all": 985780,
  "expand-all-outline": 985781,
  "expansion-card": 985262,
  "expansion-card-variant": 987058,
  "exponent": 985443,
  "exponent-box": 985444,
  "export": 983559,
  "export-variant": 986003,
  "eye": 983560,
  "eye-arrow-left": 989437,
  "eye-arrow-left-outline": 989438,
  "eye-arrow-right": 989439,
  "eye-arrow-right-outline": 989440,
  "eye-check": 986372,
  "eye-check-outline": 986373,
  "eye-circle": 986004,
  "eye-circle-outline": 986005,
  "eye-minus": 987174,
  "eye-minus-outline": 987175,
  "eye-off": 983561,
  "eye-off-outline": 984785,
  "eye-outline": 984784,
  "eye-plus": 985195,
  "eye-plus-outline": 985196,
  "eye-refresh": 989564,
  "eye-refresh-outline": 989565,
  "eye-remove": 988643,
  "eye-remove-outline": 988644,
  "eye-settings": 985197,
  "eye-settings-outline": 985198,
  "eyedropper": 983562,
  "eyedropper-minus": 988125,
  "eyedropper-off": 988127,
  "eyedropper-plus": 988124,
  "eyedropper-remove": 988126,
  "eyedropper-variant": 983563,
  "face-agent": 986480,
  "face-man": 984643,
  "face-man-outline": 986006,
  "face-man-profile": 984644,
  "face-man-shimmer": 988620,
  "face-man-shimmer-outline": 988621,
  "face-mask": 988550,
  "face-mask-outline": 988551,
  "face-recognition": 986235,
  "face-woman": 987255,
  "face-woman-outline": 987256,
  "face-woman-profile": 987254,
  "face-woman-shimmer": 988622,
  "face-woman-shimmer-outline": 988623,
  "facebook": 983564,
  "facebook-gaming": 985053,
  "facebook-messenger": 983566,
  "facebook-workplace": 985905,
  "factory": 983567,
  "family-tree": 988686,
  "fan": 983568,
  "fan-alert": 988268,
  "fan-auto": 988957,
  "fan-chevron-down": 988269,
  "fan-chevron-up": 988270,
  "fan-minus": 988272,
  "fan-off": 985117,
  "fan-plus": 988271,
  "fan-remove": 988273,
  "fan-speed-1": 988274,
  "fan-speed-2": 988275,
  "fan-speed-3": 988276,
  "fast-forward": 983569,
  "fast-forward-10": 986481,
  "fast-forward-15": 989498,
  "fast-forward-30": 986374,
  "fast-forward-5": 987640,
  "fast-forward-60": 988683,
  "fast-forward-outline": 984786,
  "fax": 983570,
  "feather": 984787,
  "feature-search": 985673,
  "feature-search-outline": 985674,
  "fedora": 985307,
  "fence": 989082,
  "fence-electric": 989174,
  "fencing": 988353,
  "ferris-wheel": 986788,
  "ferry": 983571,
  "file": 983572,
  "file-account": 984891,
  "file-account-outline": 987176,
  "file-alert": 985675,
  "file-alert-outline": 985676,
  "file-cabinet": 985782,
  "file-cad": 986859,
  "file-cad-box": 986860,
  "file-cancel": 986566,
  "file-cancel-outline": 986567,
  "file-certificate": 987526,
  "file-certificate-outline": 987527,
  "file-chart": 983573,
  "file-chart-outline": 987177,
  "file-check": 983574,
  "file-check-outline": 986665,
  "file-clock": 987873,
  "file-clock-outline": 987874,
  "file-cloud": 983575,
  "file-cloud-outline": 987178,
  "file-code": 983598,
  "file-code-outline": 987179,
  "file-cog": 987259,
  "file-cog-outline": 987260,
  "file-compare": 985258,
  "file-delimited": 983576,
  "file-delimited-outline": 986789,
  "file-document": 983577,
  "file-document-edit": 986568,
  "file-document-edit-outline": 986569,
  "file-document-multiple": 988439,
  "file-document-multiple-outline": 988440,
  "file-document-outline": 985582,
  "file-download": 985445,
  "file-download-outline": 985446,
  "file-edit": 987623,
  "file-edit-outline": 987624,
  "file-excel": 983579,
  "file-excel-box": 983580,
  "file-excel-box-outline": 987180,
  "file-excel-outline": 987181,
  "file-export": 983581,
  "file-export-outline": 987182,
  "file-eye": 986570,
  "file-eye-outline": 986571,
  "file-find": 983582,
  "file-find-outline": 986007,
  "file-gif-box": 986488,
  "file-hidden": 984595,
  "file-image": 983583,
  "file-image-marker": 989042,
  "file-image-marker-outline": 989043,
  "file-image-minus": 989499,
  "file-image-minus-outline": 989500,
  "file-image-outline": 986800,
  "file-image-plus": 989501,
  "file-image-plus-outline": 989502,
  "file-image-remove": 989503,
  "file-image-remove-outline": 989504,
  "file-import": 983584,
  "file-import-outline": 987183,
  "file-jpg-box": 983589,
  "file-key": 987524,
  "file-key-outline": 987525,
  "file-link": 987511,
  "file-link-outline": 987512,
  "file-lock": 983585,
  "file-lock-outline": 987184,
  "file-marker": 989044,
  "file-marker-outline": 989045,
  "file-move": 985785,
  "file-move-outline": 987185,
  "file-multiple": 983586,
  "file-multiple-outline": 987186,
  "file-music": 983587,
  "file-music-outline": 986666,
  "file-outline": 983588,
  "file-pdf-box": 983590,
  "file-percent": 985118,
  "file-percent-outline": 987187,
  "file-phone": 987513,
  "file-phone-outline": 987514,
  "file-plus": 984914,
  "file-plus-outline": 986861,
  "file-png-box": 986669,
  "file-powerpoint": 983591,
  "file-powerpoint-box": 983592,
  "file-powerpoint-box-outline": 987188,
  "file-powerpoint-outline": 987189,
  "file-presentation-box": 983593,
  "file-question": 985199,
  "file-question-outline": 987190,
  "file-refresh": 985368,
  "file-refresh-outline": 984385,
  "file-remove": 986008,
  "file-remove-outline": 987191,
  "file-replace": 985906,
  "file-replace-outline": 985907,
  "file-restore": 984688,
  "file-restore-outline": 987192,
  "file-search": 986236,
  "file-search-outline": 986237,
  "file-send": 983594,
  "file-send-outline": 987193,
  "file-settings": 987257,
  "file-settings-outline": 987258,
  "file-sign": 989635,
  "file-star": 987194,
  "file-star-outline": 987195,
  "file-swap": 987060,
  "file-swap-outline": 987061,
  "file-sync": 987670,
  "file-sync-outline": 987671,
  "file-table": 986238,
  "file-table-box": 987361,
  "file-table-box-multiple": 987362,
  "file-table-box-multiple-outline": 987363,
  "file-table-box-outline": 987364,
  "file-table-outline": 986239,
  "file-tree": 984645,
  "file-tree-outline": 988114,
  "file-undo": 985308,
  "file-undo-outline": 987196,
  "file-upload": 985677,
  "file-upload-outline": 985678,
  "file-video": 983595,
  "file-video-outline": 986668,
  "file-word": 983596,
  "file-word-box": 983597,
  "file-word-box-outline": 987197,
  "file-word-outline": 987198,
  "film": 983599,
  "filmstrip": 983600,
  "filmstrip-box": 983858,
  "filmstrip-box-multiple": 986392,
  "filmstrip-off": 983601,
  "filter": 983602,
  "filter-check": 989420,
  "filter-check-outline": 989421,
  "filter-menu": 987365,
  "filter-menu-outline": 987366,
  "filter-minus": 986862,
  "filter-minus-outline": 986863,
  "filter-off": 988399,
  "filter-off-outline": 988400,
  "filter-outline": 983603,
  "filter-plus": 986864,
  "filter-plus-outline": 986865,
  "filter-remove": 983604,
  "filter-remove-outline": 983605,
  "filter-variant": 983606,
  "filter-variant-minus": 987410,
  "filter-variant-plus": 987411,
  "filter-variant-remove": 987199,
  "finance": 985119,
  "find-replace": 984788,
  "fingerprint": 983607,
  "fingerprint-off": 986801,
  "fire": 983608,
  "fire-alert": 988631,
  "fire-circle": 989191,
  "fire-extinguisher": 986866,
  "fire-hydrant": 987447,
  "fire-hydrant-alert": 987448,
  "fire-hydrant-off": 987449,
  "fire-off": 988962,
  "fire-truck": 985259,
  "firebase": 985447,
  "firefox": 983609,
  "fireplace": 986670,
  "fireplace-off": 986671,
  "firewire": 984510,
  "firework": 986672,
  "firework-off": 988963,
  "fish": 983610,
  "fish-off": 988147,
  "fishbowl": 986867,
  "fishbowl-outline": 986868,
  "fit-to-page": 986869,
  "fit-to-page-outline": 986870,
  "fit-to-screen": 989428,
  "fit-to-screen-outline": 989429,
  "flag": 983611,
  "flag-checkered": 983612,
  "flag-minus": 986009,
  "flag-minus-outline": 987314,
  "flag-off": 989422,
  "flag-off-outline": 989423,
  "flag-outline": 983613,
  "flag-plus": 986010,
  "flag-plus-outline": 987315,
  "flag-remove": 986011,
  "flag-remove-outline": 987316,
  "flag-triangle": 983615,
  "flag-variant": 983616,
  "flag-variant-outline": 983614,
  "flare": 986482,
  "flash": 983617,
  "flash-alert": 986871,
  "flash-alert-outline": 986872,
  "flash-auto": 983618,
  "flash-off": 983619,
  "flash-outline": 984789,
  "flash-red-eye": 984699,
  "flashlight": 983620,
  "flashlight-off": 983621,
  "flask": 983187,
  "flask-empty": 983188,
  "flask-empty-minus": 987706,
  "flask-empty-minus-outline": 987707,
  "flask-empty-off": 988148,
  "flask-empty-off-outline": 988149,
  "flask-empty-outline": 983189,
  "flask-empty-plus": 987708,
  "flask-empty-plus-outline": 987709,
  "flask-empty-remove": 987710,
  "flask-empty-remove-outline": 987711,
  "flask-minus": 987712,
  "flask-minus-outline": 987713,
  "flask-off": 988150,
  "flask-off-outline": 988151,
  "flask-outline": 983190,
  "flask-plus": 987714,
  "flask-plus-outline": 987715,
  "flask-remove": 987716,
  "flask-remove-outline": 987717,
  "flask-round-bottom": 987723,
  "flask-round-bottom-empty": 987724,
  "flask-round-bottom-empty-outline": 987725,
  "flask-round-bottom-outline": 987726,
  "fleur-de-lis": 987907,
  "flip-horizontal": 987367,
  "flip-to-back": 983623,
  "flip-to-front": 983624,
  "flip-vertical": 987368,
  "floor-lamp": 985309,
  "floor-lamp-dual": 987200,
  "floor-lamp-dual-outline": 989134,
  "floor-lamp-outline": 989128,
  "floor-lamp-torchiere": 988999,
  "floor-lamp-torchiere-outline": 989142,
  "floor-lamp-torchiere-variant": 987201,
  "floor-lamp-torchiere-variant-outline": 989135,
  "floor-plan": 985121,
  "floppy": 983625,
  "floppy-variant": 985583,
  "flower": 983626,
  "flower-outline": 985584,
  "flower-pollen": 989317,
  "flower-pollen-outline": 989318,
  "flower-poppy": 986376,
  "flower-tulip": 985585,
  "flower-tulip-outline": 985586,
  "focus-auto": 986958,
  "focus-field": 986959,
  "focus-field-horizontal": 986960,
  "focus-field-vertical": 986961,
  "folder": 983627,
  "folder-account": 983628,
  "folder-account-outline": 986012,
  "folder-alert": 986572,
  "folder-alert-outline": 986573,
  "folder-check": 989566,
  "folder-check-outline": 989567,
  "folder-clock": 985786,
  "folder-clock-outline": 985787,
  "folder-cog": 987263,
  "folder-cog-outline": 987264,
  "folder-download": 983629,
  "folder-download-outline": 987369,
  "folder-edit": 985310,
  "folder-edit-outline": 986574,
  "folder-eye": 989066,
  "folder-eye-outline": 989067,
  "folder-google-drive": 983630,
  "folder-heart": 987370,
  "folder-heart-outline": 987371,
  "folder-hidden": 989086,
  "folder-home": 987317,
  "folder-home-outline": 987318,
  "folder-image": 983631,
  "folder-information": 987319,
  "folder-information-outline": 987320,
  "folder-key": 985260,
  "folder-key-network": 985261,
  "folder-key-network-outline": 986240,
  "folder-key-outline": 987372,
  "folder-lock": 983632,
  "folder-lock-open": 983633,
  "folder-marker": 987757,
  "folder-marker-outline": 987758,
  "folder-move": 983634,
  "folder-move-outline": 987718,
  "folder-multiple": 983635,
  "folder-multiple-image": 983636,
  "folder-multiple-outline": 983637,
  "folder-multiple-plus": 988286,
  "folder-multiple-plus-outline": 988287,
  "folder-music": 987993,
  "folder-music-outline": 987994,
  "folder-network": 985200,
  "folder-network-outline": 986241,
  "folder-open": 984944,
  "folder-open-outline": 986575,
  "folder-outline": 983638,
  "folder-plus": 983639,
  "folder-plus-outline": 986013,
  "folder-pound": 986377,
  "folder-pound-outline": 986378,
  "folder-refresh": 984905,
  "folder-refresh-outline": 984386,
  "folder-remove": 983640,
  "folder-remove-outline": 986014,
  "folder-search": 985448,
  "folder-search-outline": 985449,
  "folder-settings": 987261,
  "folder-settings-outline": 987262,
  "folder-star": 984733,
  "folder-star-multiple": 988115,
  "folder-star-multiple-outline": 988116,
  "folder-star-outline": 986015,
  "folder-swap": 987062,
  "folder-swap-outline": 987063,
  "folder-sync": 986379,
  "folder-sync-outline": 986380,
  "folder-table": 987875,
  "folder-table-outline": 987876,
  "folder-text": 986242,
  "folder-text-outline": 986243,
  "folder-upload": 983641,
  "folder-upload-outline": 987373,
  "folder-zip": 984811,
  "folder-zip-outline": 985017,
  "font-awesome": 983098,
  "food": 983642,
  "food-apple": 983643,
  "food-apple-outline": 986244,
  "food-croissant": 985032,
  "food-drumstick": 988191,
  "food-drumstick-off": 988264,
  "food-drumstick-off-outline": 988265,
  "food-drumstick-outline": 988192,
  "food-fork-drink": 984562,
  "food-halal": 988530,
  "food-hot-dog": 989259,
  "food-kosher": 988531,
  "food-off": 984563,
  "food-off-outline": 989461,
  "food-outline": 989462,
  "food-steak": 988266,
  "food-steak-off": 988267,
  "food-takeout-box": 989238,
  "food-takeout-box-outline": 989239,
  "food-turkey": 988956,
  "food-variant": 983644,
  "food-variant-off": 988133,
  "foot-print": 986962,
  "football": 983645,
  "football-australian": 983646,
  "football-helmet": 983647,
  "forest": 989335,
  "forklift": 985033,
  "form-dropdown": 988160,
  "form-select": 988161,
  "form-textarea": 987285,
  "form-textbox": 984590,
  "form-textbox-lock": 987997,
  "form-textbox-password": 985077,
  "format-align-bottom": 984915,
  "format-align-center": 983648,
  "format-align-justify": 983649,
  "format-align-left": 983650,
  "format-align-middle": 984916,
  "format-align-right": 983651,
  "format-align-top": 984917,
  "format-annotation-minus": 985788,
  "format-annotation-plus": 984646,
  "format-bold": 983652,
  "format-clear": 983653,
  "format-color-fill": 983654,
  "format-color-highlight": 986673,
  "format-color-marker-cancel": 987923,
  "format-color-text": 984734,
  "format-columns": 985311,
  "format-float-center": 983655,
  "format-float-left": 983656,
  "format-float-none": 983657,
  "format-float-right": 983658,
  "format-font": 984790,
  "format-font-size-decrease": 985587,
  "format-font-size-increase": 985588,
  "format-header-1": 983659,
  "format-header-2": 983660,
  "format-header-3": 983661,
  "format-header-4": 983662,
  "format-header-5": 983663,
  "format-header-6": 983664,
  "format-header-decrease": 983665,
  "format-header-equal": 983666,
  "format-header-increase": 983667,
  "format-header-pound": 983668,
  "format-horizontal-align-center": 984606,
  "format-horizontal-align-left": 984607,
  "format-horizontal-align-right": 984608,
  "format-indent-decrease": 983669,
  "format-indent-increase": 983670,
  "format-italic": 983671,
  "format-letter-case": 985908,
  "format-letter-case-lower": 985909,
  "format-letter-case-upper": 985910,
  "format-letter-ends-with": 987064,
  "format-letter-matches": 987065,
  "format-letter-spacing": 989526,
  "format-letter-starts-with": 987066,
  "format-line-spacing": 983672,
  "format-line-style": 984520,
  "format-line-weight": 984521,
  "format-list-bulleted": 983673,
  "format-list-bulleted-square": 986576,
  "format-list-bulleted-triangle": 986802,
  "format-list-bulleted-type": 983674,
  "format-list-checkbox": 985450,
  "format-list-checks": 984918,
  "format-list-group": 989280,
  "format-list-numbered": 983675,
  "format-list-numbered-rtl": 986381,
  "format-list-text": 987759,
  "format-overline": 986803,
  "format-page-break": 984791,
  "format-page-split": 989463,
  "format-paint": 983676,
  "format-paragraph": 983677,
  "format-pilcrow": 984792,
  "format-quote-close": 983678,
  "format-quote-close-outline": 987560,
  "format-quote-open": 984919,
  "format-quote-open-outline": 987559,
  "format-rotate-90": 984746,
  "format-section": 984735,
  "format-size": 983679,
  "format-strikethrough": 983680,
  "format-strikethrough-variant": 983681,
  "format-subscript": 983682,
  "format-superscript": 983683,
  "format-text": 983684,
  "format-text-rotation-angle-down": 987067,
  "format-text-rotation-angle-up": 987068,
  "format-text-rotation-down": 986483,
  "format-text-rotation-down-vertical": 987069,
  "format-text-rotation-none": 986484,
  "format-text-rotation-up": 987070,
  "format-text-rotation-vertical": 987071,
  "format-text-variant": 986674,
  "format-text-variant-outline": 988431,
  "format-text-wrapping-clip": 986382,
  "format-text-wrapping-overflow": 986383,
  "format-text-wrapping-wrap": 986384,
  "format-textbox": 986385,
  "format-textdirection-l-to-r": 983685,
  "format-textdirection-r-to-l": 983686,
  "format-title": 984564,
  "format-underline": 983687,
  "format-underline-wavy": 989417,
  "format-vertical-align-bottom": 984609,
  "format-vertical-align-center": 984610,
  "format-vertical-align-top": 984611,
  "format-wrap-inline": 983688,
  "format-wrap-square": 983689,
  "format-wrap-tight": 983690,
  "format-wrap-top-bottom": 983691,
  "forum": 983692,
  "forum-outline": 985122,
  "forward": 983693,
  "forwardburger": 986485,
  "fountain": 985451,
  "fountain-pen": 986386,
  "fountain-pen-tip": 986387,
  "fraction-one-half": 989586,
  "freebsd": 985312,
  "french-fries": 989527,
  "frequently-asked-questions": 986804,
  "fridge": 983696,
  "fridge-alert": 987569,
  "fridge-alert-outline": 987570,
  "fridge-bottom": 983698,
  "fridge-industrial": 988654,
  "fridge-industrial-alert": 988655,
  "fridge-industrial-alert-outline": 988656,
  "fridge-industrial-off": 988657,
  "fridge-industrial-off-outline": 988658,
  "fridge-industrial-outline": 988659,
  "fridge-off": 987567,
  "fridge-off-outline": 987568,
  "fridge-outline": 983695,
  "fridge-top": 983697,
  "fridge-variant": 988660,
  "fridge-variant-alert": 988661,
  "fridge-variant-alert-outline": 988662,
  "fridge-variant-off": 988663,
  "fridge-variant-off-outline": 988664,
  "fridge-variant-outline": 988665,
  "fruit-cherries": 987202,
  "fruit-cherries-off": 988152,
  "fruit-citrus": 987203,
  "fruit-citrus-off": 988153,
  "fruit-grapes": 987204,
  "fruit-grapes-outline": 987205,
  "fruit-pineapple": 987206,
  "fruit-watermelon": 987207,
  "fuel": 985034,
  "fuel-cell": 989365,
  "fullscreen": 983699,
  "fullscreen-exit": 983700,
  "function": 983701,
  "function-variant": 985201,
  "furigana-horizontal": 987265,
  "furigana-vertical": 987266,
  "fuse": 986245,
  "fuse-alert": 988205,
  "fuse-blade": 986246,
  "fuse-off": 988204,
  "gamepad": 983702,
  "gamepad-circle": 986675,
  "gamepad-circle-down": 986676,
  "gamepad-circle-left": 986677,
  "gamepad-circle-outline": 986678,
  "gamepad-circle-right": 986679,
  "gamepad-circle-up": 986680,
  "gamepad-down": 986681,
  "gamepad-left": 986682,
  "gamepad-outline": 989465,
  "gamepad-right": 986683,
  "gamepad-round": 986684,
  "gamepad-round-down": 986685,
  "gamepad-round-left": 986686,
  "gamepad-round-outline": 986687,
  "gamepad-round-right": 986688,
  "gamepad-round-up": 986689,
  "gamepad-square": 986805,
  "gamepad-square-outline": 986806,
  "gamepad-up": 986690,
  "gamepad-variant": 983703,
  "gamepad-variant-outline": 986807,
  "gamma": 987374,
  "gantry-crane": 986577,
  "garage": 984793,
  "garage-alert": 985202,
  "garage-alert-variant": 987861,
  "garage-lock": 989179,
  "garage-open": 984794,
  "garage-open-variant": 987860,
  "garage-variant": 987859,
  "garage-variant-lock": 989180,
  "gas-cylinder": 984647,
  "gas-station": 983704,
  "gas-station-off": 988169,
  "gas-station-off-outline": 988170,
  "gas-station-outline": 986808,
  "gate": 983705,
  "gate-alert": 989176,
  "gate-and": 985313,
  "gate-arrow-left": 989175,
  "gate-arrow-right": 987497,
  "gate-nand": 985314,
  "gate-nor": 985315,
  "gate-not": 985316,
  "gate-open": 987498,
  "gate-or": 985317,
  "gate-xnor": 985318,
  "gate-xor": 985319,
  "gatsby": 986691,
  "gauge": 983706,
  "gauge-empty": 985203,
  "gauge-full": 985204,
  "gauge-low": 985205,
  "gavel": 983707,
  "gender-female": 983708,
  "gender-male": 983709,
  "gender-male-female": 983710,
  "gender-male-female-variant": 987455,
  "gender-non-binary": 987456,
  "gender-transgender": 983711,
  "gentoo": 985320,
  "gesture": 985035,
  "gesture-double-tap": 984892,
  "gesture-pinch": 985789,
  "gesture-spread": 985790,
  "gesture-swipe": 986486,
  "gesture-swipe-down": 984893,
  "gesture-swipe-horizontal": 985791,
  "gesture-swipe-left": 984894,
  "gesture-swipe-right": 984895,
  "gesture-swipe-up": 984896,
  "gesture-swipe-vertical": 985792,
  "gesture-tap": 984897,
  "gesture-tap-box": 987817,
  "gesture-tap-button": 987816,
  "gesture-tap-hold": 986487,
  "gesture-two-double-tap": 984898,
  "gesture-two-tap": 984899,
  "ghost": 983712,
  "ghost-off": 985589,
  "ghost-off-outline": 988764,
  "ghost-outline": 988765,
  "gift": 986692,
  "gift-off": 988911,
  "gift-off-outline": 988912,
  "gift-open": 988913,
  "gift-open-outline": 988914,
  "gift-outline": 983713,
  "git": 983714,
  "github": 983716,
  "gitlab": 986016,
  "glass-cocktail": 983894,
  "glass-cocktail-off": 988646,
  "glass-flute": 983717,
  "glass-fragile": 989299,
  "glass-mug": 983718,
  "glass-mug-off": 988647,
  "glass-mug-variant": 987414,
  "glass-mug-variant-off": 988648,
  "glass-pint-outline": 987917,
  "glass-stange": 983719,
  "glass-tulip": 983720,
  "glass-wine": 985206,
  "glasses": 983722,
  "globe-light": 987863,
  "globe-model": 985321,
  "gmail": 983723,
  "gnome": 983724,
  "go-kart": 986489,
  "go-kart-track": 986490,
  "gog": 986017,
  "gold": 987727,
  "golf": 985123,
  "golf-cart": 987556,
  "golf-tee": 987267,
  "gondola": 984710,
  "goodreads": 986491,
  "google": 983725,
  "google-ads": 986247,
  "google-analytics": 985036,
  "google-assistant": 985037,
  "google-cardboard": 983726,
  "google-chrome": 983727,
  "google-circles": 983728,
  "google-circles-communities": 983729,
  "google-circles-extended": 983730,
  "google-circles-group": 983731,
  "google-classroom": 983744,
  "google-cloud": 987638,
  "google-controller": 983732,
  "google-controller-off": 983733,
  "google-downasaur": 988002,
  "google-drive": 983734,
  "google-earth": 983735,
  "google-fit": 985452,
  "google-glass": 983736,
  "google-hangouts": 983753,
  "google-home": 985124,
  "google-keep": 984796,
  "google-lens": 985590,
  "google-maps": 984565,
  "google-my-business": 987208,
  "google-nearby": 983737,
  "google-play": 983740,
  "google-plus": 983741,
  "google-podcast": 986809,
  "google-spreadsheet": 985591,
  "google-street-view": 986248,
  "google-translate": 983743,
  "gradient-horizontal": 989002,
  "gradient-vertical": 984736,
  "grain": 986492,
  "graph": 987209,
  "graph-outline": 987210,
  "graphql": 985207,
  "grass": 988432,
  "grave-stone": 986018,
  "grease-pencil": 984648,
  "greater-than": 985453,
  "greater-than-or-equal": 985454,
  "greenhouse": 983085,
  "grid": 983745,
  "grid-large": 984920,
  "grid-off": 983746,
  "grill": 986693,
  "grill-outline": 987530,
  "group": 983747,
  "guitar-acoustic": 984945,
  "guitar-electric": 983748,
  "guitar-pick": 983749,
  "guitar-pick-outline": 983750,
  "guy-fawkes-mask": 985125,
  "hail": 985793,
  "hair-dryer": 987375,
  "hair-dryer-outline": 987376,
  "halloween": 986019,
  "hamburger": 984709,
  "hamburger-check": 989046,
  "hamburger-minus": 989047,
  "hamburger-off": 989048,
  "hamburger-plus": 989049,
  "hamburger-remove": 989050,
  "hammer": 985322,
  "hammer-screwdriver": 987938,
  "hammer-sickle": 989319,
  "hammer-wrench": 987939,
  "hand-back-left": 986694,
  "hand-back-left-off": 989232,
  "hand-back-left-off-outline": 989234,
  "hand-back-left-outline": 989228,
  "hand-back-right": 986695,
  "hand-back-right-off": 989233,
  "hand-back-right-off-outline": 989235,
  "hand-back-right-outline": 989229,
  "hand-clap": 989515,
  "hand-coin": 989327,
  "hand-coin-outline": 989328,
  "hand-extended": 989366,
  "hand-extended-outline": 989367,
  "hand-front-left": 989227,
  "hand-front-left-outline": 989230,
  "hand-front-right": 985679,
  "hand-front-right-outline": 989231,
  "hand-heart": 987377,
  "hand-heart-outline": 988542,
  "hand-okay": 985680,
  "hand-peace": 985681,
  "hand-peace-variant": 985682,
  "hand-pointing-down": 985683,
  "hand-pointing-left": 985684,
  "hand-pointing-right": 983751,
  "hand-pointing-up": 985685,
  "hand-saw": 986696,
  "hand-wash": 988543,
  "hand-wash-outline": 988544,
  "hand-water": 988063,
  "hand-wave": 989217,
  "hand-wave-outline": 989218,
  "handball": 986963,
  "handcuffs": 987454,
  "hands-pray": 984441,
  "handshake": 987672,
  "handshake-outline": 988577,
  "hanger": 983752,
  "hard-hat": 985455,
  "harddisk": 983754,
  "harddisk-plus": 987211,
  "harddisk-remove": 987212,
  "hat-fedora": 986020,
  "hazard-lights": 986249,
  "hdr": 986493,
  "hdr-off": 986494,
  "head": 987998,
  "head-alert": 987960,
  "head-alert-outline": 987961,
  "head-check": 987962,
  "head-check-outline": 987963,
  "head-cog": 987964,
  "head-cog-outline": 987965,
  "head-dots-horizontal": 987966,
  "head-dots-horizontal-outline": 987967,
  "head-flash": 987968,
  "head-flash-outline": 987969,
  "head-heart": 987970,
  "head-heart-outline": 987971,
  "head-lightbulb": 987972,
  "head-lightbulb-outline": 987973,
  "head-minus": 987974,
  "head-minus-outline": 987975,
  "head-outline": 987999,
  "head-plus": 987976,
  "head-plus-outline": 987977,
  "head-question": 987978,
  "head-question-outline": 987979,
  "head-remove": 987980,
  "head-remove-outline": 987981,
  "head-snowflake": 987982,
  "head-snowflake-outline": 987983,
  "head-sync": 987984,
  "head-sync-outline": 987985,
  "headphones": 983755,
  "headphones-bluetooth": 985456,
  "headphones-box": 983756,
  "headphones-off": 985038,
  "headphones-settings": 983757,
  "headset": 983758,
  "headset-dock": 983759,
  "headset-off": 983760,
  "heart": 983761,
  "heart-box": 983762,
  "heart-box-outline": 983763,
  "heart-broken": 983764,
  "heart-broken-outline": 986388,
  "heart-circle": 985457,
  "heart-circle-outline": 985458,
  "heart-cog": 988771,
  "heart-cog-outline": 988772,
  "heart-flash": 986873,
  "heart-half": 984799,
  "heart-half-full": 984798,
  "heart-half-outline": 984800,
  "heart-minus": 988207,
  "heart-minus-outline": 988210,
  "heart-multiple": 985686,
  "heart-multiple-outline": 985687,
  "heart-off": 984921,
  "heart-off-outline": 988212,
  "heart-outline": 983765,
  "heart-plus": 988206,
  "heart-plus-outline": 988209,
  "heart-pulse": 984566,
  "heart-remove": 988208,
  "heart-remove-outline": 988211,
  "heart-settings": 988773,
  "heart-settings-outline": 988774,
  "helicopter": 985794,
  "help": 983766,
  "help-box": 984971,
  "help-circle": 983767,
  "help-circle-outline": 984613,
  "help-network": 984821,
  "help-network-outline": 986250,
  "help-rhombus": 986021,
  "help-rhombus-outline": 986022,
  "hexadecimal": 987815,
  "hexagon": 983768,
  "hexagon-multiple": 984801,
  "hexagon-multiple-outline": 987378,
  "hexagon-outline": 983769,
  "hexagon-slice-1": 985795,
  "hexagon-slice-2": 985796,
  "hexagon-slice-3": 985797,
  "hexagon-slice-4": 985798,
  "hexagon-slice-5": 985799,
  "hexagon-slice-6": 985800,
  "hexagram": 985801,
  "hexagram-outline": 985802,
  "high-definition": 985039,
  "high-definition-box": 985208,
  "highway": 984567,
  "hiking": 986495,
  "history": 983770,
  "hockey-puck": 985209,
  "hockey-sticks": 985210,
  "hololens": 983771,
  "home": 983772,
  "home-account": 985126,
  "home-alert": 985211,
  "home-alert-outline": 988624,
  "home-analytics": 986810,
  "home-assistant": 985040,
  "home-automation": 985041,
  "home-battery": 989441,
  "home-battery-outline": 989442,
  "home-circle": 985042,
  "home-circle-outline": 987213,
  "home-city": 986389,
  "home-city-outline": 986390,
  "home-edit": 987481,
  "home-edit-outline": 987482,
  "home-export-outline": 987035,
  "home-flood": 986874,
  "home-floor-0": 986578,
  "home-floor-1": 986496,
  "home-floor-2": 986497,
  "home-floor-3": 986498,
  "home-floor-a": 986499,
  "home-floor-b": 986500,
  "home-floor-g": 986501,
  "home-floor-l": 986502,
  "home-floor-negative-1": 986579,
  "home-group": 986580,
  "home-group-minus": 989633,
  "home-group-plus": 989632,
  "home-group-remove": 989634,
  "home-heart": 985127,
  "home-import-outline": 987036,
  "home-lightbulb": 987729,
  "home-lightbulb-outline": 987730,
  "home-lightning-bolt": 989443,
  "home-lightning-bolt-outline": 989444,
  "home-lock": 985323,
  "home-lock-open": 985324,
  "home-map-marker": 984568,
  "home-minus": 985460,
  "home-minus-outline": 988117,
  "home-modern": 983773,
  "home-outline": 984737,
  "home-plus": 985461,
  "home-plus-outline": 988118,
  "home-remove": 987719,
  "home-remove-outline": 988119,
  "home-roof": 987435,
  "home-search": 988080,
  "home-search-outline": 988081,
  "home-switch": 989076,
  "home-switch-outline": 989077,
  "home-thermometer": 986964,
  "home-thermometer-outline": 986965,
  "home-variant": 983774,
  "home-variant-outline": 986023,
  "hook": 984802,
  "hook-off": 984803,
  "hoop-house": 986710,
  "hops": 983775,
  "horizontal-rotate-clockwise": 987379,
  "horizontal-rotate-counterclockwise": 987380,
  "horse": 988607,
  "horse-human": 988608,
  "horse-variant": 988609,
  "horse-variant-fast": 989294,
  "horseshoe": 985688,
  "hospital": 987126,
  "hospital-box": 983776,
  "hospital-box-outline": 987127,
  "hospital-building": 983777,
  "hospital-marker": 983778,
  "hot-tub": 985128,
  "hours-24": 988280,
  "hubspot": 986391,
  "hulu": 985129,
  "human": 983782,
  "human-baby-changing-table": 988043,
  "human-cane": 988545,
  "human-capacity-decrease": 988571,
  "human-capacity-increase": 988572,
  "human-child": 983783,
  "human-dolly": 989568,
  "human-edit": 988392,
  "human-female": 984649,
  "human-female-boy": 985689,
  "human-female-dance": 988617,
  "human-female-female": 985690,
  "human-female-girl": 985691,
  "human-greeting": 989124,
  "human-greeting-proximity": 988573,
  "human-greeting-variant": 984650,
  "human-handsdown": 984651,
  "human-handsup": 984652,
  "human-male": 984653,
  "human-male-board": 985232,
  "human-male-board-poll": 985158,
  "human-male-boy": 985692,
  "human-male-child": 988044,
  "human-male-female": 983784,
  "human-male-female-child": 989219,
  "human-male-girl": 985693,
  "human-male-height": 986875,
  "human-male-height-variant": 986876,
  "human-male-male": 985694,
  "human-non-binary": 989256,
  "human-pregnant": 984527,
  "human-queue": 988529,
  "human-scooter": 987625,
  "human-wheelchair": 988045,
  "human-white-cane": 989569,
  "humble-bundle": 984900,
  "hvac": 987986,
  "hvac-off": 988574,
  "hydraulic-oil-level": 987940,
  "hydraulic-oil-temperature": 987941,
  "hydro-power": 987877,
  "hydrogen-station": 989332,
  "ice-cream": 985130,
  "ice-cream-off": 986706,
  "ice-pop": 986877,
  "id-card": 987072,
  "identifier": 986878,
  "ideogram-cjk": 987953,
  "ideogram-cjk-variant": 987954,
  "image": 983785,
  "image-album": 983786,
  "image-area": 983787,
  "image-area-close": 983788,
  "image-auto-adjust": 987073,
  "image-broken": 983789,
  "image-broken-variant": 983790,
  "image-edit": 987619,
  "image-edit-outline": 987620,
  "image-filter-black-white": 983792,
  "image-filter-center-focus": 983793,
  "image-filter-center-focus-strong": 986879,
  "image-filter-center-focus-strong-outline": 986880,
  "image-filter-center-focus-weak": 983794,
  "image-filter-drama": 983795,
  "image-filter-frames": 983796,
  "image-filter-hdr": 983797,
  "image-filter-none": 983798,
  "image-filter-tilt-shift": 983799,
  "image-filter-vintage": 983800,
  "image-frame": 986697,
  "image-marker": 989051,
  "image-marker-outline": 989052,
  "image-minus": 988185,
  "image-move": 985592,
  "image-multiple": 983801,
  "image-multiple-outline": 983791,
  "image-off": 985131,
  "image-off-outline": 987601,
  "image-outline": 985462,
  "image-plus": 985212,
  "image-remove": 988184,
  "image-search": 985463,
  "image-search-outline": 985464,
  "image-size-select-actual": 986253,
  "image-size-select-large": 986254,
  "image-size-select-small": 986255,
  "image-text": 988685,
  "import": 983802,
  "inbox": 984711,
  "inbox-arrow-down": 983803,
  "inbox-arrow-down-outline": 987760,
  "inbox-arrow-up": 984017,
  "inbox-arrow-up-outline": 987761,
  "inbox-full": 987762,
  "inbox-full-outline": 987763,
  "inbox-multiple": 985264,
  "inbox-multiple-outline": 986024,
  "inbox-outline": 987764,
  "inbox-remove": 988575,
  "inbox-remove-outline": 988576,
  "incognito": 984569,
  "incognito-circle": 988193,
  "incognito-circle-off": 988194,
  "incognito-off": 983157,
  "induction": 989260,
  "infinity": 984804,
  "information": 983804,
  "information-off": 989068,
  "information-off-outline": 989069,
  "information-outline": 983805,
  "information-variant": 984654,
  "instagram": 983806,
  "instrument-triangle": 987214,
  "integrated-circuit-chip": 989459,
  "invert-colors": 983809,
  "invert-colors-off": 986698,
  "iobroker": 987880,
  "ip": 985695,
  "ip-network": 985696,
  "ip-network-outline": 986256,
  "ip-outline": 989570,
  "ipod": 986257,
  "iron": 989220,
  "iron-board": 989240,
  "iron-outline": 989221,
  "island": 987215,
  "iv-bag": 987321,
  "jabber": 986581,
  "jeepney": 983810,
  "jellyfish": 986881,
  "jellyfish-outline": 986882,
  "jira": 983811,
  "jquery": 985213,
  "jsfiddle": 983812,
  "jump-rope": 987903,
  "kabaddi": 986503,
  "kangaroo": 988504,
  "karate": 985132,
  "kayaking": 985263,
  "keg": 983813,
  "kettle": 984570,
  "kettle-alert": 987927,
  "kettle-alert-outline": 987928,
  "kettle-off": 987931,
  "kettle-off-outline": 987932,
  "kettle-outline": 986966,
  "kettle-pour-over": 988988,
  "kettle-steam": 987929,
  "kettle-steam-outline": 987930,
  "kettlebell": 987904,
  "key": 983814,
  "key-alert": 989571,
  "key-alert-outline": 989572,
  "key-arrow-right": 987922,
  "key-chain": 988532,
  "key-chain-variant": 988533,
  "key-change": 983815,
  "key-link": 987551,
  "key-minus": 983816,
  "key-outline": 986582,
  "key-plus": 983817,
  "key-remove": 983818,
  "key-star": 987550,
  "key-variant": 983819,
  "key-wireless": 987074,
  "keyboard": 983820,
  "keyboard-backspace": 983821,
  "keyboard-caps": 983822,
  "keyboard-close": 983823,
  "keyboard-esc": 987831,
  "keyboard-f1": 987819,
  "keyboard-f10": 987828,
  "keyboard-f11": 987829,
  "keyboard-f12": 987830,
  "keyboard-f2": 987820,
  "keyboard-f3": 987821,
  "keyboard-f4": 987822,
  "keyboard-f5": 987823,
  "keyboard-f6": 987824,
  "keyboard-f7": 987825,
  "keyboard-f8": 987826,
  "keyboard-f9": 987827,
  "keyboard-off": 983824,
  "keyboard-off-outline": 986699,
  "keyboard-outline": 985467,
  "keyboard-return": 983825,
  "keyboard-settings": 985593,
  "keyboard-settings-outline": 985594,
  "keyboard-space": 987216,
  "keyboard-tab": 983826,
  "keyboard-tab-reverse": 983845,
  "keyboard-variant": 983827,
  "khanda": 987389,
  "kickstarter": 984901,
  "kite": 989573,
  "kite-outline": 989574,
  "kitesurfing": 988996,
  "klingon": 987995,
  "knife": 985595,
  "knife-military": 985596,
  "koala": 988991,
  "kodi": 983828,
  "kubernetes": 987390,
  "label": 983829,
  "label-multiple": 988021,
  "label-multiple-outline": 988022,
  "label-off": 985803,
  "label-off-outline": 985804,
  "label-outline": 983830,
  "label-percent": 987882,
  "label-percent-outline": 987883,
  "label-variant": 985805,
  "label-variant-outline": 985806,
  "ladder": 988578,
  "ladybug": 985133,
  "lambda": 984615,
  "lamp": 984757,
  "lamp-outline": 989136,
  "lamps": 988534,
  "lamps-outline": 989137,
  "lan": 983831,
  "lan-check": 987818,
  "lan-connect": 983832,
  "lan-disconnect": 983833,
  "lan-pending": 983834,
  "language-c": 984689,
  "language-cpp": 984690,
  "language-csharp": 983835,
  "language-css3": 983836,
  "language-fortran": 987674,
  "language-go": 985043,
  "language-haskell": 986258,
  "language-html5": 983837,
  "language-java": 985911,
  "language-javascript": 983838,
  "language-kotlin": 987673,
  "language-lua": 985265,
  "language-markdown": 983892,
  "language-markdown-outline": 986971,
  "language-php": 983839,
  "language-python": 983840,
  "language-r": 985044,
  "language-ruby": 986413,
  "language-ruby-on-rails": 985807,
  "language-rust": 988695,
  "language-swift": 984805,
  "language-typescript": 984806,
  "language-xaml": 984691,
  "laptop": 983842,
  "laptop-off": 984807,
  "laravel": 985808,
  "laser-pointer": 988292,
  "lasso": 986883,
  "lastpass": 984134,
  "latitude": 986967,
  "launch": 983847,
  "lava-lamp": 985045,
  "layers": 983848,
  "layers-edit": 989330,
  "layers-minus": 986700,
  "layers-off": 983849,
  "layers-off-outline": 985597,
  "layers-outline": 985598,
  "layers-plus": 986701,
  "layers-remove": 986702,
  "layers-search": 987654,
  "layers-search-outline": 987655,
  "layers-triple": 986968,
  "layers-triple-outline": 986969,
  "lead-pencil": 984655,
  "leaf": 983850,
  "leaf-circle": 989445,
  "leaf-circle-outline": 989446,
  "leaf-maple": 986259,
  "leaf-maple-off": 987866,
  "leaf-off": 987865,
  "leak": 986583,
  "leak-off": 986584,
  "led-off": 983851,
  "led-on": 983852,
  "led-outline": 983853,
  "led-strip": 985046,
  "led-strip-variant": 987217,
  "led-variant-off": 983854,
  "led-variant-on": 983855,
  "led-variant-outline": 983856,
  "leek": 987517,
  "less-than": 985468,
  "less-than-or-equal": 985469,
  "library": 983857,
  "library-shelves": 986025,
  "license": 987075,
  "lifebuoy": 985214,
  "light-flood-down": 989575,
  "light-flood-up": 989576,
  "light-recessed": 989083,
  "light-switch": 985470,
  "lightbulb": 983861,
  "lightbulb-auto": 989184,
  "lightbulb-auto-outline": 989185,
  "lightbulb-cfl": 987656,
  "lightbulb-cfl-off": 987657,
  "lightbulb-cfl-spiral": 987765,
  "lightbulb-cfl-spiral-off": 987843,
  "lightbulb-fluorescent-tube": 989188,
  "lightbulb-fluorescent-tube-outline": 989189,
  "lightbulb-group": 987731,
  "lightbulb-group-off": 987853,
  "lightbulb-group-off-outline": 987854,
  "lightbulb-group-outline": 987732,
  "lightbulb-multiple": 987733,
  "lightbulb-multiple-off": 987855,
  "lightbulb-multiple-off-outline": 987856,
  "lightbulb-multiple-outline": 987734,
  "lightbulb-off": 986703,
  "lightbulb-off-outline": 986704,
  "lightbulb-on": 984808,
  "lightbulb-on-outline": 984809,
  "lightbulb-outline": 983862,
  "lightbulb-spot": 989172,
  "lightbulb-spot-off": 989173,
  "lightbulb-variant": 989186,
  "lightbulb-variant-outline": 989187,
  "lighthouse": 985599,
  "lighthouse-on": 985600,
  "lightning-bolt": 988171,
  "lightning-bolt-circle": 985120,
  "lightning-bolt-outline": 988172,
  "line-scan": 984612,
  "lingerie": 988278,
  "link": 983863,
  "link-box": 986394,
  "link-box-outline": 986395,
  "link-box-variant": 986396,
  "link-box-variant-outline": 986397,
  "link-lock": 987322,
  "link-off": 983864,
  "link-plus": 986260,
  "link-variant": 983865,
  "link-variant-minus": 987391,
  "link-variant-off": 983866,
  "link-variant-plus": 987392,
  "link-variant-remove": 987393,
  "linkedin": 983867,
  "linux": 983869,
  "linux-mint": 985325,
  "lipstick": 988085,
  "liquid-spot": 989222,
  "liquor": 989470,
  "list-status": 988587,
  "litecoin": 985697,
  "loading": 984946,
  "location-enter": 987076,
  "location-exit": 987077,
  "lock": 983870,
  "lock-alert": 985326,
  "lock-alert-outline": 988625,
  "lock-check": 988058,
  "lock-check-outline": 988840,
  "lock-clock": 985471,
  "lock-minus": 988841,
  "lock-minus-outline": 988842,
  "lock-off": 988785,
  "lock-off-outline": 988786,
  "lock-open": 983871,
  "lock-open-alert": 988059,
  "lock-open-alert-outline": 988626,
  "lock-open-check": 988060,
  "lock-open-check-outline": 988843,
  "lock-open-minus": 988844,
  "lock-open-minus-outline": 988845,
  "lock-open-outline": 983872,
  "lock-open-plus": 988846,
  "lock-open-plus-outline": 988847,
  "lock-open-remove": 988848,
  "lock-open-remove-outline": 988849,
  "lock-open-variant": 987078,
  "lock-open-variant-outline": 987079,
  "lock-outline": 983873,
  "lock-pattern": 984810,
  "lock-plus": 984571,
  "lock-plus-outline": 988850,
  "lock-question": 985327,
  "lock-remove": 988851,
  "lock-remove-outline": 988852,
  "lock-reset": 984947,
  "lock-smart": 985266,
  "locker": 985047,
  "locker-multiple": 985048,
  "login": 983874,
  "login-variant": 984572,
  "logout": 983875,
  "logout-variant": 984573,
  "longitude": 986970,
  "looks": 983876,
  "lotion": 988546,
  "lotion-outline": 988547,
  "lotion-plus": 988548,
  "lotion-plus-outline": 988549,
  "loupe": 983877,
  "lumx": 983878,
  "lungs": 987268,
  "mace": 989251,
  "magazine-pistol": 983844,
  "magazine-rifle": 983843,
  "magic-staff": 989252,
  "magnet": 983879,
  "magnet-on": 983880,
  "magnify": 983881,
  "magnify-close": 985472,
  "magnify-expand": 989300,
  "magnify-minus": 983882,
  "magnify-minus-cursor": 985698,
  "magnify-minus-outline": 984812,
  "magnify-plus": 983883,
  "magnify-plus-cursor": 985699,
  "magnify-plus-outline": 984813,
  "magnify-remove-cursor": 987660,
  "magnify-remove-outline": 987661,
  "magnify-scan": 987766,
  "mail": 986811,
  "mailbox": 984814,
  "mailbox-open": 986504,
  "mailbox-open-outline": 986505,
  "mailbox-open-up": 986506,
  "mailbox-open-up-outline": 986507,
  "mailbox-outline": 986508,
  "mailbox-up": 986509,
  "mailbox-up-outline": 986510,
  "manjaro": 988682,
  "map": 983885,
  "map-check": 986812,
  "map-check-outline": 986813,
  "map-clock": 986398,
  "map-clock-outline": 986399,
  "map-legend": 985601,
  "map-marker": 983886,
  "map-marker-account": 989411,
  "map-marker-account-outline": 989412,
  "map-marker-alert": 986885,
  "map-marker-alert-outline": 986886,
  "map-marker-check": 986261,
  "map-marker-check-outline": 987899,
  "map-marker-circle": 983887,
  "map-marker-distance": 985328,
  "map-marker-down": 987394,
  "map-marker-left": 987867,
  "map-marker-left-outline": 987869,
  "map-marker-minus": 984656,
  "map-marker-minus-outline": 987897,
  "map-marker-multiple": 983888,
  "map-marker-multiple-outline": 987767,
  "map-marker-off": 983889,
  "map-marker-off-outline": 987901,
  "map-marker-outline": 985049,
  "map-marker-path": 986400,
  "map-marker-plus": 984657,
  "map-marker-plus-outline": 987896,
  "map-marker-question": 986887,
  "map-marker-question-outline": 986888,
  "map-marker-radius": 983890,
  "map-marker-radius-outline": 987900,
  "map-marker-remove": 986889,
  "map-marker-remove-outline": 987898,
  "map-marker-remove-variant": 986890,
  "map-marker-right": 987868,
  "map-marker-right-outline": 987870,
  "map-marker-star": 988680,
  "map-marker-star-outline": 988681,
  "map-marker-up": 987395,
  "map-minus": 985473,
  "map-outline": 985474,
  "map-plus": 985475,
  "map-search": 985476,
  "map-search-outline": 985477,
  "mapbox": 986026,
  "margin": 983891,
  "marker": 984658,
  "marker-cancel": 986585,
  "marker-check": 983893,
  "mastodon": 985809,
  "material-design": 985478,
  "material-ui": 983895,
  "math-compass": 983896,
  "math-cos": 986262,
  "math-integral": 987080,
  "math-integral-box": 987081,
  "math-log": 987269,
  "math-norm": 987082,
  "math-norm-box": 987083,
  "math-sin": 986263,
  "math-tan": 986264,
  "matrix": 984616,
  "medal": 985479,
  "medal-outline": 987942,
  "medical-bag": 984815,
  "meditation": 987515,
  "memory": 983899,
  "menorah": 989140,
  "menorah-fire": 989141,
  "menu": 983900,
  "menu-down": 983901,
  "menu-down-outline": 984758,
  "menu-left": 983902,
  "menu-left-outline": 985602,
  "menu-open": 986027,
  "menu-right": 983903,
  "menu-right-outline": 985603,
  "menu-swap": 985700,
  "menu-swap-outline": 985701,
  "menu-up": 983904,
  "menu-up-outline": 984759,
  "merge": 986972,
  "message": 983905,
  "message-alert": 983906,
  "message-alert-outline": 985604,
  "message-arrow-left": 987890,
  "message-arrow-left-outline": 987891,
  "message-arrow-right": 987892,
  "message-arrow-right-outline": 987893,
  "message-badge": 989505,
  "message-badge-outline": 989506,
  "message-bookmark": 988588,
  "message-bookmark-outline": 988589,
  "message-bulleted": 984738,
  "message-bulleted-off": 984739,
  "message-cog": 984817,
  "message-cog-outline": 987506,
  "message-draw": 983907,
  "message-flash": 988585,
  "message-flash-outline": 988586,
  "message-image": 983908,
  "message-image-outline": 987500,
  "message-lock": 987084,
  "message-lock-outline": 987501,
  "message-minus": 987502,
  "message-minus-outline": 987503,
  "message-off": 988749,
  "message-off-outline": 988750,
  "message-outline": 983909,
  "message-plus": 984659,
  "message-plus-outline": 987323,
  "message-processing": 983910,
  "message-processing-outline": 987504,
  "message-question": 988986,
  "message-question-outline": 988987,
  "message-reply": 983911,
  "message-reply-outline": 988989,
  "message-reply-text": 983912,
  "message-reply-text-outline": 988990,
  "message-settings": 984816,
  "message-settings-outline": 987505,
  "message-star": 984730,
  "message-star-outline": 987728,
  "message-text": 983913,
  "message-text-clock": 987507,
  "message-text-clock-outline": 987508,
  "message-text-lock": 987085,
  "message-text-lock-outline": 987509,
  "message-text-outline": 983914,
  "message-video": 983915,
  "meteor": 984617,
  "metronome": 985050,
  "metronome-tick": 985051,
  "micro-sd": 985052,
  "microphone": 983916,
  "microphone-minus": 985267,
  "microphone-off": 983917,
  "microphone-outline": 983918,
  "microphone-plus": 985268,
  "microphone-question": 989577,
  "microphone-question-outline": 989578,
  "microphone-settings": 983919,
  "microphone-variant": 983920,
  "microphone-variant-off": 983921,
  "microscope": 984660,
  "microsoft": 983922,
  "microsoft-access": 988046,
  "microsoft-azure": 985093,
  "microsoft-azure-devops": 987093,
  "microsoft-bing": 983204,
  "microsoft-dynamics-365": 985480,
  "microsoft-edge": 983529,
  "microsoft-excel": 988047,
  "microsoft-internet-explorer": 983808,
  "microsoft-office": 984006,
  "microsoft-onedrive": 984010,
  "microsoft-onenote": 984903,
  "microsoft-outlook": 986402,
  "microsoft-powerpoint": 988048,
  "microsoft-sharepoint": 988049,
  "microsoft-teams": 983739,
  "microsoft-visual-studio": 984592,
  "microsoft-visual-studio-code": 985630,
  "microsoft-windows": 984499,
  "microsoft-windows-classic": 985633,
  "microsoft-word": 988050,
  "microsoft-xbox": 984505,
  "microsoft-xbox-controller": 984506,
  "microsoft-xbox-controller-battery-alert": 984907,
  "microsoft-xbox-controller-battery-charging": 985634,
  "microsoft-xbox-controller-battery-empty": 984908,
  "microsoft-xbox-controller-battery-full": 984909,
  "microsoft-xbox-controller-battery-low": 984910,
  "microsoft-xbox-controller-battery-medium": 984911,
  "microsoft-xbox-controller-battery-unknown": 984912,
  "microsoft-xbox-controller-menu": 986735,
  "microsoft-xbox-controller-off": 984507,
  "microsoft-xbox-controller-view": 986736,
  "microwave": 986265,
  "microwave-off": 988195,
  "middleware": 986973,
  "middleware-outline": 986974,
  "midi": 985329,
  "midi-port": 985330,
  "mine": 986586,
  "minecraft": 983923,
  "mini-sd": 985605,
  "minidisc": 985606,
  "minus": 983924,
  "minus-box": 983925,
  "minus-box-multiple": 987457,
  "minus-box-multiple-outline": 987458,
  "minus-box-outline": 984818,
  "minus-circle": 983926,
  "minus-circle-multiple": 983898,
  "minus-circle-multiple-outline": 985811,
  "minus-circle-off": 988249,
  "minus-circle-off-outline": 988250,
  "minus-circle-outline": 983927,
  "minus-network": 983928,
  "minus-network-outline": 986266,
  "minus-thick": 988729,
  "mirror": 987645,
  "mirror-rectangle": 989087,
  "mirror-variant": 989088,
  "mixed-martial-arts": 986511,
  "mixed-reality": 985215,
  "molecule": 986028,
  "molecule-co": 987902,
  "molecule-co2": 985060,
  "monitor": 983929,
  "monitor-cellphone": 985481,
  "monitor-cellphone-star": 985482,
  "monitor-dashboard": 985607,
  "monitor-edit": 987846,
  "monitor-eye": 988084,
  "monitor-lock": 986587,
  "monitor-multiple": 983930,
  "monitor-off": 986512,
  "monitor-screenshot": 986705,
  "monitor-share": 988291,
  "monitor-shimmer": 987396,
  "monitor-small": 989302,
  "monitor-speaker": 986975,
  "monitor-speaker-off": 986976,
  "monitor-star": 986588,
  "moon-first-quarter": 986977,
  "moon-full": 986978,
  "moon-last-quarter": 986979,
  "moon-new": 986980,
  "moon-waning-crescent": 986981,
  "moon-waning-gibbous": 986982,
  "moon-waxing-crescent": 986983,
  "moon-waxing-gibbous": 986984,
  "moped": 987270,
  "moped-electric": 988599,
  "moped-electric-outline": 988600,
  "moped-outline": 988601,
  "more": 983931,
  "mortar-pestle": 989000,
  "mortar-pestle-plus": 984049,
  "mosque": 989223,
  "mother-heart": 987924,
  "mother-nurse": 986401,
  "motion": 988594,
  "motion-outline": 988595,
  "motion-pause": 988560,
  "motion-pause-outline": 988562,
  "motion-play": 988559,
  "motion-play-outline": 988561,
  "motion-sensor": 986513,
  "motion-sensor-off": 988213,
  "motorbike": 983932,
  "motorbike-electric": 988602,
  "mouse": 983933,
  "mouse-bluetooth": 985483,
  "mouse-move-down": 988496,
  "mouse-move-up": 988497,
  "mouse-move-vertical": 988498,
  "mouse-off": 983934,
  "mouse-variant": 983935,
  "mouse-variant-off": 983936,
  "move-resize": 984661,
  "move-resize-variant": 984662,
  "movie": 983937,
  "movie-check": 988915,
  "movie-check-outline": 988916,
  "movie-cog": 988917,
  "movie-cog-outline": 988918,
  "movie-edit": 987426,
  "movie-edit-outline": 987427,
  "movie-filter": 987428,
  "movie-filter-outline": 987429,
  "movie-minus": 988919,
  "movie-minus-outline": 988920,
  "movie-off": 988921,
  "movie-off-outline": 988922,
  "movie-open": 987086,
  "movie-open-check": 988923,
  "movie-open-check-outline": 988924,
  "movie-open-cog": 988925,
  "movie-open-cog-outline": 988926,
  "movie-open-edit": 988927,
  "movie-open-edit-outline": 988928,
  "movie-open-minus": 988929,
  "movie-open-minus-outline": 988930,
  "movie-open-off": 988931,
  "movie-open-off-outline": 988932,
  "movie-open-outline": 987087,
  "movie-open-play": 988933,
  "movie-open-play-outline": 988934,
  "movie-open-plus": 988935,
  "movie-open-plus-outline": 988936,
  "movie-open-remove": 988937,
  "movie-open-remove-outline": 988938,
  "movie-open-settings": 988939,
  "movie-open-settings-outline": 988940,
  "movie-open-star": 988941,
  "movie-open-star-outline": 988942,
  "movie-outline": 986589,
  "movie-play": 988943,
  "movie-play-outline": 988944,
  "movie-plus": 988945,
  "movie-plus-outline": 988946,
  "movie-remove": 988947,
  "movie-remove-outline": 988948,
  "movie-roll": 985054,
  "movie-search": 987602,
  "movie-search-outline": 987603,
  "movie-settings": 988949,
  "movie-settings-outline": 988950,
  "movie-star": 988951,
  "movie-star-outline": 988952,
  "mower": 988783,
  "mower-bag": 988784,
  "muffin": 985484,
  "multicast": 989331,
  "multiplication": 983938,
  "multiplication-box": 983939,
  "mushroom": 985055,
  "mushroom-off": 988154,
  "mushroom-off-outline": 988155,
  "mushroom-outline": 985056,
  "music": 984922,
  "music-accidental-double-flat": 986985,
  "music-accidental-double-sharp": 986986,
  "music-accidental-flat": 986987,
  "music-accidental-natural": 986988,
  "music-accidental-sharp": 986989,
  "music-box": 983940,
  "music-box-multiple": 983859,
  "music-box-multiple-outline": 986884,
  "music-box-outline": 983941,
  "music-circle": 983942,
  "music-circle-outline": 985812,
  "music-clef-alto": 986990,
  "music-clef-bass": 986991,
  "music-clef-treble": 986992,
  "music-note": 983943,
  "music-note-bluetooth": 984574,
  "music-note-bluetooth-off": 984575,
  "music-note-eighth": 983944,
  "music-note-eighth-dotted": 986993,
  "music-note-half": 983945,
  "music-note-half-dotted": 986994,
  "music-note-off": 983946,
  "music-note-off-outline": 986995,
  "music-note-outline": 986996,
  "music-note-plus": 986590,
  "music-note-quarter": 983947,
  "music-note-quarter-dotted": 986997,
  "music-note-sixteenth": 983948,
  "music-note-sixteenth-dotted": 986998,
  "music-note-whole": 983949,
  "music-note-whole-dotted": 986999,
  "music-off": 984923,
  "music-rest-eighth": 987000,
  "music-rest-half": 987001,
  "music-rest-quarter": 987002,
  "music-rest-sixteenth": 987003,
  "music-rest-whole": 987004,
  "mustache": 988638,
  "nail": 986591,
  "nas": 985331,
  "nativescript": 985216,
  "nature": 983950,
  "nature-people": 983951,
  "navigation": 983952,
  "navigation-outline": 988679,
  "navigation-variant": 989424,
  "navigation-variant-outline": 989425,
  "near-me": 984525,
  "necklace": 986891,
  "needle": 983953,
  "netflix": 984902,
  "network": 984819,
  "network-off": 986267,
  "network-off-outline": 986268,
  "network-outline": 986269,
  "network-strength-1": 985332,
  "network-strength-1-alert": 985333,
  "network-strength-2": 985334,
  "network-strength-2-alert": 985335,
  "network-strength-3": 985336,
  "network-strength-3-alert": 985337,
  "network-strength-4": 985338,
  "network-strength-4-alert": 985339,
  "network-strength-4-cog": 989466,
  "network-strength-off": 985340,
  "network-strength-off-outline": 985341,
  "network-strength-outline": 985342,
  "new-box": 983956,
  "newspaper": 983957,
  "newspaper-check": 989507,
  "newspaper-minus": 986892,
  "newspaper-plus": 986893,
  "newspaper-remove": 989508,
  "newspaper-variant": 987137,
  "newspaper-variant-multiple": 987138,
  "newspaper-variant-multiple-outline": 987139,
  "newspaper-variant-outline": 987140,
  "nfc": 983958,
  "nfc-search-variant": 986707,
  "nfc-tap": 983959,
  "nfc-variant": 983960,
  "nfc-variant-off": 986708,
  "ninja": 984948,
  "nintendo-game-boy": 988051,
  "nintendo-switch": 985057,
  "nintendo-wii": 984491,
  "nintendo-wiiu": 984877,
  "nix": 987397,
  "nodejs": 983961,
  "noodles": 987518,
  "not-equal": 985485,
  "not-equal-variant": 985486,
  "note": 983962,
  "note-alert": 989053,
  "note-alert-outline": 989054,
  "note-check": 989055,
  "note-check-outline": 989056,
  "note-edit": 989057,
  "note-edit-outline": 989058,
  "note-minus": 988751,
  "note-minus-outline": 988752,
  "note-multiple": 984760,
  "note-multiple-outline": 984761,
  "note-off": 989059,
  "note-off-outline": 989060,
  "note-outline": 983963,
  "note-plus": 983964,
  "note-plus-outline": 983965,
  "note-remove": 988753,
  "note-remove-outline": 988754,
  "note-search": 988755,
  "note-search-outline": 988756,
  "note-text": 983966,
  "note-text-outline": 987607,
  "notebook": 985134,
  "notebook-check": 988405,
  "notebook-check-outline": 988406,
  "notebook-edit": 988391,
  "notebook-edit-outline": 988393,
  "notebook-minus": 988688,
  "notebook-minus-outline": 988689,
  "notebook-multiple": 986709,
  "notebook-outline": 986815,
  "notebook-plus": 988690,
  "notebook-plus-outline": 988691,
  "notebook-remove": 988692,
  "notebook-remove-outline": 988693,
  "notification-clear-all": 983967,
  "npm": 984823,
  "nuke": 984740,
  "null": 985058,
  "numeric": 983968,
  "numeric-0": 985913,
  "numeric-0-box": 983969,
  "numeric-0-box-multiple": 986894,
  "numeric-0-box-multiple-outline": 983970,
  "numeric-0-box-outline": 983971,
  "numeric-0-circle": 986270,
  "numeric-0-circle-outline": 986271,
  "numeric-1": 985914,
  "numeric-1-box": 983972,
  "numeric-1-box-multiple": 986895,
  "numeric-1-box-multiple-outline": 983973,
  "numeric-1-box-outline": 983974,
  "numeric-1-circle": 986272,
  "numeric-1-circle-outline": 986273,
  "numeric-10": 987113,
  "numeric-10-box": 987005,
  "numeric-10-box-multiple": 987114,
  "numeric-10-box-multiple-outline": 987115,
  "numeric-10-box-outline": 987006,
  "numeric-10-circle": 987116,
  "numeric-10-circle-outline": 987117,
  "numeric-2": 985915,
  "numeric-2-box": 983975,
  "numeric-2-box-multiple": 986896,
  "numeric-2-box-multiple-outline": 983976,
  "numeric-2-box-outline": 983977,
  "numeric-2-circle": 986274,
  "numeric-2-circle-outline": 986275,
  "numeric-3": 985916,
  "numeric-3-box": 983978,
  "numeric-3-box-multiple": 986897,
  "numeric-3-box-multiple-outline": 983979,
  "numeric-3-box-outline": 983980,
  "numeric-3-circle": 986276,
  "numeric-3-circle-outline": 986277,
  "numeric-4": 985917,
  "numeric-4-box": 983981,
  "numeric-4-box-multiple": 986898,
  "numeric-4-box-multiple-outline": 983986,
  "numeric-4-box-outline": 983982,
  "numeric-4-circle": 986278,
  "numeric-4-circle-outline": 986279,
  "numeric-5": 985918,
  "numeric-5-box": 983985,
  "numeric-5-box-multiple": 986899,
  "numeric-5-box-multiple-outline": 983983,
  "numeric-5-box-outline": 983984,
  "numeric-5-circle": 986280,
  "numeric-5-circle-outline": 986281,
  "numeric-6": 985919,
  "numeric-6-box": 983987,
  "numeric-6-box-multiple": 986900,
  "numeric-6-box-multiple-outline": 983988,
  "numeric-6-box-outline": 983989,
  "numeric-6-circle": 986282,
  "numeric-6-circle-outline": 986283,
  "numeric-7": 985920,
  "numeric-7-box": 983990,
  "numeric-7-box-multiple": 986901,
  "numeric-7-box-multiple-outline": 983991,
  "numeric-7-box-outline": 983992,
  "numeric-7-circle": 986284,
  "numeric-7-circle-outline": 986285,
  "numeric-8": 985921,
  "numeric-8-box": 983993,
  "numeric-8-box-multiple": 986902,
  "numeric-8-box-multiple-outline": 983994,
  "numeric-8-box-outline": 983995,
  "numeric-8-circle": 986286,
  "numeric-8-circle-outline": 986287,
  "numeric-9": 985922,
  "numeric-9-box": 983996,
  "numeric-9-box-multiple": 986903,
  "numeric-9-box-multiple-outline": 983997,
  "numeric-9-box-outline": 983998,
  "numeric-9-circle": 986288,
  "numeric-9-circle-outline": 986289,
  "numeric-9-plus": 987118,
  "numeric-9-plus-box": 983999,
  "numeric-9-plus-box-multiple": 986904,
  "numeric-9-plus-box-multiple-outline": 984000,
  "numeric-9-plus-box-outline": 984001,
  "numeric-9-plus-circle": 986290,
  "numeric-9-plus-circle-outline": 986291,
  "numeric-negative-1": 987218,
  "numeric-positive-1": 988619,
  "nut": 984824,
  "nutrition": 984002,
  "nuxt": 987398,
  "oar": 984700,
  "ocarina": 986592,
  "oci": 987881,
  "ocr": 987450,
  "octagon": 984003,
  "octagon-outline": 984004,
  "octagram": 984825,
  "octagram-outline": 984949,
  "octahedron": 989520,
  "octahedron-off": 989521,
  "odnoklassniki": 984005,
  "offer": 987675,
  "office-building": 985489,
  "office-building-cog": 989513,
  "office-building-cog-outline": 989514,
  "office-building-marker": 988448,
  "office-building-marker-outline": 988449,
  "office-building-outline": 988447,
  "oil": 984007,
  "oil-lamp": 986905,
  "oil-level": 987219,
  "oil-temperature": 987128,
  "om": 985459,
  "omega": 984009,
  "one-up": 986029,
  "onepassword": 985217,
  "opacity": 984524,
  "open-in-app": 984011,
  "open-in-new": 984012,
  "open-source-initiative": 986030,
  "openid": 984013,
  "opera": 984014,
  "orbit": 983064,
  "orbit-variant": 988635,
  "order-alphabetical-ascending": 983565,
  "order-alphabetical-descending": 986375,
  "order-bool-ascending": 983742,
  "order-bool-ascending-variant": 985487,
  "order-bool-descending": 988036,
  "order-bool-descending-variant": 985488,
  "order-numeric-ascending": 984389,
  "order-numeric-descending": 984390,
  "origin": 985923,
  "ornament": 984015,
  "ornament-variant": 984016,
  "outdoor-lamp": 987220,
  "overscan": 987141,
  "owl": 984018,
  "pac-man": 986031,
  "package": 984019,
  "package-down": 984020,
  "package-up": 984021,
  "package-variant": 984022,
  "package-variant-closed": 984023,
  "page-first": 984576,
  "page-last": 984577,
  "page-layout-body": 984826,
  "page-layout-footer": 984827,
  "page-layout-header": 984828,
  "page-layout-header-footer": 987007,
  "page-layout-sidebar-left": 984829,
  "page-layout-sidebar-right": 984830,
  "page-next": 986032,
  "page-next-outline": 986033,
  "page-previous": 986034,
  "page-previous-outline": 986035,
  "pail": 988183,
  "pail-minus": 988215,
  "pail-minus-outline": 988220,
  "pail-off": 988217,
  "pail-off-outline": 988222,
  "pail-outline": 988218,
  "pail-plus": 988214,
  "pail-plus-outline": 988219,
  "pail-remove": 988216,
  "pail-remove-outline": 988221,
  "palette": 984024,
  "palette-advanced": 984025,
  "palette-outline": 986636,
  "palette-swatch": 985269,
  "palette-swatch-outline": 987996,
  "palette-swatch-variant": 989530,
  "palm-tree": 987221,
  "pan": 986036,
  "pan-bottom-left": 986037,
  "pan-bottom-right": 986038,
  "pan-down": 986039,
  "pan-horizontal": 986040,
  "pan-left": 986041,
  "pan-right": 986042,
  "pan-top-left": 986043,
  "pan-top-right": 986044,
  "pan-up": 986045,
  "pan-vertical": 986046,
  "panda": 984026,
  "pandora": 984027,
  "panorama": 984028,
  "panorama-fisheye": 984029,
  "panorama-horizontal": 989480,
  "panorama-horizontal-outline": 984030,
  "panorama-outline": 989580,
  "panorama-sphere": 989581,
  "panorama-sphere-outline": 989582,
  "panorama-variant": 989583,
  "panorama-variant-outline": 989584,
  "panorama-vertical": 989481,
  "panorama-vertical-outline": 984031,
  "panorama-wide-angle": 989535,
  "panorama-wide-angle-outline": 984032,
  "paper-cut-vertical": 984033,
  "paper-roll": 987479,
  "paper-roll-outline": 987480,
  "paperclip": 984034,
  "parachute": 986292,
  "parachute-outline": 986293,
  "paragliding": 988997,
  "parking": 984035,
  "party-popper": 987222,
  "passport": 985059,
  "passport-biometric": 986593,
  "pasta": 987488,
  "patio-heater": 987008,
  "patreon": 985218,
  "pause": 984036,
  "pause-circle": 984037,
  "pause-circle-outline": 984038,
  "pause-octagon": 984039,
  "pause-octagon-outline": 984040,
  "paw": 984041,
  "paw-off": 984663,
  "paw-off-outline": 988790,
  "paw-outline": 988789,
  "peace": 985220,
  "peanut": 987132,
  "peanut-off": 987133,
  "peanut-off-outline": 987135,
  "peanut-outline": 987134,
  "pen": 984042,
  "pen-lock": 986594,
  "pen-minus": 986595,
  "pen-off": 986596,
  "pen-plus": 986597,
  "pen-remove": 986598,
  "pencil": 984043,
  "pencil-box": 984044,
  "pencil-box-multiple": 987460,
  "pencil-box-multiple-outline": 987461,
  "pencil-box-outline": 984045,
  "pencil-circle": 984831,
  "pencil-circle-outline": 984950,
  "pencil-lock": 984046,
  "pencil-lock-outline": 986599,
  "pencil-minus": 986600,
  "pencil-minus-outline": 986601,
  "pencil-off": 984047,
  "pencil-off-outline": 986602,
  "pencil-outline": 986294,
  "pencil-plus": 986603,
  "pencil-plus-outline": 986604,
  "pencil-remove": 986605,
  "pencil-remove-outline": 986606,
  "pencil-ruler": 987987,
  "penguin": 986816,
  "pentagon": 984833,
  "pentagon-outline": 984832,
  "pentagram": 988775,
  "percent": 984048,
  "percent-outline": 987768,
  "periodic-table": 985270,
  "perspective-less": 986403,
  "perspective-more": 986404,
  "ph": 989125,
  "phone": 984050,
  "phone-alert": 986906,
  "phone-alert-outline": 987534,
  "phone-bluetooth": 984051,
  "phone-bluetooth-outline": 987535,
  "phone-cancel": 987324,
  "phone-cancel-outline": 987536,
  "phone-check": 987561,
  "phone-check-outline": 987562,
  "phone-classic": 984578,
  "phone-classic-off": 987769,
  "phone-dial": 988505,
  "phone-dial-outline": 988506,
  "phone-forward": 984052,
  "phone-forward-outline": 987537,
  "phone-hangup": 984053,
  "phone-hangup-outline": 987538,
  "phone-in-talk": 984054,
  "phone-in-talk-outline": 987522,
  "phone-incoming": 984055,
  "phone-incoming-outline": 987539,
  "phone-lock": 984056,
  "phone-lock-outline": 987540,
  "phone-log": 984057,
  "phone-log-outline": 987541,
  "phone-message": 987542,
  "phone-message-outline": 987543,
  "phone-minus": 984664,
  "phone-minus-outline": 987544,
  "phone-missed": 984058,
  "phone-missed-outline": 987557,
  "phone-off": 986607,
  "phone-off-outline": 987558,
  "phone-outgoing": 984059,
  "phone-outgoing-outline": 987545,
  "phone-outline": 986608,
  "phone-paused": 984060,
  "phone-paused-outline": 987546,
  "phone-plus": 984665,
  "phone-plus-outline": 987547,
  "phone-refresh": 989587,
  "phone-refresh-outline": 989588,
  "phone-remove": 988463,
  "phone-remove-outline": 988464,
  "phone-return": 985135,
  "phone-return-outline": 987548,
  "phone-ring": 987563,
  "phone-ring-outline": 987564,
  "phone-rotate-landscape": 985221,
  "phone-rotate-portrait": 985222,
  "phone-settings": 984061,
  "phone-settings-outline": 987549,
  "phone-sync": 989589,
  "phone-sync-outline": 989590,
  "phone-voip": 984062,
  "pi": 984063,
  "pi-box": 984064,
  "pi-hole": 986609,
  "piano": 984701,
  "piano-off": 984728,
  "pickaxe": 985271,
  "picture-in-picture-bottom-right": 986711,
  "picture-in-picture-bottom-right-outline": 986712,
  "picture-in-picture-top-right": 986713,
  "picture-in-picture-top-right-outline": 986714,
  "pier": 985223,
  "pier-crane": 985224,
  "pig": 984065,
  "pig-variant": 987142,
  "pig-variant-outline": 988792,
  "piggy-bank": 987143,
  "piggy-bank-outline": 988793,
  "pill": 984066,
  "pillar": 984834,
  "pin": 984067,
  "pin-off": 984068,
  "pin-off-outline": 985392,
  "pin-outline": 985393,
  "pine-tree": 984069,
  "pine-tree-box": 984070,
  "pine-tree-fire": 988186,
  "pinterest": 984071,
  "pinwheel": 985813,
  "pinwheel-outline": 985814,
  "pipe": 985061,
  "pipe-disconnected": 985062,
  "pipe-leak": 985225,
  "pipe-valve": 989261,
  "pipe-wrench": 987988,
  "pirate": 985608,
  "pistol": 984835,
  "piston": 985226,
  "pitchfork": 988499,
  "pizza": 984073,
  "play": 984074,
  "play-box": 987770,
  "play-box-multiple": 986393,
  "play-box-multiple-outline": 988134,
  "play-box-outline": 984075,
  "play-circle": 984076,
  "play-circle-outline": 984077,
  "play-network": 985227,
  "play-network-outline": 986295,
  "play-outline": 986907,
  "play-pause": 984078,
  "play-protected-content": 984079,
  "play-speed": 985343,
  "playlist-check": 984519,
  "playlist-edit": 985344,
  "playlist-minus": 984080,
  "playlist-music": 986296,
  "playlist-music-outline": 986297,
  "playlist-play": 984081,
  "playlist-plus": 984082,
  "playlist-remove": 984083,
  "playlist-star": 986610,
  "plex": 984762,
  "pliers": 989604,
  "plus": 984085,
  "plus-box": 984086,
  "plus-box-multiple": 983860,
  "plus-box-multiple-outline": 987459,
  "plus-box-outline": 984836,
  "plus-circle": 984087,
  "plus-circle-multiple": 983884,
  "plus-circle-multiple-outline": 984088,
  "plus-circle-outline": 984089,
  "plus-minus": 985490,
  "plus-minus-box": 985491,
  "plus-minus-variant": 988361,
  "plus-network": 984090,
  "plus-network-outline": 986298,
  "plus-outline": 984837,
  "plus-thick": 987628,
  "podcast": 985492,
  "podium": 986405,
  "podium-bronze": 986406,
  "podium-gold": 986407,
  "podium-silver": 986408,
  "point-of-sale": 986514,
  "pokeball": 984093,
  "pokemon-go": 985609,
  "poker-chip": 985136,
  "polaroid": 984094,
  "police-badge": 987495,
  "police-badge-outline": 987496,
  "police-station": 989241,
  "poll": 984095,
  "polo": 988355,
  "polymer": 984097,
  "pool": 984582,
  "popcorn": 984098,
  "post": 987144,
  "post-outline": 987145,
  "postage-stamp": 986299,
  "pot": 983781,
  "pot-mix": 984667,
  "pot-mix-outline": 984695,
  "pot-outline": 983807,
  "pot-steam": 984666,
  "pot-steam-outline": 983846,
  "pound": 984099,
  "pound-box": 984100,
  "pound-box-outline": 987519,
  "power": 984101,
  "power-cycle": 985345,
  "power-off": 985346,
  "power-on": 985347,
  "power-plug": 984741,
  "power-plug-off": 984742,
  "power-plug-off-outline": 988196,
  "power-plug-outline": 988197,
  "power-settings": 984102,
  "power-sleep": 985348,
  "power-socket": 984103,
  "power-socket-au": 985349,
  "power-socket-ch": 987059,
  "power-socket-de": 987399,
  "power-socket-eu": 985063,
  "power-socket-fr": 987400,
  "power-socket-it": 988415,
  "power-socket-jp": 987401,
  "power-socket-uk": 985064,
  "power-socket-us": 985065,
  "power-standby": 985350,
  "powershell": 985610,
  "prescription": 984838,
  "presentation": 984104,
  "presentation-play": 984105,
  "pretzel": 988514,
  "printer": 984106,
  "printer-3d": 984107,
  "printer-3d-nozzle": 986715,
  "printer-3d-nozzle-alert": 987584,
  "printer-3d-nozzle-alert-outline": 987585,
  "printer-3d-nozzle-heat": 989368,
  "printer-3d-nozzle-heat-outline": 989369,
  "printer-3d-nozzle-outline": 986716,
  "printer-alert": 984108,
  "printer-check": 987462,
  "printer-eye": 988248,
  "printer-off": 986717,
  "printer-off-outline": 989061,
  "printer-outline": 989062,
  "printer-pos": 987223,
  "printer-search": 988247,
  "printer-settings": 984839,
  "printer-wireless": 985611,
  "priority-high": 984579,
  "priority-low": 984580,
  "professional-hexagon": 984109,
  "progress-alert": 986300,
  "progress-check": 985493,
  "progress-clock": 985494,
  "progress-close": 987402,
  "progress-download": 985495,
  "progress-pencil": 989063,
  "progress-question": 988450,
  "progress-star": 989064,
  "progress-upload": 985496,
  "progress-wrench": 986301,
  "projector": 984110,
  "projector-screen": 984111,
  "projector-screen-off": 989197,
  "projector-screen-off-outline": 989198,
  "projector-screen-outline": 988964,
  "projector-screen-variant": 989199,
  "projector-screen-variant-off": 989200,
  "projector-screen-variant-off-outline": 989201,
  "projector-screen-variant-outline": 989202,
  "propane-tank": 987991,
  "propane-tank-outline": 987992,
  "protocol": 987096,
  "publish": 984743,
  "publish-off": 989509,
  "pulse": 984112,
  "pump": 988162,
  "pumpkin": 986047,
  "purse": 986908,
  "purse-outline": 986909,
  "puzzle": 984113,
  "puzzle-check": 988198,
  "puzzle-check-outline": 988199,
  "puzzle-edit": 988371,
  "puzzle-edit-outline": 988377,
  "puzzle-heart": 988372,
  "puzzle-heart-outline": 988378,
  "puzzle-minus": 988369,
  "puzzle-minus-outline": 988375,
  "puzzle-outline": 985702,
  "puzzle-plus": 988368,
  "puzzle-plus-outline": 988374,
  "puzzle-remove": 988370,
  "puzzle-remove-outline": 988376,
  "puzzle-star": 988373,
  "puzzle-star-outline": 988379,
  "pyramid": 989522,
  "pyramid-off": 989523,
  "qi": 985497,
  "qqchat": 984581,
  "qrcode": 984114,
  "qrcode-edit": 985272,
  "qrcode-minus": 987532,
  "qrcode-plus": 987531,
  "qrcode-remove": 987533,
  "qrcode-scan": 984115,
  "quadcopter": 984116,
  "quality-high": 984117,
  "quality-low": 985612,
  "quality-medium": 985613,
  "quora": 986409,
  "rabbit": 985351,
  "racing-helmet": 986515,
  "racquetball": 986516,
  "radar": 984119,
  "radiator": 984120,
  "radiator-disabled": 985815,
  "radiator-off": 985816,
  "radio": 984121,
  "radio-am": 986302,
  "radio-fm": 986303,
  "radio-handheld": 984122,
  "radio-off": 987676,
  "radio-tower": 984123,
  "radioactive": 984124,
  "radioactive-circle": 989277,
  "radioactive-circle-outline": 989278,
  "radioactive-off": 986817,
  "radiobox-blank": 984125,
  "radiobox-marked": 984126,
  "radiology-box": 988357,
  "radiology-box-outline": 988358,
  "radius": 986304,
  "radius-outline": 986305,
  "railroad-light": 986910,
  "rake": 988484,
  "raspberry-pi": 984127,
  "ray-end": 984128,
  "ray-end-arrow": 984129,
  "ray-start": 984130,
  "ray-start-arrow": 984131,
  "ray-start-end": 984132,
  "ray-start-vertex-end": 988632,
  "ray-vertex": 984133,
  "razor-double-edge": 989591,
  "razor-single-edge": 989592,
  "react": 984840,
  "read": 984135,
  "receipt": 984137,
  "record": 984138,
  "record-circle": 986818,
  "record-circle-outline": 986819,
  "record-player": 985498,
  "record-rec": 984139,
  "rectangle": 986718,
  "rectangle-outline": 986719,
  "recycle": 984140,
  "recycle-variant": 988061,
  "reddit": 984141,
  "redhat": 987419,
  "redo": 984142,
  "redo-variant": 984143,
  "reflect-horizontal": 985614,
  "reflect-vertical": 985615,
  "refresh": 984144,
  "refresh-auto": 989426,
  "refresh-circle": 988023,
  "regex": 984145,
  "registered-trademark": 985703,
  "reiterate": 988552,
  "relation-many-to-many": 988310,
  "relation-many-to-one": 988311,
  "relation-many-to-one-or-many": 988312,
  "relation-many-to-only-one": 988313,
  "relation-many-to-zero-or-many": 988314,
  "relation-many-to-zero-or-one": 988315,
  "relation-one-or-many-to-many": 988316,
  "relation-one-or-many-to-one": 988317,
  "relation-one-or-many-to-one-or-many": 988318,
  "relation-one-or-many-to-only-one": 988319,
  "relation-one-or-many-to-zero-or-many": 988320,
  "relation-one-or-many-to-zero-or-one": 988321,
  "relation-one-to-many": 988322,
  "relation-one-to-one": 988323,
  "relation-one-to-one-or-many": 988324,
  "relation-one-to-only-one": 988325,
  "relation-one-to-zero-or-many": 988326,
  "relation-one-to-zero-or-one": 988327,
  "relation-only-one-to-many": 988328,
  "relation-only-one-to-one": 988329,
  "relation-only-one-to-one-or-many": 988330,
  "relation-only-one-to-only-one": 988331,
  "relation-only-one-to-zero-or-many": 988332,
  "relation-only-one-to-zero-or-one": 988333,
  "relation-zero-or-many-to-many": 988334,
  "relation-zero-or-many-to-one": 988335,
  "relation-zero-or-many-to-one-or-many": 988336,
  "relation-zero-or-many-to-only-one": 988337,
  "relation-zero-or-many-to-zero-or-many": 988338,
  "relation-zero-or-many-to-zero-or-one": 988339,
  "relation-zero-or-one-to-many": 988340,
  "relation-zero-or-one-to-one": 988341,
  "relation-zero-or-one-to-one-or-many": 988342,
  "relation-zero-or-one-to-only-one": 988343,
  "relation-zero-or-one-to-zero-or-many": 988344,
  "relation-zero-or-one-to-zero-or-one": 988345,
  "relative-scale": 984146,
  "reload": 984147,
  "reload-alert": 987403,
  "reminder": 985228,
  "remote": 984148,
  "remote-desktop": 985273,
  "remote-off": 986820,
  "remote-tv": 986821,
  "remote-tv-off": 986822,
  "rename-box": 984149,
  "reorder-horizontal": 984712,
  "reorder-vertical": 984713,
  "repeat": 984150,
  "repeat-off": 984151,
  "repeat-once": 984152,
  "repeat-variant": 984391,
  "replay": 984153,
  "reply": 984154,
  "reply-all": 984155,
  "reply-all-outline": 986911,
  "reply-circle": 987566,
  "reply-outline": 986912,
  "reproduction": 984156,
  "resistor": 985924,
  "resistor-nodes": 985925,
  "resize": 985704,
  "resize-bottom-right": 984157,
  "responsive": 984158,
  "restart": 984841,
  "restart-alert": 987404,
  "restart-off": 986517,
  "restore": 985499,
  "restore-alert": 987405,
  "rewind": 984159,
  "rewind-10": 986410,
  "rewind-15": 989510,
  "rewind-30": 986518,
  "rewind-5": 987641,
  "rewind-60": 988684,
  "rewind-outline": 984842,
  "rhombus": 984843,
  "rhombus-medium": 985616,
  "rhombus-medium-outline": 988380,
  "rhombus-outline": 984844,
  "rhombus-split": 985617,
  "rhombus-split-outline": 988381,
  "ribbon": 984160,
  "rice": 985066,
  "rickshaw": 988603,
  "rickshaw-electric": 988604,
  "ring": 985067,
  "rivet": 986720,
  "road": 984161,
  "road-variant": 984162,
  "robber": 987224,
  "robot": 984745,
  "robot-angry": 988829,
  "robot-angry-outline": 988830,
  "robot-confused": 988831,
  "robot-confused-outline": 988832,
  "robot-dead": 988833,
  "robot-dead-outline": 988834,
  "robot-excited": 988835,
  "robot-excited-outline": 988836,
  "robot-happy": 988953,
  "robot-happy-outline": 988954,
  "robot-industrial": 985926,
  "robot-love": 988837,
  "robot-love-outline": 988838,
  "robot-mower": 987639,
  "robot-mower-outline": 987635,
  "robot-off": 988839,
  "robot-off-outline": 988795,
  "robot-outline": 988794,
  "robot-vacuum": 984845,
  "robot-vacuum-variant": 985352,
  "rocket": 984163,
  "rocket-launch": 988382,
  "rocket-launch-outline": 988383,
  "rocket-outline": 988079,
  "rodent": 987943,
  "roller-skate": 986411,
  "roller-skate-off": 983365,
  "rollerblade": 986412,
  "rollerblade-off": 983086,
  "rollupjs": 986048,
  "roman-numeral-1": 987272,
  "roman-numeral-10": 987281,
  "roman-numeral-2": 987273,
  "roman-numeral-3": 987274,
  "roman-numeral-4": 987275,
  "roman-numeral-5": 987276,
  "roman-numeral-6": 987277,
  "roman-numeral-7": 987278,
  "roman-numeral-8": 987279,
  "roman-numeral-9": 987280,
  "room-service": 985229,
  "room-service-outline": 986519,
  "rotate-360": 989593,
  "rotate-3d": 986823,
  "rotate-3d-variant": 984164,
  "rotate-left": 984165,
  "rotate-left-variant": 984166,
  "rotate-orbit": 986520,
  "rotate-right": 984167,
  "rotate-right-variant": 984168,
  "rounded-corner": 984583,
  "router": 987618,
  "router-network": 987271,
  "router-wireless": 984169,
  "router-wireless-off": 988579,
  "router-wireless-settings": 985705,
  "routes": 984170,
  "routes-clock": 987225,
  "rowing": 984584,
  "rss": 984171,
  "rss-box": 984172,
  "rss-off": 986913,
  "rug": 988277,
  "rugby": 986521,
  "ruler": 984173,
  "ruler-square": 986306,
  "ruler-square-compass": 986814,
  "run": 984846,
  "run-fast": 984174,
  "rv-truck": 987604,
  "sack": 986414,
  "sack-percent": 986415,
  "safe": 985706,
  "safe-square": 987772,
  "safe-square-outline": 987773,
  "safety-goggles": 986416,
  "sail-boat": 986824,
  "sale": 984175,
  "salesforce": 985230,
  "sass": 985068,
  "satellite": 984176,
  "satellite-uplink": 985353,
  "satellite-variant": 984177,
  "sausage": 985274,
  "sausage-off": 989065,
  "saw-blade": 986721,
  "sawtooth-wave": 988282,
  "saxophone": 984585,
  "scale": 984178,
  "scale-balance": 984529,
  "scale-bathroom": 984179,
  "scale-off": 987226,
  "scale-unbalanced": 989624,
  "scan-helper": 988120,
  "scanner": 984747,
  "scanner-off": 985354,
  "scatter-plot": 986825,
  "scatter-plot-outline": 986826,
  "scent": 989528,
  "scent-off": 989529,
  "school": 984180,
  "school-outline": 987520,
  "scissors-cutting": 985707,
  "scooter": 988605,
  "scooter-electric": 988606,
  "scoreboard": 987774,
  "scoreboard-outline": 987775,
  "screen-rotation": 984181,
  "screen-rotation-lock": 984184,
  "screw-flat-top": 986611,
  "screw-lag": 986612,
  "screw-machine-flat-top": 986613,
  "screw-machine-round-top": 986614,
  "screw-round-top": 986615,
  "screwdriver": 984182,
  "script": 986049,
  "script-outline": 984183,
  "script-text": 986050,
  "script-text-key": 988965,
  "script-text-key-outline": 988966,
  "script-text-outline": 986051,
  "script-text-play": 988967,
  "script-text-play-outline": 988968,
  "sd": 984185,
  "seal": 984186,
  "seal-variant": 987097,
  "search-web": 984847,
  "seat": 986307,
  "seat-flat": 984187,
  "seat-flat-angled": 984188,
  "seat-individual-suite": 984189,
  "seat-legroom-extra": 984190,
  "seat-legroom-normal": 984191,
  "seat-legroom-reduced": 984192,
  "seat-outline": 986308,
  "seat-passenger": 987721,
  "seat-recline-extra": 984193,
  "seat-recline-normal": 984194,
  "seatbelt": 986309,
  "security": 984195,
  "security-network": 984196,
  "seed": 986722,
  "seed-off": 988157,
  "seed-off-outline": 988158,
  "seed-outline": 986723,
  "seesaw": 988580,
  "segment": 986827,
  "select": 984197,
  "select-all": 984198,
  "select-color": 986417,
  "select-compare": 985817,
  "select-drag": 985708,
  "select-group": 987010,
  "select-inverse": 984199,
  "select-marker": 987776,
  "select-multiple": 987777,
  "select-multiple-marker": 987778,
  "select-off": 984200,
  "select-place": 987098,
  "select-remove": 989121,
  "select-search": 987652,
  "selection": 984201,
  "selection-drag": 985709,
  "selection-ellipse": 986418,
  "selection-ellipse-arrow-inside": 986914,
  "selection-ellipse-remove": 989122,
  "selection-marker": 987779,
  "selection-multiple": 987781,
  "selection-multiple-marker": 987780,
  "selection-off": 984951,
  "selection-remove": 989123,
  "selection-search": 987653,
  "semantic-web": 987926,
  "send": 984202,
  "send-check": 987489,
  "send-check-outline": 987490,
  "send-circle": 986616,
  "send-circle-outline": 986617,
  "send-clock": 987491,
  "send-clock-outline": 987492,
  "send-lock": 985069,
  "send-lock-outline": 987494,
  "send-outline": 987493,
  "serial-port": 984668,
  "server": 984203,
  "server-minus": 984204,
  "server-network": 984205,
  "server-network-off": 984206,
  "server-off": 984207,
  "server-plus": 984208,
  "server-remove": 984209,
  "server-security": 984210,
  "set-all": 984952,
  "set-center": 984953,
  "set-center-right": 984954,
  "set-left": 984955,
  "set-left-center": 984956,
  "set-left-right": 984957,
  "set-merge": 988384,
  "set-none": 984958,
  "set-right": 984959,
  "set-split": 988385,
  "set-square": 988253,
  "set-top-box": 985503,
  "settings-helper": 985710,
  "shaker": 987406,
  "shaker-outline": 987407,
  "shape": 985137,
  "shape-circle-plus": 984669,
  "shape-outline": 985138,
  "shape-oval-plus": 987642,
  "shape-plus": 984213,
  "shape-polygon-plus": 984670,
  "shape-rectangle-plus": 984671,
  "shape-square-plus": 984672,
  "shape-square-rounded-plus": 988410,
  "share": 984214,
  "share-all": 987636,
  "share-all-outline": 987637,
  "share-circle": 987565,
  "share-off": 986915,
  "share-off-outline": 986916,
  "share-outline": 985394,
  "share-variant": 984215,
  "share-variant-outline": 988436,
  "shark": 989370,
  "shark-fin": 988787,
  "shark-fin-outline": 988788,
  "shark-off": 989371,
  "sheep": 986310,
  "shield": 984216,
  "shield-account": 985231,
  "shield-account-outline": 985618,
  "shield-account-variant": 988583,
  "shield-account-variant-outline": 988584,
  "shield-airplane": 984763,
  "shield-airplane-outline": 986311,
  "shield-alert": 986828,
  "shield-alert-outline": 986829,
  "shield-bug": 988122,
  "shield-bug-outline": 988123,
  "shield-car": 987011,
  "shield-check": 984421,
  "shield-check-outline": 986312,
  "shield-cross": 986313,
  "shield-cross-outline": 986314,
  "shield-crown": 989372,
  "shield-crown-outline": 989373,
  "shield-edit": 987552,
  "shield-edit-outline": 987553,
  "shield-half": 988000,
  "shield-half-full": 984960,
  "shield-home": 984714,
  "shield-home-outline": 986315,
  "shield-key": 986052,
  "shield-key-outline": 986053,
  "shield-link-variant": 986419,
  "shield-link-variant-outline": 986420,
  "shield-lock": 985501,
  "shield-lock-open": 989594,
  "shield-lock-open-outline": 989595,
  "shield-lock-outline": 986316,
  "shield-moon": 989224,
  "shield-moon-outline": 989225,
  "shield-off": 985502,
  "shield-off-outline": 985500,
  "shield-outline": 984217,
  "shield-plus": 985818,
  "shield-plus-outline": 985819,
  "shield-refresh": 983210,
  "shield-refresh-outline": 983520,
  "shield-remove": 985820,
  "shield-remove-outline": 985821,
  "shield-search": 986522,
  "shield-star": 987451,
  "shield-star-outline": 987452,
  "shield-sun": 987229,
  "shield-sun-outline": 987230,
  "shield-sword": 989374,
  "shield-sword-outline": 989375,
  "shield-sync": 987554,
  "shield-sync-outline": 987555,
  "shimmer": 988485,
  "ship-wheel": 985139,
  "shipping-pallet": 989262,
  "shoe-ballet": 988618,
  "shoe-cleat": 988615,
  "shoe-formal": 985927,
  "shoe-heel": 985928,
  "shoe-print": 986618,
  "shoe-sneaker": 988616,
  "shopping": 984218,
  "shopping-music": 984219,
  "shopping-outline": 987605,
  "shopping-search": 987012,
  "shore": 988409,
  "shovel": 984848,
  "shovel-off": 984849,
  "shower": 985504,
  "shower-head": 985505,
  "shredder": 984220,
  "shuffle": 984221,
  "shuffle-disabled": 984222,
  "shuffle-variant": 984223,
  "shuriken": 988031,
  "sickle": 989376,
  "sigma": 984224,
  "sigma-lower": 984619,
  "sign-caution": 984225,
  "sign-direction": 984961,
  "sign-direction-minus": 987136,
  "sign-direction-plus": 987100,
  "sign-direction-remove": 987101,
  "sign-pole": 988408,
  "sign-real-estate": 987416,
  "sign-text": 984962,
  "signal": 984226,
  "signal-2g": 984850,
  "signal-3g": 984851,
  "signal-4g": 984852,
  "signal-5g": 985711,
  "signal-cellular-1": 985276,
  "signal-cellular-2": 985277,
  "signal-cellular-3": 985278,
  "signal-cellular-outline": 985279,
  "signal-distance-variant": 986724,
  "signal-hspa": 984853,
  "signal-hspa-plus": 984854,
  "signal-off": 984963,
  "signal-variant": 984586,
  "signature": 986619,
  "signature-freehand": 986620,
  "signature-image": 986621,
  "signature-text": 986622,
  "silo": 985929,
  "silverware": 984227,
  "silverware-clean": 987102,
  "silverware-fork": 984228,
  "silverware-fork-knife": 985712,
  "silverware-spoon": 984229,
  "silverware-variant": 984230,
  "sim": 984231,
  "sim-alert": 984232,
  "sim-alert-outline": 988627,
  "sim-off": 984233,
  "sim-off-outline": 988628,
  "sim-outline": 988629,
  "simple-icons": 987933,
  "sina-weibo": 985823,
  "sine-wave": 985435,
  "sitemap": 984234,
  "sitemap-outline": 989596,
  "size-l": 988070,
  "size-m": 988069,
  "size-s": 988068,
  "size-xl": 988071,
  "size-xs": 988067,
  "size-xxl": 988072,
  "size-xxs": 988066,
  "size-xxxl": 988073,
  "skate": 986421,
  "skate-off": 984729,
  "skateboard": 988354,
  "skateboarding": 984321,
  "skew-less": 986422,
  "skew-more": 986423,
  "ski": 987908,
  "ski-cross-country": 987909,
  "ski-water": 987910,
  "skip-backward": 984235,
  "skip-backward-outline": 986917,
  "skip-forward": 984236,
  "skip-forward-outline": 986918,
  "skip-next": 984237,
  "skip-next-circle": 984673,
  "skip-next-circle-outline": 984674,
  "skip-next-outline": 986919,
  "skip-previous": 984238,
  "skip-previous-circle": 984675,
  "skip-previous-circle-outline": 984676,
  "skip-previous-outline": 986920,
  "skull": 984716,
  "skull-crossbones": 986054,
  "skull-crossbones-outline": 986055,
  "skull-outline": 986056,
  "skull-scan": 988359,
  "skull-scan-outline": 988360,
  "skype": 984239,
  "skype-business": 984240,
  "slack": 984241,
  "slash-forward": 987103,
  "slash-forward-box": 987104,
  "sledding": 984091,
  "sleep": 984242,
  "sleep-off": 984243,
  "slide": 988581,
  "slope-downhill": 986623,
  "slope-uphill": 986624,
  "slot-machine": 987412,
  "slot-machine-outline": 987413,
  "smart-card": 987325,
  "smart-card-off": 989431,
  "smart-card-off-outline": 989432,
  "smart-card-outline": 987326,
  "smart-card-reader": 987327,
  "smart-card-reader-outline": 987328,
  "smog": 985713,
  "smoke": 989081,
  "smoke-detector": 983954,
  "smoke-detector-alert": 989486,
  "smoke-detector-alert-outline": 989487,
  "smoke-detector-off": 989193,
  "smoke-detector-off-outline": 989194,
  "smoke-detector-outline": 989192,
  "smoke-detector-variant": 989195,
  "smoke-detector-variant-alert": 989488,
  "smoke-detector-variant-off": 989196,
  "smoking": 984244,
  "smoking-off": 984245,
  "smoking-pipe": 988173,
  "smoking-pipe-off": 988200,
  "snail": 988791,
  "snake": 988430,
  "snapchat": 984246,
  "snowboard": 987911,
  "snowflake": 984855,
  "snowflake-alert": 986921,
  "snowflake-melt": 987851,
  "snowflake-off": 988387,
  "snowflake-variant": 986922,
  "snowman": 984247,
  "snowmobile": 984797,
  "soccer": 984248,
  "soccer-field": 985140,
  "social-distance-2-meters": 988537,
  "social-distance-6-feet": 988538,
  "sofa": 984249,
  "sofa-outline": 988525,
  "sofa-single": 988526,
  "sofa-single-outline": 988527,
  "solar-panel": 986523,
  "solar-panel-large": 986524,
  "solar-power": 985714,
  "soldering-iron": 987282,
  "solid": 984717,
  "sony-playstation": 984084,
  "sort": 984250,
  "sort-alphabetical-ascending": 984509,
  "sort-alphabetical-ascending-variant": 987464,
  "sort-alphabetical-descending": 984511,
  "sort-alphabetical-descending-variant": 987465,
  "sort-alphabetical-variant": 984251,
  "sort-ascending": 984252,
  "sort-bool-ascending": 988037,
  "sort-bool-ascending-variant": 988038,
  "sort-bool-descending": 988039,
  "sort-bool-descending-variant": 988040,
  "sort-calendar-ascending": 988487,
  "sort-calendar-descending": 988488,
  "sort-clock-ascending": 988489,
  "sort-clock-ascending-outline": 988490,
  "sort-clock-descending": 988491,
  "sort-clock-descending-outline": 988492,
  "sort-descending": 984253,
  "sort-numeric-ascending": 988041,
  "sort-numeric-ascending-variant": 985357,
  "sort-numeric-descending": 988042,
  "sort-numeric-descending-variant": 985810,
  "sort-numeric-variant": 984254,
  "sort-reverse-variant": 983868,
  "sort-variant": 984255,
  "sort-variant-lock": 986317,
  "sort-variant-lock-open": 986318,
  "sort-variant-remove": 987463,
  "soundbar": 989147,
  "soundcloud": 984256,
  "source-branch": 984620,
  "source-branch-check": 988367,
  "source-branch-minus": 988363,
  "source-branch-plus": 988362,
  "source-branch-refresh": 988365,
  "source-branch-remove": 988364,
  "source-branch-sync": 988366,
  "source-commit": 984856,
  "source-commit-end": 984857,
  "source-commit-end-local": 984858,
  "source-commit-local": 984859,
  "source-commit-next-local": 984860,
  "source-commit-start": 984861,
  "source-commit-start-next-local": 984862,
  "source-fork": 984257,
  "source-merge": 984621,
  "source-pull": 984258,
  "source-repository": 986319,
  "source-repository-multiple": 986320,
  "soy-sauce": 985070,
  "soy-sauce-off": 988156,
  "spa": 986321,
  "spa-outline": 986322,
  "space-invaders": 986057,
  "space-station": 988035,
  "spade": 986725,
  "speaker": 984259,
  "speaker-bluetooth": 985506,
  "speaker-multiple": 986424,
  "speaker-off": 984260,
  "speaker-wireless": 984863,
  "spear": 989253,
  "speedometer": 984261,
  "speedometer-medium": 987013,
  "speedometer-slow": 987014,
  "spellcheck": 984262,
  "sphere": 989524,
  "sphere-off": 989525,
  "spider": 987626,
  "spider-thread": 987627,
  "spider-web": 986058,
  "spirit-level": 988401,
  "spoon-sugar": 988201,
  "spotify": 984263,
  "spotlight": 984264,
  "spotlight-beam": 984265,
  "spray": 984677,
  "spray-bottle": 985824,
  "sprinkler": 987231,
  "sprinkler-fire": 989597,
  "sprinkler-variant": 987232,
  "sprout": 986726,
  "sprout-outline": 986727,
  "square": 984932,
  "square-circle": 988416,
  "square-edit-outline": 985356,
  "square-medium": 985619,
  "square-medium-outline": 985620,
  "square-off": 987886,
  "square-off-outline": 987887,
  "square-opacity": 989268,
  "square-outline": 984931,
  "square-root": 984964,
  "square-root-box": 985507,
  "square-rounded": 988411,
  "square-rounded-outline": 988412,
  "square-small": 985621,
  "square-wave": 988283,
  "squeegee": 985825,
  "ssh": 985280,
  "stack-exchange": 984587,
  "stack-overflow": 984268,
  "stackpath": 983897,
  "stadium": 987129,
  "stadium-variant": 984864,
  "stairs": 984269,
  "stairs-box": 988062,
  "stairs-down": 987838,
  "stairs-up": 987837,
  "stamper": 986425,
  "standard-definition": 985071,
  "star": 984270,
  "star-box": 985715,
  "star-box-multiple": 987782,
  "star-box-multiple-outline": 987783,
  "star-box-outline": 985716,
  "star-check": 988518,
  "star-check-outline": 988522,
  "star-circle": 984271,
  "star-circle-outline": 985508,
  "star-cog": 988776,
  "star-cog-outline": 988777,
  "star-crescent": 985465,
  "star-david": 985466,
  "star-face": 985509,
  "star-four-points": 985826,
  "star-four-points-outline": 985827,
  "star-half": 983622,
  "star-half-full": 984272,
  "star-minus": 988516,
  "star-minus-outline": 988520,
  "star-off": 984273,
  "star-off-outline": 988507,
  "star-outline": 984274,
  "star-plus": 988515,
  "star-plus-outline": 988519,
  "star-remove": 988517,
  "star-remove-outline": 988521,
  "star-settings": 988778,
  "star-settings-outline": 988779,
  "star-shooting": 988993,
  "star-shooting-outline": 988994,
  "star-three-points": 985828,
  "star-three-points-outline": 985829,
  "state-machine": 987631,
  "steam": 984275,
  "steering": 984276,
  "steering-off": 985358,
  "step-backward": 984277,
  "step-backward-2": 984278,
  "step-forward": 984279,
  "step-forward-2": 984280,
  "stethoscope": 984281,
  "sticker": 988004,
  "sticker-alert": 988005,
  "sticker-alert-outline": 988006,
  "sticker-check": 988007,
  "sticker-check-outline": 988008,
  "sticker-circle-outline": 984528,
  "sticker-emoji": 984965,
  "sticker-minus": 988009,
  "sticker-minus-outline": 988010,
  "sticker-outline": 988011,
  "sticker-plus": 988012,
  "sticker-plus-outline": 988013,
  "sticker-remove": 988014,
  "sticker-remove-outline": 988015,
  "sticker-text": 989070,
  "sticker-text-outline": 989071,
  "stocking": 984282,
  "stomach": 987283,
  "stool": 989533,
  "stool-outline": 989534,
  "stop": 984283,
  "stop-circle": 984678,
  "stop-circle-outline": 984679,
  "store": 984284,
  "store-24-hour": 984285,
  "store-alert": 989377,
  "store-alert-outline": 989378,
  "store-check": 989379,
  "store-check-outline": 989380,
  "store-clock": 989381,
  "store-clock-outline": 989382,
  "store-cog": 989383,
  "store-cog-outline": 989384,
  "store-edit": 989385,
  "store-edit-outline": 989386,
  "store-marker": 989387,
  "store-marker-outline": 989388,
  "store-minus": 988766,
  "store-minus-outline": 989389,
  "store-off": 989390,
  "store-off-outline": 989391,
  "store-outline": 988001,
  "store-plus": 988767,
  "store-plus-outline": 989392,
  "store-remove": 988768,
  "store-remove-outline": 989393,
  "store-search": 989394,
  "store-search-outline": 989395,
  "store-settings": 989396,
  "store-settings-outline": 989397,
  "storefront": 985031,
  "storefront-outline": 987329,
  "stove": 984286,
  "strategy": 987606,
  "stretch-to-page": 986923,
  "stretch-to-page-outline": 986924,
  "string-lights": 987834,
  "string-lights-off": 987835,
  "subdirectory-arrow-left": 984588,
  "subdirectory-arrow-right": 984589,
  "submarine": 988524,
  "subtitles": 985622,
  "subtitles-outline": 985623,
  "subway": 984748,
  "subway-alert-variant": 986525,
  "subway-variant": 984287,
  "summit": 984966,
  "sun-compass": 989605,
  "sun-snowflake": 989078,
  "sun-thermometer": 989398,
  "sun-thermometer-outline": 989399,
  "sun-wireless": 989182,
  "sun-wireless-outline": 989183,
  "sunglasses": 984288,
  "surfing": 988998,
  "surround-sound": 984517,
  "surround-sound-2-0": 985072,
  "surround-sound-2-1": 988969,
  "surround-sound-3-1": 985073,
  "surround-sound-5-1": 985074,
  "surround-sound-5-1-2": 988970,
  "surround-sound-7-1": 985075,
  "svg": 984865,
  "swap-horizontal": 984289,
  "swap-horizontal-bold": 986061,
  "swap-horizontal-circle": 987105,
  "swap-horizontal-circle-outline": 987106,
  "swap-horizontal-variant": 985281,
  "swap-vertical": 984290,
  "swap-vertical-bold": 986062,
  "swap-vertical-circle": 987107,
  "swap-vertical-circle-outline": 987108,
  "swap-vertical-variant": 985282,
  "swim": 984291,
  "switch": 984292,
  "sword": 984293,
  "sword-cross": 984967,
  "syllabary-hangul": 987955,
  "syllabary-hiragana": 987956,
  "syllabary-katakana": 987957,
  "syllabary-katakana-halfwidth": 987958,
  "symbol": 988417,
  "symfony": 985830,
  "sync": 984294,
  "sync-alert": 984295,
  "sync-circle": 988024,
  "sync-off": 984296,
  "tab": 984297,
  "tab-minus": 985931,
  "tab-plus": 984924,
  "tab-remove": 985932,
  "tab-search": 989598,
  "tab-unselected": 984298,
  "table": 984299,
  "table-account": 988089,
  "table-alert": 988090,
  "table-arrow-down": 988091,
  "table-arrow-left": 988092,
  "table-arrow-right": 988093,
  "table-arrow-up": 988094,
  "table-border": 985624,
  "table-cancel": 988095,
  "table-chair": 987233,
  "table-check": 988096,
  "table-clock": 988097,
  "table-cog": 988098,
  "table-column": 985141,
  "table-column-plus-after": 984300,
  "table-column-plus-before": 984301,
  "table-column-remove": 984302,
  "table-column-width": 984303,
  "table-edit": 984304,
  "table-eye": 987284,
  "table-eye-off": 988099,
  "table-furniture": 984508,
  "table-headers-eye": 987677,
  "table-headers-eye-off": 987678,
  "table-heart": 988100,
  "table-key": 988101,
  "table-large": 984305,
  "table-large-plus": 987015,
  "table-large-remove": 987016,
  "table-lock": 988102,
  "table-merge-cells": 985510,
  "table-minus": 988103,
  "table-multiple": 988104,
  "table-network": 988105,
  "table-of-contents": 985142,
  "table-off": 988106,
  "table-picnic": 988995,
  "table-pivot": 989244,
  "table-plus": 985717,
  "table-refresh": 988064,
  "table-remove": 985718,
  "table-row": 985143,
  "table-row-height": 984306,
  "table-row-plus-after": 984307,
  "table-row-plus-before": 984308,
  "table-row-remove": 984309,
  "table-search": 985359,
  "table-settings": 985144,
  "table-split-cell": 988202,
  "table-star": 988107,
  "table-sync": 988065,
  "table-tennis": 986728,
  "tablet": 984310,
  "tablet-android": 984311,
  "tablet-cellphone": 985511,
  "tablet-dashboard": 986830,
  "taco": 984930,
  "tag": 984313,
  "tag-arrow-down": 988971,
  "tag-arrow-down-outline": 988972,
  "tag-arrow-left": 988973,
  "tag-arrow-left-outline": 988974,
  "tag-arrow-right": 988975,
  "tag-arrow-right-outline": 988976,
  "tag-arrow-up": 988977,
  "tag-arrow-up-outline": 988978,
  "tag-faces": 984314,
  "tag-heart": 984715,
  "tag-heart-outline": 986063,
  "tag-minus": 985360,
  "tag-minus-outline": 987679,
  "tag-multiple": 984315,
  "tag-multiple-outline": 987895,
  "tag-off": 987680,
  "tag-off-outline": 987681,
  "tag-outline": 984316,
  "tag-plus": 984866,
  "tag-plus-outline": 987682,
  "tag-remove": 984867,
  "tag-remove-outline": 987683,
  "tag-search": 989447,
  "tag-search-outline": 989448,
  "tag-text": 987684,
  "tag-text-outline": 984317,
  "tailwind": 988159,
  "tangram": 984312,
  "tank": 986426,
  "tanker-truck": 987109,
  "tape-drive": 988895,
  "tape-measure": 985933,
  "target": 984318,
  "target-account": 986064,
  "target-variant": 985719,
  "taxi": 984319,
  "tea": 986526,
  "tea-outline": 986527,
  "teamviewer": 984320,
  "teddy-bear": 989435,
  "telescope": 985934,
  "television": 984322,
  "television-ambient-light": 987990,
  "television-box": 985145,
  "television-classic": 985076,
  "television-classic-off": 985146,
  "television-guide": 984323,
  "television-off": 985147,
  "television-pause": 987017,
  "television-play": 986831,
  "television-shimmer": 987408,
  "television-stop": 987018,
  "temperature-celsius": 984324,
  "temperature-fahrenheit": 984325,
  "temperature-kelvin": 984326,
  "tennis": 986528,
  "tennis-ball": 984327,
  "tent": 984328,
  "terraform": 987234,
  "terrain": 984329,
  "test-tube": 984680,
  "test-tube-empty": 985361,
  "test-tube-off": 985362,
  "text": 985512,
  "text-account": 988528,
  "text-box": 983578,
  "text-box-check": 986790,
  "text-box-check-outline": 986791,
  "text-box-minus": 986792,
  "text-box-minus-outline": 986793,
  "text-box-multiple": 985783,
  "text-box-multiple-outline": 985784,
  "text-box-outline": 985581,
  "text-box-plus": 986794,
  "text-box-plus-outline": 986795,
  "text-box-remove": 986796,
  "text-box-remove-outline": 986797,
  "text-box-search": 986798,
  "text-box-search-outline": 986799,
  "text-long": 985514,
  "text-recognition": 987453,
  "text-search": 988088,
  "text-shadow": 984681,
  "text-short": 985513,
  "text-to-speech": 984330,
  "text-to-speech-off": 984331,
  "texture": 984332,
  "texture-box": 987110,
  "theater": 984333,
  "theme-light-dark": 984334,
  "thermometer": 984335,
  "thermometer-alert": 986625,
  "thermometer-bluetooth": 989333,
  "thermometer-chevron-down": 986626,
  "thermometer-chevron-up": 986627,
  "thermometer-high": 987330,
  "thermometer-lines": 984336,
  "thermometer-low": 987331,
  "thermometer-minus": 986628,
  "thermometer-off": 988465,
  "thermometer-plus": 986629,
  "thermostat": 983955,
  "thermostat-box": 985233,
  "thought-bubble": 985078,
  "thought-bubble-outline": 985079,
  "thumb-down": 984337,
  "thumb-down-outline": 984338,
  "thumb-up": 984339,
  "thumb-up-outline": 984340,
  "thumbs-up-down": 984341,
  "thumbs-up-down-outline": 989460,
  "ticket": 984342,
  "ticket-account": 984343,
  "ticket-confirmation": 984344,
  "ticket-confirmation-outline": 988074,
  "ticket-outline": 985363,
  "ticket-percent": 984868,
  "ticket-percent-outline": 988203,
  "tie": 984345,
  "tilde": 984869,
  "tilde-off": 989427,
  "timelapse": 984346,
  "timeline": 986065,
  "timeline-alert": 987029,
  "timeline-alert-outline": 987032,
  "timeline-check": 988466,
  "timeline-check-outline": 988467,
  "timeline-clock": 987643,
  "timeline-clock-outline": 987644,
  "timeline-help": 987033,
  "timeline-help-outline": 987034,
  "timeline-minus": 988468,
  "timeline-minus-outline": 988469,
  "timeline-outline": 986066,
  "timeline-plus": 987030,
  "timeline-plus-outline": 987031,
  "timeline-remove": 988470,
  "timeline-remove-outline": 988471,
  "timeline-text": 986067,
  "timeline-text-outline": 986068,
  "timer": 988075,
  "timer-10": 984348,
  "timer-3": 984349,
  "timer-cog": 989477,
  "timer-cog-outline": 989478,
  "timer-off": 988076,
  "timer-off-outline": 984350,
  "timer-outline": 984347,
  "timer-sand": 984351,
  "timer-sand-complete": 989599,
  "timer-sand-empty": 984749,
  "timer-sand-full": 984972,
  "timer-sand-paused": 989600,
  "timer-settings": 989475,
  "timer-settings-outline": 989476,
  "timetable": 984352,
  "tire": 989334,
  "toaster": 987235,
  "toaster-off": 987575,
  "toaster-oven": 986323,
  "toggle-switch": 984353,
  "toggle-switch-off": 984354,
  "toggle-switch-off-outline": 985625,
  "toggle-switch-outline": 985626,
  "toilet": 985515,
  "toolbox": 985516,
  "toolbox-outline": 985517,
  "tools": 987236,
  "tooltip": 984355,
  "tooltip-account": 983052,
  "tooltip-cellphone": 989243,
  "tooltip-check": 988508,
  "tooltip-check-outline": 988509,
  "tooltip-edit": 984356,
  "tooltip-edit-outline": 987845,
  "tooltip-image": 984357,
  "tooltip-image-outline": 986069,
  "tooltip-minus": 988510,
  "tooltip-minus-outline": 988511,
  "tooltip-outline": 984358,
  "tooltip-plus": 986070,
  "tooltip-plus-outline": 984359,
  "tooltip-remove": 988512,
  "tooltip-remove-outline": 988513,
  "tooltip-text": 984360,
  "tooltip-text-outline": 986071,
  "tooth": 985283,
  "tooth-outline": 984361,
  "toothbrush": 987433,
  "toothbrush-electric": 987436,
  "toothbrush-paste": 987434,
  "torch": 988678,
  "tortoise": 986427,
  "toslink": 987832,
  "tournament": 985518,
  "tow-truck": 985148,
  "tower-beach": 984705,
  "tower-fire": 984706,
  "town-hall": 989301,
  "toy-brick": 987784,
  "toy-brick-marker": 987785,
  "toy-brick-marker-outline": 987786,
  "toy-brick-minus": 987787,
  "toy-brick-minus-outline": 987788,
  "toy-brick-outline": 987789,
  "toy-brick-plus": 987790,
  "toy-brick-plus-outline": 987791,
  "toy-brick-remove": 987792,
  "toy-brick-remove-outline": 987793,
  "toy-brick-search": 987794,
  "toy-brick-search-outline": 987795,
  "track-light": 985364,
  "trackpad": 985080,
  "trackpad-lock": 985395,
  "tractor": 985234,
  "tractor-variant": 988356,
  "trademark": 985720,
  "traffic-cone": 988028,
  "traffic-light": 984363,
  "traffic-light-outline": 989226,
  "train": 984364,
  "train-car": 986072,
  "train-car-passenger": 988979,
  "train-car-passenger-door": 988980,
  "train-car-passenger-door-open": 988981,
  "train-car-passenger-variant": 988982,
  "train-variant": 985284,
  "tram": 984365,
  "tram-side": 987111,
  "transcribe": 984366,
  "transcribe-close": 984367,
  "transfer": 987237,
  "transfer-down": 986529,
  "transfer-left": 986530,
  "transfer-right": 984368,
  "transfer-up": 986531,
  "transit-connection": 986428,
  "transit-connection-horizontal": 988486,
  "transit-connection-variant": 986429,
  "transit-detour": 987019,
  "transit-skip": 988437,
  "transit-transfer": 984750,
  "transition": 985365,
  "transition-masked": 985366,
  "translate": 984522,
  "translate-off": 986630,
  "transmission-tower": 986430,
  "transmission-tower-export": 989484,
  "transmission-tower-import": 989485,
  "trash-can": 985721,
  "trash-can-outline": 985722,
  "tray": 987796,
  "tray-alert": 987797,
  "tray-arrow-down": 983328,
  "tray-arrow-up": 983325,
  "tray-full": 987798,
  "tray-minus": 987799,
  "tray-plus": 987800,
  "tray-remove": 987801,
  "treasure-chest": 984870,
  "tree": 984369,
  "tree-outline": 986729,
  "trello": 984370,
  "trending-down": 984371,
  "trending-neutral": 984372,
  "trending-up": 984373,
  "triangle": 984374,
  "triangle-outline": 984375,
  "triangle-wave": 988284,
  "triforce": 986073,
  "trophy": 984376,
  "trophy-award": 984377,
  "trophy-broken": 986532,
  "trophy-outline": 984378,
  "trophy-variant": 984379,
  "trophy-variant-outline": 984380,
  "truck": 984381,
  "truck-cargo-container": 989400,
  "truck-check": 986324,
  "truck-check-outline": 987802,
  "truck-delivery": 984382,
  "truck-delivery-outline": 987803,
  "truck-fast": 984968,
  "truck-fast-outline": 987804,
  "truck-flatbed": 989329,
  "truck-minus": 989614,
  "truck-minus-outline": 989629,
  "truck-outline": 987805,
  "truck-plus": 989613,
  "truck-plus-outline": 989628,
  "truck-remove": 989615,
  "truck-remove-outline": 989630,
  "truck-snowflake": 989606,
  "truck-trailer": 984871,
  "trumpet": 987286,
  "tshirt-crew": 985723,
  "tshirt-crew-outline": 984383,
  "tshirt-v": 985724,
  "tshirt-v-outline": 984384,
  "tumble-dryer": 985367,
  "tumble-dryer-alert": 987578,
  "tumble-dryer-off": 987579,
  "tune": 984622,
  "tune-variant": 988482,
  "tune-vertical": 984682,
  "tune-vertical-variant": 988483,
  "tunnel": 989245,
  "tunnel-outline": 989246,
  "turkey": 988955,
  "turnstile": 986325,
  "turnstile-outline": 986326,
  "turtle": 986327,
  "twitch": 984387,
  "twitter": 984388,
  "two-factor-authentication": 985519,
  "typewriter": 986925,
  "ubisoft": 986074,
  "ubuntu": 984392,
  "ufo": 987332,
  "ufo-outline": 987333,
  "ultra-high-definition": 985081,
  "umbraco": 984393,
  "umbrella": 984394,
  "umbrella-beach": 989322,
  "umbrella-beach-outline": 989323,
  "umbrella-closed": 985520,
  "umbrella-closed-outline": 988130,
  "umbrella-closed-variant": 988129,
  "umbrella-outline": 984395,
  "undo": 984396,
  "undo-variant": 984397,
  "unfold-less-horizontal": 984398,
  "unfold-less-vertical": 984928,
  "unfold-more-horizontal": 984399,
  "unfold-more-vertical": 984929,
  "ungroup": 984400,
  "unicode": 986832,
  "unicorn": 988610,
  "unicorn-variant": 988611,
  "unicycle": 988645,
  "unity": 984751,
  "unreal": 985521,
  "update": 984752,
  "upload": 984402,
  "upload-lock": 988019,
  "upload-lock-outline": 988020,
  "upload-multiple": 985149,
  "upload-network": 984822,
  "upload-network-outline": 986328,
  "upload-off": 987334,
  "upload-off-outline": 987335,
  "upload-outline": 986631,
  "usb": 984403,
  "usb-flash-drive": 987806,
  "usb-flash-drive-outline": 987807,
  "usb-port": 987632,
  "vacuum": 989601,
  "vacuum-outline": 989602,
  "valve": 987238,
  "valve-closed": 987239,
  "valve-open": 987240,
  "van-passenger": 985082,
  "van-utility": 985083,
  "vanish": 985084,
  "vanish-quarter": 988500,
  "vanity-light": 987617,
  "variable": 985831,
  "variable-box": 987409,
  "vector-arrange-above": 984404,
  "vector-arrange-below": 984405,
  "vector-bezier": 985832,
  "vector-circle": 984406,
  "vector-circle-variant": 984407,
  "vector-combine": 984408,
  "vector-curve": 984409,
  "vector-difference": 984410,
  "vector-difference-ab": 984411,
  "vector-difference-ba": 984412,
  "vector-ellipse": 985235,
  "vector-intersection": 984413,
  "vector-line": 984414,
  "vector-link": 987112,
  "vector-point": 984415,
  "vector-polygon": 984416,
  "vector-polygon-variant": 989270,
  "vector-polyline": 984417,
  "vector-polyline-edit": 987685,
  "vector-polyline-minus": 987686,
  "vector-polyline-plus": 987687,
  "vector-polyline-remove": 987688,
  "vector-radius": 984906,
  "vector-rectangle": 984518,
  "vector-selection": 984418,
  "vector-square": 983041,
  "vector-square-close": 989271,
  "vector-square-edit": 989401,
  "vector-square-minus": 989402,
  "vector-square-open": 989272,
  "vector-square-plus": 989403,
  "vector-square-remove": 989404,
  "vector-triangle": 984419,
  "vector-union": 984420,
  "vhs": 985627,
  "vibrate": 984422,
  "vibrate-off": 986329,
  "video": 984423,
  "video-3d": 985085,
  "video-3d-off": 988121,
  "video-3d-variant": 986833,
  "video-4k-box": 985150,
  "video-account": 985369,
  "video-box": 983293,
  "video-box-off": 983294,
  "video-check": 987241,
  "video-check-outline": 987242,
  "video-high-definition": 988462,
  "video-image": 985370,
  "video-input-antenna": 985151,
  "video-input-component": 985152,
  "video-input-hdmi": 985153,
  "video-input-scart": 987020,
  "video-input-svideo": 985154,
  "video-marker": 989609,
  "video-marker-outline": 989610,
  "video-minus": 985522,
  "video-minus-outline": 983738,
  "video-off": 984424,
  "video-off-outline": 986075,
  "video-outline": 986076,
  "video-plus": 985523,
  "video-plus-outline": 983507,
  "video-stabilization": 985371,
  "video-switch": 984425,
  "video-switch-outline": 984976,
  "video-vintage": 985628,
  "video-wireless": 986834,
  "video-wireless-outline": 986835,
  "view-agenda": 984426,
  "view-agenda-outline": 987608,
  "view-array": 984427,
  "view-array-outline": 988293,
  "view-carousel": 984428,
  "view-carousel-outline": 988294,
  "view-column": 984429,
  "view-column-outline": 988295,
  "view-comfy": 986730,
  "view-comfy-outline": 988296,
  "view-compact": 986731,
  "view-compact-outline": 986732,
  "view-dashboard": 984430,
  "view-dashboard-edit": 989511,
  "view-dashboard-edit-outline": 989512,
  "view-dashboard-outline": 985629,
  "view-dashboard-variant": 985155,
  "view-dashboard-variant-outline": 988297,
  "view-day": 984431,
  "view-day-outline": 988298,
  "view-gallery": 989320,
  "view-gallery-outline": 989321,
  "view-grid": 984432,
  "view-grid-outline": 987609,
  "view-grid-plus": 987021,
  "view-grid-plus-outline": 987610,
  "view-headline": 984433,
  "view-list": 984434,
  "view-list-outline": 988299,
  "view-module": 984435,
  "view-module-outline": 988300,
  "view-parallel": 984872,
  "view-parallel-outline": 988301,
  "view-quilt": 984436,
  "view-quilt-outline": 988302,
  "view-sequential": 984873,
  "view-sequential-outline": 988303,
  "view-split-horizontal": 986059,
  "view-split-vertical": 986060,
  "view-stream": 984437,
  "view-stream-outline": 988304,
  "view-week": 984438,
  "view-week-outline": 988305,
  "vimeo": 984439,
  "violin": 984591,
  "virtual-reality": 985236,
  "virus": 988086,
  "virus-off": 989409,
  "virus-off-outline": 989410,
  "virus-outline": 988087,
  "vlc": 984444,
  "voicemail": 984445,
  "volleyball": 985524,
  "volume-high": 984446,
  "volume-low": 984447,
  "volume-medium": 984448,
  "volume-minus": 984926,
  "volume-mute": 984927,
  "volume-off": 984449,
  "volume-plus": 984925,
  "volume-source": 987424,
  "volume-variant-off": 986632,
  "volume-vibrate": 987425,
  "vote": 985631,
  "vote-outline": 985632,
  "vpn": 984450,
  "vuejs": 985156,
  "vuetify": 986733,
  "walk": 984451,
  "wall": 985086,
  "wall-sconce": 985372,
  "wall-sconce-flat": 985373,
  "wall-sconce-flat-outline": 989129,
  "wall-sconce-flat-variant": 984092,
  "wall-sconce-flat-variant-outline": 989130,
  "wall-sconce-outline": 989131,
  "wall-sconce-round": 984904,
  "wall-sconce-round-outline": 989132,
  "wall-sconce-round-variant": 985374,
  "wall-sconce-round-variant-outline": 989133,
  "wallet": 984452,
  "wallet-giftcard": 984453,
  "wallet-membership": 984454,
  "wallet-outline": 986077,
  "wallet-plus": 987022,
  "wallet-plus-outline": 987023,
  "wallet-travel": 984455,
  "wallpaper": 986633,
  "wan": 984456,
  "wardrobe": 987024,
  "wardrobe-outline": 987025,
  "warehouse": 987009,
  "washing-machine": 984874,
  "washing-machine-alert": 987580,
  "washing-machine-off": 987581,
  "watch": 984457,
  "watch-export": 984458,
  "watch-export-variant": 985237,
  "watch-import": 984459,
  "watch-import-variant": 985238,
  "watch-variant": 985239,
  "watch-vibrate": 984753,
  "watch-vibrate-off": 986330,
  "water": 984460,
  "water-alert": 988418,
  "water-alert-outline": 988419,
  "water-boiler": 987026,
  "water-boiler-alert": 987571,
  "water-boiler-off": 987572,
  "water-check": 988420,
  "water-check-outline": 988421,
  "water-circle": 989190,
  "water-minus": 988422,
  "water-minus-outline": 988423,
  "water-off": 984461,
  "water-off-outline": 988424,
  "water-opacity": 989269,
  "water-outline": 986634,
  "water-percent": 984462,
  "water-percent-alert": 988425,
  "water-plus": 988426,
  "water-plus-outline": 988427,
  "water-polo": 987808,
  "water-pump": 984463,
  "water-pump-off": 987027,
  "water-remove": 988428,
  "water-remove-outline": 988429,
  "water-sync": 989126,
  "water-well": 987243,
  "water-well-outline": 987244,
  "waterfall": 989257,
  "watering-can": 988289,
  "watering-can-outline": 988290,
  "watermark": 984594,
  "wave": 986926,
  "waveform": 988285,
  "waves": 984973,
  "waves-arrow-left": 989273,
  "waves-arrow-right": 989274,
  "waves-arrow-up": 989275,
  "waze": 986078,
  "weather-cloudy": 984464,
  "weather-cloudy-alert": 986927,
  "weather-cloudy-arrow-right": 986734,
  "weather-cloudy-clock": 989430,
  "weather-fog": 984465,
  "weather-hail": 984466,
  "weather-hazy": 986928,
  "weather-hurricane": 985240,
  "weather-lightning": 984467,
  "weather-lightning-rainy": 984702,
  "weather-night": 984468,
  "weather-night-partly-cloudy": 986929,
  "weather-partly-cloudy": 984469,
  "weather-partly-lightning": 986930,
  "weather-partly-rainy": 986931,
  "weather-partly-snowy": 986932,
  "weather-partly-snowy-rainy": 986933,
  "weather-pouring": 984470,
  "weather-rainy": 984471,
  "weather-snowy": 984472,
  "weather-snowy-heavy": 986934,
  "weather-snowy-rainy": 984703,
  "weather-sunny": 984473,
  "weather-sunny-alert": 986935,
  "weather-sunny-off": 988388,
  "weather-sunset": 984474,
  "weather-sunset-down": 984475,
  "weather-sunset-up": 984476,
  "weather-tornado": 986936,
  "weather-windy": 984477,
  "weather-windy-variant": 984478,
  "web": 984479,
  "web-box": 987028,
  "web-cancel": 989072,
  "web-check": 984969,
  "web-clock": 987722,
  "web-minus": 987296,
  "web-off": 985742,
  "web-plus": 983091,
  "web-refresh": 989073,
  "web-remove": 984401,
  "web-sync": 989074,
  "webcam": 984480,
  "webcam-off": 988983,
  "webhook": 984623,
  "webpack": 984875,
  "webrtc": 987720,
  "wechat": 984593,
  "weight": 984481,
  "weight-gram": 986431,
  "weight-kilogram": 984482,
  "weight-lifter": 987485,
  "weight-pound": 985525,
  "whatsapp": 984483,
  "wheel-barrow": 988402,
  "wheelchair-accessibility": 984484,
  "whistle": 985526,
  "whistle-outline": 987836,
  "white-balance-auto": 984485,
  "white-balance-incandescent": 984486,
  "white-balance-iridescent": 984487,
  "white-balance-sunny": 984488,
  "widgets": 984876,
  "widgets-outline": 987989,
  "wifi": 984489,
  "wifi-alert": 988853,
  "wifi-arrow-down": 988854,
  "wifi-arrow-left": 988855,
  "wifi-arrow-left-right": 988856,
  "wifi-arrow-right": 988857,
  "wifi-arrow-up": 988858,
  "wifi-arrow-up-down": 988859,
  "wifi-cancel": 988860,
  "wifi-check": 988861,
  "wifi-cog": 988862,
  "wifi-lock": 988863,
  "wifi-lock-open": 988864,
  "wifi-marker": 988865,
  "wifi-minus": 988866,
  "wifi-off": 984490,
  "wifi-plus": 988867,
  "wifi-refresh": 988868,
  "wifi-remove": 988869,
  "wifi-settings": 988870,
  "wifi-star": 986635,
  "wifi-strength-1": 985375,
  "wifi-strength-1-alert": 985376,
  "wifi-strength-1-lock": 985377,
  "wifi-strength-1-lock-open": 988875,
  "wifi-strength-2": 985378,
  "wifi-strength-2-alert": 985379,
  "wifi-strength-2-lock": 985380,
  "wifi-strength-2-lock-open": 988876,
  "wifi-strength-3": 985381,
  "wifi-strength-3-alert": 985382,
  "wifi-strength-3-lock": 985383,
  "wifi-strength-3-lock-open": 988877,
  "wifi-strength-4": 985384,
  "wifi-strength-4-alert": 985385,
  "wifi-strength-4-lock": 985386,
  "wifi-strength-4-lock-open": 988878,
  "wifi-strength-alert-outline": 985387,
  "wifi-strength-lock-open-outline": 988879,
  "wifi-strength-lock-outline": 985388,
  "wifi-strength-off": 985389,
  "wifi-strength-off-outline": 985390,
  "wifi-strength-outline": 985391,
  "wifi-sync": 988871,
  "wikipedia": 984492,
  "wind-turbine": 986533,
  "wind-turbine-alert": 989611,
  "wind-turbine-check": 989612,
  "window-close": 984493,
  "window-closed": 984494,
  "window-closed-variant": 987611,
  "window-maximize": 984495,
  "window-minimize": 984496,
  "window-open": 984497,
  "window-open-variant": 987612,
  "window-restore": 984498,
  "window-shutter": 987420,
  "window-shutter-alert": 987421,
  "window-shutter-open": 987422,
  "windsock": 988666,
  "wiper": 985833,
  "wiper-wash": 986534,
  "wiper-wash-alert": 989407,
  "wizard-hat": 988279,
  "wordpress": 984500,
  "wrap": 984502,
  "wrap-disabled": 986079,
  "wrench": 984503,
  "wrench-clock": 989603,
  "wrench-outline": 986080,
  "xamarin": 985157,
  "xml": 984512,
  "xmpp": 985087,
  "yahoo": 985935,
  "yeast": 984513,
  "yin-yang": 984704,
  "yoga": 987516,
  "youtube": 984515,
  "youtube-gaming": 985160,
  "youtube-studio": 985159,
  "youtube-subscription": 986432,
  "youtube-tv": 984136,
  "yurt": 988438,
  "z-wave": 985834,
  "zend": 985835,
  "zigbee": 986433,
  "zip-box": 984516,
  "zip-box-outline": 987130,
  "zip-disk": 985635,
  "zodiac-aquarius": 985725,
  "zodiac-aries": 985726,
  "zodiac-cancer": 985727,
  "zodiac-capricorn": 985728,
  "zodiac-gemini": 985729,
  "zodiac-leo": 985730,
  "zodiac-libra": 985731,
  "zodiac-pisces": 985732,
  "zodiac-sagittarius": 985733,
  "zodiac-scorpio": 985734,
  "zodiac-taurus": 985735,
  "zodiac-virgo": 985736,
  "blank": 63116
};
},561,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.PortalContext = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var React = _interopRequireWildcard(require(_dependencyMap[6]));
  var _reactNative = require(_dependencyMap[7]);
  var _PortalManager = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var PortalContext = exports.PortalContext = /*#__PURE__*/React.createContext(null);

  /**
   * Portal host renders all of its children `Portal` elements.
   * For example, you can wrap a screen in `Portal.Host` to render items above the screen.
   * If you're using the `Provider` component, it already includes `Portal.Host`.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Text } from 'react-native';
   * import { Portal } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Portal.Host>
   *     <Text>Content of the app</Text>
   *   </Portal.Host>
   * );
   *
   * export default MyComponent;
   * ```
   *
   * Here any `Portal` elements under `<App />` are rendered alongside `<App />` and will appear above `<App />` like a `Modal`.
   */
  var PortalHost = exports.default = /*#__PURE__*/function (_React$Component) {
    function PortalHost() {
      var _this;
      (0, _classCallCheck2.default)(this, PortalHost);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, PortalHost, [...args]);
      _this.setManager = manager => {
        _this.manager = manager;
      };
      _this.mount = children => {
        var key = _this.nextKey++;
        if (_this.manager) {
          _this.manager.mount(key, children);
        } else {
          _this.queue.push({
            type: 'mount',
            key,
            children
          });
        }
        return key;
      };
      _this.update = (key, children) => {
        if (_this.manager) {
          _this.manager.update(key, children);
        } else {
          var op = {
            type: 'mount',
            key,
            children
          };
          var index = _this.queue.findIndex(o => o.type === 'mount' || o.type === 'update' && o.key === key);
          if (index > -1) {
            _this.queue[index] = op;
          } else {
            _this.queue.push(op);
          }
        }
      };
      _this.unmount = key => {
        if (_this.manager) {
          _this.manager.unmount(key);
        } else {
          _this.queue.push({
            type: 'unmount',
            key
          });
        }
      };
      _this.nextKey = 0;
      _this.queue = [];
      return _this;
    }
    (0, _inherits2.default)(PortalHost, _React$Component);
    return (0, _createClass2.default)(PortalHost, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var manager = this.manager;
        var queue = this.queue;
        while (queue.length && manager) {
          var action = queue.pop();
          if (action) {
            // eslint-disable-next-line default-case
            switch (action.type) {
              case 'mount':
                manager.mount(action.key, action.children);
                break;
              case 'update':
                manager.update(action.key, action.children);
                break;
              case 'unmount':
                manager.unmount(action.key);
                break;
            }
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(PortalContext.Provider, {
          value: {
            mount: this.mount,
            update: this.update,
            unmount: this.unmount
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.container,
            collapsable: false,
            pointerEvents: "box-none",
            children: this.props.children
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_PortalManager.default, {
            ref: this.setManager
          })]
        });
      }
    }]);
  }(React.Component);
  PortalHost.displayName = 'Portal.Host';
  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},562,[1,10,11,50,52,55,125,45,563,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var React = _interopRequireWildcard(require(_dependencyMap[6]));
  var _reactNative = require(_dependencyMap[7]);
  var _jsxRuntime = require(_dependencyMap[8]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  /**
   * Portal host is the component which actually renders all Portals.
   */
  var PortalManager = exports.default = /*#__PURE__*/function (_React$PureComponent) {
    function PortalManager() {
      var _this;
      (0, _classCallCheck2.default)(this, PortalManager);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, PortalManager, [...args]);
      _this.state = {
        portals: []
      };
      _this.mount = (key, children) => {
        _this.setState(state => ({
          portals: [...state.portals, {
            key,
            children
          }]
        }));
      };
      _this.update = (key, children) => _this.setState(state => ({
        portals: state.portals.map(item => {
          if (item.key === key) {
            return {
              ...item,
              children
            };
          }
          return item;
        })
      }));
      _this.unmount = key => _this.setState(state => ({
        portals: state.portals.filter(item => item.key !== key)
      }));
      return _this;
    }
    (0, _inherits2.default)(PortalManager, _React$PureComponent);
    return (0, _createClass2.default)(PortalManager, [{
      key: "render",
      value: function render() {
        return this.state.portals.map(_ref => {
          var key = _ref.key,
            children = _ref.children;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            collapsable: false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */,
            pointerEvents: "box-none",
            style: _reactNative.StyleSheet.absoluteFill,
            children: children
          }, key);
        });
      }
    }]);
  }(React.PureComponent);
},563,[1,10,11,50,52,55,125,45,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addEventListener = addEventListener;
  exports.addListener = addListener;
  function addEventListener(Module) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }
    var eventName = rest[0],
      handler = rest[1];
    var removed = false;
    var subscription = Module.addEventListener(eventName, handler) ?? {
      remove: () => {
        if (removed) {
          return;
        }
        Module.removeEventListener?.(eventName, handler);
        Module.remove?.(eventName, handler);
        removed = true;
      }
    };
    return subscription;
  }
  function addListener(Module) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      rest[_key2 - 1] = arguments[_key2];
    }
    var eventName = rest[0],
      handler = rest[1];
    var removed = false;
    var subscription = Module.addListener(eventName, handler) ?? {
      remove: () => {
        if (removed) {
          return;
        }
        Module.removeEventListener(eventName, handler);
        removed = true;
      }
    };
    return subscription;
  }
},564,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = shadow;
  var _reactNative = require(_dependencyMap[0]);
  var MD2Colors = _interopRequireWildcard(require(_dependencyMap[1]));
  var _tokens = require(_dependencyMap[2]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var SHADOW_COLOR = MD2Colors.black;
  var SHADOW_OPACITY = 0.24;
  var MD3_SHADOW_OPACITY = 0.3;
  var MD3_SHADOW_COLOR = _tokens.MD3Colors.primary0;
  function shadow() {
    var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var isV3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return isV3 ? v3Shadow(elevation) : v2Shadow(elevation);
  }
  function v2Shadow() {
    var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    if (elevation instanceof _reactNative.Animated.Value) {
      var inputRange = [0, 1, 2, 3, 8, 24];
      return {
        shadowColor: SHADOW_COLOR,
        shadowOffset: {
          width: new _reactNative.Animated.Value(0),
          height: elevation.interpolate({
            inputRange,
            outputRange: [0, 0.5, 0.75, 2, 7, 23]
          })
        },
        shadowOpacity: elevation.interpolate({
          inputRange: [0, 1],
          outputRange: [0, SHADOW_OPACITY],
          extrapolate: 'clamp'
        }),
        shadowRadius: elevation.interpolate({
          inputRange,
          outputRange: [0, 0.75, 1.5, 3, 8, 24]
        })
      };
    } else {
      if (elevation === 0) {
        return {};
      }
      var height, radius;
      switch (elevation) {
        case 1:
          height = 0.5;
          radius = 0.75;
          break;
        case 2:
          height = 0.75;
          radius = 1.5;
          break;
        default:
          height = elevation - 1;
          radius = elevation;
      }
      return {
        shadowColor: SHADOW_COLOR,
        shadowOffset: {
          width: 0,
          height
        },
        shadowOpacity: SHADOW_OPACITY,
        shadowRadius: radius
      };
    }
  }
  function v3Shadow() {
    var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var inputRange = [0, 1, 2, 3, 4, 5];
    var shadowHeight = [0, 1, 2, 4, 6, 8];
    var shadowRadius = [0, 3, 6, 8, 10, 12];
    if (elevation instanceof _reactNative.Animated.Value) {
      return {
        shadowColor: MD3_SHADOW_COLOR,
        shadowOffset: {
          width: new _reactNative.Animated.Value(0),
          height: elevation.interpolate({
            inputRange,
            outputRange: shadowHeight
          })
        },
        shadowOpacity: elevation.interpolate({
          inputRange: [0, 1],
          outputRange: [0, MD3_SHADOW_OPACITY],
          extrapolate: 'clamp'
        }),
        shadowRadius: elevation.interpolate({
          inputRange,
          outputRange: shadowRadius
        })
      };
    } else {
      return {
        shadowColor: MD3_SHADOW_COLOR,
        shadowOpacity: elevation ? MD3_SHADOW_OPACITY : 0,
        shadowOffset: {
          width: 0,
          height: shadowHeight[elevation]
        },
        shadowRadius: shadowRadius[elevation]
      };
    }
  }
},565,[45,529,505]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = overlay;
  exports.isAnimatedValue = undefined;
  var _reactNative = require(_dependencyMap[1]);
  var _color = _interopRequireDefault(require(_dependencyMap[2]));
  var _DarkTheme = require(_dependencyMap[3]);
  var isAnimatedValue = it => it instanceof _reactNative.Animated.Value;
  exports.isAnimatedValue = isAnimatedValue;
  function overlay(elevation) {
    var surfaceColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _DarkTheme.MD2DarkTheme.colors?.surface;
    if (isAnimatedValue(elevation)) {
      var inputRange = [0, 1, 2, 3, 8, 24];

      // @ts-expect-error: TS doesn't seem to refine the type correctly
      return elevation.interpolate({
        inputRange,
        outputRange: inputRange.map(elevation => {
          return calculateColor(surfaceColor, elevation);
        })
      });
    }

    // @ts-expect-error: TS doesn't seem to refine the type correctly
    return calculateColor(surfaceColor, elevation);
  }
  function calculateColor(surfaceColor) {
    var elevation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var overlayTransparency;
    if (elevation >= 1 && elevation <= 24) {
      overlayTransparency = elevationOverlayTransparency[elevation];
    } else if (elevation > 24) {
      overlayTransparency = elevationOverlayTransparency[24];
    } else {
      overlayTransparency = elevationOverlayTransparency[1];
    }
    return (0, _color.default)(surfaceColor).mix((0, _color.default)('white'), overlayTransparency * 0.01).hex();
  }
  var elevationOverlayTransparency = {
    1: 5,
    2: 7,
    3: 8,
    4: 9,
    5: 10,
    6: 11,
    7: 11.5,
    8: 12,
    9: 12.5,
    10: 13,
    11: 13.5,
    12: 14,
    13: 14.25,
    14: 14.5,
    15: 14.75,
    16: 15,
    17: 15.12,
    18: 15.24,
    19: 15.36,
    20: 15.48,
    21: 15.6,
    22: 15.72,
    23: 15.84,
    24: 16
  };
},566,[1,45,515,530]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Icon", {
    enumerable: true,
    get: function () {
      return _AvatarIcon.default;
    }
  });
  Object.defineProperty(exports, "Image", {
    enumerable: true,
    get: function () {
      return _AvatarImage.default;
    }
  });
  Object.defineProperty(exports, "Text", {
    enumerable: true,
    get: function () {
      return _AvatarText.default;
    }
  });
  var _AvatarIcon = _interopRequireDefault(require(_dependencyMap[1]));
  var _AvatarImage = _interopRequireDefault(require(_dependencyMap[2]));
  var _AvatarText = _interopRequireDefault(require(_dependencyMap[3]));
},567,[1,568,571,572]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _theming = require(_dependencyMap[4]);
  var _colors = require(_dependencyMap[5]);
  var _getContrastingColor = _interopRequireDefault(require(_dependencyMap[6]));
  var _Icon = _interopRequireDefault(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  var _excluded = ["icon", "size", "style", "theme"],
    _excluded2 = ["backgroundColor"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var defaultSize = 64;
  /**
   * Avatars can be used to represent people in a graphical way.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Avatar } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Avatar.Icon size={24} icon="folder" />
   * );
   * ```
   */
  var Avatar = _ref => {
    var icon = _ref.icon,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? defaultSize : _ref$size,
      style = _ref.style,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === undefined ? theme.colors?.primary : _ref2$backgroundColor,
      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    var textColor = rest.color ?? (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [{
        width: size,
        height: size,
        borderRadius: size / 2,
        backgroundColor
      }, styles.container, restStyle],
      ...rest,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
        source: icon,
        color: textColor,
        size: size * 0.6
      })
    });
  };
  Avatar.displayName = 'Avatar.Icon';
  var styles = _reactNative.StyleSheet.create({
    container: {
      justifyContent: 'center',
      alignItems: 'center'
    }
  });
  var _default = exports.default = Avatar;
},568,[1,203,125,45,506,529,569,570,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getContrastingColor;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  function getContrastingColor(input, light, dark) {
    if (typeof input === 'string') {
      return (0, _color.default)(input).isLight() ? dark : light;
    }
    return light;
  }
},569,[1,515]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isValidIcon = exports.isEqualIcon = exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _MaterialCommunityIcon = require(_dependencyMap[4]);
  var _settings = require(_dependencyMap[5]);
  var _theming = require(_dependencyMap[6]);
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["source", "color", "size", "theme", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var isImageSource = source =>
  // source is an object with uri
  typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string' ||
  // source is a module, e.g. - require('image')
  typeof source === 'number' || // image url on web
  false;
  var getIconId = source => {
    if (typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string') {
      return source.uri;
    }
    return source;
  };
  var isValidIcon = source => typeof source === 'string' || typeof source === 'function' || isImageSource(source);
  exports.isValidIcon = isValidIcon;
  var isEqualIcon = (a, b) => a === b || getIconId(a) === getIconId(b);
  exports.isEqualIcon = isEqualIcon;
  /**
   * An icon component which renders icon from vector library.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Icon, MD3Colors } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Icon
   *     source="camera"
   *     color={MD3Colors.error50}
   *     size={20}
   *   />
   * );
   *
   * export default MyComponent;
   * ```
   */

  var Icon = _ref => {
    var source = _ref.source,
      color = _ref.color,
      size = _ref.size,
      themeOverrides = _ref.theme,
      testID = _ref.testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var direction = typeof source === 'object' && source.direction && source.source ? source.direction === 'auto' ? _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr' : source.direction : null;
    var s = typeof source === 'object' && source.direction && source.source ? source.source : source;
    var iconColor = color || (theme.isV3 ? theme.colors.onSurface : theme.colors.text);
    if (isImageSource(s)) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
        ...rest,
        testID: testID,
        source: s,
        style: [{
          transform: [{
            scaleX: direction === 'rtl' ? -1 : 1
          }]
        }, {
          width: size,
          height: size,
          tintColor: color,
          resizeMode: `contain`
        }],
        ..._MaterialCommunityIcon.accessibilityProps,
        accessibilityIgnoresInvertColors: true
      });
    } else if (typeof s === 'string') {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_settings.Consumer, {
        children: _ref2 => {
          var icon = _ref2.icon;
          return icon?.({
            name: s,
            color: iconColor,
            size,
            direction,
            testID
          });
        }
      });
    } else if (typeof s === 'function') {
      return s({
        color: iconColor,
        size,
        direction,
        testID
      });
    }
    return null;
  };
  var _default = exports.default = Icon;
},570,[1,203,125,45,543,542,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _theming = require(_dependencyMap[4]);
  var _jsxRuntime = require(_dependencyMap[5]);
  var _excluded = ["size", "source", "style", "onError", "onLayout", "onLoad", "onLoadEnd", "onLoadStart", "onProgress", "theme", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var defaultSize = 64;
  /**
   * Avatars can be used to represent people in a graphical way.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Avatar } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Avatar.Image size={24} source={require('../assets/avatar.png')} />
   * );
   * export default MyComponent
   * ```
   */
  var AvatarImage = _ref => {
    var _ref$size = _ref.size,
      size = _ref$size === undefined ? defaultSize : _ref$size,
      source = _ref.source,
      style = _ref.style,
      onError = _ref.onError,
      onLayout = _ref.onLayout,
      onLoad = _ref.onLoad,
      onLoadEnd = _ref.onLoadEnd,
      onLoadStart = _ref.onLoadStart,
      onProgress = _ref.onProgress,
      themeOverrides = _ref.theme,
      testID = _ref.testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var _useInternalTheme = (0, _theming.useInternalTheme)(themeOverrides),
      colors = _useInternalTheme.colors;
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === undefined ? colors?.primary : _ref2$backgroundColor;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [{
        width: size,
        height: size,
        borderRadius: size / 2,
        backgroundColor
      }, style],
      ...rest,
      children: [typeof source === 'function' && source({
        size
      }), typeof source !== 'function' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
        testID: testID,
        source: source,
        style: {
          width: size,
          height: size,
          borderRadius: size / 2
        },
        onError: onError,
        onLayout: onLayout,
        onLoad: onLoad,
        onLoadEnd: onLoadEnd,
        onLoadStart: onLoadStart,
        onProgress: onProgress,
        accessibilityIgnoresInvertColors: true
      })]
    });
  };
  AvatarImage.displayName = 'Avatar.Image';
  var _default = exports.default = AvatarImage;
},571,[1,203,125,45,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _theming = require(_dependencyMap[4]);
  var _colors = require(_dependencyMap[5]);
  var _getContrastingColor = _interopRequireDefault(require(_dependencyMap[6]));
  var _Text = _interopRequireDefault(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  var _excluded = ["label", "size", "style", "labelStyle", "color", "theme", "maxFontSizeMultiplier"],
    _excluded2 = ["backgroundColor"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var defaultSize = 64;
  /**
   * Avatars can be used to represent people in a graphical way.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Avatar } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Avatar.Text size={24} label="XD" />
   * );
   * ```
   */
  var AvatarText = _ref => {
    var label = _ref.label,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? defaultSize : _ref$size,
      style = _ref.style,
      labelStyle = _ref.labelStyle,
      customColor = _ref.color,
      themeOverrides = _ref.theme,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === undefined ? theme.colors?.primary : _ref2$backgroundColor,
      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    var textColor = customColor ?? (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');
    var _useWindowDimensions = (0, _reactNative.useWindowDimensions)(),
      fontScale = _useWindowDimensions.fontScale;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [{
        width: size,
        height: size,
        borderRadius: size / 2,
        backgroundColor
      }, styles.container, restStyle],
      ...rest,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
        style: [styles.text, {
          color: textColor,
          fontSize: size / 2,
          lineHeight: size / fontScale
        }, labelStyle],
        numberOfLines: 1,
        maxFontSizeMultiplier: maxFontSizeMultiplier,
        children: label
      })
    });
  };
  AvatarText.displayName = 'Avatar.Text';
  var styles = _reactNative.StyleSheet.create({
    container: {
      justifyContent: 'center',
      alignItems: 'center'
    },
    text: {
      textAlign: 'center',
      textAlignVertical: 'center'
    }
  });
  var _default = exports.default = AvatarText;
},572,[1,203,125,45,506,529,569,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.customText = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _AnimatedText = _interopRequireDefault(require(_dependencyMap[4]));
  var _StyledText = _interopRequireDefault(require(_dependencyMap[5]));
  var _theming = require(_dependencyMap[6]);
  var _forwardRef = require(_dependencyMap[7]);
  var _jsxRuntime = require(_dependencyMap[8]);
  var _excluded = ["style", "variant", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  // @component-group Typography

  /**
   * Typography component showing styles complied with passed `variant` prop and supported by the type system.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Text } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <>
   *     <Text variant="displayLarge">Display Large</Text>
   *     <Text variant="displayMedium">Display Medium</Text>
   *     <Text variant="displaySmall">Display small</Text>
   *
   *     <Text variant="headlineLarge">Headline Large</Text>
   *     <Text variant="headlineMedium">Headline Medium</Text>
   *     <Text variant="headlineSmall">Headline Small</Text>
   *
   *     <Text variant="titleLarge">Title Large</Text>
   *     <Text variant="titleMedium">Title Medium</Text>
   *     <Text variant="titleSmall">Title Small</Text>
   *
   *     <Text variant="bodyLarge">Body Large</Text>
   *     <Text variant="bodyMedium">Body Medium</Text>
   *     <Text variant="bodySmall">Body Small</Text>
   *
   *     <Text variant="labelLarge">Label Large</Text>
   *     <Text variant="labelMedium">Label Medium</Text>
   *     <Text variant="labelSmall">Label Small</Text>
   *  </>
   * );
   *
   * export default MyComponent;
   * ```
   *
   * @extends Text props https://reactnative.dev/docs/text#props
   */
  var Text = (_ref, ref) => {
    var style = _ref.style,
      variant = _ref.variant,
      initialTheme = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var root = React.useRef(null);
    // FIXME: destructure it in TS 4.6+
    var theme = (0, _theming.useInternalTheme)(initialTheme);
    var writingDirection = _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';
    React.useImperativeHandle(ref, () => ({
      setNativeProps: args => root.current?.setNativeProps(args)
    }));
    if (theme.isV3 && variant) {
      var font = theme.fonts[variant];
      var textStyle = [font, style];
      if (/*#__PURE__*/React.isValidElement(rest.children) && (rest.children.type === Component || rest.children.type === _AnimatedText.default || rest.children.type === _StyledText.default)) {
        var _props = rest.children.props;

        // Context:   Some components have the built-in `Text` component with a predefined variant,
        //            that also accepts `children` as a `React.Node`. This can result in a situation,
        //            where another `Text` component is rendered within the built-in `Text` component.
        //            By doing that, we assume that user doesn't want to consume pre-defined font properties.
        // Case one:  Nested `Text` has different `variant` that specified in parent. For example:
        //              <Chip>
        //                <Text variant="displayMedium">Nested</Text>
        //              </Chip>
        // Solution:  To address the following scenario, the code below overrides the `variant`
        //            specified in a parent in favor of children's variant:
        if (_props.variant) {
          font = theme.fonts[_props.variant];
          textStyle = [style, font];
        }

        // Case two:  Nested `Text` has specified `styles` which intefere
        //            with font properties, from the parent's `variant`. For example:
        //              <Chip>
        //                <Text style={{fontSize: 30}}>Nested</Text>
        //              </Chip>
        // Solution:  To address the following scenario, the code below overrides the
        //            parent's style with children's style:
        if (!_props.variant) {
          textStyle = [style, _props.style];
        }
      }
      if (typeof font !== 'object') {
        throw new Error(`Variant ${variant} was not provided properly. Valid variants are ${Object.keys(theme.fonts).join(', ')}.`);
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
        ref: root,
        style: [styles.text, {
          writingDirection,
          color: theme.colors.onSurface
        }, textStyle],
        ...rest
      });
    } else {
      var _font = theme.isV3 ? theme.fonts.default : theme.fonts?.regular;
      var _textStyle = {
        ..._font,
        color: theme.isV3 ? theme.colors?.onSurface : theme.colors.text
      };
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
        ...rest,
        ref: root,
        style: [styles.text, _textStyle, {
          writingDirection
        }, style]
      });
    }
  };
  var styles = _reactNative.StyleSheet.create({
    text: {
      textAlign: 'left'
    }
  });
  var Component = (0, _forwardRef.forwardRef)(Text);
  var customText = () => Component;
  exports.customText = customText;
  var _default = exports.default = Component;
},573,[1,203,125,45,574,575,506,577,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.customAnimatedText = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _theming = require(_dependencyMap[4]);
  var _jsxRuntime = require(_dependencyMap[5]);
  var _excluded = ["style", "theme", "variant"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Animated text component which follows styles from the theme.
   *
   * @extends Text props https://reactnative.dev/docs/text#props
   */
  function AnimatedText(_ref) {
    var style = _ref.style,
      themeOverrides = _ref.theme,
      variant = _ref.variant,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var writingDirection = _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';
    if (theme.isV3 && variant) {
      var font = theme.fonts[variant];
      if (typeof font !== 'object') {
        throw new Error(`Variant ${variant} was not provided properly. Valid variants are ${Object.keys(theme.fonts).join(', ')}.`);
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.Text, {
        ...rest,
        style: [font, styles.text, {
          writingDirection,
          color: theme.colors.onSurface
        }, style]
      });
    } else {
      var _font = !theme.isV3 ? theme.fonts.regular : theme.fonts.bodyMedium;
      var textStyle = {
        ..._font,
        color: theme.isV3 ? theme.colors.onSurface : theme.colors.text
      };
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.Text, {
        ...rest,
        style: [styles.text, textStyle, {
          writingDirection
        }, style]
      });
    }
  }
  var styles = _reactNative.StyleSheet.create({
    text: {
      textAlign: 'left'
    }
  });
  var customAnimatedText = () => AnimatedText;
  exports.customAnimatedText = customAnimatedText;
  var _default = exports.default = AnimatedText;
},574,[1,203,125,45,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _Text = _interopRequireDefault(require(_dependencyMap[5]));
  var _theming = require(_dependencyMap[6]);
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["alpha", "family", "style", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var StyledText = _ref => {
    var _ref$alpha = _ref.alpha,
      alpha = _ref$alpha === undefined ? 1 : _ref$alpha,
      family = _ref.family,
      style = _ref.style,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var textColor = (0, _color.default)(theme.isV3 ? theme.colors.onSurface : theme.colors?.text).alpha(alpha).rgb().string();
    var writingDirection = _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
      ...rest,
      style: [styles.text, {
        color: textColor,
        ...(!theme.isV3 && theme.fonts?.[family]),
        writingDirection
      }, style]
    });
  };
  var styles = _reactNative.StyleSheet.create({
    text: {
      textAlign: 'left'
    }
  });
  var _default = exports.default = StyledText;
},575,[1,203,125,45,515,576,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _theming = require(_dependencyMap[4]);
  var _forwardRef = require(_dependencyMap[5]);
  var _jsxRuntime = require(_dependencyMap[6]);
  var _excluded = ["style", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  // @component-group Typography

  /**
   * Text component which follows styles from the theme.
   *
   * @extends Text props https://reactnative.dev/docs/text#props
   */
  var Text = (_ref, ref) => {
    var style = _ref.style,
      overrideTheme = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var root = React.useRef(null);
    var theme = (0, _theming.useInternalTheme)(overrideTheme);
    React.useImperativeHandle(ref, () => ({
      setNativeProps: args => root.current?.setNativeProps(args)
    }));
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
      ...rest,
      ref: root,
      style: [{
        ...(!theme.isV3 && theme.fonts?.regular),
        color: theme.isV3 ? theme.colors?.onSurface : theme.colors.text
      }, styles.text, style]
    });
  };
  var styles = _reactNative.StyleSheet.create({
    text: {
      textAlign: 'left'
    }
  });
  var _default = exports.default = (0, _forwardRef.forwardRef)(Text);
},576,[1,203,125,45,506,577,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.forwardRef = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * TypeScript generated a large union of props from `ViewProps` in
   * `d.ts` files when using `React.forwardRef`. To prevent this
   * `ForwardRefComponent` was created and exported. Use this
   * `forwardRef` instead of `React.forwardRef` so you don't have to
   * import `ForwardRefComponent`.
   * More info: https://github.com/callstack/react-native-paper/pull/3603
   */
  var forwardRef = exports.forwardRef = React.forwardRef;
},577,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "CollapsedItem", {
    enumerable: true,
    get: function () {
      return _DrawerCollapsedItem.default;
    }
  });
  Object.defineProperty(exports, "Item", {
    enumerable: true,
    get: function () {
      return _DrawerItem.default;
    }
  });
  Object.defineProperty(exports, "Section", {
    enumerable: true,
    get: function () {
      return _DrawerSection.default;
    }
  });
  var _DrawerItem = _interopRequireDefault(require(_dependencyMap[1]));
  var _DrawerCollapsedItem = _interopRequireDefault(require(_dependencyMap[2]));
  var _DrawerSection = _interopRequireDefault(require(_dependencyMap[3]));
},578,[1,579,584,586]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _theming = require(_dependencyMap[5]);
  var _Icon = _interopRequireDefault(require(_dependencyMap[6]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[7]));
  var _Text = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["icon", "label", "active", "disabled", "theme", "rippleColor", "style", "onPress", "background", "accessibilityLabel", "right", "labelMaxFontSizeMultiplier"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component used to show an action item with an icon and a label in a navigation drawer.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Drawer } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *    <Drawer.Item
   *      style={{ backgroundColor: '#64ffda' }}
   *      icon="star"
   *      label="First Item"
   *    />
   * );
   *
   * export default MyComponent;
   * ```
   */
  var DrawerItem = _ref => {
    var icon = _ref.icon,
      label = _ref.label,
      active = _ref.active,
      disabled = _ref.disabled,
      themeOverrides = _ref.theme,
      customRippleColor = _ref.rippleColor,
      style = _ref.style,
      onPress = _ref.onPress,
      background = _ref.background,
      accessibilityLabel = _ref.accessibilityLabel,
      right = _ref.right,
      labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var roundness = theme.roundness,
      isV3 = theme.isV3;
    var backgroundColor = active ? isV3 ? theme.colors.secondaryContainer : (0, _color.default)(theme.colors.primary).alpha(0.12).rgb().string() : undefined;
    var contentColor = active ? isV3 ? theme.colors.onSecondaryContainer : theme.colors.primary : isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.68).rgb().string();
    var labelMargin = icon ? isV3 ? 12 : 32 : 0;
    var borderRadius = (isV3 ? 7 : 1) * roundness;
    var rippleColor = isV3 ? (0, _color.default)(contentColor).alpha(0.12).rgb().string() : undefined;
    var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ...rest,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
        borderless: true,
        disabled: disabled,
        background: background,
        onPress: onPress,
        style: [styles.container, {
          backgroundColor,
          borderRadius
        }, isV3 && styles.v3Container, style],
        accessibilityRole: "button",
        accessibilityState: {
          selected: active
        },
        accessibilityLabel: accessibilityLabel,
        rippleColor: customRippleColor || rippleColor,
        theme: theme,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.wrapper, isV3 && styles.v3Wrapper],
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.content,
            children: [icon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
              source: icon,
              size: 24,
              color: contentColor
            }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
              variant: "labelLarge",
              selectable: false,
              numberOfLines: 1,
              style: [styles.label, {
                color: contentColor,
                marginLeft: labelMargin,
                ...font
              }],
              maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
              children: label
            })]
          }), right?.({
            color: contentColor
          })]
        })
      })
    });
  };
  DrawerItem.displayName = 'Drawer.Item';
  var styles = _reactNative.StyleSheet.create({
    container: {
      marginHorizontal: 10,
      marginVertical: 4
    },
    v3Container: {
      justifyContent: 'center',
      height: 56,
      marginLeft: 12,
      marginRight: 12,
      marginVertical: 0
    },
    wrapper: {
      flexDirection: 'row',
      alignItems: 'center',
      padding: 8
    },
    v3Wrapper: {
      marginLeft: 16,
      marginRight: 24,
      padding: 0
    },
    content: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center'
    },
    label: {
      marginRight: 32
    }
  });
  var _default = exports.default = DrawerItem;
},579,[1,203,125,45,515,506,570,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _Pressable = require(_dependencyMap[4]);
  var _utils = require(_dependencyMap[5]);
  var _settings = require(_dependencyMap[6]);
  var _theming = require(_dependencyMap[7]);
  var _forwardRef = require(_dependencyMap[8]);
  var _hasTouchHandler = _interopRequireDefault(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  var _excluded = ["style", "background", "borderless", "disabled", "rippleColor", "underlayColor", "children", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var ANDROID_VERSION_LOLLIPOP = 21;
  var ANDROID_VERSION_PIE = 28;
  var TouchableRipple = (_ref, ref) => {
    var style = _ref.style,
      background = _ref.background,
      _ref$borderless = _ref.borderless,
      borderless = _ref$borderless === undefined ? false : _ref$borderless,
      disabledProp = _ref.disabled,
      rippleColor = _ref.rippleColor,
      underlayColor = _ref.underlayColor,
      children = _ref.children,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useContext = React.useContext(_settings.SettingsContext),
      rippleEffectEnabled = _React$useContext.rippleEffectEnabled;
    var onPress = rest.onPress,
      onLongPress = rest.onLongPress,
      onPressIn = rest.onPressIn,
      onPressOut = rest.onPressOut;
    var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
      onPress,
      onLongPress,
      onPressIn,
      onPressOut
    });
    var disabled = disabledProp || !hasPassedTouchHandler;
    var _getTouchableRippleCo = (0, _utils.getTouchableRippleColors)({
        theme,
        rippleColor,
        underlayColor
      }),
      calculatedRippleColor = _getTouchableRippleCo.calculatedRippleColor,
      calculatedUnderlayColor = _getTouchableRippleCo.calculatedUnderlayColor;

    // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'
    // https://github.com/facebook/react-native/issues/6480
    var useForeground = false;
    if (TouchableRipple.supported) {
      var androidRipple = rippleEffectEnabled ? background ?? {
        color: calculatedRippleColor,
        borderless,
        foreground: useForeground
      } : undefined;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Pressable.Pressable, {
        ...rest,
        ref: ref,
        disabled: disabled,
        style: [borderless && styles.overflowHidden, style],
        android_ripple: androidRipple,
        children: React.Children.only(children)
      });
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Pressable.Pressable, {
      ...rest,
      ref: ref,
      disabled: disabled,
      style: [borderless && styles.overflowHidden, style],
      children: _ref2 => {
        var pressed = _ref2.pressed;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [pressed && rippleEffectEnabled && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            testID: "touchable-ripple-underlay",
            style: [styles.underlay, {
              backgroundColor: calculatedUnderlayColor
            }]
          }), React.Children.only(children)]
        });
      }
    });
  };
  TouchableRipple.supported = false;
  var styles = _reactNative.StyleSheet.create({
    overflowHidden: {
      overflow: 'hidden'
    },
    underlay: {
      ..._reactNative.StyleSheet.absoluteFillObject,
      zIndex: 2
    }
  });
  var Component = (0, _forwardRef.forwardRef)(TouchableRipple);
  var _default = exports.default = Component;
},580,[1,203,125,45,581,582,542,506,577,583,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Pressable = undefined;
  var _reactNative = require(_dependencyMap[0]);
  // This component is added to support type-safe hover and focus states on web
  // https://necolas.github.io/react-native-web/docs/pressable/

  var Pressable = exports.Pressable = _reactNative.Pressable;
},581,[45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getTouchableRippleColors = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var getUnderlayColor = _ref => {
    var theme = _ref.theme,
      calculatedRippleColor = _ref.calculatedRippleColor,
      underlayColor = _ref.underlayColor;
    if (underlayColor != null) {
      return underlayColor;
    }
    if (theme.isV3) {
      return (0, _color.default)(calculatedRippleColor).rgb().string();
    }
    return (0, _color.default)(calculatedRippleColor).fade(0.5).rgb().string();
  };
  var getRippleColor = _ref2 => {
    var theme = _ref2.theme,
      rippleColor = _ref2.rippleColor;
    if (rippleColor) {
      return rippleColor;
    }
    if (theme.isV3) {
      return (0, _color.default)(theme.colors.onSurface).alpha(0.12).rgb().string();
    }
    if (theme.dark) {
      return (0, _color.default)(theme.colors.text).alpha(0.32).rgb().string();
    }
    return (0, _color.default)(theme.colors.text).alpha(0.2).rgb().string();
  };
  var getTouchableRippleColors = _ref3 => {
    var theme = _ref3.theme,
      rippleColor = _ref3.rippleColor,
      underlayColor = _ref3.underlayColor;
    var calculatedRippleColor = getRippleColor({
      theme,
      rippleColor
    });
    return {
      calculatedRippleColor,
      calculatedUnderlayColor: getUnderlayColor({
        theme,
        calculatedRippleColor,
        underlayColor
      })
    };
  };
  exports.getTouchableRippleColors = getTouchableRippleColors;
},582,[1,515]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = hasTouchHandler;
  var touchableEvents = ['onPress', 'onLongPress', 'onPressIn', 'onPressOut'];
  function hasTouchHandler(touchableEventObject) {
    return touchableEvents.some(event => {
      return Boolean(touchableEventObject[event]);
    });
  }
},583,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _Badge = _interopRequireDefault(require(_dependencyMap[6]));
  var _Icon = _interopRequireDefault(require(_dependencyMap[7]));
  var _Text = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["focusedIcon", "unfocusedIcon", "label", "active", "theme", "style", "onPress", "disabled", "accessibilityLabel", "badge", "testID", "labelMaxFontSizeMultiplier"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var badgeSize = 8;
  var iconSize = 24;
  var itemSize = 56;
  var outlineHeight = 32;

  /**
   * Note: Available in v5.x with theme version 3
   *
   * Collapsed component used to show an action item with an icon and optionally label in a navigation drawer.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Drawer } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *    <Drawer.CollapsedItem
   *      focusedIcon="inbox"
   *      unfocusedIcon="inbox-outline"
   *      label="Inbox"
   *    />
   * );
   *
   * export default MyComponent;
   * ```
   */
  var DrawerCollapsedItem = _ref => {
    var focusedIcon = _ref.focusedIcon,
      unfocusedIcon = _ref.unfocusedIcon,
      label = _ref.label,
      active = _ref.active,
      themeOverrides = _ref.theme,
      style = _ref.style,
      onPress = _ref.onPress,
      disabled = _ref.disabled,
      accessibilityLabel = _ref.accessibilityLabel,
      _ref$badge = _ref.badge,
      badge = _ref$badge === undefined ? false : _ref$badge,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'drawer-collapsed-item' : _ref$testID,
      labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3;
    var scale = theme.animation.scale;
    var _React$useState = React.useState(1),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      numOfLines = _React$useState2[0],
      setNumOfLines = _React$useState2[1];
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(active ? 1 : 0.5)),
      animScale = _React$useRef.current;
    React.useEffect(() => {
      if (!active) {
        animScale.setValue(0.5);
      }
    }, [animScale, active]);
    if (!isV3) {
      return null;
    }
    var handlePressOut = () => {
      _reactNative.Animated.timing(animScale, {
        toValue: 1,
        duration: 150 * scale,
        useNativeDriver: true
      }).start();
    };
    var iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;
    var backgroundColor = active ? theme.colors.secondaryContainer : 'transparent';
    var labelColor = active ? theme.colors.onSurface : theme.colors.onSurfaceVariant;
    var iconColor = active ? theme.colors.onSecondaryContainer : theme.colors.onSurfaceVariant;
    var onTextLayout = _ref2 => {
      var nativeEvent = _ref2.nativeEvent;
      setNumOfLines(nativeEvent.lines.length);
    };

    // Label is cut off on Android, when centered "labelMedium" text
    // has more than 4 lines, so there is a need to decrease the letter spacing.
    var androidLetterSpacingStyle = false;
    var labelTextStyle = {
      color: labelColor,
      ...(isV3 ? theme.fonts.labelMedium : {})
    };
    var icon = !active && unfocusedIcon !== undefined ? unfocusedIcon : focusedIcon;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ...rest,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Pressable, {
        onPress: onPress,
        onPressOut: onPress ? handlePressOut : undefined,
        disabled: disabled
        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
        ,
        accessibilityTraits: active ? ['button', 'selected'] : 'button',
        accessibilityComponentType: "button",
        accessibilityRole: "button",
        accessibilityState: {
          selected: active
        },
        accessibilityLabel: accessibilityLabel,
        testID: testID,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.wrapper,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            style: [styles.outline, !label && styles.roundedOutline, {
              transform: [label ? {
                scaleX: animScale
              } : {
                scale: animScale
              }],
              backgroundColor
            }, style],
            testID: `${testID}-outline`
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: [styles.icon, {
              top: iconPadding
            }],
            testID: `${testID}-container`,
            children: [badge && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.badgeContainer,
              children: typeof badge === 'boolean' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Badge.default, {
                visible: badge,
                size: badgeSize
              }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Badge.default, {
                visible: badge != null,
                size: 16,
                children: badge
              })
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
              source: icon,
              size: iconSize,
              color: iconColor
            })]
          }), label ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
            variant: "labelMedium",
            selectable: false,
            numberOfLines: 2,
            onTextLayout: onTextLayout,
            style: [styles.label, androidLetterSpacingStyle, labelTextStyle],
            maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
            children: label
          }) : null]
        })
      })
    });
  };
  DrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';
  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      width: 80,
      marginBottom: 12,
      minHeight: itemSize,
      alignItems: 'center'
    },
    outline: {
      width: itemSize,
      height: outlineHeight,
      borderRadius: 28,
      alignItems: 'center',
      justifyContent: 'center'
    },
    roundedOutline: {
      height: itemSize
    },
    icon: {
      position: 'absolute'
    },
    letterSpacing: {
      letterSpacing: 0.3,
      alignSelf: 'stretch'
    },
    label: {
      marginHorizontal: 12,
      marginTop: 4,
      textAlign: 'center'
    },
    badgeContainer: {
      position: 'absolute',
      left: 20,
      bottom: 20,
      zIndex: 2
    }
  });
  var _default = exports.default = DrawerCollapsedItem;
},584,[1,29,203,125,45,506,585,570,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _theming = require(_dependencyMap[4]);
  var _colors = require(_dependencyMap[5]);
  var _getContrastingColor = _interopRequireDefault(require(_dependencyMap[6]));
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["children", "size", "style", "theme", "visible"],
    _excluded2 = ["backgroundColor"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var defaultSize = 20;
  /**
   * Badges are small status descriptors for UI elements.
   * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Badge } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Badge>3</Badge>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Badge = _ref => {
    var children = _ref.children,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? defaultSize : _ref$size,
      style = _ref.style,
      themeOverrides = _ref.theme,
      _ref$visible = _ref.visible,
      visible = _ref$visible === undefined ? true : _ref$visible,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
      opacity = _React$useRef.current;
    var _useWindowDimensions = (0, _reactNative.useWindowDimensions)(),
      fontScale = _useWindowDimensions.fontScale;
    var isFirstRendering = React.useRef(true);
    var scale = theme.animation.scale;
    React.useEffect(() => {
      // Do not run animation on very first rendering
      if (isFirstRendering.current) {
        isFirstRendering.current = false;
        return;
      }
      _reactNative.Animated.timing(opacity, {
        toValue: visible ? 1 : 0,
        duration: 150 * scale,
        useNativeDriver: true
      }).start();
    }, [visible, opacity, scale]);
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === undefined ? theme.isV3 ? theme.colors.error : theme.colors?.notification : _ref2$backgroundColor,
      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    var textColor = theme.isV3 ? theme.colors.onError : (0, _getContrastingColor.default)(backgroundColor, _colors.white, _colors.black);
    var borderRadius = size / 2;
    var paddingHorizontal = theme.isV3 ? 3 : 4;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.Text, {
      numberOfLines: 1,
      style: [{
        opacity,
        backgroundColor,
        color: textColor,
        fontSize: size * 0.5,
        ...(!theme.isV3 && theme.fonts.regular),
        lineHeight: size / fontScale,
        height: size,
        minWidth: size,
        borderRadius,
        paddingHorizontal
      }, styles.container, restStyle],
      ...rest,
      children: children
    });
  };
  var _default = exports.default = Badge;
  var styles = _reactNative.StyleSheet.create({
    container: {
      alignSelf: 'flex-end',
      textAlign: 'center',
      textAlignVertical: 'center',
      overflow: 'hidden'
    }
  });
},585,[1,203,125,45,506,529,569,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _theming = require(_dependencyMap[5]);
  var _tokens = require(_dependencyMap[6]);
  var _Divider = _interopRequireDefault(require(_dependencyMap[7]));
  var _Text = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["children", "title", "theme", "style", "showDivider", "titleMaxFontSizeMultiplier"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to group content inside a navigation drawer.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Drawer } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [active, setActive] = React.useState('');
   *
   *   return (
   *     <Drawer.Section title="Some title">
   *       <Drawer.Item
   *         label="First Item"
   *         active={active === 'first'}
   *         onPress={() => setActive('first')}
   *       />
   *       <Drawer.Item
   *         label="Second Item"
   *         active={active === 'second'}
   *         onPress={() => setActive('second')}
   *       />
   *     </Drawer.Section>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var DrawerSection = _ref => {
    var children = _ref.children,
      title = _ref.title,
      themeOverrides = _ref.theme,
      style = _ref.style,
      _ref$showDivider = _ref.showDivider,
      showDivider = _ref$showDivider === undefined ? true : _ref$showDivider,
      titleMaxFontSizeMultiplier = _ref.titleMaxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3;
    var titleColor = isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    var titleMargin = isV3 ? 28 : 16;
    var font = isV3 ? theme.fonts.titleSmall : theme.fonts.medium;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.container, style],
      ...rest,
      children: [title && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.titleContainer, isV3 && styles.v3TitleContainer],
        children: title && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
          variant: "titleSmall",
          numberOfLines: 1,
          style: [{
            color: titleColor,
            marginLeft: titleMargin,
            ...font
          }],
          maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
          children: title
        })
      }), children, showDivider && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Divider.default, {
        ...(isV3 && {
          horizontalInset: true,
          bold: true
        }),
        style: [styles.divider, isV3 && styles.v3Divider],
        theme: theme
      })]
    });
  };
  DrawerSection.displayName = 'Drawer.Section';
  var styles = _reactNative.StyleSheet.create({
    container: {
      marginBottom: 4
    },
    titleContainer: {
      height: 40,
      justifyContent: 'center'
    },
    v3TitleContainer: {
      height: 56
    },
    divider: {
      marginTop: 4
    },
    v3Divider: {
      backgroundColor: _tokens.MD3Colors.neutralVariant50
    }
  });
  var _default = exports.default = DrawerSection;
},586,[1,203,125,45,515,506,505,587,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _theming = require(_dependencyMap[5]);
  var _colors = require(_dependencyMap[6]);
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["leftInset", "horizontalInset", "style", "theme", "bold"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A divider is a thin, lightweight separator that groups content in lists and page layouts.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { View } from 'react-native';
   * import { Divider, Text } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <View>
   *     <Text>Lemon</Text>
   *     <Divider />
   *     <Text>Mango</Text>
   *     <Divider />
   *   </View>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Divider = _ref => {
    var leftInset = _ref.leftInset,
      _ref$horizontalInset = _ref.horizontalInset,
      horizontalInset = _ref$horizontalInset === undefined ? false : _ref$horizontalInset,
      style = _ref.style,
      themeOverrides = _ref.theme,
      _ref$bold = _ref.bold,
      bold = _ref$bold === undefined ? false : _ref$bold,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isDarkTheme = theme.dark,
      isV3 = theme.isV3;
    var dividerColor = isV3 ? theme.colors.outlineVariant : (0, _color.default)(isDarkTheme ? _colors.white : _colors.black).alpha(0.12).rgb().string();
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ...rest,
      style: [{
        height: _reactNative.StyleSheet.hairlineWidth,
        backgroundColor: dividerColor
      }, leftInset && (isV3 ? styles.v3LeftInset : styles.leftInset), isV3 && horizontalInset && styles.horizontalInset, isV3 && bold && styles.bold, style]
    });
  };
  var styles = _reactNative.StyleSheet.create({
    leftInset: {
      marginLeft: 72
    },
    v3LeftInset: {
      marginLeft: 16
    },
    horizontalInset: {
      marginLeft: 16,
      marginRight: 16
    },
    bold: {
      height: 1
    }
  });
  var _default = exports.default = Divider;
},587,[1,203,125,45,515,506,529,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Accordion", {
    enumerable: true,
    get: function () {
      return _ListAccordion.default;
    }
  });
  Object.defineProperty(exports, "AccordionGroup", {
    enumerable: true,
    get: function () {
      return _ListAccordionGroup.default;
    }
  });
  Object.defineProperty(exports, "Icon", {
    enumerable: true,
    get: function () {
      return _ListIcon.default;
    }
  });
  Object.defineProperty(exports, "Image", {
    enumerable: true,
    get: function () {
      return _ListImage.default;
    }
  });
  Object.defineProperty(exports, "Item", {
    enumerable: true,
    get: function () {
      return _ListItem.default;
    }
  });
  Object.defineProperty(exports, "Section", {
    enumerable: true,
    get: function () {
      return _ListSection.default;
    }
  });
  Object.defineProperty(exports, "Subheader", {
    enumerable: true,
    get: function () {
      return _ListSubheader.default;
    }
  });
  var _ListAccordion = _interopRequireDefault(require(_dependencyMap[1]));
  var _ListAccordionGroup = _interopRequireDefault(require(_dependencyMap[2]));
  var _ListIcon = _interopRequireDefault(require(_dependencyMap[3]));
  var _ListItem = _interopRequireDefault(require(_dependencyMap[4]));
  var _ListSection = _interopRequireDefault(require(_dependencyMap[5]));
  var _ListSubheader = _interopRequireDefault(require(_dependencyMap[6]));
  var _ListImage = _interopRequireDefault(require(_dependencyMap[7]));
},588,[1,589,590,592,593,594,595,596]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _ListAccordionGroup = require(_dependencyMap[4]);
  var _utils = require(_dependencyMap[5]);
  var _theming = require(_dependencyMap[6]);
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[7]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[8]));
  var _Text = _interopRequireDefault(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component used to display an expandable list item.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { List } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [expanded, setExpanded] = React.useState(true);
   *
   *   const handlePress = () => setExpanded(!expanded);
   *
   *   return (
   *     <List.Section title="Accordions">
   *       <List.Accordion
   *         title="Uncontrolled Accordion"
   *         left={props => <List.Icon {...props} icon="folder" />}>
   *         <List.Item title="First item" />
   *         <List.Item title="Second item" />
   *       </List.Accordion>
   *
   *       <List.Accordion
   *         title="Controlled Accordion"
   *         left={props => <List.Icon {...props} icon="folder" />}
   *         expanded={expanded}
   *         onPress={handlePress}>
   *         <List.Item title="First item" />
   *         <List.Item title="Second item" />
   *       </List.Accordion>
   *     </List.Section>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var ListAccordion = _ref => {
    var left = _ref.left,
      right = _ref.right,
      title = _ref.title,
      description = _ref.description,
      children = _ref.children,
      themeOverrides = _ref.theme,
      titleStyle = _ref.titleStyle,
      descriptionStyle = _ref.descriptionStyle,
      _ref$titleNumberOfLin = _ref.titleNumberOfLines,
      titleNumberOfLines = _ref$titleNumberOfLin === undefined ? 1 : _ref$titleNumberOfLin,
      _ref$descriptionNumbe = _ref.descriptionNumberOfLines,
      descriptionNumberOfLines = _ref$descriptionNumbe === undefined ? 2 : _ref$descriptionNumbe,
      customRippleColor = _ref.rippleColor,
      style = _ref.style,
      id = _ref.id,
      testID = _ref.testID,
      background = _ref.background,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      delayLongPress = _ref.delayLongPress,
      expandedProp = _ref.expanded,
      accessibilityLabel = _ref.accessibilityLabel,
      _ref$pointerEvents = _ref.pointerEvents,
      pointerEvents = _ref$pointerEvents === undefined ? 'none' : _ref$pointerEvents,
      titleMaxFontSizeMultiplier = _ref.titleMaxFontSizeMultiplier,
      descriptionMaxFontSizeMultiplier = _ref.descriptionMaxFontSizeMultiplier;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useState = React.useState(expandedProp || false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      expanded = _React$useState2[0],
      setExpanded = _React$useState2[1];
    var _React$useState3 = React.useState(false),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      alignToTop = _React$useState4[0],
      setAlignToTop = _React$useState4[1];
    var onDescriptionTextLayout = event => {
      if (!theme.isV3) {
        return;
      }
      var nativeEvent = event.nativeEvent;
      setAlignToTop(nativeEvent.lines.length >= 2);
    };
    var handlePressAction = e => {
      onPress?.(e);
      if (expandedProp === undefined) {
        // Only update state of the `expanded` prop was not passed
        // If it was passed, the component will act as a controlled component
        setExpanded(expanded => !expanded);
      }
    };
    var expandedInternal = expandedProp !== undefined ? expandedProp : expanded;
    var groupContext = React.useContext(_ListAccordionGroup.ListAccordionGroupContext);
    if (groupContext !== null && (id === undefined || id === null || id === '')) {
      throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');
    }
    var isExpanded = groupContext ? groupContext.expandedId === id : expandedInternal;
    var _getAccordionColors = (0, _utils.getAccordionColors)({
        theme,
        isExpanded,
        customRippleColor
      }),
      titleColor = _getAccordionColors.titleColor,
      descriptionColor = _getAccordionColors.descriptionColor,
      titleTextColor = _getAccordionColors.titleTextColor,
      rippleColor = _getAccordionColors.rippleColor;
    var handlePress = groupContext && id !== undefined ? () => groupContext.onAccordionPress(id) : handlePressAction;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          backgroundColor: theme?.colors?.background
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
          style: [theme.isV3 ? styles.containerV3 : styles.container, style],
          onPress: handlePress,
          onLongPress: onLongPress,
          delayLongPress: delayLongPress,
          rippleColor: rippleColor,
          accessibilityRole: "button",
          accessibilityState: {
            expanded: isExpanded
          },
          accessibilityLabel: accessibilityLabel,
          testID: testID,
          theme: theme,
          background: background,
          borderless: true,
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: theme.isV3 ? styles.rowV3 : styles.row,
            pointerEvents: pointerEvents,
            children: [left ? left({
              color: isExpanded ? theme.colors?.primary : descriptionColor,
              style: (0, _utils.getLeftStyles)(alignToTop, description, theme.isV3)
            }) : null, /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: [theme.isV3 ? styles.itemV3 : styles.item, styles.content],
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
                selectable: false,
                numberOfLines: titleNumberOfLines,
                style: [styles.title, {
                  color: titleTextColor
                }, titleStyle],
                maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
                children: title
              }), description ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
                selectable: false,
                numberOfLines: descriptionNumberOfLines,
                style: [styles.description, {
                  color: descriptionColor
                }, descriptionStyle],
                onTextLayout: onDescriptionTextLayout,
                maxFontSizeMultiplier: descriptionMaxFontSizeMultiplier,
                children: description
              }) : null]
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.item, description ? styles.multiline : undefined],
              children: right ? right({
                isExpanded: isExpanded
              }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
                name: isExpanded ? 'chevron-up' : 'chevron-down',
                color: theme.isV3 ? descriptionColor : titleColor,
                size: 24,
                direction: _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
              })
            })]
          })
        })
      }), isExpanded ? React.Children.map(children, child => {
        if (left && /*#__PURE__*/React.isValidElement(child) && !child.props.left && !child.props.right) {
          return /*#__PURE__*/React.cloneElement(child, {
            style: [theme.isV3 ? styles.childV3 : styles.child, child.props.style],
            theme
          });
        }
        return child;
      }) : null]
    });
  };
  ListAccordion.displayName = 'List.Accordion';
  var styles = _reactNative.StyleSheet.create({
    container: {
      padding: 8
    },
    containerV3: {
      paddingVertical: 8,
      paddingRight: 24
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    rowV3: {
      flexDirection: 'row',
      marginVertical: 6
    },
    multiline: {
      height: 40,
      alignItems: 'center',
      justifyContent: 'center'
    },
    title: {
      fontSize: 16
    },
    description: {
      fontSize: 14
    },
    item: {
      marginVertical: 6,
      paddingLeft: 8
    },
    itemV3: {
      paddingLeft: 16
    },
    child: {
      paddingLeft: 64
    },
    childV3: {
      paddingLeft: 40
    },
    content: {
      flex: 1,
      justifyContent: 'center'
    }
  });
  var _default = exports.default = ListAccordion;
},589,[1,29,125,45,590,591,506,543,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.ListAccordionGroupContext = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _jsxRuntime = require(_dependencyMap[3]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var ListAccordionGroupContext = exports.ListAccordionGroupContext = /*#__PURE__*/React.createContext(null);

  /**
   * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.
   * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.
   * At most one Accordion can be expanded at a given time.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { View, Text } from 'react-native';
   * import { List } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <List.AccordionGroup>
   *     <List.Accordion title="Accordion 1" id="1">
   *       <List.Item title="Item 1" />
   *     </List.Accordion>
   *     <List.Accordion title="Accordion 2" id="2">
   *       <List.Item title="Item 2" />
   *     </List.Accordion>
   *     <View>
   *       <Text>
   *         List.Accordion can be wrapped because implementation uses React.Context.
   *       </Text>
   *       <List.Accordion title="Accordion 3" id="3">
   *         <List.Item title="Item 3" />
   *       </List.Accordion>
   *     </View>
   *   </List.AccordionGroup>
   * );
   *
   * export default MyComponent;
   *```
   */
  var ListAccordionGroup = _ref => {
    var expandedIdProp = _ref.expandedId,
      onAccordionPress = _ref.onAccordionPress,
      children = _ref.children;
    var _React$useState = React.useState(undefined),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      expandedId = _React$useState2[0],
      setExpandedId = _React$useState2[1];
    var onAccordionPressDefault = newExpandedId => {
      setExpandedId(currentExpandedId => currentExpandedId === newExpandedId ? undefined : newExpandedId);
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(ListAccordionGroupContext.Provider, {
      value: {
        expandedId: expandedIdProp || expandedId,
        // component can be controlled or uncontrolled
        onAccordionPress: onAccordionPress || onAccordionPressDefault
      },
      children: children
    });
  };
  ListAccordionGroup.displayName = 'List.AccordionGroup';
  var _default = exports.default = ListAccordionGroup;
},590,[1,29,125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getRightStyles = exports.getLeftStyles = exports.getAccordionColors = undefined;
  var _reactNative = require(_dependencyMap[1]);
  var _color = _interopRequireDefault(require(_dependencyMap[2]));
  var getLeftStyles = (alignToTop, description, isV3) => {
    var stylesV3 = {
      marginRight: 0,
      marginLeft: 16,
      alignSelf: alignToTop ? 'flex-start' : 'center'
    };
    if (!description) {
      return {
        ...styles.iconMarginLeft,
        ...styles.marginVerticalNone,
        ...(isV3 && {
          ...stylesV3
        })
      };
    }
    if (!isV3) {
      return styles.iconMarginLeft;
    }
    return {
      ...styles.iconMarginLeft,
      ...stylesV3
    };
  };
  exports.getLeftStyles = getLeftStyles;
  var getRightStyles = (alignToTop, description, isV3) => {
    var stylesV3 = {
      marginLeft: 16,
      alignSelf: alignToTop ? 'flex-start' : 'center'
    };
    if (!description) {
      return {
        ...styles.iconMarginRight,
        ...styles.marginVerticalNone,
        ...(isV3 && {
          ...stylesV3
        })
      };
    }
    if (!isV3) {
      return styles.iconMarginRight;
    }
    return {
      ...styles.iconMarginRight,
      ...stylesV3
    };
  };
  exports.getRightStyles = getRightStyles;
  var styles = _reactNative.StyleSheet.create({
    marginVerticalNone: {
      marginVertical: 0
    },
    iconMarginLeft: {
      marginLeft: 0,
      marginRight: 16
    },
    iconMarginRight: {
      marginRight: 0
    }
  });
  var getAccordionColors = _ref => {
    var theme = _ref.theme,
      isExpanded = _ref.isExpanded,
      customRippleColor = _ref.customRippleColor;
    var titleColor = theme.isV3 ? theme.colors.onSurface : (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
    var descriptionColor = theme.isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    var titleTextColor = isExpanded ? theme.colors?.primary : titleColor;
    var rippleColor = customRippleColor || (0, _color.default)(titleTextColor).alpha(0.12).rgb().string();
    return {
      titleColor,
      descriptionColor,
      titleTextColor,
      rippleColor
    };
  };
  exports.getAccordionColors = getAccordionColors;
},591,[1,45,515]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _theming = require(_dependencyMap[3]);
  var _Icon = _interopRequireDefault(require(_dependencyMap[4]));
  var _jsxRuntime = require(_dependencyMap[5]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var ICON_SIZE = 24;

  /**
   * A component to show an icon in a list item.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { List, MD3Colors } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <>
   *     <List.Icon color={MD3Colors.tertiary70} icon="folder" />
   *     <List.Icon color={MD3Colors.tertiary70} icon="equal" />
   *     <List.Icon color={MD3Colors.tertiary70} icon="calendar" />
   *   </>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var ListIcon = _ref => {
    var icon = _ref.icon,
      iconColor = _ref.color,
      style = _ref.style,
      themeOverrides = _ref.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [theme.isV3 ? styles.itemV3 : styles.item, style],
      pointerEvents: "box-none",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
        source: icon,
        size: ICON_SIZE,
        color: iconColor,
        theme: theme
      })
    });
  };
  var styles = _reactNative.StyleSheet.create({
    item: {
      margin: 8,
      height: 40,
      width: 40,
      alignItems: 'center',
      justifyContent: 'center'
    },
    itemV3: {
      alignItems: 'center',
      justifyContent: 'center'
    }
  });
  ListIcon.displayName = 'List.Icon';
  var _default = exports.default = ListIcon;
},592,[1,125,45,506,570,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _color = _interopRequireDefault(require(_dependencyMap[5]));
  var _utils = require(_dependencyMap[6]);
  var _theming = require(_dependencyMap[7]);
  var _forwardRef = require(_dependencyMap[8]);
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[9]));
  var _Text = _interopRequireDefault(require(_dependencyMap[10]));
  var _jsxRuntime = require(_dependencyMap[11]);
  var _excluded = ["left", "right", "title", "description", "onPress", "theme", "style", "contentStyle", "titleStyle", "titleNumberOfLines", "descriptionNumberOfLines", "titleEllipsizeMode", "descriptionEllipsizeMode", "descriptionStyle", "descriptionMaxFontSizeMultiplier", "titleMaxFontSizeMultiplier", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show tiles inside a List.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { List } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <List.Item
   *     title="First Item"
   *     description="Item description"
   *     left={props => <List.Icon {...props} icon="folder" />}
   *   />
   * );
   *
   * export default MyComponent;
   * ```
   *
   * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
   */
  var ListItem = (_ref, ref) => {
    var left = _ref.left,
      right = _ref.right,
      title = _ref.title,
      description = _ref.description,
      onPress = _ref.onPress,
      themeOverrides = _ref.theme,
      style = _ref.style,
      contentStyle = _ref.contentStyle,
      titleStyle = _ref.titleStyle,
      _ref$titleNumberOfLin = _ref.titleNumberOfLines,
      titleNumberOfLines = _ref$titleNumberOfLin === undefined ? 1 : _ref$titleNumberOfLin,
      _ref$descriptionNumbe = _ref.descriptionNumberOfLines,
      descriptionNumberOfLines = _ref$descriptionNumbe === undefined ? 2 : _ref$descriptionNumbe,
      titleEllipsizeMode = _ref.titleEllipsizeMode,
      descriptionEllipsizeMode = _ref.descriptionEllipsizeMode,
      descriptionStyle = _ref.descriptionStyle,
      descriptionMaxFontSizeMultiplier = _ref.descriptionMaxFontSizeMultiplier,
      titleMaxFontSizeMultiplier = _ref.titleMaxFontSizeMultiplier,
      testID = _ref.testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      alignToTop = _React$useState2[0],
      setAlignToTop = _React$useState2[1];
    var onDescriptionTextLayout = event => {
      if (!theme.isV3) {
        return;
      }
      var nativeEvent = event.nativeEvent;
      setAlignToTop(nativeEvent.lines.length >= 2);
    };
    var renderDescription = (descriptionColor, description) => {
      return typeof description === 'function' ? description({
        selectable: false,
        ellipsizeMode: descriptionEllipsizeMode,
        color: descriptionColor,
        fontSize: styles.description.fontSize
      }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
        selectable: false,
        numberOfLines: descriptionNumberOfLines,
        ellipsizeMode: descriptionEllipsizeMode,
        style: [styles.description, {
          color: descriptionColor
        }, descriptionStyle],
        onTextLayout: onDescriptionTextLayout,
        maxFontSizeMultiplier: descriptionMaxFontSizeMultiplier,
        children: description
      });
    };
    var renderTitle = () => {
      var titleColor = theme.isV3 ? theme.colors.onSurface : (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
      return typeof title === 'function' ? title({
        selectable: false,
        ellipsizeMode: titleEllipsizeMode,
        color: titleColor,
        fontSize: styles.title.fontSize
      }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
        selectable: false,
        ellipsizeMode: titleEllipsizeMode,
        numberOfLines: titleNumberOfLines,
        style: [styles.title, {
          color: titleColor
        }, titleStyle],
        maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
        children: title
      });
    };
    var descriptionColor = theme.isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
      ...rest,
      ref: ref,
      style: [theme.isV3 ? styles.containerV3 : styles.container, style],
      onPress: onPress,
      theme: theme,
      testID: testID,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: theme.isV3 ? styles.rowV3 : styles.row,
        children: [left ? left({
          color: descriptionColor,
          style: (0, _utils.getLeftStyles)(alignToTop, description, theme.isV3)
        }) : null, /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [theme.isV3 ? styles.itemV3 : styles.item, styles.content, contentStyle],
          testID: `${testID}-content`,
          children: [renderTitle(), description ? renderDescription(descriptionColor, description) : null]
        }), right ? right({
          color: descriptionColor,
          style: (0, _utils.getRightStyles)(alignToTop, description, theme.isV3)
        }) : null]
      })
    });
  };
  var Component = (0, _forwardRef.forwardRef)(ListItem);
  Component.displayName = 'List.Item';
  var styles = _reactNative.StyleSheet.create({
    container: {
      padding: 8
    },
    containerV3: {
      paddingVertical: 8,
      paddingRight: 24
    },
    row: {
      width: '100%',
      flexDirection: 'row'
    },
    rowV3: {
      width: '100%',
      flexDirection: 'row',
      marginVertical: 6
    },
    title: {
      fontSize: 16
    },
    description: {
      fontSize: 14
    },
    item: {
      marginVertical: 6,
      paddingLeft: 8
    },
    itemV3: {
      paddingLeft: 16
    },
    content: {
      flexShrink: 1,
      flexGrow: 1,
      justifyContent: 'center'
    }
  });
  var _default = exports.default = Component;
},593,[1,29,203,125,45,515,591,506,577,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _ListSubheader = _interopRequireDefault(require(_dependencyMap[4]));
  var _theming = require(_dependencyMap[5]);
  var _jsxRuntime = require(_dependencyMap[6]);
  var _excluded = ["children", "title", "titleStyle", "style", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component used to group list items.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { List, MD3Colors } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <List.Section>
   *     <List.Subheader>Some title</List.Subheader>
   *     <List.Item title="First Item" left={() => <List.Icon icon="folder" />} />
   *     <List.Item
   *       title="Second Item"
   *       left={() => <List.Icon color={MD3Colors.tertiary70} icon="folder" />}
   *     />
   *   </List.Section>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var ListSection = _ref => {
    var children = _ref.children,
      title = _ref.title,
      titleStyle = _ref.titleStyle,
      style = _ref.style,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var viewProps = {
      ...rest,
      theme
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      ...viewProps,
      style: [styles.container, style],
      children: [title ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListSubheader.default, {
        style: titleStyle,
        theme: theme,
        children: title
      }) : null, children]
    });
  };
  ListSection.displayName = 'List.Section';
  var styles = _reactNative.StyleSheet.create({
    container: {
      marginVertical: 8
    }
  });
  var _default = exports.default = ListSection;
},594,[1,203,125,45,595,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _theming = require(_dependencyMap[5]);
  var _Text = _interopRequireDefault(require(_dependencyMap[6]));
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["style", "theme", "maxFontSizeMultiplier"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component used to display a header in lists.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { List } from 'react-native-paper';
   *
   * const MyComponent = () => <List.Subheader>My List Title</List.Subheader>;
   *
   * export default MyComponent;
   * ```
   */
  var ListSubheader = _ref => {
    var style = _ref.style,
      overrideTheme = _ref.theme,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(overrideTheme);
    var textColor = theme.isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    var font = theme.isV3 ? theme.fonts.bodyMedium : theme.fonts.medium;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
      variant: "bodyMedium",
      numberOfLines: 1,
      maxFontSizeMultiplier: maxFontSizeMultiplier,
      ...rest,
      style: [styles.container, {
        color: textColor,
        ...font
      }, style]
    });
  };
  ListSubheader.displayName = 'List.Subheader';
  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingHorizontal: 16,
      paddingVertical: 13
    }
  });
  var _default = exports.default = ListSubheader;
},595,[1,203,125,45,515,506,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  var _theming = require(_dependencyMap[2]);
  var _jsxRuntime = require(_dependencyMap[3]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show image in a list item.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { List, MD3Colors } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <>
   *     <List.Image variant="image" source={{uri: 'https://www.someurl.com/apple'}} />
   *     <List.Image variant="video" source={require('../../some-apple.png')} />
   *   </>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var ListImage = _ref => {
    var style = _ref.style,
      source = _ref.source,
      _ref$variant = _ref.variant,
      variant = _ref$variant === undefined ? 'image' : _ref$variant,
      themeOverrides = _ref.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var getStyles = () => {
      if (variant === 'video') {
        if (!theme.isV3) {
          return [style, styles.video];
        }
        return [style, styles.videoV3];
      }
      return [style, styles.image];
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
      style: getStyles(),
      source: source,
      accessibilityIgnoresInvertColors: true,
      testID: "list-image"
    });
  };
  var styles = _reactNative.StyleSheet.create({
    image: {
      width: 56,
      height: 56
    },
    video: {
      width: 100,
      height: 64,
      marginLeft: 0
    },
    videoV3: {
      width: 114,
      height: 64,
      marginLeft: 0
    }
  });
  ListImage.displayName = 'List.Image';
  var _default = exports.default = ListImage;
},596,[125,45,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _color = _interopRequireDefault(require(_dependencyMap[5]));
  var _utils = require(_dependencyMap[6]);
  var _theming = require(_dependencyMap[7]);
  var _Icon = _interopRequireDefault(require(_dependencyMap[8]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[9]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[10]));
  var _AnimatedText = _interopRequireDefault(require(_dependencyMap[11]));
  var _jsxRuntime = require(_dependencyMap[12]);
  var _excluded = ["icon", "label", "background", "accessibilityLabel", "accessibilityState", "color", "rippleColor", "disabled", "onPress", "onLongPress", "delayLongPress", "theme", "style", "visible", "uppercase", "testID", "animateFrom", "extended", "iconMode", "variant", "labelMaxFontSizeMultiplier"],
    _excluded2 = ["backgroundColor"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var SIZE = 56;
  var SCALE = 0.9;

  /**
   * An animated, extending horizontally floating action button represents the primary action in an application.
   *
   * ## Usage
   * ```js
   * import React from 'react';
   * import {
   *   StyleProp,
   *   ViewStyle,
   *   Animated,
   *   StyleSheet,
   *   Platform,
   *   ScrollView,
   *   Text,
   *   SafeAreaView,
   *   I18nManager,
   * } from 'react-native';
   * import { AnimatedFAB } from 'react-native-paper';
   *
   * const MyComponent = ({
   *   animatedValue,
   *   visible,
   *   extended,
   *   label,
   *   animateFrom,
   *   style,
   *   iconMode,
   * }) => {
   *   const [isExtended, setIsExtended] = React.useState(true);
   *
   *   const isIOS = Platform.OS === 'ios';
   *
   *   const onScroll = ({ nativeEvent }) => {
   *     const currentScrollPosition =
   *       Math.floor(nativeEvent?.contentOffset?.y) ?? 0;
   *
   *     setIsExtended(currentScrollPosition <= 0);
   *   };
   *
   *   const fabStyle = { [animateFrom]: 16 };
   *
   *   return (
   *     <SafeAreaView style={styles.container}>
   *       <ScrollView onScroll={onScroll}>
   *         {[...new Array(100).keys()].map((_, i) => (
   *           <Text>{i}</Text>
   *         ))}
   *       </ScrollView>
   *       <AnimatedFAB
   *         icon={'plus'}
   *         label={'Label'}
   *         extended={isExtended}
   *         onPress={() => console.log('Pressed')}
   *         visible={visible}
   *         animateFrom={'right'}
   *         iconMode={'static'}
   *         style={[styles.fabStyle, style, fabStyle]}
   *       />
   *     </SafeAreaView>
   *   );
   * };
   *
   * export default MyComponent;
   *
   * const styles = StyleSheet.create({
   *   container: {
   *     flexGrow: 1,
   *   },
   *   fabStyle: {
   *     bottom: 16,
   *     right: 16,
   *     position: 'absolute',
   *   },
   * });
   * ```
   */
  var AnimatedFAB = _ref => {
    var icon = _ref.icon,
      label = _ref.label,
      background = _ref.background,
      _ref$accessibilityLab = _ref.accessibilityLabel,
      accessibilityLabel = _ref$accessibilityLab === undefined ? label : _ref$accessibilityLab,
      accessibilityState = _ref.accessibilityState,
      customColor = _ref.color,
      customRippleColor = _ref.rippleColor,
      disabled = _ref.disabled,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      delayLongPress = _ref.delayLongPress,
      themeOverrides = _ref.theme,
      style = _ref.style,
      _ref$visible = _ref.visible,
      visible = _ref$visible === undefined ? true : _ref$visible,
      uppercaseProp = _ref.uppercase,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'animated-fab' : _ref$testID,
      _ref$animateFrom = _ref.animateFrom,
      animateFrom = _ref$animateFrom === undefined ? 'right' : _ref$animateFrom,
      _ref$extended = _ref.extended,
      extended = _ref$extended === undefined ? false : _ref$extended,
      _ref$iconMode = _ref.iconMode,
      iconMode = _ref$iconMode === undefined ? 'dynamic' : _ref$iconMode,
      _ref$variant = _ref.variant,
      variant = _ref$variant === undefined ? 'primary' : _ref$variant,
      labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var uppercase = uppercaseProp ?? !theme.isV3;
    var isIOS = true;
    var isAnimatedFromRight = animateFrom === 'right';
    var isIconStatic = iconMode === 'static';
    var isRTL = _reactNative.I18nManager.isRTL;
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
      visibility = _React$useRef.current;
    var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(0)),
      animFAB = _React$useRef2.current;
    var isV3 = theme.isV3,
      animation = theme.animation;
    var scale = animation.scale;
    var _React$useState = React.useState(0),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      textWidth = _React$useState2[0],
      setTextWidth = _React$useState2[1];
    var _React$useState3 = React.useState(0),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      textHeight = _React$useState4[0],
      setTextHeight = _React$useState4[1];
    var borderRadius = SIZE / (isV3 ? 3.5 : 2);
    React.useEffect(() => {
      if (visible) {
        _reactNative.Animated.timing(visibility, {
          toValue: 1,
          duration: 200 * scale,
          useNativeDriver: true
        }).start();
      } else {
        _reactNative.Animated.timing(visibility, {
          toValue: 0,
          duration: 150 * scale,
          useNativeDriver: true
        }).start();
      }
    }, [visible, scale, visibility]);
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      customBackgroundColor = _ref2.backgroundColor,
      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    var _getFABColors = (0, _utils.getFABColors)({
        theme,
        variant,
        disabled,
        customColor,
        customBackgroundColor
      }),
      backgroundColor = _getFABColors.backgroundColor,
      foregroundColor = _getFABColors.foregroundColor;
    var rippleColor = customRippleColor || (0, _color.default)(foregroundColor).alpha(0.12).rgb().string();
    var extendedWidth = textWidth + SIZE + borderRadius;
    var distance = isAnimatedFromRight ? -textWidth - borderRadius : textWidth + borderRadius;
    React.useEffect(() => {
      _reactNative.Animated.timing(animFAB, {
        toValue: !extended ? 0 : distance,
        duration: 150 * scale,
        useNativeDriver: true,
        easing: _reactNative.Easing.linear
      }).start();
    }, [animFAB, scale, distance, extended]);
    var onTextLayout = _ref3 => {
      var nativeEvent = _ref3.nativeEvent;
      var currentWidth = Math.ceil(nativeEvent.lines[0].width);
      var currentHeight = Math.ceil(nativeEvent.lines[0].height);
      if (currentWidth !== textWidth || currentHeight !== textHeight) {
        setTextHeight(currentHeight);
        {
          return setTextWidth(currentWidth - 12);
        }
        setTextWidth(currentWidth);
      }
    };
    var propForDirection = right => {
      if (isAnimatedFromRight) {
        return right;
      }
      return right.reverse();
    };
    var combinedStyles = (0, _utils.getCombinedStyles)({
      isAnimatedFromRight,
      isIconStatic,
      distance,
      animFAB
    });
    var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
    var textStyle = {
      color: foregroundColor,
      ...font
    };
    var md2Elevation = disabled || false ? 0 : 6;
    var md3Elevation = disabled || false ? 0 : 3;
    var shadowStyle = isV3 ? styles.v3Shadow : styles.shadow;
    var baseStyle = [_reactNative.StyleSheet.absoluteFill, disabled ? styles.disabled : shadowStyle];
    var newAccessibilityState = {
      ...accessibilityState,
      disabled
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Surface.default, {
      ...rest,
      testID: `${testID}-container`,
      style: [{
        opacity: visibility,
        transform: [{
          scale: visibility
        }],
        borderRadius
      }, !isV3 && {
        elevation: md2Elevation
      }, styles.container, restStyle],
      ...(isV3 && {
        elevation: md3Elevation
      }),
      theme: theme,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
        style: [!isV3 && {
          transform: [{
            scaleY: animFAB.interpolate({
              inputRange: propForDirection([distance, 0]),
              outputRange: propForDirection([SCALE, 1])
            })
          }]
        }, styles.standard, {
          borderRadius
        }],
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [_reactNative.StyleSheet.absoluteFill, styles.shadowWrapper],
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            pointerEvents: "none",
            style: [baseStyle, {
              width: extendedWidth,
              opacity: animFAB.interpolate({
                inputRange: propForDirection([distance, 0.9 * distance, 0]),
                outputRange: propForDirection([1, 0.15, 0])
              }),
              borderRadius
            }],
            testID: `${testID}-extended-shadow`
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            pointerEvents: "none",
            style: [baseStyle, {
              opacity: animFAB.interpolate({
                inputRange: propForDirection([distance, 0.9 * distance, 0]),
                outputRange: propForDirection([0, 0.85, 1])
              }),
              width: SIZE,
              borderRadius: animFAB.interpolate({
                inputRange: propForDirection([distance, 0]),
                outputRange: propForDirection([SIZE / (extendedWidth / SIZE), borderRadius])
              })
            }, combinedStyles.absoluteFill],
            testID: `${testID}-shadow`
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          pointerEvents: "box-none",
          style: [styles.innerWrapper, {
            borderRadius
          }],
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            style: [styles.standard, {
              width: extendedWidth,
              backgroundColor,
              borderRadius
            }, combinedStyles.innerWrapper],
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
              borderless: true,
              background: background,
              onPress: onPress,
              onLongPress: onLongPress,
              delayLongPress: delayLongPress,
              rippleColor: rippleColor,
              disabled: disabled,
              accessibilityLabel: accessibilityLabel,
              accessibilityRole: "button",
              accessibilityState: newAccessibilityState,
              testID: testID,
              style: {
                borderRadius
              },
              theme: theme,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.standard, {
                  width: extendedWidth,
                  borderRadius
                }]
              })
            })
          })
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [styles.iconWrapper, combinedStyles.iconWrapper],
        pointerEvents: "none",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
          source: icon,
          size: 24,
          color: foregroundColor,
          theme: theme
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        pointerEvents: "none",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AnimatedText.default, {
          variant: "labelLarge",
          numberOfLines: 1,
          onTextLayout: onTextLayout,
          ellipsizeMode: 'tail',
          style: [{
            [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic ? textWidth - SIZE + borderRadius / (isV3 ? 1 : 2) : borderRadius
          }, {
            minWidth: textWidth,
            top: -28 - textHeight / 2,
            opacity: animFAB.interpolate({
              inputRange: propForDirection([distance, 0.7 * distance, 0]),
              outputRange: propForDirection([1, 0, 0])
            }),
            // TODO: check
            transform: [{
              translateX: animFAB.interpolate({
                inputRange: propForDirection([distance, 0]),
                outputRange: propForDirection([0, SIZE])
              })
            }]
          }, styles.label, uppercase && styles.uppercaseLabel, textStyle],
          theme: theme,
          testID: `${testID}-text`,
          maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
          children: label
        })
      }), false]
    });
  };
  var styles = _reactNative.StyleSheet.create({
    standard: {
      height: SIZE
    },
    disabled: {
      elevation: 0
    },
    // eslint-disable-next-line react-native/no-color-literals
    container: {
      position: 'absolute',
      backgroundColor: 'transparent'
    },
    innerWrapper: {
      flexDirection: 'row',
      overflow: 'hidden'
    },
    shadowWrapper: {
      elevation: 0
    },
    shadow: {
      elevation: 6
    },
    v3Shadow: {
      elevation: 3
    },
    iconWrapper: {
      alignItems: 'center',
      justifyContent: 'center',
      position: 'absolute',
      height: SIZE,
      width: SIZE
    },
    label: {
      position: 'absolute'
    },
    uppercaseLabel: {
      textTransform: 'uppercase'
    },
    textPlaceholderContainer: {
      height: 0,
      position: 'absolute'
    }
  });
  var _default = exports.default = AnimatedFAB;
},597,[1,29,203,125,45,515,598,506,570,599,580,574,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getFabStyle = exports.getFABGroupColors = exports.getFABColors = exports.getExtendedFabStyle = exports.getCombinedStyles = undefined;
  var _reactNative = require(_dependencyMap[1]);
  var _color = _interopRequireDefault(require(_dependencyMap[2]));
  var _colors = require(_dependencyMap[3]);
  var _getContrastingColor = _interopRequireDefault(require(_dependencyMap[4]));
  var getCombinedStyles = _ref => {
    var isAnimatedFromRight = _ref.isAnimatedFromRight,
      isIconStatic = _ref.isIconStatic,
      distance = _ref.distance,
      animFAB = _ref.animFAB;
    var isRTL = _reactNative.I18nManager.isRTL;
    var defaultPositionStyles = {
      left: -distance,
      right: undefined
    };
    var combinedStyles = {
      innerWrapper: {
        ...defaultPositionStyles
      },
      iconWrapper: {
        ...defaultPositionStyles
      },
      absoluteFill: {}
    };
    var animatedFromRight = isAnimatedFromRight && !isRTL;
    var animatedFromRightRTL = isAnimatedFromRight && isRTL;
    var animatedFromLeft = !isAnimatedFromRight && !isRTL;
    var animatedFromLeftRTL = !isAnimatedFromRight && isRTL;
    if (animatedFromRight) {
      combinedStyles.innerWrapper.transform = [{
        translateX: animFAB.interpolate({
          inputRange: [distance, 0],
          outputRange: [distance, 0]
        })
      }];
      combinedStyles.iconWrapper.transform = [{
        translateX: isIconStatic ? 0 : animFAB
      }];
      combinedStyles.absoluteFill.transform = [{
        translateX: animFAB.interpolate({
          inputRange: [distance, 0],
          outputRange: [Math.abs(distance) / 2, Math.abs(distance)]
        })
      }];
    } else if (animatedFromRightRTL) {
      combinedStyles.iconWrapper.transform = [{
        translateX: isIconStatic ? 0 : animFAB.interpolate({
          inputRange: [distance, 0],
          outputRange: [-distance, 0]
        })
      }];
      combinedStyles.innerWrapper.transform = [{
        translateX: animFAB.interpolate({
          inputRange: [distance, 0],
          outputRange: [-distance, 0]
        })
      }];
      combinedStyles.absoluteFill.transform = [{
        translateX: animFAB.interpolate({
          inputRange: [distance, 0],
          outputRange: [0, distance]
        })
      }];
    } else if (animatedFromLeft) {
      combinedStyles.iconWrapper.transform = [{
        translateX: isIconStatic ? distance : animFAB.interpolate({
          inputRange: [0, distance],
          outputRange: [distance, distance * 2]
        })
      }];
      combinedStyles.innerWrapper.transform = [{
        translateX: animFAB
      }];
      combinedStyles.absoluteFill.transform = [{
        translateX: animFAB.interpolate({
          inputRange: [0, distance],
          outputRange: [0, Math.abs(distance) / 2]
        })
      }];
    } else if (animatedFromLeftRTL) {
      combinedStyles.iconWrapper.transform = [{
        translateX: isIconStatic ? animFAB.interpolate({
          inputRange: [0, distance],
          outputRange: [-distance, -distance * 2]
        }) : -distance
      }];
      combinedStyles.innerWrapper.transform = [{
        translateX: animFAB.interpolate({
          inputRange: [0, distance],
          outputRange: [0, -distance]
        })
      }];
      combinedStyles.absoluteFill.transform = [{
        translateX: animFAB.interpolate({
          inputRange: [0, distance],
          outputRange: [0, -distance]
        })
      }];
    }
    return combinedStyles;
  };
  exports.getCombinedStyles = getCombinedStyles;
  var getBackgroundColor = _ref2 => {
    var theme = _ref2.theme,
      isVariant = _ref2.isVariant,
      disabled = _ref2.disabled,
      customBackgroundColor = _ref2.customBackgroundColor;
    if (customBackgroundColor && !disabled) {
      return customBackgroundColor;
    }
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.surfaceDisabled;
      }
      if (isVariant('primary')) {
        return theme.colors.primaryContainer;
      }
      if (isVariant('secondary')) {
        return theme.colors.secondaryContainer;
      }
      if (isVariant('tertiary')) {
        return theme.colors.tertiaryContainer;
      }
      if (isVariant('surface')) {
        return theme.colors.elevation.level3;
      }
    }
    if (disabled) {
      if (theme.dark) {
        return (0, _color.default)(_colors.white).alpha(0.12).rgb().string();
      }
      return (0, _color.default)(_colors.black).alpha(0.12).rgb().string();
    }

    //@ts-ignore
    return theme.colors?.accent;
  };
  var getForegroundColor = _ref3 => {
    var theme = _ref3.theme,
      isVariant = _ref3.isVariant,
      disabled = _ref3.disabled,
      backgroundColor = _ref3.backgroundColor,
      customColor = _ref3.customColor;
    if (typeof customColor !== 'undefined' && !disabled) {
      return customColor;
    }
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      }
      if (isVariant('primary')) {
        return theme.colors.onPrimaryContainer;
      }
      if (isVariant('secondary')) {
        return theme.colors.onSecondaryContainer;
      }
      if (isVariant('tertiary')) {
        return theme.colors.onTertiaryContainer;
      }
      if (isVariant('surface')) {
        return theme.colors.primary;
      }
    }
    if (disabled) {
      if (theme.dark) {
        return (0, _color.default)(_colors.white).alpha(0.32).rgb().string();
      }
      return (0, _color.default)(_colors.black).alpha(0.32).rgb().string();
    }
    if (backgroundColor) {
      return (0, _getContrastingColor.default)(backgroundColor || _colors.white, _colors.white, 'rgba(0, 0, 0, .54)');
    }
    return (0, _getContrastingColor.default)(_colors.white, _colors.white, 'rgba(0, 0, 0, .54)');
  };
  var getFABColors = _ref4 => {
    var theme = _ref4.theme,
      variant = _ref4.variant,
      disabled = _ref4.disabled,
      customColor = _ref4.customColor,
      customBackgroundColor = _ref4.customBackgroundColor,
      customRippleColor = _ref4.customRippleColor;
    var isVariant = variantToCompare => {
      return variant === variantToCompare;
    };
    var baseFABColorProps = {
      theme,
      isVariant,
      disabled
    };
    var backgroundColor = getBackgroundColor({
      ...baseFABColorProps,
      customBackgroundColor
    });
    var foregroundColor = getForegroundColor({
      ...baseFABColorProps,
      customColor,
      backgroundColor
    });
    return {
      backgroundColor,
      foregroundColor,
      rippleColor: customRippleColor || (0, _color.default)(foregroundColor).alpha(0.12).rgb().string()
    };
  };
  exports.getFABColors = getFABColors;
  var getLabelColor = _ref5 => {
    var theme = _ref5.theme;
    if (theme.isV3) {
      return theme.colors.onSurface;
    }
    if (theme.dark) {
      return theme.colors.text;
    }
    return (0, _color.default)(theme.colors.text).fade(0.54).rgb().string();
  };
  var getBackdropColor = _ref6 => {
    var theme = _ref6.theme,
      customBackdropColor = _ref6.customBackdropColor;
    if (customBackdropColor) {
      return customBackdropColor;
    }
    if (theme.isV3) {
      return (0, _color.default)(theme.colors.background).alpha(0.95).rgb().string();
    }
    return theme.colors?.backdrop;
  };
  var getStackedFABBackgroundColor = _ref7 => {
    var theme = _ref7.theme;
    if (theme.isV3) {
      return theme.colors.elevation.level3;
    }
    return theme.colors.surface;
  };
  var getFABGroupColors = _ref8 => {
    var theme = _ref8.theme,
      customBackdropColor = _ref8.customBackdropColor;
    return {
      labelColor: getLabelColor({
        theme
      }),
      backdropColor: getBackdropColor({
        theme,
        customBackdropColor
      }),
      stackedFABBackgroundColor: getStackedFABBackgroundColor({
        theme
      })
    };
  };
  exports.getFABGroupColors = getFABGroupColors;
  var standardSize = {
    height: 56,
    width: 56,
    borderRadius: 28
  };
  var smallSize = {
    height: 40,
    width: 40,
    borderRadius: 28
  };
  var v3SmallSize = {
    height: 40,
    width: 40
  };
  var v3MediumSize = {
    height: 56,
    width: 56
  };
  var v3LargeSize = {
    height: 96,
    width: 96
  };
  var getCustomFabSize = (customSize, roundness) => ({
    height: customSize,
    width: customSize,
    borderRadius: roundness === 0 ? 0 : customSize / roundness
  });
  var getFabStyle = _ref9 => {
    var size = _ref9.size,
      theme = _ref9.theme,
      customSize = _ref9.customSize;
    var isV3 = theme.isV3,
      roundness = theme.roundness;
    if (customSize) return getCustomFabSize(customSize, roundness);
    if (isV3) {
      switch (size) {
        case 'small':
          return {
            ...v3SmallSize,
            borderRadius: 3 * roundness
          };
        case 'medium':
          return {
            ...v3MediumSize,
            borderRadius: 4 * roundness
          };
        case 'large':
          return {
            ...v3LargeSize,
            borderRadius: 7 * roundness
          };
      }
    }
    if (size === 'small') {
      return smallSize;
    }
    return standardSize;
  };
  exports.getFabStyle = getFabStyle;
  var extended = {
    height: 48,
    paddingHorizontal: 16
  };
  var v3Extended = {
    height: 56,
    borderRadius: 16,
    paddingHorizontal: 16
  };
  var getExtendedFabDimensions = customSize => ({
    height: customSize,
    paddingHorizontal: 16
  });
  var getExtendedFabStyle = _ref10 => {
    var customSize = _ref10.customSize,
      theme = _ref10.theme;
    if (customSize) return getExtendedFabDimensions(customSize);
    var isV3 = theme.isV3;
    return isV3 ? v3Extended : extended;
  };
  exports.getExtendedFabStyle = getExtendedFabStyle;
},598,[1,45,515,529,569]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _overlay = _interopRequireWildcard(require(_dependencyMap[6]));
  var _shadow = _interopRequireDefault(require(_dependencyMap[7]));
  var _forwardRef = require(_dependencyMap[8]);
  var _splitStyles3 = require(_dependencyMap[9]);
  var _jsxRuntime = require(_dependencyMap[10]);
  var _excluded = ["style", "theme"],
    _excluded2 = ["elevation", "style", "backgroundColor", "testID", "children", "mode"],
    _excluded3 = ["elevation", "children", "theme", "style", "testID", "mode"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var MD2Surface = (0, _forwardRef.forwardRef)((_ref, ref) => {
    var style = _ref.style,
      overrideTheme = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$elevation = _ref2.elevation,
      elevation = _ref2$elevation === undefined ? 4 : _ref2$elevation;
    var _useInternalTheme = (0, _theming.useInternalTheme)(overrideTheme),
      isDarkTheme = _useInternalTheme.dark,
      mode = _useInternalTheme.mode,
      colors = _useInternalTheme.colors;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      ref: ref,
      ...rest,
      style: [{
        backgroundColor: isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors?.surface) : colors?.surface
      }, elevation ? (0, _shadow.default)(elevation) : null, style]
    });
  });
  var outerLayerStyleProperties = ['position', 'alignSelf', 'top', 'right', 'bottom', 'left', 'start', 'end', 'flex', 'flexShrink', 'flexGrow', 'width', 'height', 'transform', 'opacity'];
  var shadowColor = '#000';
  var iOSShadowOutputRanges = [{
    shadowOpacity: 0.15,
    height: [0, 1, 2, 4, 6, 8],
    shadowRadius: [0, 3, 6, 8, 10, 12]
  }, {
    shadowOpacity: 0.3,
    height: [0, 1, 1, 1, 2, 4],
    shadowRadius: [0, 1, 2, 3, 3, 4]
  }];
  var inputRange = [0, 1, 2, 3, 4, 5];
  function getStyleForShadowLayer(elevation, layer) {
    if ((0, _overlay.isAnimatedValue)(elevation)) {
      return {
        shadowColor,
        shadowOpacity: elevation.interpolate({
          inputRange: [0, 1],
          outputRange: [0, iOSShadowOutputRanges[layer].shadowOpacity],
          extrapolate: 'clamp'
        }),
        shadowOffset: {
          width: 0,
          height: elevation.interpolate({
            inputRange,
            outputRange: iOSShadowOutputRanges[layer].height
          })
        },
        shadowRadius: elevation.interpolate({
          inputRange,
          outputRange: iOSShadowOutputRanges[layer].shadowRadius
        })
      };
    }
    return {
      shadowColor,
      shadowOpacity: elevation ? iOSShadowOutputRanges[layer].shadowOpacity : 0,
      shadowOffset: {
        width: 0,
        height: iOSShadowOutputRanges[layer].height[elevation]
      },
      shadowRadius: iOSShadowOutputRanges[layer].shadowRadius[elevation]
    };
  }
  var SurfaceIOS = (0, _forwardRef.forwardRef)((_ref3, ref) => {
    var elevation = _ref3.elevation,
      style = _ref3.style,
      backgroundColor = _ref3.backgroundColor,
      testID = _ref3.testID,
      children = _ref3.children,
      _ref3$mode = _ref3.mode,
      mode = _ref3$mode === undefined ? 'elevated' : _ref3$mode,
      props = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
    var _React$useMemo = React.useMemo(() => {
        var flattenedStyles = _reactNative.StyleSheet.flatten(style) || {};
        var _splitStyles = (0, _splitStyles3.splitStyles)(flattenedStyles, style => outerLayerStyleProperties.includes(style) || style.startsWith('margin'), style => style.startsWith('border') && style.endsWith('Radius')),
          _splitStyles2 = (0, _slicedToArray2.default)(_splitStyles, 3),
          filteredStyles = _splitStyles2[0],
          outerLayerStyles = _splitStyles2[1],
          borderRadiusStyles = _splitStyles2[2];
        var bgColor = flattenedStyles.backgroundColor || backgroundColor;
        var isElevated = mode === 'elevated';
        var outerLayerViewStyles = {
          ...(isElevated && getStyleForShadowLayer(elevation, 0)),
          ...outerLayerStyles,
          ...borderRadiusStyles,
          backgroundColor: bgColor
        };
        var innerLayerViewStyles = {
          ...(isElevated && getStyleForShadowLayer(elevation, 1)),
          ...filteredStyles,
          ...borderRadiusStyles,
          flex: flattenedStyles.height ? 1 : undefined,
          backgroundColor: bgColor
        };
        return [outerLayerViewStyles, innerLayerViewStyles];
      }, [style, elevation, backgroundColor, mode]),
      _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2),
      outerLayerViewStyles = _React$useMemo2[0],
      innerLayerViewStyles = _React$useMemo2[1];
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      ref: ref,
      style: outerLayerViewStyles,
      testID: `${testID}-outer-layer`,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        ...props,
        style: innerLayerViewStyles,
        testID: testID,
        children: children
      })
    });
  });

  /**
   * Surface is a basic container that can give depth to an element with elevation shadow.
   * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.
   * See [Dark Theme](https://callstack.github.io/react-native-paper/docs/guides/theming#dark-theme) for more information.
   * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Surface, Text } from 'react-native-paper';
   * import { StyleSheet } from 'react-native';
   *
   * const MyComponent = () => (
   *   <Surface style={styles.surface} elevation={4}>
   *      <Text>Surface</Text>
   *   </Surface>
   * );
   *
   * export default MyComponent;
   *
   * const styles = StyleSheet.create({
   *   surface: {
   *     padding: 8,
   *     height: 80,
   *     width: 80,
   *     alignItems: 'center',
   *     justifyContent: 'center',
   *   },
   * });
   * ```
   */
  var Surface = (0, _forwardRef.forwardRef)((_ref4, ref) => {
    var _ref4$elevation = _ref4.elevation,
      elevation = _ref4$elevation === undefined ? 1 : _ref4$elevation,
      children = _ref4.children,
      overridenTheme = _ref4.theme,
      style = _ref4.style,
      _ref4$testID = _ref4.testID,
      testID = _ref4$testID === undefined ? 'surface' : _ref4$testID,
      _ref4$mode = _ref4.mode,
      mode = _ref4$mode === undefined ? 'elevated' : _ref4$mode,
      props = (0, _objectWithoutProperties2.default)(_ref4, _excluded3);
    var theme = (0, _theming.useInternalTheme)(overridenTheme);
    if (!theme.isV3) return /*#__PURE__*/(0, _jsxRuntime.jsx)(MD2Surface, {
      ...props,
      theme: theme,
      style: style,
      ref: ref,
      children: children
    });
    var colors = theme.colors;
    var inputRange = [0, 1, 2, 3, 4, 5];
    var backgroundColor = (() => {
      if ((0, _overlay.isAnimatedValue)(elevation)) {
        return elevation.interpolate({
          inputRange,
          outputRange: inputRange.map(elevation => {
            return colors.elevation?.[`level${elevation}`];
          })
        });
      }
      return colors.elevation?.[`level${elevation}`];
    })();
    var isElevated = mode === 'elevated';
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(SurfaceIOS, {
      ...props,
      ref: ref,
      elevation: elevation,
      backgroundColor: backgroundColor,
      style: style,
      testID: testID,
      mode: mode,
      children: children
    });
  });
  var _default = exports.default = Surface;
},599,[1,29,203,125,45,506,566,565,577,600,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.splitStyles = splitStyles;
  /**
   * Utility function to extract styles in separate objects
   *
   * @param styles The style object you want to filter
   * @param filters The filters by which you want to split the styles
   * @returns An array of filtered style objects:
   * - The first style object contains the properties that didn't match any filter
   * - After that there will be a style object for each filter you passed in the same order as the matching filters
   * - A style property will exist in a single style object, the first filter it matched
   */
  function splitStyles(styles) {
    for (var _len = arguments.length, filters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      filters[_key - 1] = arguments[_key];
    }
    // `Object.entries` will be used to iterate over the styles and `Object.fromEntries` will be called before returning
    // Entries which match the given filters will be temporarily stored in `newStyles`
    var newStyles = filters.map(() => []);

    // Entries which match no filter
    var rest = [];

    // Iterate every style property
    outer: for (var item of Object.entries(styles)) {
      // Check each filter
      for (var i = 0; i < filters.length; i++) {
        // Check if filter matches
        if (filters[i](item[0])) {
          newStyles[i].push(item); // Push to temporary filtered entries array
          continue outer; // Skip to checking next style property
        }
      }

      // Adds to rest styles if not filtered
      rest.push(item);
    }

    // Put unmatched styles in the beginning
    newStyles.unshift(rest);

    // Convert arrays of entries into objects
    return newStyles.map(styles => Object.fromEntries(styles));
  }
},600,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _theming = require(_dependencyMap[4]);
  var _jsxRuntime = require(_dependencyMap[5]);
  var _excluded = ["animating", "color", "hidesWhenStopped", "size", "style", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var DURATION = 2400;

  /**
   * Activity indicator is used to present progress of some activity in the app.
   * It can be used as a drop-in for the ActivityIndicator shipped with React Native.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { ActivityIndicator, MD2Colors } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <ActivityIndicator animating={true} color={MD2Colors.red800} />
   * );
   *
   * export default MyComponent;
   * ```
   */
  var ActivityIndicator = _ref => {
    var _ref$animating = _ref.animating,
      animating = _ref$animating === undefined ? true : _ref$animating,
      indicatorColor = _ref.color,
      _ref$hidesWhenStopped = _ref.hidesWhenStopped,
      hidesWhenStopped = _ref$hidesWhenStopped === undefined ? true : _ref$hidesWhenStopped,
      _ref$size = _ref.size,
      indicatorSize = _ref$size === undefined ? 'small' : _ref$size,
      style = _ref.style,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(0)),
      timer = _React$useRef.current;
    var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(!animating && hidesWhenStopped ? 0 : 1)),
      fade = _React$useRef2.current;
    var rotation = React.useRef(undefined);
    var scale = theme.animation.scale;
    var startRotation = React.useCallback(() => {
      // Show indicator
      _reactNative.Animated.timing(fade, {
        duration: 200 * scale,
        toValue: 1,
        isInteraction: false,
        useNativeDriver: true
      }).start();

      // Circular animation in loop
      if (rotation.current) {
        timer.setValue(0);
        // $FlowFixMe
        _reactNative.Animated.loop(rotation.current).start();
      }
    }, [scale, fade, timer]);
    var stopRotation = () => {
      if (rotation.current) {
        rotation.current.stop();
      }
    };
    React.useEffect(() => {
      if (rotation.current === undefined) {
        // Circular animation in loop
        rotation.current = _reactNative.Animated.timing(timer, {
          duration: DURATION,
          easing: _reactNative.Easing.linear,
          // Animated.loop does not work if useNativeDriver is true on web
          useNativeDriver: true,
          toValue: 1,
          isInteraction: false
        });
      }
      if (animating) {
        startRotation();
      } else if (hidesWhenStopped) {
        // Hide indicator first and then stop rotation
        _reactNative.Animated.timing(fade, {
          duration: 200 * scale,
          toValue: 0,
          useNativeDriver: true,
          isInteraction: false
        }).start(stopRotation);
      } else {
        stopRotation();
      }
    }, [animating, fade, hidesWhenStopped, startRotation, scale, timer]);
    var color = indicatorColor || theme.colors?.primary;
    var size = typeof indicatorSize === 'string' ? indicatorSize === 'small' ? 24 : 48 : indicatorSize ? indicatorSize : 24;
    var frames = 144;
    var easing = _reactNative.Easing.bezier(0.4, 0.0, 0.7, 1.0);
    var containerStyle = {
      width: size,
      height: size / 2,
      overflow: 'hidden'
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.container, style],
      ...rest,
      accessible: true,
      accessibilityRole: "progressbar",
      accessibilityState: {
        busy: animating
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [{
          width: size,
          height: size,
          opacity: fade
        }],
        collapsable: false,
        children: [0, 1].map(index => {
          // Thanks to https://github.com/n4kz/react-native-indicators for the great work
          var inputRange = Array.from(new Array(frames), (_, frameIndex) => frameIndex / 143);
          var outputRange = Array.from(new Array(frames), (_, frameIndex) => {
            var progress = 2 * frameIndex / 143;
            var rotation = index ? 345 : -165;
            if (progress > 1.0) {
              progress = 2.0 - progress;
            }
            var direction = index ? -1 : 1;
            return `${direction * 150 * easing(progress) + rotation}deg`;
          });
          var layerStyle = {
            width: size,
            height: size,
            transform: [{
              rotate: timer.interpolate({
                inputRange: [0, 1],
                outputRange: [`${45}deg`, `${765}deg`]
              })
            }]
          };
          var viewportStyle = {
            width: size,
            height: size,
            transform: [{
              translateY: index ? -size / 2 : 0
            }, {
              rotate: timer.interpolate({
                inputRange,
                outputRange
              })
            }]
          };
          var offsetStyle = index ? {
            top: size / 2
          } : null;
          var lineStyle = {
            width: size,
            height: size,
            borderColor: color,
            borderWidth: size / 10,
            borderRadius: size / 2
          };
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            style: [styles.layer],
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
              style: layerStyle,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                style: [containerStyle, offsetStyle],
                collapsable: false,
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                  style: viewportStyle,
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                    style: containerStyle,
                    collapsable: false,
                    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                      style: lineStyle
                    })
                  })
                })
              })
            })
          }, index);
        })
      })
    });
  };
  var styles = _reactNative.StyleSheet.create({
    container: {
      justifyContent: 'center',
      alignItems: 'center'
    },
    layer: {
      ..._reactNative.StyleSheet.absoluteFillObject,
      justifyContent: 'center',
      alignItems: 'center'
    }
  });
  var _default = exports.default = ActivityIndicator;
},601,[1,203,125,45,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _useLatestCallback = _interopRequireDefault(require(_dependencyMap[5]));
  var _Button = _interopRequireDefault(require(_dependencyMap[6]));
  var _Icon = _interopRequireDefault(require(_dependencyMap[7]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[8]));
  var _Text = _interopRequireDefault(require(_dependencyMap[9]));
  var _theming = require(_dependencyMap[10]);
  var _jsxRuntime = require(_dependencyMap[11]);
  var _excluded = ["visible", "icon", "children", "actions", "contentStyle", "elevation", "style", "theme", "onShowAnimationFinished", "onHideAnimationFinished", "maxFontSizeMultiplier"],
    _excluded2 = ["label"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var DEFAULT_MAX_WIDTH = 960;
  /**
   * Banner displays a prominent message and related actions.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Image } from 'react-native';
   * import { Banner } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [visible, setVisible] = React.useState(true);
   *
   *   return (
   *     <Banner
   *       visible={visible}
   *       actions={[
   *         {
   *           label: 'Fix it',
   *           onPress: () => setVisible(false),
   *         },
   *         {
   *           label: 'Learn more',
   *           onPress: () => setVisible(false),
   *         },
   *       ]}
   *       icon={({size}) => (
   *         <Image
   *           source={{
   *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',
   *           }}
   *           style={{
   *             width: size,
   *             height: size,
   *           }}
   *         />
   *       )}>
   *       There was a problem processing a transaction on your credit card.
   *     </Banner>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var Banner = _ref => {
    var visible = _ref.visible,
      icon = _ref.icon,
      children = _ref.children,
      _ref$actions = _ref.actions,
      actions = _ref$actions === undefined ? [] : _ref$actions,
      contentStyle = _ref.contentStyle,
      _ref$elevation = _ref.elevation,
      elevation = _ref$elevation === undefined ? 1 : _ref$elevation,
      style = _ref.style,
      themeOverrides = _ref.theme,
      _ref$onShowAnimationF = _ref.onShowAnimationFinished,
      onShowAnimationFinished = _ref$onShowAnimationF === undefined ? () => {} : _ref$onShowAnimationF,
      _ref$onHideAnimationF = _ref.onHideAnimationFinished,
      onHideAnimationFinished = _ref$onHideAnimationF === undefined ? () => {} : _ref$onHideAnimationF,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
      position = _React$useRef.current;
    var _React$useState = React.useState({
        height: 0,
        measured: false
      }),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      layout = _React$useState2[0],
      setLayout = _React$useState2[1];
    var showCallback = (0, _useLatestCallback.default)(onShowAnimationFinished);
    var hideCallback = (0, _useLatestCallback.default)(onHideAnimationFinished);
    var scale = theme.animation.scale;
    var opacity = position.interpolate({
      inputRange: [0, 0.1, 1],
      outputRange: [0, 1, 1]
    });
    React.useEffect(() => {
      if (visible) {
        // show
        _reactNative.Animated.timing(position, {
          duration: 250 * scale,
          toValue: 1,
          useNativeDriver: false
        }).start(showCallback);
      } else {
        // hide
        _reactNative.Animated.timing(position, {
          duration: 200 * scale,
          toValue: 0,
          useNativeDriver: false
        }).start(hideCallback);
      }
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [visible, position, scale]);
    var handleLayout = _ref2 => {
      var nativeEvent = _ref2.nativeEvent;
      var height = nativeEvent.layout.height;
      setLayout({
        height,
        measured: true
      });
    };

    // The banner animation has 2 parts:
    // 1. Blank spacer element which animates its height to move the content
    // 2. Actual banner which animates its translateY
    // In initial render, we position everything normally and measure the height of the banner
    // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute
    // We need this because we need to move the content below as if banner's height was being animated
    // However we can't animated banner's height directly as it'll also resize the content inside
    var height = _reactNative.Animated.multiply(position, layout.height);
    var translateY = _reactNative.Animated.multiply(_reactNative.Animated.add(position, -1), layout.height);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Surface.default, {
      ...rest,
      style: [!theme.isV3 && styles.elevation, {
        opacity
      }, style],
      theme: theme,
      ...(theme.isV3 && {
        elevation
      }),
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.wrapper, contentStyle],
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: {
            height
          }
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
          onLayout: handleLayout,
          style: [layout.measured || !visible ?
          // If we have measured banner's height or it's invisible,
          // Position it absolutely, the layout will be taken care of the spacer
          [styles.absolute, {
            transform: [{
              translateY
            }]
          }] :
          // Otherwise position it normally
          null, !layout.measured && !visible ?
          // If we haven't measured banner's height yet and it's invisible,
          // hide it with opacity: 0 so user doesn't see it
          styles.transparent : null],
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.content,
            children: [icon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.icon,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
                source: icon,
                size: 40
              })
            }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
              style: [styles.message, {
                color: theme.isV3 ? theme.colors.onSurface : theme.colors.text
              }],
              accessibilityLiveRegion: visible ? 'polite' : 'none',
              accessibilityRole: "alert",
              maxFontSizeMultiplier: maxFontSizeMultiplier,
              children: children
            })]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.actions,
            children: actions.map((_ref3, i) => {
              var label = _ref3.label,
                others = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
              return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.default, {
                compact: true,
                mode: "text",
                style: styles.button,
                textColor: theme.colors?.primary,
                theme: theme,
                ...others,
                children: label
              }, /* eslint-disable-line react/no-array-index-key */i);
            })
          })]
        })]
      })
    });
  };
  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      overflow: 'hidden',
      alignSelf: 'center',
      width: '100%',
      maxWidth: DEFAULT_MAX_WIDTH
    },
    absolute: {
      position: 'absolute',
      top: 0,
      width: '100%'
    },
    content: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      marginHorizontal: 8,
      marginTop: 16,
      marginBottom: 0
    },
    icon: {
      margin: 8
    },
    message: {
      flex: 1,
      margin: 8
    },
    actions: {
      flexDirection: 'row',
      justifyContent: 'flex-end',
      margin: 4
    },
    button: {
      margin: 4
    },
    elevation: {
      elevation: 1
    },
    transparent: {
      opacity: 0
    }
  });
  var _default = exports.default = Banner;
},602,[1,29,203,125,45,603,605,570,599,573,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function () {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });
  var __importStar = this && this.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault = this && this.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var React = __importStar(require(_dependencyMap[0]));
  var useIsomorphicLayoutEffect_1 = __importDefault(require(_dependencyMap[1]));
  /**
   * React hook which returns the latest callback without changing the reference.
   */
  // eslint-disable-next-line @typescript-eslint/ban-types
  function useLatestCallback(callback) {
    var ref = React.useRef(callback);
    var latestCallback = React.useRef(function latestCallback() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return ref.current.apply(this, args);
    }).current;
    (0, useIsomorphicLayoutEffect_1.default)(function () {
      ref.current = callback;
    });
    return latestCallback;
  }
  exports.default = useLatestCallback;
},603,[125,604]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var react_1 = require(_dependencyMap[0]);
  exports.default = react_1.useLayoutEffect;
},604,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _color = _interopRequireDefault(require(_dependencyMap[5]));
  var _utils = require(_dependencyMap[6]);
  var _theming = require(_dependencyMap[7]);
  var _forwardRef = require(_dependencyMap[8]);
  var _hasTouchHandler = _interopRequireDefault(require(_dependencyMap[9]));
  var _splitStyles3 = require(_dependencyMap[10]);
  var _ActivityIndicator = _interopRequireDefault(require(_dependencyMap[11]));
  var _Icon = _interopRequireDefault(require(_dependencyMap[12]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[13]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[14]));
  var _Text = _interopRequireDefault(require(_dependencyMap[15]));
  var _jsxRuntime = require(_dependencyMap[16]);
  var _excluded = ["disabled", "compact", "mode", "dark", "loading", "icon", "buttonColor", "textColor", "rippleColor", "children", "accessibilityLabel", "accessibilityHint", "accessibilityRole", "onPress", "onPressIn", "onPressOut", "onLongPress", "delayLongPress", "style", "theme", "uppercase", "contentStyle", "labelStyle", "testID", "accessible", "background", "maxFontSizeMultiplier", "touchableRef"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A button is component that the user can press to trigger an action.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Button } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Button icon="camera" mode="contained" onPress={() => console.log('Pressed')}>
   *     Press me
   *   </Button>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Button = (_ref, ref) => {
    var disabled = _ref.disabled,
      compact = _ref.compact,
      _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? 'text' : _ref$mode,
      dark = _ref.dark,
      loading = _ref.loading,
      icon = _ref.icon,
      customButtonColor = _ref.buttonColor,
      customTextColor = _ref.textColor,
      customRippleColor = _ref.rippleColor,
      children = _ref.children,
      accessibilityLabel = _ref.accessibilityLabel,
      accessibilityHint = _ref.accessibilityHint,
      _ref$accessibilityRol = _ref.accessibilityRole,
      accessibilityRole = _ref$accessibilityRol === undefined ? 'button' : _ref$accessibilityRol,
      onPress = _ref.onPress,
      onPressIn = _ref.onPressIn,
      onPressOut = _ref.onPressOut,
      onLongPress = _ref.onLongPress,
      delayLongPress = _ref.delayLongPress,
      style = _ref.style,
      themeOverrides = _ref.theme,
      uppercaseProp = _ref.uppercase,
      contentStyle = _ref.contentStyle,
      labelStyle = _ref.labelStyle,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'button' : _ref$testID,
      accessible = _ref.accessible,
      background = _ref.background,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
      touchableRef = _ref.touchableRef,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isMode = React.useCallback(modeToCompare => {
      return mode === modeToCompare;
    }, [mode]);
    var roundness = theme.roundness,
      isV3 = theme.isV3,
      animation = theme.animation;
    var uppercase = uppercaseProp ?? !theme.isV3;
    var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
      onPress,
      onPressIn,
      onPressOut,
      onLongPress
    });
    var isElevationEntitled = !disabled && (isV3 ? isMode('elevated') : isMode('contained'));
    var initialElevation = isV3 ? 1 : 2;
    var activeElevation = isV3 ? 2 : 8;
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(isElevationEntitled ? initialElevation : 0)),
      elevation = _React$useRef.current;
    React.useEffect(() => {
      // Workaround not to call setValue on Animated.Value, because it breaks styles.
      // https://github.com/callstack/react-native-paper/issues/4559
      _reactNative.Animated.timing(elevation, {
        toValue: isElevationEntitled ? initialElevation : 0,
        duration: 0,
        useNativeDriver: true
      });
    }, [isElevationEntitled, elevation, initialElevation]);
    var handlePressIn = e => {
      onPressIn?.(e);
      if (isV3 ? isMode('elevated') : isMode('contained')) {
        var scale = animation.scale;
        _reactNative.Animated.timing(elevation, {
          toValue: activeElevation,
          duration: 200 * scale,
          useNativeDriver: _reactNative.Platform.constants.reactNativeVersion.minor <= 72
        }).start();
      }
    };
    var handlePressOut = e => {
      onPressOut?.(e);
      if (isV3 ? isMode('elevated') : isMode('contained')) {
        var scale = animation.scale;
        _reactNative.Animated.timing(elevation, {
          toValue: initialElevation,
          duration: 150 * scale,
          useNativeDriver: _reactNative.Platform.constants.reactNativeVersion.minor <= 72
        }).start();
      }
    };
    var flattenedStyles = _reactNative.StyleSheet.flatten(style) || {};
    var _splitStyles = (0, _splitStyles3.splitStyles)(flattenedStyles, style => style.startsWith('border') && style.endsWith('Radius')),
      _splitStyles2 = (0, _slicedToArray2.default)(_splitStyles, 2),
      borderRadiusStyles = _splitStyles2[1];
    var borderRadius = (isV3 ? 5 : 1) * roundness;
    var iconSize = isV3 ? 18 : 16;
    var _getButtonColors = (0, _utils.getButtonColors)({
        customButtonColor,
        customTextColor,
        theme,
        mode,
        disabled,
        dark
      }),
      backgroundColor = _getButtonColors.backgroundColor,
      borderColor = _getButtonColors.borderColor,
      textColor = _getButtonColors.textColor,
      borderWidth = _getButtonColors.borderWidth;
    var rippleColor = customRippleColor || (0, _color.default)(textColor).alpha(0.12).rgb().string();
    var touchableStyle = {
      ...borderRadiusStyles,
      borderRadius: borderRadiusStyles.borderRadius ?? borderRadius
    };
    var buttonStyle = {
      backgroundColor,
      borderColor,
      borderWidth,
      ...touchableStyle
    };
    var _ref2 = _reactNative.StyleSheet.flatten(labelStyle) || {},
      customLabelColor = _ref2.color,
      customLabelSize = _ref2.fontSize;
    var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
    var textStyle = {
      color: textColor,
      ...font
    };
    var iconStyle = _reactNative.StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse' ? [styles.iconReverse, isV3 && styles[`md3IconReverse${compact ? 'Compact' : ''}`], isV3 && isMode('text') && styles[`md3IconReverseTextMode${compact ? 'Compact' : ''}`]] : [styles.icon, isV3 && styles[`md3Icon${compact ? 'Compact' : ''}`], isV3 && isMode('text') && styles[`md3IconTextMode${compact ? 'Compact' : ''}`]];
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Surface.default, {
      ...rest,
      ref: ref,
      testID: `${testID}-container`,
      style: [styles.button, compact && styles.compact, buttonStyle, style, !isV3 && !disabled && {
        elevation
      }],
      ...(isV3 && {
        elevation: elevation
      }),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
        borderless: true,
        background: background,
        onPress: onPress,
        onLongPress: onLongPress,
        onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,
        onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,
        delayLongPress: delayLongPress,
        accessibilityLabel: accessibilityLabel,
        accessibilityHint: accessibilityHint,
        accessibilityRole: accessibilityRole,
        accessibilityState: {
          disabled
        },
        accessible: accessible,
        disabled: disabled,
        rippleColor: rippleColor,
        style: touchableStyle,
        testID: testID,
        theme: theme,
        ref: touchableRef,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.content, contentStyle],
          children: [icon && loading !== true ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: iconStyle,
            testID: `${testID}-icon-container`,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
              source: icon,
              size: customLabelSize ?? iconSize,
              color: typeof customLabelColor === 'string' ? customLabelColor : textColor
            })
          }) : null, loading ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ActivityIndicator.default, {
            size: customLabelSize ?? iconSize,
            color: typeof customLabelColor === 'string' ? customLabelColor : textColor,
            style: iconStyle
          }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
            variant: "labelLarge",
            selectable: false,
            numberOfLines: 1,
            testID: `${testID}-text`,
            style: [styles.label, !isV3 && styles.md2Label, isV3 && (isMode('text') ? icon || loading ? styles.md3LabelTextAddons : styles.md3LabelText : styles.md3Label), compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, labelStyle],
            maxFontSizeMultiplier: maxFontSizeMultiplier,
            children: children
          })]
        })
      })
    });
  };
  var styles = _reactNative.StyleSheet.create({
    button: {
      minWidth: 64,
      borderStyle: 'solid'
    },
    compact: {
      minWidth: 'auto'
    },
    content: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center'
    },
    icon: {
      marginLeft: 12,
      marginRight: -4
    },
    iconReverse: {
      marginRight: 12,
      marginLeft: -4
    },
    /* eslint-disable react-native/no-unused-styles */
    md3Icon: {
      marginLeft: 16,
      marginRight: -16
    },
    md3IconCompact: {
      marginLeft: 8,
      marginRight: 0
    },
    md3IconReverse: {
      marginLeft: -16,
      marginRight: 16
    },
    md3IconReverseCompact: {
      marginLeft: 0,
      marginRight: 8
    },
    md3IconTextMode: {
      marginLeft: 12,
      marginRight: -8
    },
    md3IconTextModeCompact: {
      marginLeft: 6,
      marginRight: 0
    },
    md3IconReverseTextMode: {
      marginLeft: -8,
      marginRight: 12
    },
    md3IconReverseTextModeCompact: {
      marginLeft: 0,
      marginRight: 6
    },
    /* eslint-enable react-native/no-unused-styles */
    label: {
      textAlign: 'center',
      marginVertical: 9,
      marginHorizontal: 16
    },
    md2Label: {
      letterSpacing: 1
    },
    compactLabel: {
      marginHorizontal: 8
    },
    uppercaseLabel: {
      textTransform: 'uppercase'
    },
    md3Label: {
      marginVertical: 10,
      marginHorizontal: 24
    },
    md3LabelText: {
      marginHorizontal: 12
    },
    md3LabelTextAddons: {
      marginHorizontal: 16
    }
  });
  var _default = exports.default = (0, _forwardRef.forwardRef)(Button);
},605,[1,29,203,125,45,515,606,506,577,583,600,601,570,599,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getButtonColors = undefined;
  var _reactNative = require(_dependencyMap[1]);
  var _color = _interopRequireDefault(require(_dependencyMap[2]));
  var _colors = require(_dependencyMap[3]);
  var isDark = _ref => {
    var dark = _ref.dark,
      backgroundColor = _ref.backgroundColor;
    if (typeof dark === 'boolean') {
      return dark;
    }
    if (backgroundColor === 'transparent') {
      return false;
    }
    if (backgroundColor !== 'transparent') {
      return !(0, _color.default)(backgroundColor).isLight();
    }
    return false;
  };
  var getButtonBackgroundColor = _ref2 => {
    var isMode = _ref2.isMode,
      theme = _ref2.theme,
      disabled = _ref2.disabled,
      customButtonColor = _ref2.customButtonColor;
    if (customButtonColor && !disabled) {
      return customButtonColor;
    }
    if (theme.isV3) {
      if (disabled) {
        if (isMode('outlined') || isMode('text')) {
          return 'transparent';
        }
        return theme.colors.surfaceDisabled;
      }
      if (isMode('elevated')) {
        return theme.colors.elevation.level1;
      }
      if (isMode('contained')) {
        return theme.colors.primary;
      }
      if (isMode('contained-tonal')) {
        return theme.colors.secondaryContainer;
      }
    }
    if (isMode('contained')) {
      if (disabled) {
        return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
      }
      return theme.colors.primary;
    }
    return 'transparent';
  };
  var getButtonTextColor = _ref3 => {
    var isMode = _ref3.isMode,
      theme = _ref3.theme,
      disabled = _ref3.disabled,
      customTextColor = _ref3.customTextColor,
      backgroundColor = _ref3.backgroundColor,
      dark = _ref3.dark;
    if (customTextColor && !disabled) {
      return customTextColor;
    }
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      }
      if (typeof dark === 'boolean') {
        if (isMode('contained') || isMode('contained-tonal') || isMode('elevated')) {
          return isDark({
            dark,
            backgroundColor
          }) ? _colors.white : _colors.black;
        }
      }
      if (isMode('outlined') || isMode('text') || isMode('elevated')) {
        return theme.colors.primary;
      }
      if (isMode('contained')) {
        return theme.colors.onPrimary;
      }
      if (isMode('contained-tonal')) {
        return theme.colors.onSecondaryContainer;
      }
    }
    if (disabled) {
      return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
    }
    if (isMode('contained')) {
      return isDark({
        dark,
        backgroundColor
      }) ? _colors.white : _colors.black;
    }
    return theme.colors.primary;
  };
  var getButtonBorderColor = _ref4 => {
    var isMode = _ref4.isMode,
      disabled = _ref4.disabled,
      theme = _ref4.theme;
    if (theme.isV3) {
      if (disabled && isMode('outlined')) {
        return theme.colors.surfaceDisabled;
      }
      if (isMode('outlined')) {
        return theme.colors.outline;
      }
    }
    if (isMode('outlined')) {
      return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
    }
    return 'transparent';
  };
  var getButtonBorderWidth = _ref5 => {
    var isMode = _ref5.isMode,
      theme = _ref5.theme;
    if (theme.isV3) {
      if (isMode('outlined')) {
        return 1;
      }
    }
    if (isMode('outlined')) {
      return _reactNative.StyleSheet.hairlineWidth;
    }
    return 0;
  };
  var getButtonColors = _ref6 => {
    var theme = _ref6.theme,
      mode = _ref6.mode,
      customButtonColor = _ref6.customButtonColor,
      customTextColor = _ref6.customTextColor,
      disabled = _ref6.disabled,
      dark = _ref6.dark;
    var isMode = modeToCompare => {
      return mode === modeToCompare;
    };
    var backgroundColor = getButtonBackgroundColor({
      isMode,
      theme,
      disabled,
      customButtonColor
    });
    var textColor = getButtonTextColor({
      isMode,
      theme,
      disabled,
      customTextColor,
      backgroundColor,
      dark
    });
    var borderColor = getButtonBorderColor({
      isMode,
      theme,
      disabled
    });
    var borderWidth = getButtonBorderWidth({
      isMode,
      theme
    });
    return {
      backgroundColor,
      borderColor,
      textColor,
      borderWidth
    };
  };
  exports.getButtonColors = getButtonColors;
},606,[1,45,515,529]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _useLatestCallback = _interopRequireDefault(require(_dependencyMap[5]));
  var _BottomNavigationBar = _interopRequireDefault(require(_dependencyMap[6]));
  var _BottomNavigationRouteScreen = _interopRequireDefault(require(_dependencyMap[7]));
  var _theming = require(_dependencyMap[8]);
  var _useAnimatedValueArray = _interopRequireDefault(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  var _excluded = ["component"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var FAR_FAR_AWAY = 9999;
  var SceneComponent = /*#__PURE__*/React.memo(_ref => {
    var component = _ref.component,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return /*#__PURE__*/React.createElement(component, rest);
  });

  /**
   * BottomNavigation provides quick navigation between top-level views of an app with a bottom navigation bar.
   * It is primarily designed for use on mobile. If you want to use the navigation bar only see [`BottomNavigation.Bar`](BottomNavigationBar).
   *
   * By default BottomNavigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.
   * See [Dark Theme](https://callstack.github.io/react-native-paper/docs/guides/theming#dark-theme) for more information.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { BottomNavigation, Text } from 'react-native-paper';
   *
   * const MusicRoute = () => <Text>Music</Text>;
   *
   * const AlbumsRoute = () => <Text>Albums</Text>;
   *
   * const RecentsRoute = () => <Text>Recents</Text>;
   *
   * const NotificationsRoute = () => <Text>Notifications</Text>;
   *
   * const MyComponent = () => {
   *   const [index, setIndex] = React.useState(0);
   *   const [routes] = React.useState([
   *     { key: 'music', title: 'Favorites', focusedIcon: 'heart', unfocusedIcon: 'heart-outline'},
   *     { key: 'albums', title: 'Albums', focusedIcon: 'album' },
   *     { key: 'recents', title: 'Recents', focusedIcon: 'history' },
   *     { key: 'notifications', title: 'Notifications', focusedIcon: 'bell', unfocusedIcon: 'bell-outline' },
   *   ]);
   *
   *   const renderScene = BottomNavigation.SceneMap({
   *     music: MusicRoute,
   *     albums: AlbumsRoute,
   *     recents: RecentsRoute,
   *     notifications: NotificationsRoute,
   *   });
   *
   *   return (
   *     <BottomNavigation
   *       navigationState={{ index, routes }}
   *       onIndexChange={setIndex}
   *       renderScene={renderScene}
   *     />
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var BottomNavigation = _ref2 => {
    var navigationState = _ref2.navigationState,
      renderScene = _ref2.renderScene,
      renderIcon = _ref2.renderIcon,
      renderLabel = _ref2.renderLabel,
      renderTouchable = _ref2.renderTouchable,
      getLabelText = _ref2.getLabelText,
      getBadge = _ref2.getBadge,
      getColor = _ref2.getColor,
      getAccessibilityLabel = _ref2.getAccessibilityLabel,
      getTestID = _ref2.getTestID,
      activeColor = _ref2.activeColor,
      inactiveColor = _ref2.inactiveColor,
      _ref2$keyboardHidesNa = _ref2.keyboardHidesNavigationBar,
      keyboardHidesNavigationBar = _ref2$keyboardHidesNa === undefined ? false : _ref2$keyboardHidesNa,
      barStyle = _ref2.barStyle,
      _ref2$labeled = _ref2.labeled,
      labeled = _ref2$labeled === undefined ? true : _ref2$labeled,
      style = _ref2.style,
      activeIndicatorStyle = _ref2.activeIndicatorStyle,
      _ref2$sceneAnimationE = _ref2.sceneAnimationEnabled,
      sceneAnimationEnabled = _ref2$sceneAnimationE === undefined ? false : _ref2$sceneAnimationE,
      _ref2$sceneAnimationT = _ref2.sceneAnimationType,
      sceneAnimationType = _ref2$sceneAnimationT === undefined ? 'opacity' : _ref2$sceneAnimationT,
      sceneAnimationEasing = _ref2.sceneAnimationEasing,
      onTabPress = _ref2.onTabPress,
      onTabLongPress = _ref2.onTabLongPress,
      onIndexChange = _ref2.onIndexChange,
      shiftingProp = _ref2.shifting,
      safeAreaInsets = _ref2.safeAreaInsets,
      _ref2$labelMaxFontSiz = _ref2.labelMaxFontSizeMultiplier,
      labelMaxFontSizeMultiplier = _ref2$labelMaxFontSiz === undefined ? 1 : _ref2$labelMaxFontSiz,
      compactProp = _ref2.compact,
      _ref2$testID = _ref2.testID,
      testID = _ref2$testID === undefined ? 'bottom-navigation' : _ref2$testID,
      themeOverrides = _ref2.theme,
      _ref2$getLazy = _ref2.getLazy,
      getLazy = _ref2$getLazy === undefined ? _ref3 => {
        var route = _ref3.route;
        return route.lazy;
      } : _ref2$getLazy;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var scale = theme.animation.scale;
    var compact = compactProp ?? !theme.isV3;
    var shifting = shiftingProp ?? (theme.isV3 ? false : navigationState.routes.length > 3);
    if (shifting && navigationState.routes.length < 2) {
      shifting = false;
      console.warn('BottomNavigation needs at least 2 tabs to run shifting animation');
    }
    var focusedKey = navigationState.routes[navigationState.index].key;

    /**
     * Active state of individual tab item positions:
     * -1 if they're before the active tab, 0 if they're active, 1 if they're after the active tab
     */
    var tabsPositionAnims = (0, _useAnimatedValueArray.default)(navigationState.routes.map((_, i) => i === navigationState.index ? 0 : i >= navigationState.index ? 1 : -1));

    /**
     * The top offset for each tab item to position it offscreen.
     * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.
     * We use animated values for this to prevent unnecessary re-renders.
     */
    var offsetsAnims = (0, _useAnimatedValueArray.default)(navigationState.routes.map(
    // offscreen === 1, normal === 0
    (_, i) => i === navigationState.index ? 0 : 1));

    /**
     * List of loaded tabs, tabs will be loaded when navigated to.
     */
    var _React$useState = React.useState([focusedKey]),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      loaded = _React$useState2[0],
      setLoaded = _React$useState2[1];
    if (!loaded.includes(focusedKey)) {
      // Set the current tab to be loaded if it was not loaded before
      setLoaded(loaded => [...loaded, focusedKey]);
    }
    var animateToIndex = React.useCallback(index => {
      _reactNative.Animated.parallel([...navigationState.routes.map((_, i) => _reactNative.Animated.timing(tabsPositionAnims[i], {
        toValue: i === index ? 0 : i >= index ? 1 : -1,
        duration: theme.isV3 || shifting ? 150 * scale : 0,
        useNativeDriver: true,
        easing: sceneAnimationEasing
      }))]).start(_ref4 => {
        var finished = _ref4.finished;
        if (finished) {
          // Position all inactive screens offscreen to save memory usage
          // Only do it when animation has finished to avoid glitches mid-transition if switching fast
          offsetsAnims.forEach((offset, i) => {
            if (i === index) {
              offset.setValue(0);
            } else {
              offset.setValue(1);
            }
          });
        }
      });
    }, [shifting, navigationState.routes, offsetsAnims, scale, tabsPositionAnims, sceneAnimationEasing, theme]);
    React.useEffect(() => {
      // Workaround for native animated bug in react-native@^0.57
      // Context: https://github.com/callstack/react-native-paper/pull/637
      animateToIndex(navigationState.index);
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var prevNavigationState = React.useRef();
    React.useEffect(() => {
      // Reset offsets of previous and current tabs before animation
      offsetsAnims.forEach((offset, i) => {
        if (i === navigationState.index || i === prevNavigationState.current?.index) {
          offset.setValue(0);
        }
      });
      animateToIndex(navigationState.index);
    }, [navigationState.index, animateToIndex, offsetsAnims]);
    var handleTabPress = (0, _useLatestCallback.default)(event => {
      onTabPress?.(event);
      if (event.defaultPrevented) {
        return;
      }
      var index = navigationState.routes.findIndex(route => event.route.key === route.key);
      if (index !== navigationState.index) {
        prevNavigationState.current = navigationState;
        onIndexChange(index);
      }
    });
    var jumpTo = (0, _useLatestCallback.default)(key => {
      var index = navigationState.routes.findIndex(route => route.key === key);
      prevNavigationState.current = navigationState;
      onIndexChange(index);
    });
    var routes = navigationState.routes;
    var colors = theme.colors;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.container, style],
      testID: testID,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.content, {
          backgroundColor: colors?.background
        }],
        children: routes.map((route, index) => {
          if (getLazy({
            route
          }) !== false && !loaded.includes(route.key)) {
            // Don't render a screen if we've never navigated to it
            return null;
          }
          var focused = navigationState.index === index;
          var previouslyFocused = prevNavigationState.current?.index === index;
          var countAlphaOffscreen = sceneAnimationEnabled && (focused || previouslyFocused);
          var renderToHardwareTextureAndroid = sceneAnimationEnabled && focused;
          var opacity = sceneAnimationEnabled ? tabsPositionAnims[index].interpolate({
            inputRange: [-1, 0, 1],
            outputRange: [0, 1, 0]
          }) : focused ? 1 : 0;
          var offsetTarget = focused ? 0 : FAR_FAR_AWAY;
          var top = sceneAnimationEnabled ? offsetsAnims[index].interpolate({
            inputRange: [0, 1],
            outputRange: [0, offsetTarget]
          }) : offsetTarget;
          var left = sceneAnimationType === 'shifting' ? tabsPositionAnims[index].interpolate({
            inputRange: [-1, 0, 1],
            outputRange: [-50, 0, 50]
          }) : 0;
          var zIndex = focused ? 1 : 0;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_BottomNavigationRouteScreen.default, {
            pointerEvents: focused ? 'auto' : 'none',
            accessibilityElementsHidden: !focused,
            importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
            index: index,
            visibility: opacity,
            style: [_reactNative.StyleSheet.absoluteFill, {
              zIndex
            }],
            collapsable: false,
            removeClippedSubviews:
            // On iOS, set removeClippedSubviews to true only when not focused
            // This is an workaround for a bug where the clipped view never re-appears
            navigationState.index !== index,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
              ...false,
              renderToHardwareTextureAndroid: renderToHardwareTextureAndroid,
              style: [styles.content, {
                opacity,
                transform: [{
                  translateX: left
                }, {
                  translateY: top
                }]
              }],
              children: renderScene({
                route,
                jumpTo
              })
            })
          }, route.key);
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_BottomNavigationBar.default, {
        navigationState: navigationState,
        renderIcon: renderIcon,
        renderLabel: renderLabel,
        renderTouchable: renderTouchable,
        getLabelText: getLabelText,
        getBadge: getBadge,
        getColor: getColor,
        getAccessibilityLabel: getAccessibilityLabel,
        getTestID: getTestID,
        activeColor: activeColor,
        inactiveColor: inactiveColor,
        keyboardHidesNavigationBar: keyboardHidesNavigationBar,
        style: barStyle,
        activeIndicatorStyle: activeIndicatorStyle,
        labeled: labeled,
        animationEasing: sceneAnimationEasing,
        onTabPress: handleTabPress,
        onTabLongPress: onTabLongPress,
        shifting: shifting,
        safeAreaInsets: safeAreaInsets,
        labelMaxFontSizeMultiplier: labelMaxFontSizeMultiplier,
        compact: compact,
        testID: `${testID}-bar`,
        theme: theme
      })]
    });
  };

  /**
   * Function which takes a map of route keys to components.
   * Pure components are used to minimize re-rendering of the pages.
   * This drastically improves the animation performance.
   */
  BottomNavigation.SceneMap = scenes => {
    return _ref5 => {
      var route = _ref5.route,
        jumpTo = _ref5.jumpTo;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(SceneComponent, {
        component: scenes[route.key ? route.key : ''],
        route: route,
        jumpTo: jumpTo
      }, route.key);
    };
  };

  // @component ./BottomNavigationBar.tsx
  BottomNavigation.Bar = _BottomNavigationBar.default;
  var _default = exports.default = BottomNavigation;
  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    content: {
      flex: 1
    }
  });
},607,[1,29,203,125,45,603,608,615,506,612,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _color = _interopRequireDefault(require(_dependencyMap[5]));
  var _reactNativeSafeAreaContext = require(_dependencyMap[6]);
  var _utils = require(_dependencyMap[7]);
  var _theming = require(_dependencyMap[8]);
  var _overlay = _interopRequireDefault(require(_dependencyMap[9]));
  var _colors = require(_dependencyMap[10]);
  var _useAnimatedValue = _interopRequireDefault(require(_dependencyMap[11]));
  var _useAnimatedValueArray = _interopRequireDefault(require(_dependencyMap[12]));
  var _useIsKeyboardShown = _interopRequireDefault(require(_dependencyMap[13]));
  var _useLayout3 = _interopRequireDefault(require(_dependencyMap[14]));
  var _Badge = _interopRequireDefault(require(_dependencyMap[15]));
  var _Icon = _interopRequireDefault(require(_dependencyMap[16]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[17]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[18]));
  var _Text = _interopRequireDefault(require(_dependencyMap[19]));
  var _jsxRuntime = require(_dependencyMap[20]);
  var _excluded = ["route", "style", "children", "borderless", "centered", "rippleColor"],
    _excluded2 = ["key"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation
  var MIN_TAB_WIDTH = 96;
  var MAX_TAB_WIDTH = 168;
  var BAR_HEIGHT = 56;
  var OUTLINE_WIDTH = 64;
  var Touchable = _ref => {
    var _0 = _ref.route,
      style = _ref.style,
      children = _ref.children,
      borderless = _ref.borderless,
      centered = _ref.centered,
      rippleColor = _ref.rippleColor,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return _TouchableRipple.default.supported ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
      ...rest,
      disabled: rest.disabled || undefined,
      borderless: borderless,
      centered: centered,
      rippleColor: rippleColor,
      style: style,
      children: children
    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Pressable, {
      style: style,
      ...rest,
      children: children
    });
  };

  /**
   * A navigation bar which can easily be integrated with [React Navigation's Bottom Tabs Navigator](https://reactnavigation.org/docs/bottom-tab-navigator/).
   *
   * ## Usage
   * ```js
   * import React from 'react';
   * import { View, StyleSheet } from 'react-native';
   *
   * import { CommonActions } from '@react-navigation/native';
   * import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
   * import { Text, BottomNavigation } from 'react-native-paper';
   * import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
   *
   * const Tab = createBottomTabNavigator();
   *
   * export default function MyComponent() {
   *   return (
   *     <Tab.Navigator
   *       screenOptions={{
   *         headerShown: false,
   *       }}
   *       tabBar={({ navigation, state, descriptors, insets }) => (
   *         <BottomNavigation.Bar
   *           navigationState={state}
   *          safeAreaInsets={insets}
   *           onTabPress={({ route, preventDefault }) => {
   *             const event = navigation.emit({
   *               type: 'tabPress',
   *               target: route.key,
   *               canPreventDefault: true,
   *             });
   *
   *             if (event.defaultPrevented) {
   *               preventDefault();
   *             } else {
   *              navigation.dispatch({
   *                 ...CommonActions.navigate(route.name, route.params),
   *                 target: state.key,
   *               });
   *             }
   *           }}
   *           renderIcon={({ route, focused, color }) => {
   *             const { options } = descriptors[route.key];
   *             if (options.tabBarIcon) {
   *               return options.tabBarIcon({ focused, color, size: 24 });
   *             }
   *
   *             return null;
   *           }}
   *           getLabelText={({ route }) => {
   *             const { options } = descriptors[route.key];
   *             const label =
   *               options.tabBarLabel !== undefined
   *                 ? options.tabBarLabel
   *                 : options.title !== undefined
   *                 ? options.title
   *                 : route.title;
   *
   *             return label;
   *           }}
   *         />
   *       )}
   *     >
   *       <Tab.Screen
   *         name="Home"
   *         component={HomeScreen}
   *         options={{
   *           tabBarLabel: 'Home',
   *           tabBarIcon: ({ color, size }) => {
   *             return <Icon name="home" size={size} color={color} />;
   *           },
   *         }}
   *       />
   *       <Tab.Screen
   *         name="Settings"
   *         component={SettingsScreen}
   *         options={{
   *           tabBarLabel: 'Settings',
   *           tabBarIcon: ({ color, size }) => {
   *             return <Icon name="cog" size={size} color={color} />;
   *           },
   *         }}
   *       />
   *     </Tab.Navigator>
   *   );
   * }
   *
   * function HomeScreen() {
   *   return (
   *     <View style={styles.container}>
   *       <Text variant="headlineMedium">Home!</Text>
   *     </View>
   *   );
   * }
   *
   * function SettingsScreen() {
   *   return (
   *     <View style={styles.container}>
   *       <Text variant="headlineMedium">Settings!</Text>
   *     </View>
   *   );
   * }
   *
   * const styles = StyleSheet.create({
   *   container: {
   *     flex: 1,
   *     justifyContent: 'center',
   *     alignItems: 'center',
   *   },
   * });
   * ```
   */
  var BottomNavigationBar = _ref2 => {
    var navigationState = _ref2.navigationState,
      renderIcon = _ref2.renderIcon,
      renderLabel = _ref2.renderLabel,
      _ref2$renderTouchable = _ref2.renderTouchable,
      renderTouchable = _ref2$renderTouchable === undefined ? _ref3 => {
        var key = _ref3.key,
          props = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Touchable, {
          ...props
        }, key);
      } : _ref2$renderTouchable,
      _ref2$getLabelText = _ref2.getLabelText,
      getLabelText = _ref2$getLabelText === undefined ? _ref4 => {
        var route = _ref4.route;
        return route.title;
      } : _ref2$getLabelText,
      _ref2$getBadge = _ref2.getBadge,
      getBadge = _ref2$getBadge === undefined ? _ref5 => {
        var route = _ref5.route;
        return route.badge;
      } : _ref2$getBadge,
      _ref2$getColor = _ref2.getColor,
      getColor = _ref2$getColor === undefined ? _ref6 => {
        var route = _ref6.route;
        return route.color;
      } : _ref2$getColor,
      _ref2$getAccessibilit = _ref2.getAccessibilityLabel,
      getAccessibilityLabel = _ref2$getAccessibilit === undefined ? _ref7 => {
        var route = _ref7.route;
        return route.accessibilityLabel;
      } : _ref2$getAccessibilit,
      _ref2$getTestID = _ref2.getTestID,
      getTestID = _ref2$getTestID === undefined ? _ref8 => {
        var route = _ref8.route;
        return route.testID;
      } : _ref2$getTestID,
      activeColor = _ref2.activeColor,
      inactiveColor = _ref2.inactiveColor,
      _ref2$keyboardHidesNa = _ref2.keyboardHidesNavigationBar,
      keyboardHidesNavigationBar = _ref2$keyboardHidesNa === undefined ? false : _ref2$keyboardHidesNa,
      style = _ref2.style,
      activeIndicatorStyle = _ref2.activeIndicatorStyle,
      _ref2$labeled = _ref2.labeled,
      labeled = _ref2$labeled === undefined ? true : _ref2$labeled,
      animationEasing = _ref2.animationEasing,
      onTabPress = _ref2.onTabPress,
      onTabLongPress = _ref2.onTabLongPress,
      shiftingProp = _ref2.shifting,
      safeAreaInsets = _ref2.safeAreaInsets,
      _ref2$labelMaxFontSiz = _ref2.labelMaxFontSizeMultiplier,
      labelMaxFontSizeMultiplier = _ref2$labelMaxFontSiz === undefined ? 1 : _ref2$labelMaxFontSiz,
      compactProp = _ref2.compact,
      _ref2$testID = _ref2.testID,
      testID = _ref2$testID === undefined ? 'bottom-navigation-bar' : _ref2$testID,
      themeOverrides = _ref2.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _useSafeAreaInsets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)(),
      bottom = _useSafeAreaInsets.bottom,
      left = _useSafeAreaInsets.left,
      right = _useSafeAreaInsets.right;
    var scale = theme.animation.scale;
    var compact = compactProp ?? !theme.isV3;
    var shifting = shiftingProp ?? (theme.isV3 ? false : navigationState.routes.length > 3);
    if (shifting && navigationState.routes.length < 2) {
      shifting = false;
      console.warn('BottomNavigation.Bar needs at least 2 tabs to run shifting animation');
    }

    /**
     * Visibility of the navigation bar, visible state is 1 and invisible is 0.
     */
    var visibleAnim = (0, _useAnimatedValue.default)(1);

    /**
     * Active state of individual tab items, active state is 1 and inactive state is 0.
     */
    var tabsAnims = (0, _useAnimatedValueArray.default)(navigationState.routes.map(
    // focused === 1, unfocused === 0
    (_, i) => i === navigationState.index ? 1 : 0));

    /**
     * Index of the currently active tab. Used for setting the background color.
     * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors?.
     */
    var indexAnim = (0, _useAnimatedValue.default)(navigationState.index);

    /**
     * Animation for the background color ripple, used to determine it's scale and opacity.
     */
    var rippleAnim = (0, _useAnimatedValue.default)(MIN_RIPPLE_SCALE);

    /**
     * Layout of the navigation bar. The width is used to determine the size and position of the ripple.
     */
    var _useLayout = (0, _useLayout3.default)(),
      _useLayout2 = (0, _slicedToArray2.default)(_useLayout, 2),
      layout = _useLayout2[0],
      onLayout = _useLayout2[1];

    /**
     * Track whether the keyboard is visible to show and hide the navigation bar.
     */
    var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      keyboardVisible = _React$useState2[0],
      setKeyboardVisible = _React$useState2[1];
    var handleKeyboardShow = React.useCallback(() => {
      setKeyboardVisible(true);
      _reactNative.Animated.timing(visibleAnim, {
        toValue: 0,
        duration: 150 * scale,
        useNativeDriver: true
      }).start();
    }, [scale, visibleAnim]);
    var handleKeyboardHide = React.useCallback(() => {
      _reactNative.Animated.timing(visibleAnim, {
        toValue: 1,
        duration: 100 * scale,
        useNativeDriver: true
      }).start(() => {
        setKeyboardVisible(false);
      });
    }, [scale, visibleAnim]);
    var animateToIndex = React.useCallback(index => {
      // Reset the ripple to avoid glitch if it's currently animating
      rippleAnim.setValue(MIN_RIPPLE_SCALE);
      _reactNative.Animated.parallel([_reactNative.Animated.timing(rippleAnim, {
        toValue: 1,
        duration: theme.isV3 || shifting ? 400 * scale : 0,
        useNativeDriver: true
      }), ...navigationState.routes.map((_, i) => _reactNative.Animated.timing(tabsAnims[i], {
        toValue: i === index ? 1 : 0,
        duration: theme.isV3 || shifting ? 150 * scale : 0,
        useNativeDriver: true,
        easing: animationEasing
      }))]).start(() => {
        // Workaround a bug in native animations where this is reset after first animation
        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));

        // Update the index to change bar's background color and then hide the ripple
        indexAnim.setValue(index);
        rippleAnim.setValue(MIN_RIPPLE_SCALE);
      });
    }, [rippleAnim, theme.isV3, shifting, scale, navigationState.routes, tabsAnims, animationEasing, indexAnim]);
    React.useEffect(() => {
      // Workaround for native animated bug in react-native@^0.57
      // Context: https://github.com/callstack/react-native-paper/pull/637
      animateToIndex(navigationState.index);
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    (0, _useIsKeyboardShown.default)({
      onShow: handleKeyboardShow,
      onHide: handleKeyboardHide
    });
    React.useEffect(() => {
      animateToIndex(navigationState.index);
    }, [navigationState.index, animateToIndex]);
    var eventForIndex = index => {
      var event = {
        route: navigationState.routes[index],
        defaultPrevented: false,
        preventDefault: () => {
          event.defaultPrevented = true;
        }
      };
      return event;
    };
    var routes = navigationState.routes;
    var colors = theme.colors,
      isDarkTheme = theme.dark,
      mode = theme.mode,
      isV3 = theme.isV3;
    var _ref9 = _reactNative.StyleSheet.flatten(style) || {},
      customBackground = _ref9.backgroundColor,
      _ref9$elevation = _ref9.elevation,
      elevation = _ref9$elevation === undefined ? 4 : _ref9$elevation;
    var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors?.surface) : colors?.primary;
    var v2BackgroundColorInterpolation = shifting ? indexAnim.interpolate({
      inputRange: routes.map((_, i) => i),
      // FIXME: does outputRange support ColorValue or just strings?
      // @ts-expect-error
      outputRange: routes.map(route => getColor({
        route
      }) || approxBackgroundColor)
    }) : approxBackgroundColor;
    var backgroundColor = isV3 ? customBackground || theme.colors.elevation.level2 : shifting ? v2BackgroundColorInterpolation : approxBackgroundColor;
    var isDark = typeof approxBackgroundColor === 'string' ? !(0, _color.default)(approxBackgroundColor).isLight() : true;
    var textColor = isDark ? _colors.white : _colors.black;
    var activeTintColor = (0, _utils.getActiveTintColor)({
      activeColor,
      defaultColor: textColor,
      theme
    });
    var inactiveTintColor = (0, _utils.getInactiveTintColor)({
      inactiveColor,
      defaultColor: textColor,
      theme
    });
    var touchColor = (0, _color.default)(activeTintColor).alpha(0.12).rgb().string();
    var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;
    var maxTabBarWidth = maxTabWidth * routes.length;
    var rippleSize = layout.width / 4;
    var insets = {
      left: safeAreaInsets?.left ?? left,
      right: safeAreaInsets?.right ?? right,
      bottom: safeAreaInsets?.bottom ?? bottom
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Surface.default, {
      ...(theme.isV3 && {
        elevation: 0
      }),
      testID: testID,
      style: [!theme.isV3 && styles.elevation, styles.bar, keyboardHidesNavigationBar // eslint-disable-next-line react-native/no-inline-styles
      ? {
        // When the keyboard is shown, slide down the navigation bar
        transform: [{
          translateY: visibleAnim.interpolate({
            inputRange: [0, 1],
            outputRange: [layout.height, 0]
          })
        }],
        // Absolutely position the navigation bar so that the content is below it
        // This is needed to avoid gap at bottom when the navigation bar is hidden
        position: keyboardVisible ? 'absolute' : undefined
      } : null, style],
      pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboardVisible ? 'none' : 'auto' : 'none',
      onLayout: onLayout,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [styles.barContent, {
          backgroundColor
        }],
        testID: `${testID}-content`,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.items, {
            marginBottom: insets.bottom,
            marginHorizontal: Math.max(insets.left, insets.right)
          }, compact && {
            maxWidth: maxTabBarWidth
          }],
          accessibilityRole: 'tablist',
          testID: `${testID}-content-wrapper`,
          children: [shifting && !isV3 ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            pointerEvents: "none",
            style: [styles.ripple, {
              // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.
              // We need to move it from the top to center of the navigation bar and from the left to the active tab.
              top: (BAR_HEIGHT - rippleSize) / 2,
              left: Math.min(layout.width, maxTabBarWidth) / routes.length * (navigationState.index + 0.5) - rippleSize / 2,
              height: rippleSize,
              width: rippleSize,
              borderRadius: rippleSize / 2,
              backgroundColor: getColor({
                route: routes[navigationState.index]
              }),
              transform: [{
                // Scale to twice the size  to ensure it covers the whole navigation bar
                scale: rippleAnim.interpolate({
                  inputRange: [0, 1],
                  outputRange: [0, 8]
                })
              }],
              opacity: rippleAnim.interpolate({
                inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],
                outputRange: [0, 0, 1, 1]
              })
            }],
            testID: `${testID}-content-ripple`
          }) : null, routes.map((route, index) => {
            var focused = navigationState.index === index;
            var active = tabsAnims[index];

            // Scale the label up
            var scale = labeled && shifting ? active.interpolate({
              inputRange: [0, 1],
              outputRange: [0.5, 1]
            }) : 1;

            // Move down the icon to account for no-label in shifting and smaller label in non-shifting.
            var translateY = labeled ? shifting ? active.interpolate({
              inputRange: [0, 1],
              outputRange: [7, 0]
            }) : 0 : 7;

            // We render the active icon and label on top of inactive ones and cross-fade them on change.
            // This trick gives the illusion that we are animating between active and inactive colors.
            // This is to ensure that we can use native driver, as colors cannot be animated with native driver.
            var activeOpacity = active;
            var inactiveOpacity = active.interpolate({
              inputRange: [0, 1],
              outputRange: [1, 0]
            });
            var v3ActiveOpacity = focused ? 1 : 0;
            var v3InactiveOpacity = shifting ? inactiveOpacity : focused ? 0 : 1;

            // Scale horizontally the outline pill
            var outlineScale = focused ? active.interpolate({
              inputRange: [0, 1],
              outputRange: [0.5, 1]
            }) : 0;
            var badge = getBadge({
              route
            });
            var activeLabelColor = (0, _utils.getLabelColor)({
              tintColor: activeTintColor,
              hasColor: Boolean(activeColor),
              focused,
              defaultColor: textColor,
              theme
            });
            var inactiveLabelColor = (0, _utils.getLabelColor)({
              tintColor: inactiveTintColor,
              hasColor: Boolean(inactiveColor),
              focused,
              defaultColor: textColor,
              theme
            });
            var badgeStyle = {
              top: !isV3 ? -2 : typeof badge === 'boolean' ? 4 : 2,
              right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - (!isV3 ? 2 : 0)
            };
            var isV3Shifting = isV3 && shifting && labeled;
            var font = isV3 ? theme.fonts.labelMedium : {};
            return renderTouchable({
              key: route.key,
              route,
              borderless: true,
              centered: true,
              rippleColor: isV3 ? 'transparent' : touchColor,
              onPress: () => onTabPress(eventForIndex(index)),
              onLongPress: () => onTabLongPress?.(eventForIndex(index)),
              testID: getTestID({
                route
              }),
              accessibilityLabel: getAccessibilityLabel({
                route
              }),
              accessibilityRole: 'button',
              accessibilityState: {
                selected: focused
              },
              style: [styles.item, isV3 && styles.v3Item],
              children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
                pointerEvents: "none",
                style: isV3 && (labeled ? styles.v3TouchableContainer : styles.v3NoLabelContainer),
                children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
                  style: [styles.iconContainer, isV3 && styles.v3IconContainer, (!isV3 || isV3Shifting) && {
                    transform: [{
                      translateY
                    }]
                  }],
                  children: [isV3 && focused && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                    style: [styles.outline, {
                      transform: [{
                        scaleX: outlineScale
                      }],
                      backgroundColor: theme.colors.secondaryContainer
                    }, activeIndicatorStyle]
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                    style: [styles.iconWrapper, isV3 && styles.v3IconWrapper, {
                      opacity: isV3 ? v3ActiveOpacity : activeOpacity
                    }],
                    children: renderIcon ? renderIcon({
                      route,
                      focused: true,
                      color: activeTintColor
                    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
                      source: route.focusedIcon,
                      color: activeTintColor,
                      size: 24
                    })
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                    style: [styles.iconWrapper, isV3 && styles.v3IconWrapper, {
                      opacity: isV3 ? v3InactiveOpacity : inactiveOpacity
                    }],
                    children: renderIcon ? renderIcon({
                      route,
                      focused: false,
                      color: inactiveTintColor
                    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
                      source: theme.isV3 && route.unfocusedIcon !== undefined ? route.unfocusedIcon : route.focusedIcon,
                      color: inactiveTintColor,
                      size: 24
                    })
                  }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
                    style: [styles.badgeContainer, badgeStyle],
                    children: typeof badge === 'boolean' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Badge.default, {
                      visible: badge,
                      size: isV3 ? 6 : 8
                    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Badge.default, {
                      visible: badge != null,
                      size: 16,
                      children: badge
                    })
                  })]
                }), labeled ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
                  style: [styles.labelContainer, !isV3 && {
                    transform: [{
                      scale
                    }]
                  }],
                  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                    style: [styles.labelWrapper, (!isV3 || isV3Shifting) && {
                      opacity: activeOpacity
                    }],
                    children: renderLabel ? renderLabel({
                      route,
                      focused: true,
                      color: activeLabelColor
                    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
                      maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                      variant: "labelMedium",
                      style: [styles.label, {
                        color: activeLabelColor,
                        ...font
                      }],
                      children: getLabelText({
                        route
                      })
                    })
                  }), shifting ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                    style: [styles.labelWrapper, {
                      opacity: inactiveOpacity
                    }],
                    children: renderLabel ? renderLabel({
                      route,
                      focused: false,
                      color: inactiveLabelColor
                    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
                      maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                      variant: "labelMedium",
                      selectable: false,
                      style: [styles.label, {
                        color: inactiveLabelColor,
                        ...font
                      }],
                      children: getLabelText({
                        route
                      })
                    })
                  })]
                }) : !isV3 && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
                  style: styles.labelContainer
                })]
              })
            });
          })]
        })
      })
    });
  };
  BottomNavigationBar.displayName = 'BottomNavigation.Bar';
  var _default = exports.default = BottomNavigationBar;
  var styles = _reactNative.StyleSheet.create({
    bar: {
      left: 0,
      right: 0,
      bottom: 0
    },
    barContent: {
      alignItems: 'center',
      overflow: 'hidden'
    },
    items: {
      flexDirection: 'row',
      ...null
    },
    item: {
      flex: 1,
      // Top padding is 6 and bottom padding is 10
      // The extra 4dp bottom padding is offset by label's height
      paddingVertical: 6
    },
    v3Item: {
      paddingVertical: 0
    },
    ripple: {
      position: 'absolute'
    },
    iconContainer: {
      height: 24,
      width: 24,
      marginTop: 2,
      marginHorizontal: 12,
      alignSelf: 'center'
    },
    v3IconContainer: {
      height: 32,
      width: 32,
      marginBottom: 4,
      marginTop: 0,
      justifyContent: 'center'
    },
    iconWrapper: {
      ..._reactNative.StyleSheet.absoluteFillObject,
      alignItems: 'center'
    },
    v3IconWrapper: {
      top: 4
    },
    labelContainer: {
      height: 16,
      paddingBottom: 2
    },
    labelWrapper: {
      ..._reactNative.StyleSheet.absoluteFillObject
    },
    // eslint-disable-next-line react-native/no-color-literals
    label: {
      fontSize: 12,
      height: BAR_HEIGHT,
      textAlign: 'center',
      backgroundColor: 'transparent',
      ...null
    },
    badgeContainer: {
      position: 'absolute',
      left: 0
    },
    v3TouchableContainer: {
      paddingTop: 12,
      paddingBottom: 16
    },
    v3NoLabelContainer: {
      height: 80,
      justifyContent: 'center',
      alignItems: 'center'
    },
    outline: {
      width: OUTLINE_WIDTH,
      height: 32,
      borderRadius: 16,
      alignSelf: 'center'
    },
    elevation: {
      elevation: 4
    }
  });
},608,[1,29,203,125,45,515,533,609,506,566,529,610,612,613,614,585,570,599,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLabelColor = exports.getInactiveTintColor = exports.getActiveTintColor = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var getActiveTintColor = _ref => {
    var activeColor = _ref.activeColor,
      defaultColor = _ref.defaultColor,
      theme = _ref.theme;
    if (typeof activeColor === 'string') {
      return activeColor;
    }
    if (theme.isV3) {
      return theme.colors.onSecondaryContainer;
    }
    return defaultColor;
  };
  exports.getActiveTintColor = getActiveTintColor;
  var getInactiveTintColor = _ref2 => {
    var inactiveColor = _ref2.inactiveColor,
      defaultColor = _ref2.defaultColor,
      theme = _ref2.theme;
    if (typeof inactiveColor === 'string') {
      return inactiveColor;
    }
    if (theme.isV3) {
      return theme.colors.onSurfaceVariant;
    }
    return (0, _color.default)(defaultColor).alpha(0.5).rgb().string();
  };
  exports.getInactiveTintColor = getInactiveTintColor;
  var getLabelColor = _ref3 => {
    var tintColor = _ref3.tintColor,
      hasColor = _ref3.hasColor,
      focused = _ref3.focused,
      defaultColor = _ref3.defaultColor,
      theme = _ref3.theme;
    if (hasColor) {
      return tintColor;
    }
    if (theme.isV3) {
      if (focused) {
        return theme.colors.onSurface;
      }
      return theme.colors.onSurfaceVariant;
    }
    return defaultColor;
  };
  exports.getLabelColor = getLabelColor;
},609,[1,515]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAnimatedValue;
  var _reactNative = require(_dependencyMap[1]);
  var _useLazyRef2 = _interopRequireDefault(require(_dependencyMap[2]));
  function useAnimatedValue(initialValue) {
    var _useLazyRef = (0, _useLazyRef2.default)(() => new _reactNative.Animated.Value(initialValue)),
      current = _useLazyRef.current;
    return current;
  }
},610,[1,45,611]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useLazyRef;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function useLazyRef(callback) {
    var lazyRef = React.useRef();
    if (lazyRef.current === undefined) {
      lazyRef.current = callback();
    }
    return lazyRef;
  }
},611,[125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAnimatedValueArray;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function useAnimatedValueArray(initialValues) {
    var refs = React.useRef([]);
    refs.current.length = initialValues.length;
    initialValues.forEach((initialValue, i) => {
      refs.current[i] = refs.current[i] ?? new _reactNative.Animated.Value(initialValue);
    });
    return refs.current;
  }
},612,[125,45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useIsKeyboardShown;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function useIsKeyboardShown(_ref) {
    var onShow = _ref.onShow,
      onHide = _ref.onHide;
    React.useEffect(() => {
      var willShowSubscription;
      var willHideSubscription;
      var didShowSubscription;
      var didHideSubscription;
      {
        willShowSubscription = _reactNative.Keyboard.addListener('keyboardWillShow', onShow);
        willHideSubscription = _reactNative.Keyboard.addListener('keyboardWillHide', onHide);
      }
      return () => {
        {
          if (willShowSubscription?.remove) {
            willShowSubscription.remove();
          } else {
            // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions
            _reactNative.Keyboard.removeListener('keyboardWillShow', onShow);
          }
          if (willHideSubscription?.remove) {
            willHideSubscription.remove();
          } else {
            // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions
            _reactNative.Keyboard.removeListener('keyboardWillHide', onHide);
          }
        }
      };
    }, [onHide, onShow]);
  }
},613,[125,45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useLayout;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function useLayout() {
    var _React$useState = React.useState({
        height: 0,
        width: 0,
        measured: false
      }),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      layout = _React$useState2[0],
      setLayout = _React$useState2[1];
    var onLayout = React.useCallback(e => {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
        height = _e$nativeEvent$layout.height,
        width = _e$nativeEvent$layout.width;
      if (height === layout.height && width === layout.width) {
        return;
      }
      setLayout({
        height,
        width,
        measured: true
      });
    }, [layout.height, layout.width]);
    return [layout, onLayout];
  }
},614,[1,29,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _react = _interopRequireDefault(require(_dependencyMap[7]));
  var _reactNative = require(_dependencyMap[8]);
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["style", "index", "children", "visibility"];
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var BottomNavigationRouteScreen = /*#__PURE__*/function (_React$Component) {
    function BottomNavigationRouteScreen() {
      (0, _classCallCheck2.default)(this, BottomNavigationRouteScreen);
      return _callSuper(this, BottomNavigationRouteScreen, arguments);
    }
    (0, _inherits2.default)(BottomNavigationRouteScreen, _React$Component);
    return (0, _createClass2.default)(BottomNavigationRouteScreen, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          style = _this$props.style,
          index = _this$props.index,
          children = _this$props.children,
          visibility = _this$props.visibility,
          rest = (0, _objectWithoutProperties2.default)(_this$props, _excluded);

        // On Web, the unfocused tab screens can still be clicked since they are transparent, but still there
        // Hiding them with `display: none` makes sure that they won't receive clicks
        // We only set it on Web since on native, react-native-pager-view's breaks due to layout changing
        var display = undefined;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          testID: `RouteScreen: ${index}`,
          style: [style, {
            display
          }],
          ...rest,
          children: children
        });
      }
    }]);
  }(_react.default.Component);
  var _default = exports.default = _reactNative.Animated.createAnimatedComponent(BottomNavigationRouteScreen);
},615,[1,203,10,11,50,52,55,125,45,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _useLatestCallback = _interopRequireDefault(require(_dependencyMap[5]));
  var _CardActions = _interopRequireDefault(require(_dependencyMap[6]));
  var _CardContent = _interopRequireDefault(require(_dependencyMap[7]));
  var _CardCover = _interopRequireDefault(require(_dependencyMap[8]));
  var _CardTitle = _interopRequireDefault(require(_dependencyMap[9]));
  var _utils = require(_dependencyMap[10]);
  var _theming = require(_dependencyMap[11]);
  var _forwardRef = require(_dependencyMap[12]);
  var _hasTouchHandler = _interopRequireDefault(require(_dependencyMap[13]));
  var _splitStyles3 = require(_dependencyMap[14]);
  var _Surface = _interopRequireDefault(require(_dependencyMap[15]));
  var _jsxRuntime = require(_dependencyMap[16]);
  var _excluded = ["elevation", "delayLongPress", "onPress", "onLongPress", "onPressOut", "onPressIn", "mode", "children", "style", "contentStyle", "theme", "testID", "accessible", "disabled"]; // eslint-disable-next-line @typescript-eslint/no-unused-vars
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A card is a sheet of material that serves as an entry point to more detailed information.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Avatar, Button, Card, Text } from 'react-native-paper';
   *
   * const LeftContent = props => <Avatar.Icon {...props} icon="folder" />
   *
   * const MyComponent = () => (
   *   <Card>
   *     <Card.Title title="Card Title" subtitle="Card Subtitle" left={LeftContent} />
   *     <Card.Content>
   *       <Text variant="titleLarge">Card title</Text>
   *       <Text variant="bodyMedium">Card content</Text>
   *     </Card.Content>
   *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />
   *     <Card.Actions>
   *       <Button>Cancel</Button>
   *       <Button>Ok</Button>
   *     </Card.Actions>
   *   </Card>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var CardComponent = (_ref, ref) => {
    var _ref$elevation = _ref.elevation,
      cardElevation = _ref$elevation === undefined ? 1 : _ref$elevation,
      delayLongPress = _ref.delayLongPress,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      onPressOut = _ref.onPressOut,
      onPressIn = _ref.onPressIn,
      _ref$mode = _ref.mode,
      cardMode = _ref$mode === undefined ? 'elevated' : _ref$mode,
      children = _ref.children,
      style = _ref.style,
      contentStyle = _ref.contentStyle,
      themeOverrides = _ref.theme,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'card' : _ref$testID,
      accessible = _ref.accessible,
      disabled = _ref.disabled,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isMode = React.useCallback(modeToCompare => {
      return cardMode === modeToCompare;
    }, [cardMode]);
    var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
      onPress,
      onLongPress,
      onPressIn,
      onPressOut
    });

    // Default animated value
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(cardElevation)),
      elevation = _React$useRef.current;
    // Dark adaptive animated value, used in case of toggling the theme,
    // it prevents animating the background with native drivers inside Surface
    var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(cardElevation)),
      elevationDarkAdaptive = _React$useRef2.current;
    var animation = theme.animation,
      dark = theme.dark,
      mode = theme.mode,
      roundness = theme.roundness,
      isV3 = theme.isV3;
    var prevDarkRef = React.useRef(dark);
    React.useEffect(() => {
      prevDarkRef.current = dark;
    });
    var prevDark = prevDarkRef.current;
    var isAdaptiveMode = mode === 'adaptive';
    var animationDuration = 150 * animation.scale;
    React.useEffect(() => {
      /**
       * Resets animations values if updating to dark adaptive mode,
       * otherwise, any card that is in the middle of animation while
       * toggling the theme will stay at that animated value until
       * the next press-in
       */
      if (dark && isAdaptiveMode && !prevDark) {
        elevation.setValue(cardElevation);
        elevationDarkAdaptive.setValue(cardElevation);
      }
    }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);
    var runElevationAnimation = pressType => {
      var isPressTypeIn = pressType === 'in';
      if (dark && isAdaptiveMode) {
        _reactNative.Animated.timing(elevationDarkAdaptive, {
          toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,
          duration: animationDuration,
          useNativeDriver: false
        }).start();
      } else {
        _reactNative.Animated.timing(elevation, {
          toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,
          duration: animationDuration,
          useNativeDriver: false
        }).start();
      }
    };
    var handlePressIn = (0, _useLatestCallback.default)(e => {
      onPressIn?.(e);
      runElevationAnimation('in');
    });
    var handlePressOut = (0, _useLatestCallback.default)(e => {
      onPressOut?.(e);
      runElevationAnimation('out');
    });
    var total = React.Children.count(children);
    var siblings = React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) && child.type ? child.type.displayName : null);
    var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;
    var _getCardColors = (0, _utils.getCardColors)({
        theme,
        mode: cardMode
      }),
      backgroundColor = _getCardColors.backgroundColor,
      themedBorderColor = _getCardColors.borderColor;
    var flattenedStyles = _reactNative.StyleSheet.flatten(style) || {};
    var _flattenedStyles$bord = flattenedStyles.borderColor,
      borderColor = _flattenedStyles$bord === undefined ? themedBorderColor : _flattenedStyles$bord;
    var _splitStyles = (0, _splitStyles3.splitStyles)(flattenedStyles, style => style.startsWith('border') && style.endsWith('Radius')),
      _splitStyles2 = (0, _slicedToArray2.default)(_splitStyles, 2),
      borderRadiusStyles = _splitStyles2[1];
    var borderRadiusCombinedStyles = {
      borderRadius: (isV3 ? 3 : 1) * roundness,
      ...borderRadiusStyles
    };
    var content = /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.innerContainer, contentStyle],
      testID: testID,
      children: React.Children.map(children, (child, index) => /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {
        index,
        total,
        siblings,
        borderRadiusStyles
      }) : child)
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Surface.default, {
      ref: ref,
      style: [isV3 && !isMode('elevated') && {
        backgroundColor
      }, !isV3 && isMode('outlined') ? styles.resetElevation : {
        elevation: computedElevation
      }, borderRadiusCombinedStyles, style],
      theme: theme,
      ...(isV3 && {
        elevation: isMode('elevated') ? computedElevation : 0
      }),
      testID: `${testID}-container`,
      ...rest,
      children: [isMode('outlined') && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        pointerEvents: "none",
        testID: `${testID}-outline`,
        style: [{
          borderColor
        }, styles.outline, borderRadiusCombinedStyles]
      }), hasPassedTouchHandler ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Pressable, {
        accessible: accessible,
        unstable_pressDelay: 0,
        disabled: disabled,
        delayLongPress: delayLongPress,
        onLongPress: onLongPress,
        onPress: onPress,
        onPressIn: handlePressIn,
        onPressOut: handlePressOut,
        children: content
      }) : content]
    });
  };
  var Component = (0, _forwardRef.forwardRef)(CardComponent);
  Component.displayName = 'Card';
  var Card = Component;

  // @component ./CardContent.tsx
  Card.Content = _CardContent.default;
  // @component ./CardActions.tsx
  Card.Actions = _CardActions.default;
  // @component ./CardCover.tsx
  Card.Cover = _CardCover.default;
  // @component ./CardTitle.tsx
  Card.Title = _CardTitle.default;
  var styles = _reactNative.StyleSheet.create({
    innerContainer: {
      flexShrink: 1
    },
    outline: {
      borderWidth: 1,
      position: 'absolute',
      width: '100%',
      height: '100%',
      zIndex: 2
    },
    resetElevation: {
      elevation: 0
    }
  });
  var _default = exports.default = Card;
},616,[1,29,203,125,45,603,617,618,619,621,620,506,577,583,600,599,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  var _theming = require(_dependencyMap[2]);
  var _jsxRuntime = require(_dependencyMap[3]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show a list of actions inside a Card.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Card, Button } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Card>
   *     <Card.Actions>
   *       <Button>Cancel</Button>
   *       <Button>Ok</Button>
   *     </Card.Actions>
   *   </Card>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var CardActions = props => {
    var _useInternalTheme = (0, _theming.useInternalTheme)(props.theme),
      isV3 = _useInternalTheme.isV3;
    var justifyContent = isV3 ? 'flex-end' : 'flex-start';
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ...props,
      style: [styles.container, props.style, {
        justifyContent
      }],
      children: React.Children.map(props.children, (child, i) => {
        return /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {
          compact: !isV3 && child.props.compact !== false,
          mode: child.props.mode || isV3 && (i === 0 ? 'outlined' : 'contained'),
          style: [isV3 && styles.button, child.props.style]
        }) : child;
      })
    });
  };
  CardActions.displayName = 'Card.Actions';
  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      padding: 8
    },
    button: {
      marginLeft: 8
    }
  });
  var _default = exports.default = CardActions;
},617,[125,45,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _jsxRuntime = require(_dependencyMap[4]);
  var _excluded = ["index", "total", "siblings", "style"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show content inside a Card.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Card, Text } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Card>
   *     <Card.Content>
   *       <Text variant="titleLarge">Card title</Text>
   *       <Text variant="bodyMedium">Card content</Text>
   *     </Card.Content>
   *   </Card>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var CardContent = _ref => {
    var index = _ref.index,
      total = _ref.total,
      siblings = _ref.siblings,
      style = _ref.style,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var cover = 'withInternalTheme(CardCover)';
    var title = 'withInternalTheme(CardTitle)';
    var contentStyle, prev, next;
    if (typeof index === 'number' && siblings) {
      prev = siblings[index - 1];
      next = siblings[index + 1];
    }
    if (prev === cover && next === cover || prev === title && next === title || total === 1) {
      contentStyle = styles.only;
    } else if (index === 0) {
      if (next === cover || next === title) {
        contentStyle = styles.only;
      } else {
        contentStyle = styles.first;
      }
    } else if (typeof total === 'number' && index === total - 1) {
      if (prev === cover || prev === title) {
        contentStyle = styles.only;
      } else {
        contentStyle = styles.last;
      }
    } else if (prev === cover || prev === title) {
      contentStyle = styles.first;
    } else if (next === cover || next === title) {
      contentStyle = styles.last;
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ...rest,
      style: [styles.container, contentStyle, style]
    });
  };
  CardContent.displayName = 'Card.Content';
  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingHorizontal: 16
    },
    first: {
      paddingTop: 16
    },
    last: {
      paddingBottom: 16
    },
    only: {
      paddingVertical: 16
    }
  });
  var _default = exports.default = CardContent;
},618,[1,203,125,45,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.CardCover = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _utils = require(_dependencyMap[5]);
  var _theming = require(_dependencyMap[6]);
  var _colors = require(_dependencyMap[7]);
  var _splitStyles3 = require(_dependencyMap[8]);
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["index", "total", "style", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show a cover image inside a Card.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Card } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Card>
   *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />
   *   </Card>
   * );
   *
   * export default MyComponent;
   * ```
   *
   * @extends Image props https://reactnative.dev/docs/image#props
   */
  var CardCover = _ref => {
    var index = _ref.index,
      total = _ref.total,
      style = _ref.style,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var flattenedStyles = _reactNative.StyleSheet.flatten(style) || {};
    var _splitStyles = (0, _splitStyles3.splitStyles)(flattenedStyles, style => style.startsWith('border') && style.endsWith('Radius')),
      _splitStyles2 = (0, _slicedToArray2.default)(_splitStyles, 2),
      borderRadiusStyles = _splitStyles2[1];
    var coverStyle = (0, _utils.getCardCoverStyle)({
      theme,
      index,
      total,
      borderRadiusStyles
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.container, coverStyle, style],
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
        ...rest,
        style: [styles.image, coverStyle],
        accessibilityIgnoresInvertColors: true
      })
    });
  };
  exports.CardCover = CardCover;
  CardCover.displayName = 'Card.Cover';
  var styles = _reactNative.StyleSheet.create({
    container: {
      height: 195,
      backgroundColor: _colors.grey200,
      overflow: 'hidden'
    },
    image: {
      flex: 1,
      height: undefined,
      width: undefined,
      padding: 16,
      justifyContent: 'flex-end'
    }
  });
  var _default = exports.default = CardCover; // @component-docs ignore-next-line
},619,[1,29,203,125,45,620,506,529,600,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getCardCoverStyle = exports.getCardColors = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var _colors = require(_dependencyMap[2]);
  var getCardCoverStyle = _ref => {
    var theme = _ref.theme,
      index = _ref.index,
      total = _ref.total,
      borderRadiusStyles = _ref.borderRadiusStyles;
    var isV3 = theme.isV3,
      roundness = theme.roundness;
    if (Object.keys(borderRadiusStyles).length > 0) {
      return {
        borderRadius: 3 * roundness,
        ...borderRadiusStyles
      };
    }
    if (isV3) {
      return {
        borderRadius: 3 * roundness
      };
    }
    if (index === 0) {
      if (total === 1) {
        return {
          borderRadius: roundness
        };
      }
      return {
        borderTopLeftRadius: roundness,
        borderTopRightRadius: roundness
      };
    }
    if (typeof total === 'number' && index === total - 1) {
      return {
        borderBottomLeftRadius: roundness
      };
    }
    return undefined;
  };
  exports.getCardCoverStyle = getCardCoverStyle;
  var getBorderColor = _ref2 => {
    var theme = _ref2.theme;
    if (theme.isV3) {
      return theme.colors.outline;
    }
    if (theme.dark) {
      return (0, _color.default)(_colors.white).alpha(0.12).rgb().string();
    }
    return (0, _color.default)(_colors.black).alpha(0.12).rgb().string();
  };
  var getBackgroundColor = _ref3 => {
    var theme = _ref3.theme,
      isMode = _ref3.isMode;
    if (theme.isV3) {
      if (isMode('contained')) {
        return theme.colors.surfaceVariant;
      }
      if (isMode('outlined')) {
        return theme.colors.surface;
      }
    }
    return undefined;
  };
  var getCardColors = _ref4 => {
    var theme = _ref4.theme,
      mode = _ref4.mode;
    var isMode = modeToCompare => {
      return mode === modeToCompare;
    };
    return {
      backgroundColor: getBackgroundColor({
        theme,
        isMode
      }),
      borderColor: getBorderColor({
        theme
      })
    };
  };
  exports.getCardColors = getCardColors;
},620,[1,515,529]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.CardTitle = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _theming = require(_dependencyMap[3]);
  var _Text = _interopRequireDefault(require(_dependencyMap[4]));
  var _Caption = _interopRequireDefault(require(_dependencyMap[5]));
  var _Title = _interopRequireDefault(require(_dependencyMap[6]));
  var _jsxRuntime = require(_dependencyMap[7]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var LEFT_SIZE = 40;

  /**
   * A component to show a title, subtitle and an avatar inside a Card.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Avatar, Card, IconButton } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Card.Title
   *     title="Card Title"
   *     subtitle="Card Subtitle"
   *     left={(props) => <Avatar.Icon {...props} icon="folder" />}
   *     right={(props) => <IconButton {...props} icon="dots-vertical" onPress={() => {}} />}
   *   />
   * );
   *
   * export default MyComponent;
   * ```
   */
  var CardTitle = _ref => {
    var title = _ref.title,
      titleStyle = _ref.titleStyle,
      _ref$titleNumberOfLin = _ref.titleNumberOfLines,
      titleNumberOfLines = _ref$titleNumberOfLin === undefined ? 1 : _ref$titleNumberOfLin,
      _ref$titleVariant = _ref.titleVariant,
      titleVariant = _ref$titleVariant === undefined ? 'bodyLarge' : _ref$titleVariant,
      titleMaxFontSizeMultiplier = _ref.titleMaxFontSizeMultiplier,
      subtitle = _ref.subtitle,
      subtitleStyle = _ref.subtitleStyle,
      _ref$subtitleNumberOf = _ref.subtitleNumberOfLines,
      subtitleNumberOfLines = _ref$subtitleNumberOf === undefined ? 1 : _ref$subtitleNumberOf,
      _ref$subtitleVariant = _ref.subtitleVariant,
      subtitleVariant = _ref$subtitleVariant === undefined ? 'bodyMedium' : _ref$subtitleVariant,
      subtitleMaxFontSizeMultiplier = _ref.subtitleMaxFontSizeMultiplier,
      left = _ref.left,
      leftStyle = _ref.leftStyle,
      right = _ref.right,
      rightStyle = _ref.rightStyle,
      style = _ref.style,
      themeOverrides = _ref.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var TitleComponent = theme.isV3 ? _Text.default : _Title.default;
    var SubtitleComponent = theme.isV3 ? _Text.default : _Caption.default;
    var minHeight = subtitle || left || right ? 72 : 50;
    var marginBottom = subtitle ? 0 : 2;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.container, {
        minHeight
      }, style],
      children: [left ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.left, leftStyle],
        children: left({
          size: LEFT_SIZE
        })
      }) : null, /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.titles],
        children: [title && /*#__PURE__*/(0, _jsxRuntime.jsx)(TitleComponent, {
          style: [styles.title, {
            marginBottom
          }, titleStyle],
          numberOfLines: titleNumberOfLines,
          variant: titleVariant,
          maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
          children: title
        }), subtitle && /*#__PURE__*/(0, _jsxRuntime.jsx)(SubtitleComponent, {
          style: [styles.subtitle, subtitleStyle],
          numberOfLines: subtitleNumberOfLines,
          variant: subtitleVariant,
          maxFontSizeMultiplier: subtitleMaxFontSizeMultiplier,
          children: subtitle
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: rightStyle,
        children: right ? right({
          size: 24
        }) : null
      })]
    });
  };
  exports.CardTitle = CardTitle;
  CardTitle.displayName = 'Card.Title';
  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingLeft: 16
    },
    left: {
      justifyContent: 'center',
      marginRight: 16,
      height: LEFT_SIZE,
      width: LEFT_SIZE
    },
    titles: {
      flex: 1,
      flexDirection: 'column',
      justifyContent: 'center'
    },
    title: {
      minHeight: 30,
      paddingRight: 16
    },
    subtitle: {
      minHeight: 20,
      marginVertical: 0,
      paddingRight: 16
    }
  });
  var _default = exports.default = CardTitle; // @component-docs ignore-next-line
},621,[1,125,45,506,573,622,623,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _StyledText = _interopRequireDefault(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  // @component-group Typography

  /**
   * Typography component for showing a caption.
   *
   * <div class="screenshots">
   *   <img src="screenshots/caption.png" />
   * </div>
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Caption } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Caption>Caption</Caption>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Caption = props => /*#__PURE__*/(0, _jsxRuntime.jsx)(_StyledText.default, {
    ...props,
    alpha: 0.54,
    family: "regular",
    style: [styles.text, props.style]
  });
  var _default = exports.default = Caption;
  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 12,
      lineHeight: 20,
      marginVertical: 2,
      letterSpacing: 0.4
    }
  });
},622,[1,125,45,575,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _StyledText = _interopRequireDefault(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  // @component-group Typography

  /**
   * Typography component for showing a title.
   *
   * <div class="screenshots">
   *   <img src="screenshots/title.png" />
   * </div>
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Title } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Title>Title</Title>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Title = props => /*#__PURE__*/(0, _jsxRuntime.jsx)(_StyledText.default, {
    ...props,
    alpha: 0.87,
    family: "medium",
    style: [styles.text, props.style]
  });
  var _default = exports.default = Title;
  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 20,
      lineHeight: 30,
      marginVertical: 2,
      letterSpacing: 0.15
    }
  });
},623,[1,125,45,575,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Checkbox = _interopRequireDefault(require(_dependencyMap[1]));
  var _CheckboxAndroid = _interopRequireDefault(require(_dependencyMap[2]));
  var _CheckboxIOS = _interopRequireDefault(require(_dependencyMap[3]));
  var _CheckboxItem = _interopRequireDefault(require(_dependencyMap[4]));
  var Checkbox = Object.assign(
  // @component ./Checkbox.tsx
  _Checkbox.default, {
    // @component ./CheckboxItem.tsx
    Item: _CheckboxItem.default,
    // @component ./CheckboxAndroid.tsx
    Android: _CheckboxAndroid.default,
    // @component ./CheckboxIOS.tsx
    IOS: _CheckboxIOS.default
  });
  var _default = exports.default = Checkbox;
},624,[1,625,626,628,629]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Checkbox = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _CheckboxAndroid = _interopRequireDefault(require(_dependencyMap[4]));
  var _CheckboxIOS = _interopRequireDefault(require(_dependencyMap[5]));
  var _theming = require(_dependencyMap[6]);
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Checkboxes allow the selection of multiple options from a set.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Checkbox } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [checked, setChecked] = React.useState(false);
   *
   *   return (
   *     <Checkbox
   *       status={checked ? 'checked' : 'unchecked'}
   *       onPress={() => {
   *         setChecked(!checked);
   *       }}
   *     />
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var Checkbox = _ref => {
    var themeOverrides = _ref.theme,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_CheckboxIOS.default, {
      ...props,
      theme: theme
    });
  };
  var _default = exports.default = Checkbox; // @component-docs ignore-next-line
  var CheckboxWithTheme = exports.Checkbox = Checkbox;
  // @component-docs ignore-next-line
},625,[1,203,125,45,626,628,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.CheckboxAndroid = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _utils = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[6]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  var _excluded = ["status", "theme", "disabled", "onPress", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  // From https://material.io/design/motion/speed.html#duration
  var ANIMATION_DURATION = 100;

  /**
   * Checkboxes allow the selection of multiple options from a set.
   * This component follows platform guidelines for Android, but can be used
   * on any platform.
   *
   * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
   */
  var CheckboxAndroid = _ref => {
    var status = _ref.status,
      themeOverrides = _ref.theme,
      disabled = _ref.disabled,
      onPress = _ref.onPress,
      testID = _ref.testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(1)),
      scaleAnim = _React$useRef.current;
    var isFirstRendering = React.useRef(true);
    var scale = theme.animation.scale;
    React.useEffect(() => {
      // Do not run animation on very first rendering
      if (isFirstRendering.current) {
        isFirstRendering.current = false;
        return;
      }
      var checked = status === 'checked';
      _reactNative.Animated.sequence([_reactNative.Animated.timing(scaleAnim, {
        toValue: 0.85,
        duration: checked ? ANIMATION_DURATION * scale : 0,
        useNativeDriver: false
      }), _reactNative.Animated.timing(scaleAnim, {
        toValue: 1,
        duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,
        useNativeDriver: false
      })]).start();
    }, [status, scaleAnim, scale]);
    var checked = status === 'checked';
    var indeterminate = status === 'indeterminate';
    var _getAndroidSelectionC = (0, _utils.getAndroidSelectionControlColor)({
        theme,
        disabled,
        checked,
        customColor: rest.color,
        customUncheckedColor: rest.uncheckedColor
      }),
      rippleColor = _getAndroidSelectionC.rippleColor,
      selectionControlColor = _getAndroidSelectionC.selectionControlColor;
    var borderWidth = scaleAnim.interpolate({
      inputRange: [0.8, 1],
      outputRange: [7, 0]
    });
    var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
      ...rest,
      borderless: true,
      rippleColor: rippleColor,
      onPress: onPress,
      disabled: disabled,
      accessibilityRole: "checkbox",
      accessibilityState: {
        disabled,
        checked
      },
      accessibilityLiveRegion: "polite",
      style: styles.container,
      testID: testID,
      theme: theme,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
        style: {
          transform: [{
            scale: scaleAnim
          }]
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
          allowFontScaling: false,
          name: icon,
          size: 24,
          color: selectionControlColor,
          direction: "ltr"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [_reactNative.StyleSheet.absoluteFill, styles.fillContainer],
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            style: [styles.fill, {
              borderColor: selectionControlColor
            }, {
              borderWidth
            }]
          })
        })]
      })
    });
  };
  exports.CheckboxAndroid = CheckboxAndroid;
  CheckboxAndroid.displayName = 'Checkbox.Android';
  var styles = _reactNative.StyleSheet.create({
    container: {
      borderRadius: 18,
      width: 36,
      height: 36,
      padding: 6
    },
    fillContainer: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    fill: {
      height: 14,
      width: 14
    }
  });
  var _default = exports.default = CheckboxAndroid; // @component-docs ignore-next-line
},626,[1,203,125,45,627,506,543,580,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getSelectionControlIOSColor = exports.getAndroidSelectionControlColor = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var getAndroidCheckedColor = _ref => {
    var theme = _ref.theme,
      customColor = _ref.customColor;
    if (customColor) {
      return customColor;
    }
    if (theme.isV3) {
      return theme.colors.primary;
    }
    return theme.colors.accent;
  };
  var getAndroidUncheckedColor = _ref2 => {
    var theme = _ref2.theme,
      customUncheckedColor = _ref2.customUncheckedColor;
    if (customUncheckedColor) {
      return customUncheckedColor;
    }
    if (theme.isV3) {
      return theme.colors.onSurfaceVariant;
    }
    if (theme.dark) {
      return (0, _color.default)(theme.colors.text).alpha(0.7).rgb().string();
    }
    return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
  };
  var getAndroidRippleColor = _ref3 => {
    var theme = _ref3.theme,
      checkedColor = _ref3.checkedColor,
      disabled = _ref3.disabled;
    if (disabled) {
      if (theme.isV3) {
        return (0, _color.default)(theme.colors.onSurface).alpha(0.16).rgb().string();
      }
      return (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
    }
    return (0, _color.default)(checkedColor).fade(0.32).rgb().string();
  };
  var getAndroidControlColor = _ref4 => {
    var theme = _ref4.theme,
      checked = _ref4.checked,
      disabled = _ref4.disabled,
      checkedColor = _ref4.checkedColor,
      uncheckedColor = _ref4.uncheckedColor;
    if (disabled) {
      if (theme.isV3) {
        return theme.colors.onSurfaceDisabled;
      }
      return theme.colors.disabled;
    }
    if (checked) {
      return checkedColor;
    }
    return uncheckedColor;
  };
  var getAndroidSelectionControlColor = _ref5 => {
    var theme = _ref5.theme,
      disabled = _ref5.disabled,
      checked = _ref5.checked,
      customColor = _ref5.customColor,
      customUncheckedColor = _ref5.customUncheckedColor;
    var checkedColor = getAndroidCheckedColor({
      theme,
      customColor
    });
    var uncheckedColor = getAndroidUncheckedColor({
      theme,
      customUncheckedColor
    });
    return {
      rippleColor: getAndroidRippleColor({
        theme,
        checkedColor,
        disabled
      }),
      selectionControlColor: getAndroidControlColor({
        theme,
        disabled,
        checked,
        checkedColor,
        uncheckedColor
      })
    };
  };
  exports.getAndroidSelectionControlColor = getAndroidSelectionControlColor;
  var getIOSCheckedColor = _ref6 => {
    var theme = _ref6.theme,
      disabled = _ref6.disabled,
      customColor = _ref6.customColor;
    if (disabled) {
      if (theme.isV3) {
        return theme.colors.onSurfaceDisabled;
      }
      return theme.colors.disabled;
    }
    if (customColor) {
      return customColor;
    }
    if (theme.isV3) {
      return theme.colors.primary;
    }
    return theme.colors.accent;
  };
  var getIOSRippleColor = _ref7 => {
    var theme = _ref7.theme,
      checkedColor = _ref7.checkedColor,
      disabled = _ref7.disabled;
    if (disabled) {
      if (theme.isV3) {
        return (0, _color.default)(theme.colors.onSurface).alpha(0.16).rgb().string();
      }
      return (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
    }
    return (0, _color.default)(checkedColor).fade(0.32).rgb().string();
  };
  var getSelectionControlIOSColor = _ref8 => {
    var theme = _ref8.theme,
      disabled = _ref8.disabled,
      customColor = _ref8.customColor;
    var checkedColor = getIOSCheckedColor({
      theme,
      disabled,
      customColor
    });
    return {
      checkedColor,
      rippleColor: getIOSRippleColor({
        theme,
        checkedColor,
        disabled
      })
    };
  };
  exports.getSelectionControlIOSColor = getSelectionControlIOSColor;
},627,[1,515]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.CheckboxIOS = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _utils = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[6]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  var _excluded = ["status", "disabled", "onPress", "theme", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Checkboxes allow the selection of multiple options from a set.
   * This component follows platform guidelines for iOS, but can be used
   * on any platform.
   *
   * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
   */
  var CheckboxIOS = _ref => {
    var status = _ref.status,
      disabled = _ref.disabled,
      onPress = _ref.onPress,
      themeOverrides = _ref.theme,
      testID = _ref.testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var checked = status === 'checked';
    var indeterminate = status === 'indeterminate';
    var _getSelectionControlI = (0, _utils.getSelectionControlIOSColor)({
        theme,
        disabled,
        customColor: rest.color
      }),
      checkedColor = _getSelectionControlI.checkedColor,
      rippleColor = _getSelectionControlI.rippleColor;
    var icon = indeterminate ? 'minus' : 'check';
    var opacity = indeterminate || checked ? 1 : 0;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
      ...rest,
      borderless: true,
      rippleColor: rippleColor,
      onPress: onPress,
      disabled: disabled,
      accessibilityRole: "checkbox",
      accessibilityState: {
        disabled,
        checked
      },
      accessibilityLiveRegion: "polite",
      style: styles.container,
      testID: testID,
      theme: theme,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          opacity
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
          allowFontScaling: false,
          name: icon,
          size: 24,
          color: checkedColor,
          direction: "ltr"
        })
      })
    });
  };
  exports.CheckboxIOS = CheckboxIOS;
  CheckboxIOS.displayName = 'Checkbox.IOS';
  var styles = _reactNative.StyleSheet.create({
    container: {
      borderRadius: 18,
      padding: 6
    }
  });
  var _default = exports.default = CheckboxIOS; // @component-docs ignore-next-line
},628,[1,203,125,45,627,506,543,580,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.CheckboxItem = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _Checkbox = _interopRequireDefault(require(_dependencyMap[4]));
  var _CheckboxAndroid = _interopRequireDefault(require(_dependencyMap[5]));
  var _CheckboxIOS = _interopRequireDefault(require(_dependencyMap[6]));
  var _theming = require(_dependencyMap[7]);
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[8]));
  var _Text = _interopRequireDefault(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  var _excluded = ["style", "status", "label", "onPress", "onLongPress", "labelStyle", "theme", "testID", "mode", "position", "accessibilityLabel", "disabled", "labelVariant", "labelMaxFontSizeMultiplier", "rippleColor", "background"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { View } from 'react-native';
   * import { Checkbox } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <View>
   *     <Checkbox.Item label="Item" status="checked" />
   *   </View>
   * );
   *
   * export default MyComponent;
   *```
   */

  var CheckboxItem = _ref => {
    var style = _ref.style,
      status = _ref.status,
      label = _ref.label,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      labelStyle = _ref.labelStyle,
      themeOverrides = _ref.theme,
      testID = _ref.testID,
      mode = _ref.mode,
      _ref$position = _ref.position,
      position = _ref$position === undefined ? 'trailing' : _ref$position,
      _ref$accessibilityLab = _ref.accessibilityLabel,
      accessibilityLabel = _ref$accessibilityLab === undefined ? label : _ref$accessibilityLab,
      disabled = _ref.disabled,
      _ref$labelVariant = _ref.labelVariant,
      labelVariant = _ref$labelVariant === undefined ? 'bodyLarge' : _ref$labelVariant,
      _ref$labelMaxFontSize = _ref.labelMaxFontSizeMultiplier,
      labelMaxFontSizeMultiplier = _ref$labelMaxFontSize === undefined ? 1.5 : _ref$labelMaxFontSize,
      rippleColor = _ref.rippleColor,
      background = _ref.background,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var checkboxProps = {
      ...props,
      status,
      theme,
      disabled
    };
    var isLeading = position === 'leading';
    var checkbox;
    if (mode === 'android') {
      checkbox = /*#__PURE__*/(0, _jsxRuntime.jsx)(_CheckboxAndroid.default, {
        ...checkboxProps
      });
    } else if (mode === 'ios') {
      checkbox = /*#__PURE__*/(0, _jsxRuntime.jsx)(_CheckboxIOS.default, {
        ...checkboxProps
      });
    } else {
      checkbox = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.default, {
        ...checkboxProps
      });
    }
    var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;
    var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;
    var textAlign = isLeading ? 'right' : 'left';
    var computedStyle = {
      color: disabled ? disabledTextColor : textColor,
      textAlign
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
      accessibilityLabel: accessibilityLabel,
      accessibilityRole: "checkbox",
      accessibilityState: {
        checked: status === 'checked',
        disabled
      },
      onPress: onPress,
      onLongPress: onLongPress,
      testID: testID,
      disabled: disabled,
      rippleColor: rippleColor,
      theme: theme,
      background: background,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.container, style],
        pointerEvents: "none",
        importantForAccessibility: "no-hide-descendants",
        children: [isLeading && checkbox, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
          variant: labelVariant,
          testID: `${testID}-text`,
          maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
          style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle],
          children: label
        }), !isLeading && checkbox]
      })
    });
  };
  exports.CheckboxItem = CheckboxItem;
  CheckboxItem.displayName = 'Checkbox.Item';
  var _default = exports.default = CheckboxItem; // @component-docs ignore-next-line
  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingVertical: 8,
      paddingHorizontal: 16
    },
    label: {
      flexShrink: 1,
      flexGrow: 1
    },
    font: {
      fontSize: 16
    }
  });
},629,[1,203,125,45,625,626,628,506,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _useLatestCallback = _interopRequireDefault(require(_dependencyMap[4]));
  var _helpers = require(_dependencyMap[5]);
  var _theming = require(_dependencyMap[6]);
  var _colors = require(_dependencyMap[7]);
  var _hasTouchHandler = _interopRequireDefault(require(_dependencyMap[8]));
  var _Icon = _interopRequireDefault(require(_dependencyMap[9]));
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[10]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[11]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[12]));
  var _Text = _interopRequireDefault(require(_dependencyMap[13]));
  var _jsxRuntime = require(_dependencyMap[14]);
  var _excluded = ["mode", "children", "icon", "avatar", "selected", "disabled", "background", "accessibilityLabel", "accessibilityRole", "closeIconAccessibilityLabel", "onPress", "onLongPress", "onPressOut", "onPressIn", "delayLongPress", "onClose", "closeIcon", "textStyle", "style", "theme", "testID", "selectedColor", "rippleColor", "showSelectedOverlay", "showSelectedCheck", "ellipsizeMode", "compact", "elevated", "maxFontSizeMultiplier"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Chips are compact elements that can represent inputs, attributes, or actions.
   * They can have an icon or avatar on the left, and a close button icon on the right.
   * They are typically used to:
   * <ul>
   *  <li>Present multiple options </li>
   *  <li>Represent attributes active or chosen </li>
   *  <li>Present filter options </li>
   *  <li>Trigger actions related to primary content </li>
   * </ul>
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Chip } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Chip icon="information" onPress={() => console.log('Pressed')}>Example Chip</Chip>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Chip = _ref => {
    var _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? 'flat' : _ref$mode,
      children = _ref.children,
      icon = _ref.icon,
      avatar = _ref.avatar,
      _ref$selected = _ref.selected,
      selected = _ref$selected === undefined ? false : _ref$selected,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === undefined ? false : _ref$disabled,
      background = _ref.background,
      accessibilityLabel = _ref.accessibilityLabel,
      _ref$accessibilityRol = _ref.accessibilityRole,
      accessibilityRole = _ref$accessibilityRol === undefined ? 'button' : _ref$accessibilityRol,
      _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,
      closeIconAccessibilityLabel = _ref$closeIconAccessi === undefined ? 'Close' : _ref$closeIconAccessi,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      onPressOut = _ref.onPressOut,
      onPressIn = _ref.onPressIn,
      delayLongPress = _ref.delayLongPress,
      onClose = _ref.onClose,
      closeIcon = _ref.closeIcon,
      textStyle = _ref.textStyle,
      style = _ref.style,
      themeOverrides = _ref.theme,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'chip' : _ref$testID,
      selectedColor = _ref.selectedColor,
      customRippleColor = _ref.rippleColor,
      _ref$showSelectedOver = _ref.showSelectedOverlay,
      showSelectedOverlay = _ref$showSelectedOver === undefined ? false : _ref$showSelectedOver,
      _ref$showSelectedChec = _ref.showSelectedCheck,
      showSelectedCheck = _ref$showSelectedChec === undefined ? true : _ref$showSelectedChec,
      ellipsizeMode = _ref.ellipsizeMode,
      compact = _ref.compact,
      _ref$elevated = _ref.elevated,
      elevated = _ref$elevated === undefined ? false : _ref$elevated,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3,
      roundness = theme.roundness;
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(isV3 && elevated ? 1 : 0)),
      elevation = _React$useRef.current;
    var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
      onPress,
      onLongPress,
      onPressIn,
      onPressOut
    });
    var isOutlined = mode === 'outlined';
    var handlePressIn = (0, _useLatestCallback.default)(e => {
      var scale = theme.animation.scale;
      onPressIn?.(e);
      _reactNative.Animated.timing(elevation, {
        toValue: isV3 ? elevated ? 2 : 0 : 4,
        duration: 200 * scale,
        useNativeDriver: _reactNative.Platform.constants.reactNativeVersion.minor <= 72
      }).start();
    });
    var handlePressOut = (0, _useLatestCallback.default)(e => {
      var scale = theme.animation.scale;
      onPressOut?.(e);
      _reactNative.Animated.timing(elevation, {
        toValue: isV3 && elevated ? 1 : 0,
        duration: 150 * scale,
        useNativeDriver: _reactNative.Platform.constants.reactNativeVersion.minor <= 72
      }).start();
    });
    var opacity = isV3 ? 0.38 : 0.26;
    var defaultBorderRadius = roundness * (isV3 ? 2 : 4);
    var iconSize = isV3 ? 18 : 16;
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      customBackgroundColor = _ref2.backgroundColor,
      _ref2$borderRadius = _ref2.borderRadius,
      borderRadius = _ref2$borderRadius === undefined ? defaultBorderRadius : _ref2$borderRadius;
    var _getChipColors = (0, _helpers.getChipColors)({
        isOutlined,
        theme,
        selectedColor,
        showSelectedOverlay,
        customBackgroundColor,
        disabled,
        customRippleColor
      }),
      borderColor = _getChipColors.borderColor,
      textColor = _getChipColors.textColor,
      iconColor = _getChipColors.iconColor,
      rippleColor = _getChipColors.rippleColor,
      selectedBackgroundColor = _getChipColors.selectedBackgroundColor,
      backgroundColor = _getChipColors.backgroundColor;
    var accessibilityState = {
      selected,
      disabled
    };
    var elevationStyle = isV3 || false ? elevation : 0;
    var multiplier = isV3 ? compact ? 1.5 : 2 : 1;
    var labelSpacings = {
      marginRight: onClose ? 0 : 8 * multiplier,
      marginLeft: avatar || icon || selected && showSelectedCheck ? 4 * multiplier : 8 * multiplier
    };
    var contentSpacings = {
      paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4
    };
    var labelTextStyle = {
      color: textColor,
      ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular)
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Surface.default, {
      style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {
        elevation: elevationStyle
      }, {
        backgroundColor: selected ? selectedBackgroundColor : backgroundColor,
        borderColor,
        borderRadius
      }, style],
      ...(theme.isV3 && {
        elevation: elevationStyle
      }),
      ...rest,
      testID: `${testID}-container`,
      theme: theme,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
        borderless: true,
        background: background,
        style: [{
          borderRadius
        }, styles.touchable],
        onPress: onPress,
        onLongPress: onLongPress,
        onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,
        onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,
        delayLongPress: delayLongPress,
        rippleColor: rippleColor,
        disabled: disabled,
        accessibilityLabel: accessibilityLabel,
        accessibilityRole: accessibilityRole,
        accessibilityState: accessibilityState,
        testID: testID,
        theme: theme,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.content, isV3 && styles.md3Content, contentSpacings],
          children: [avatar && !icon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {
              opacity
            }],
            children: /*#__PURE__*/React.isValidElement(avatar) ? /*#__PURE__*/React.cloneElement(avatar, {
              style: [styles.avatar, avatar.props.style]
            }) : avatar
          }) : null, icon || selected && showSelectedCheck ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null],
            children: icon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
              source: icon,
              color: avatar ? _colors.white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,
              size: 18,
              theme: theme
            }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
              name: "check",
              color: avatar ? _colors.white : iconColor,
              size: 18,
              direction: "ltr"
            })
          }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
            variant: "labelLarge",
            selectable: false,
            numberOfLines: 1,
            style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],
            ellipsizeMode: ellipsizeMode,
            maxFontSizeMultiplier: maxFontSizeMultiplier,
            children: children
          })]
        })
      }), onClose ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.closeButtonStyle,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Pressable, {
          onPress: onClose,
          disabled: disabled,
          accessibilityRole: "button",
          accessibilityLabel: closeIconAccessibilityLabel,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon],
            children: closeIcon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
              source: closeIcon,
              color: iconColor,
              size: iconSize
            }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
              name: isV3 ? 'close' : 'close-circle',
              size: iconSize,
              color: iconColor,
              direction: "ltr"
            })
          })
        })
      }) : null]
    });
  };
  var styles = _reactNative.StyleSheet.create({
    container: {
      borderWidth: _reactNative.StyleSheet.hairlineWidth,
      borderStyle: 'solid',
      flexDirection: 'column'
    },
    md3OutlineContainer: {
      borderWidth: 1
    },
    md3FlatContainer: {
      borderWidth: 0
    },
    content: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingLeft: 4,
      position: 'relative'
    },
    md3Content: {
      paddingLeft: 0
    },
    icon: {
      padding: 4,
      alignSelf: 'center'
    },
    md3Icon: {
      paddingLeft: 8,
      paddingRight: 0
    },
    closeIcon: {
      marginRight: 4
    },
    md3CloseIcon: {
      marginRight: 8,
      padding: 0
    },
    labelText: {
      minHeight: 24,
      lineHeight: 24,
      textAlignVertical: 'center',
      marginVertical: 4
    },
    md3LabelText: {
      textAlignVertical: 'center',
      marginVertical: 6
    },
    avatar: {
      width: 24,
      height: 24,
      borderRadius: 12
    },
    avatarWrapper: {
      marginRight: 4
    },
    md3AvatarWrapper: {
      marginLeft: 4,
      marginRight: 0
    },
    md3SelectedIcon: {
      paddingLeft: 4
    },
    // eslint-disable-next-line react-native/no-color-literals
    avatarSelected: {
      position: 'absolute',
      top: 4,
      left: 4,
      backgroundColor: 'rgba(0, 0, 0, .29)'
    },
    closeButtonStyle: {
      position: 'absolute',
      right: 0,
      height: '100%',
      justifyContent: 'center',
      alignItems: 'center'
    },
    touchable: {
      width: '100%'
    }
  });
  var _default = exports.default = Chip;
},630,[1,203,125,45,603,631,506,529,583,570,543,599,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getChipColors = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var _colors = require(_dependencyMap[2]);
  var getBorderColor = _ref => {
    var theme = _ref.theme,
      isOutlined = _ref.isOutlined,
      disabled = _ref.disabled,
      selectedColor = _ref.selectedColor,
      backgroundColor = _ref.backgroundColor;
    var isSelectedColor = selectedColor !== undefined;
    if (theme.isV3) {
      if (disabled) {
        return (0, _color.default)(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();
      }
      if (isSelectedColor) {
        return (0, _color.default)(selectedColor).alpha(0.29).rgb().string();
      }
      return theme.colors.outline;
    }
    if (isOutlined) {
      if (isSelectedColor) {
        return (0, _color.default)(selectedColor).alpha(0.29).rgb().string();
      }
      if (theme.dark) {
        return (0, _color.default)(_colors.white).alpha(0.29).rgb().string();
      }
      return (0, _color.default)(_colors.black).alpha(0.29).rgb().string();
    }
    return backgroundColor;
  };
  var getTextColor = _ref2 => {
    var theme = _ref2.theme,
      isOutlined = _ref2.isOutlined,
      disabled = _ref2.disabled,
      selectedColor = _ref2.selectedColor;
    var isSelectedColor = selectedColor !== undefined;
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      }
      if (isSelectedColor) {
        return selectedColor;
      }
      if (isOutlined) {
        return theme.colors.onSurfaceVariant;
      }
      return theme.colors.onSecondaryContainer;
    }
    if (disabled) {
      return theme.colors.disabled;
    }
    if (isSelectedColor) {
      return (0, _color.default)(selectedColor).alpha(0.87).rgb().string();
    }
    return (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
  };
  var getDefaultBackgroundColor = _ref3 => {
    var theme = _ref3.theme,
      isOutlined = _ref3.isOutlined;
    if (theme.isV3) {
      if (isOutlined) {
        return theme.colors.surface;
      }
      return theme.colors.secondaryContainer;
    }
    if (isOutlined) {
      return theme.colors?.surface;
    }
    if (theme.dark) {
      return '#383838';
    }
    return '#ebebeb';
  };
  var getBackgroundColor = _ref4 => {
    var theme = _ref4.theme,
      isOutlined = _ref4.isOutlined,
      disabled = _ref4.disabled,
      customBackgroundColor = _ref4.customBackgroundColor;
    if (typeof customBackgroundColor === 'string') {
      return customBackgroundColor;
    }
    if (theme.isV3) {
      if (disabled) {
        if (isOutlined) {
          return 'transparent';
        }
        return (0, _color.default)(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();
      }
    }
    return getDefaultBackgroundColor({
      theme,
      isOutlined
    });
  };
  var getSelectedBackgroundColor = _ref5 => {
    var theme = _ref5.theme,
      isOutlined = _ref5.isOutlined,
      disabled = _ref5.disabled,
      customBackgroundColor = _ref5.customBackgroundColor,
      showSelectedOverlay = _ref5.showSelectedOverlay;
    var backgroundColor = getBackgroundColor({
      theme,
      disabled,
      isOutlined,
      customBackgroundColor
    });
    if (theme.isV3) {
      if (isOutlined) {
        if (showSelectedOverlay) {
          return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSurfaceVariant), 0.12).rgb().string();
        }
        return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSurfaceVariant), 0).rgb().string();
      }
      if (showSelectedOverlay) {
        return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSecondaryContainer), 0.12).rgb().string();
      }
      return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSecondaryContainer), 0).rgb().string();
    }
    if (theme.dark) {
      if (isOutlined) {
        return (0, _color.default)(backgroundColor).lighten(0.2).rgb().string();
      }
      return (0, _color.default)(backgroundColor).lighten(0.4).rgb().string();
    }
    if (isOutlined) {
      return (0, _color.default)(backgroundColor).darken(0.08).rgb().string();
    }
    return (0, _color.default)(backgroundColor).darken(0.2).rgb().string();
  };
  var getIconColor = _ref6 => {
    var theme = _ref6.theme,
      isOutlined = _ref6.isOutlined,
      disabled = _ref6.disabled,
      selectedColor = _ref6.selectedColor;
    var isSelectedColor = selectedColor !== undefined;
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      }
      if (isSelectedColor) {
        return selectedColor;
      }
      if (isOutlined) {
        return theme.colors.onSurfaceVariant;
      }
      return theme.colors.onSecondaryContainer;
    }
    if (disabled) {
      return theme.colors.disabled;
    }
    if (isSelectedColor) {
      return (0, _color.default)(selectedColor).alpha(0.54).rgb().string();
    }
    return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
  };
  var getRippleColor = _ref7 => {
    var theme = _ref7.theme,
      isOutlined = _ref7.isOutlined,
      disabled = _ref7.disabled,
      selectedColor = _ref7.selectedColor,
      selectedBackgroundColor = _ref7.selectedBackgroundColor,
      customRippleColor = _ref7.customRippleColor;
    if (customRippleColor) {
      return customRippleColor;
    }
    var isSelectedColor = selectedColor !== undefined;
    var textColor = getTextColor({
      theme,
      disabled,
      selectedColor,
      isOutlined
    });
    if (theme.isV3) {
      if (isSelectedColor) {
        return (0, _color.default)(selectedColor).alpha(0.12).rgb().string();
      }
      return (0, _color.default)(textColor).alpha(0.12).rgb().string();
    }
    if (isSelectedColor) {
      return (0, _color.default)(selectedColor).fade(0.5).rgb().string();
    }
    return selectedBackgroundColor;
  };
  var getChipColors = _ref8 => {
    var isOutlined = _ref8.isOutlined,
      theme = _ref8.theme,
      selectedColor = _ref8.selectedColor,
      showSelectedOverlay = _ref8.showSelectedOverlay,
      customBackgroundColor = _ref8.customBackgroundColor,
      disabled = _ref8.disabled,
      customRippleColor = _ref8.customRippleColor;
    var baseChipColorProps = {
      theme,
      isOutlined,
      disabled
    };
    var backgroundColor = getBackgroundColor({
      ...baseChipColorProps,
      customBackgroundColor
    });
    var selectedBackgroundColor = getSelectedBackgroundColor({
      ...baseChipColorProps,
      customBackgroundColor,
      showSelectedOverlay
    });
    return {
      borderColor: getBorderColor({
        ...baseChipColorProps,
        selectedColor,
        backgroundColor
      }),
      textColor: getTextColor({
        ...baseChipColorProps,
        selectedColor
      }),
      iconColor: getIconColor({
        ...baseChipColorProps,
        selectedColor
      }),
      rippleColor: getRippleColor({
        ...baseChipColorProps,
        selectedColor,
        selectedBackgroundColor,
        customRippleColor
      }),
      backgroundColor,
      selectedBackgroundColor
    };
  };
  exports.getChipColors = getChipColors;
},631,[1,515,529]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _DataTableCell = _interopRequireDefault(require(_dependencyMap[4]));
  var _DataTableHeader2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _DataTablePagination2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _DataTableRow2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _DataTableTitle2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["children", "style"]; // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Data tables allow displaying sets of data.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { DataTable } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [page, setPage] = React.useState<number>(0);
   *   const [numberOfItemsPerPageList] = React.useState([2, 3, 4]);
   *   const [itemsPerPage, onItemsPerPageChange] = React.useState(
   *     numberOfItemsPerPageList[0]
   *   );
   *
   *   const [items] = React.useState([
   *    {
   *      key: 1,
   *      name: 'Cupcake',
   *      calories: 356,
   *      fat: 16,
   *    },
   *    {
   *      key: 2,
   *      name: 'Eclair',
   *      calories: 262,
   *      fat: 16,
   *    },
   *    {
   *      key: 3,
   *      name: 'Frozen yogurt',
   *      calories: 159,
   *      fat: 6,
   *    },
   *    {
   *      key: 4,
   *      name: 'Gingerbread',
   *      calories: 305,
   *      fat: 3.7,
   *    },
   *   ]);
   *
   *   const from = page * itemsPerPage;
   *   const to = Math.min((page + 1) * itemsPerPage, items.length);
   *
   *   React.useEffect(() => {
   *     setPage(0);
   *   }, [itemsPerPage]);
   *
   *   return (
   *     <DataTable>
   *       <DataTable.Header>
   *         <DataTable.Title>Dessert</DataTable.Title>
   *         <DataTable.Title numeric>Calories</DataTable.Title>
   *         <DataTable.Title numeric>Fat</DataTable.Title>
   *       </DataTable.Header>
   *
   *       {items.slice(from, to).map((item) => (
   *         <DataTable.Row key={item.key}>
   *           <DataTable.Cell>{item.name}</DataTable.Cell>
   *           <DataTable.Cell numeric>{item.calories}</DataTable.Cell>
   *           <DataTable.Cell numeric>{item.fat}</DataTable.Cell>
   *         </DataTable.Row>
   *       ))}
   *
   *       <DataTable.Pagination
   *         page={page}
   *         numberOfPages={Math.ceil(items.length / itemsPerPage)}
   *         onPageChange={(page) => setPage(page)}
   *         label={`${from + 1}-${to} of ${items.length}`}
   *         numberOfItemsPerPageList={numberOfItemsPerPageList}
   *         numberOfItemsPerPage={itemsPerPage}
   *         onItemsPerPageChange={onItemsPerPageChange}
   *         showFastPaginationControls
   *         selectPageDropdownLabel={'Rows per page'}
   *       />
   *     </DataTable>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var DataTable = _ref => {
    var children = _ref.children,
      style = _ref.style,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ...rest,
      style: [styles.container, style],
      children: children
    });
  };

  // @component ./DataTableHeader.tsx
  DataTable.Header = _DataTableHeader2.default;

  // @component ./DataTableTitle.tsx
  DataTable.Title = _DataTableTitle2.default;

  // @component ./DataTableRow.tsx
  DataTable.Row = _DataTableRow2.default;

  // @component ./DataTableCell.tsx
  DataTable.Cell = _DataTableCell.default;

  // @component ./DataTablePagination.tsx
  DataTable.Pagination = _DataTablePagination2.default;
  var styles = _reactNative.StyleSheet.create({
    container: {
      width: '100%'
    }
  });
  var _default = exports.default = DataTable;
},632,[1,203,125,45,633,634,635,647,648,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[4]));
  var _Text = _interopRequireDefault(require(_dependencyMap[5]));
  var _jsxRuntime = require(_dependencyMap[6]);
  var _excluded = ["children", "textStyle", "style", "numeric", "maxFontSizeMultiplier", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show a single cell inside of a table.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { DataTable } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *      <DataTable.Row>
   *        <DataTable.Cell numeric>1</DataTable.Cell>
   *        <DataTable.Cell numeric>2</DataTable.Cell>
   *        <DataTable.Cell numeric>3</DataTable.Cell>
   *        <DataTable.Cell numeric>4</DataTable.Cell>
   *      </DataTable.Row>
   * );
   *
   * export default MyComponent;
   * ```
   *
   * If you want to support multiline text, please use View instead, as multiline text doesn't comply with
   * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).
   *
   * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
   */
  var DataTableCell = _ref => {
    var children = _ref.children,
      textStyle = _ref.textStyle,
      style = _ref.style,
      numeric = _ref.numeric,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
      testID = _ref.testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
      ...rest,
      testID: testID,
      style: [styles.container, numeric && styles.right, style],
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(CellContent, {
        textStyle: textStyle,
        testID: testID,
        maxFontSizeMultiplier: maxFontSizeMultiplier,
        children: children
      })
    });
  };
  var CellContent = _ref2 => {
    var children = _ref2.children,
      textStyle = _ref2.textStyle,
      maxFontSizeMultiplier = _ref2.maxFontSizeMultiplier,
      testID = _ref2.testID;
    if (/*#__PURE__*/React.isValidElement(children)) {
      return children;
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
      style: textStyle,
      numberOfLines: 1,
      maxFontSizeMultiplier: maxFontSizeMultiplier,
      testID: `${testID}-text-container`,
      children: children
    });
  };
  DataTableCell.displayName = 'DataTable.Cell';
  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center'
    },
    right: {
      justifyContent: 'flex-end'
    }
  });
  var _default = exports.default = DataTableCell;
},633,[1,203,125,45,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.DataTableHeader = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _theming = require(_dependencyMap[5]);
  var _colors = require(_dependencyMap[6]);
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["children", "style", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to display title in table header.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { DataTable } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *       <DataTable>
   *         <DataTable.Header>
   *           <DataTable.Title
   *             sortDirection='descending'
   *           >
   *             Dessert
   *           </DataTable.Title>
   *           <DataTable.Title numeric>Calories</DataTable.Title>
   *           <DataTable.Title numeric>Fat (g)</DataTable.Title>
   *         </DataTable.Header>
   *       </DataTable>
   * );
   *
   * export default MyComponent;
   * ```
   */

  var DataTableHeader = _ref => {
    var children = _ref.children,
      style = _ref.style,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var borderBottomColor = theme.isV3 ? theme.colors.surfaceVariant : (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ...rest,
      style: [styles.header, {
        borderBottomColor
      }, style],
      children: children
    });
  };
  exports.DataTableHeader = DataTableHeader;
  DataTableHeader.displayName = 'DataTable.Header';
  var styles = _reactNative.StyleSheet.create({
    header: {
      flexDirection: 'row',
      paddingHorizontal: 16,
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth * 2
    }
  });
  var _default = exports.default = DataTableHeader; // @component-docs ignore-next-line
},634,[1,203,125,45,515,506,529,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.DataTablePagination = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _color = _interopRequireDefault(require(_dependencyMap[5]));
  var _theming = require(_dependencyMap[6]);
  var _Button = _interopRequireDefault(require(_dependencyMap[7]));
  var _IconButton = _interopRequireDefault(require(_dependencyMap[8]));
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[9]));
  var _Menu = _interopRequireDefault(require(_dependencyMap[10]));
  var _Text = _interopRequireDefault(require(_dependencyMap[11]));
  var _jsxRuntime = require(_dependencyMap[12]);
  var _excluded = ["label", "accessibilityLabel", "page", "numberOfPages", "onPageChange", "style", "showFastPaginationControls", "numberOfItemsPerPageList", "numberOfItemsPerPage", "onItemsPerPageChange", "selectPageDropdownLabel", "selectPageDropdownAccessibilityLabel", "selectPageDropdownRippleColor", "dropdownItemRippleColor", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var PaginationControls = _ref => {
    var page = _ref.page,
      numberOfPages = _ref.numberOfPages,
      onPageChange = _ref.onPageChange,
      showFastPaginationControls = _ref.showFastPaginationControls,
      themeOverrides = _ref.theme,
      paginationControlRippleColor = _ref.paginationControlRippleColor;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [showFastPaginationControls ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
        icon: _ref2 => {
          var size = _ref2.size,
            color = _ref2.color;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
            name: "page-first",
            color: color,
            size: size,
            direction: _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
          });
        },
        iconColor: textColor,
        rippleColor: paginationControlRippleColor,
        disabled: page === 0,
        onPress: () => onPageChange(0),
        accessibilityLabel: "page-first",
        theme: theme
      }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
        icon: _ref3 => {
          var size = _ref3.size,
            color = _ref3.color;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
            name: "chevron-left",
            color: color,
            size: size,
            direction: _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
          });
        },
        iconColor: textColor,
        rippleColor: paginationControlRippleColor,
        disabled: page === 0,
        onPress: () => onPageChange(page - 1),
        accessibilityLabel: "chevron-left",
        theme: theme
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
        icon: _ref4 => {
          var size = _ref4.size,
            color = _ref4.color;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
            name: "chevron-right",
            color: color,
            size: size,
            direction: _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
          });
        },
        iconColor: textColor,
        rippleColor: paginationControlRippleColor,
        disabled: numberOfPages === 0 || page === numberOfPages - 1,
        onPress: () => onPageChange(page + 1),
        accessibilityLabel: "chevron-right",
        theme: theme
      }), showFastPaginationControls ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
        icon: _ref5 => {
          var size = _ref5.size,
            color = _ref5.color;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
            name: "page-last",
            color: color,
            size: size,
            direction: _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
          });
        },
        iconColor: textColor,
        rippleColor: paginationControlRippleColor,
        disabled: numberOfPages === 0 || page === numberOfPages - 1,
        onPress: () => onPageChange(numberOfPages - 1),
        accessibilityLabel: "page-last",
        theme: theme
      }) : null]
    });
  };
  var PaginationDropdown = _ref6 => {
    var numberOfItemsPerPageList = _ref6.numberOfItemsPerPageList,
      numberOfItemsPerPage = _ref6.numberOfItemsPerPage,
      onItemsPerPageChange = _ref6.onItemsPerPageChange,
      themeOverrides = _ref6.theme,
      selectPageDropdownRippleColor = _ref6.selectPageDropdownRippleColor,
      dropdownItemRippleColor = _ref6.dropdownItemRippleColor;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var colors = theme.colors;
    var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      showSelect = _React$useState2[0],
      toggleSelect = _React$useState2[1];
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Menu.default, {
      visible: showSelect,
      onDismiss: () => toggleSelect(!showSelect),
      theme: theme,
      anchor: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.default, {
        mode: "outlined",
        onPress: () => toggleSelect(true),
        style: styles.button,
        icon: "menu-down",
        contentStyle: styles.contentStyle,
        theme: theme,
        rippleColor: selectPageDropdownRippleColor,
        children: `${numberOfItemsPerPage}`
      }),
      children: numberOfItemsPerPageList?.map(option => /*#__PURE__*/(0, _jsxRuntime.jsx)(_Menu.default.Item, {
        titleStyle: option === numberOfItemsPerPage && {
          color: colors?.primary
        },
        onPress: () => {
          onItemsPerPageChange?.(option);
          toggleSelect(false);
        },
        rippleColor: dropdownItemRippleColor,
        title: option,
        theme: theme
      }, option))
    });
  };

  /**
   * A component to show pagination for data table.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { DataTable } from 'react-native-paper';
   *
   * const numberOfItemsPerPageList = [2, 3, 4];
   *
   * const items = [
   *   {
   *     key: 1,
   *     name: 'Page 1',
   *   },
   *   {
   *     key: 2,
   *     name: 'Page 2',
   *   },
   *   {
   *     key: 3,
   *     name: 'Page 3',
   *   },
   * ];
   *
   * const MyComponent = () => {
   *   const [page, setPage] = React.useState(0);
   *   const [numberOfItemsPerPage, onItemsPerPageChange] = React.useState(numberOfItemsPerPageList[0]);
   *   const from = page * numberOfItemsPerPage;
   *   const to = Math.min((page + 1) * numberOfItemsPerPage, items.length);
   *
   *   React.useEffect(() => {
   *      setPage(0);
   *   }, [numberOfItemsPerPage]);
   *
   *   return (
   *     <DataTable>
   *       <DataTable.Pagination
   *         page={page}
   *         numberOfPages={Math.ceil(items.length / numberOfItemsPerPage)}
   *         onPageChange={page => setPage(page)}
   *         label={`${from + 1}-${to} of ${items.length}`}
   *         showFastPaginationControls
   *         numberOfItemsPerPageList={numberOfItemsPerPageList}
   *         numberOfItemsPerPage={numberOfItemsPerPage}
   *         onItemsPerPageChange={onItemsPerPageChange}
   *         selectPageDropdownLabel={'Rows per page'}
   *       />
   *     </DataTable>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var DataTablePagination = _ref7 => {
    var label = _ref7.label,
      accessibilityLabel = _ref7.accessibilityLabel,
      page = _ref7.page,
      numberOfPages = _ref7.numberOfPages,
      onPageChange = _ref7.onPageChange,
      style = _ref7.style,
      _ref7$showFastPaginat = _ref7.showFastPaginationControls,
      showFastPaginationControls = _ref7$showFastPaginat === undefined ? false : _ref7$showFastPaginat,
      numberOfItemsPerPageList = _ref7.numberOfItemsPerPageList,
      numberOfItemsPerPage = _ref7.numberOfItemsPerPage,
      onItemsPerPageChange = _ref7.onItemsPerPageChange,
      selectPageDropdownLabel = _ref7.selectPageDropdownLabel,
      selectPageDropdownAccessibilityLabel = _ref7.selectPageDropdownAccessibilityLabel,
      selectPageDropdownRippleColor = _ref7.selectPageDropdownRippleColor,
      dropdownItemRippleColor = _ref7.dropdownItemRippleColor,
      themeOverrides = _ref7.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref7, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var labelColor = (0, _color.default)(theme.isV3 ? theme.colors.onSurface : theme?.colors.text).alpha(0.6).rgb().string();
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      ...rest,
      style: [styles.container, style],
      accessibilityLabel: "pagination-container",
      children: [numberOfItemsPerPageList && numberOfItemsPerPage && onItemsPerPageChange && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        accessibilityLabel: "Options Select",
        style: styles.optionsContainer,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
          style: [styles.label, {
            color: labelColor
          }],
          numberOfLines: 3,
          accessibilityLabel: selectPageDropdownAccessibilityLabel || 'selectPageDropdownLabel',
          children: selectPageDropdownLabel
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(PaginationDropdown, {
          numberOfItemsPerPageList: numberOfItemsPerPageList,
          numberOfItemsPerPage: numberOfItemsPerPage,
          onItemsPerPageChange: onItemsPerPageChange,
          selectPageDropdownRippleColor: selectPageDropdownRippleColor,
          dropdownItemRippleColor: dropdownItemRippleColor,
          theme: theme
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
        style: [styles.label, {
          color: labelColor
        }],
        numberOfLines: 3,
        accessibilityLabel: accessibilityLabel || 'label',
        children: label
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.iconsContainer,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(PaginationControls, {
          showFastPaginationControls: showFastPaginationControls,
          onPageChange: onPageChange,
          page: page,
          numberOfPages: numberOfPages,
          theme: theme
        })
      })]
    });
  };
  exports.DataTablePagination = DataTablePagination;
  DataTablePagination.displayName = 'DataTable.Pagination';
  var styles = _reactNative.StyleSheet.create({
    container: {
      justifyContent: 'flex-end',
      flexDirection: 'row',
      alignItems: 'center',
      paddingLeft: 16,
      flexWrap: 'wrap'
    },
    optionsContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      marginVertical: 6
    },
    label: {
      fontSize: 12,
      marginRight: 16
    },
    button: {
      textAlign: 'center',
      marginRight: 16
    },
    iconsContainer: {
      flexDirection: 'row'
    },
    contentStyle: {
      flexDirection: 'row-reverse'
    }
  });
  var _default = exports.default = DataTablePagination; // @component-docs ignore-next-line
},635,[1,203,29,125,45,515,506,605,636,543,639,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _utils = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _forwardRef = require(_dependencyMap[6]);
  var _ActivityIndicator = _interopRequireDefault(require(_dependencyMap[7]));
  var _CrossFadeIcon = _interopRequireDefault(require(_dependencyMap[8]));
  var _Icon = _interopRequireDefault(require(_dependencyMap[9]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[10]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[11]));
  var _jsxRuntime = require(_dependencyMap[12]);
  var _excluded = ["icon", "iconColor", "containerColor", "rippleColor", "size", "accessibilityLabel", "disabled", "onPress", "selected", "animated", "mode", "style", "theme", "testID", "loading"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var PADDING = 8;
  /**
   * An icon button is a button which displays only an icon without a label.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { IconButton, MD3Colors } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <IconButton
   *     icon="camera"
   *     iconColor={MD3Colors.error50}
   *     size={20}
   *     onPress={() => console.log('Pressed')}
   *   />
   * );
   *
   * export default MyComponent;
   * ```
   *
   * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
   */
  var IconButton = (0, _forwardRef.forwardRef)((_ref, ref) => {
    var icon = _ref.icon,
      customIconColor = _ref.iconColor,
      customContainerColor = _ref.containerColor,
      customRippleColor = _ref.rippleColor,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 24 : _ref$size,
      accessibilityLabel = _ref.accessibilityLabel,
      disabled = _ref.disabled,
      onPress = _ref.onPress,
      _ref$selected = _ref.selected,
      selected = _ref$selected === undefined ? false : _ref$selected,
      _ref$animated = _ref.animated,
      animated = _ref$animated === undefined ? false : _ref$animated,
      mode = _ref.mode,
      style = _ref.style,
      themeOverrides = _ref.theme,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'icon-button' : _ref$testID,
      _ref$loading = _ref.loading,
      loading = _ref$loading === undefined ? false : _ref$loading,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3;
    var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;
    var _getIconButtonColor = (0, _utils.getIconButtonColor)({
        theme,
        disabled,
        selected,
        mode,
        customIconColor,
        customContainerColor,
        customRippleColor
      }),
      iconColor = _getIconButtonColor.iconColor,
      rippleColor = _getIconButtonColor.rippleColor,
      backgroundColor = _getIconButtonColor.backgroundColor,
      borderColor = _getIconButtonColor.borderColor;
    var buttonSize = isV3 ? size + 16 : size * 1.5;
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$borderWidth = _ref2.borderWidth,
      borderWidth = _ref2$borderWidth === undefined ? isV3 && mode === 'outlined' && !selected ? 1 : 0 : _ref2$borderWidth,
      _ref2$borderRadius = _ref2.borderRadius,
      borderRadius = _ref2$borderRadius === undefined ? buttonSize / 2 : _ref2$borderRadius;
    var borderStyles = {
      borderWidth,
      borderRadius,
      borderColor
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Surface.default, {
      ref: ref,
      testID: `${testID}-container`,
      style: [{
        backgroundColor,
        width: buttonSize,
        height: buttonSize
      }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style],
      ...(isV3 && {
        elevation: 0
      }),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
        borderless: true,
        centered: true,
        onPress: onPress,
        rippleColor: rippleColor,
        accessibilityLabel: accessibilityLabel,
        style: [styles.touchable, {
          borderRadius
        }]
        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
        ,
        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
        accessibilityComponentType: "button",
        accessibilityRole: "button",
        accessibilityState: {
          disabled
        },
        disabled: disabled,
        hitSlop: _TouchableRipple.default.supported ? {
          top: 10,
          left: 10,
          bottom: 10,
          right: 10
        } : {
          top: 6,
          left: 6,
          bottom: 6,
          right: 6
        },
        testID: testID,
        ...rest,
        children: loading ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ActivityIndicator.default, {
          size: size,
          color: iconColor
        }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(IconComponent, {
          color: iconColor,
          source: icon,
          size: size
        })
      })
    });
  });
  var styles = _reactNative.StyleSheet.create({
    container: {
      overflow: 'hidden',
      margin: 6,
      elevation: 0
    },
    touchable: {
      flexGrow: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    disabled: {
      opacity: 0.32
    }
  });
  var _default = exports.default = IconButton;
},636,[1,203,125,45,637,506,577,601,638,570,599,580,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getIconButtonColor = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var getBorderColor = _ref => {
    var theme = _ref.theme,
      disabled = _ref.disabled;
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.surfaceDisabled;
      }
      return theme.colors.outline;
    }
    return undefined;
  };
  var getBackgroundColor = _ref2 => {
    var theme = _ref2.theme,
      isMode = _ref2.isMode,
      disabled = _ref2.disabled,
      selected = _ref2.selected,
      customContainerColor = _ref2.customContainerColor;
    if (theme.isV3) {
      if (disabled) {
        if (isMode('contained') || isMode('contained-tonal')) {
          return theme.colors.surfaceDisabled;
        }
      }
      if (typeof customContainerColor !== 'undefined') {
        return customContainerColor;
      }
      if (isMode('contained')) {
        if (selected) {
          return theme.colors.primary;
        }
        return theme.colors.surfaceVariant;
      }
      if (isMode('contained-tonal')) {
        if (selected) {
          return theme.colors.secondaryContainer;
        }
        return theme.colors.surfaceVariant;
      }
      if (isMode('outlined')) {
        if (selected) {
          return theme.colors.inverseSurface;
        }
      }
    }
    if (typeof customContainerColor !== 'undefined') {
      return customContainerColor;
    }
    return undefined;
  };
  var getIconColor = _ref3 => {
    var theme = _ref3.theme,
      isMode = _ref3.isMode,
      disabled = _ref3.disabled,
      selected = _ref3.selected,
      customIconColor = _ref3.customIconColor;
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      }
      if (typeof customIconColor !== 'undefined') {
        return customIconColor;
      }
      if (isMode('contained')) {
        if (selected) {
          return theme.colors.onPrimary;
        }
        return theme.colors.primary;
      }
      if (isMode('contained-tonal')) {
        if (selected) {
          return theme.colors.onSecondaryContainer;
        }
        return theme.colors.onSurfaceVariant;
      }
      if (isMode('outlined')) {
        if (selected) {
          return theme.colors.inverseOnSurface;
        }
        return theme.colors.onSurfaceVariant;
      }
      if (selected) {
        return theme.colors.primary;
      }
      return theme.colors.onSurfaceVariant;
    }
    if (typeof customIconColor !== 'undefined') {
      return customIconColor;
    }
    return theme.colors.text;
  };
  var getRippleColor = _ref4 => {
    var theme = _ref4.theme,
      iconColor = _ref4.iconColor,
      customRippleColor = _ref4.customRippleColor;
    if (customRippleColor) {
      return customRippleColor;
    }
    if (theme.isV3) {
      return (0, _color.default)(iconColor).alpha(0.12).rgb().string();
    }
    return (0, _color.default)(iconColor).alpha(0.32).rgb().string();
  };
  var getIconButtonColor = _ref5 => {
    var theme = _ref5.theme,
      disabled = _ref5.disabled,
      mode = _ref5.mode,
      selected = _ref5.selected,
      customIconColor = _ref5.customIconColor,
      customContainerColor = _ref5.customContainerColor,
      customRippleColor = _ref5.customRippleColor;
    var isMode = modeToCompare => {
      return mode === modeToCompare;
    };
    var baseIconColorProps = {
      theme,
      isMode,
      disabled,
      selected
    };
    var iconColor = getIconColor({
      ...baseIconColorProps,
      customIconColor
    });
    return {
      iconColor,
      backgroundColor: getBackgroundColor({
        ...baseIconColorProps,
        customContainerColor
      }),
      rippleColor: getRippleColor({
        theme,
        iconColor,
        customRippleColor
      }),
      borderColor: getBorderColor({
        theme,
        disabled
      })
    };
  };
  exports.getIconButtonColor = getIconButtonColor;
},637,[1,515]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _Icon = _interopRequireWildcard(require(_dependencyMap[4]));
  var _theming = require(_dependencyMap[5]);
  var _jsxRuntime = require(_dependencyMap[6]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var CrossFadeIcon = _ref => {
    var color = _ref.color,
      size = _ref.size,
      source = _ref.source,
      themeOverrides = _ref.theme,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'cross-fade-icon' : _ref$testID;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useState = React.useState(() => source),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      currentIcon = _React$useState2[0],
      setCurrentIcon = _React$useState2[1];
    var _React$useState3 = React.useState(null),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      previousIcon = _React$useState4[0],
      setPreviousIcon = _React$useState4[1];
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(1)),
      fade = _React$useRef.current;
    var scale = theme.animation.scale;
    if (currentIcon !== source) {
      setPreviousIcon(() => currentIcon);
      setCurrentIcon(() => source);
    }
    React.useEffect(() => {
      if ((0, _Icon.isValidIcon)(previousIcon) && !(0, _Icon.isEqualIcon)(previousIcon, currentIcon)) {
        fade.setValue(1);
        _reactNative.Animated.timing(fade, {
          duration: scale * 200,
          toValue: 0,
          useNativeDriver: true
        }).start();
      }
    }, [currentIcon, previousIcon, fade, scale]);
    var opacityPrev = fade;
    var opacityNext = previousIcon ? fade.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 0]
    }) : 1;
    var rotatePrev = fade.interpolate({
      inputRange: [0, 1],
      outputRange: ['-90deg', '0deg']
    });
    var rotateNext = previousIcon ? fade.interpolate({
      inputRange: [0, 1],
      outputRange: ['0deg', '-180deg']
    }) : '0deg';
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.content, {
        height: size,
        width: size
      }],
      children: [previousIcon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [styles.icon, {
          opacity: opacityPrev,
          transform: [{
            rotate: rotatePrev
          }]
        }],
        testID: `${testID}-previous`,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
          source: previousIcon,
          size: size,
          color: color,
          theme: theme
        })
      }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [styles.icon, {
          opacity: opacityNext,
          transform: [{
            rotate: rotateNext
          }]
        }],
        testID: `${testID}-current`,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
          source: currentIcon,
          size: size,
          color: color,
          theme: theme
        })
      })]
    });
  };
  var _default = exports.default = CrossFadeIcon;
  var styles = _reactNative.StyleSheet.create({
    content: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    icon: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    }
  });
},638,[1,29,125,45,570,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.ELEVATION_LEVELS_MAP = undefined;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _MenuItem = _interopRequireDefault(require(_dependencyMap[5]));
  var _constants = require(_dependencyMap[6]);
  var _theming = require(_dependencyMap[7]);
  var _types = require(_dependencyMap[8]);
  var _addEventListener = require(_dependencyMap[9]);
  var _BackHandler = require(_dependencyMap[10]);
  var _Portal = _interopRequireDefault(require(_dependencyMap[11]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[12]));
  var _jsxRuntime = require(_dependencyMap[13]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  // Minimum padding between the edge of the screen and the menu
  var SCREEN_INDENT = 8;
  // From https://material.io/design/motion/speed.html#duration
  var ANIMATION_DURATION = 250;
  // From the 'Standard easing' section of https://material.io/design/motion/speed.html#easing
  var EASING = _reactNative.Easing.bezier(0.4, 0, 0.2, 1);
  var WINDOW_LAYOUT = _reactNative.Dimensions.get('window');
  var DEFAULT_ELEVATION = 2;
  var ELEVATION_LEVELS_MAP = exports.ELEVATION_LEVELS_MAP = Object.values(_types.ElevationLevels);
  var DEFAULT_MODE = 'elevated';
  var focusFirstDOMNode = el => {
    if (el && false) {
      // When in the browser, we want to focus the first focusable item on toggle
      // For example, when menu is shown, focus the first item in the menu
      // And when menu is dismissed, send focus back to the button to resume tabbing
      var node = (0, _reactNative.findNodeHandle)(el);
      var focusableNode = node.querySelector(
      // This is a rough list of selectors that can be focused
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
      focusableNode?.focus();
    }
  };
  var isCoordinate = anchor => ! /*#__PURE__*/React.isValidElement(anchor) && typeof anchor?.x === 'number' && typeof anchor?.y === 'number';
  var isBrowser = () => false;

  /**
   * Menus display a list of choices on temporary elevated surfaces. Their placement varies based on the element that opens them.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { View } from 'react-native';
   * import { Button, Menu, Divider, PaperProvider } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [visible, setVisible] = React.useState(false);
   *
   *   const openMenu = () => setVisible(true);
   *
   *   const closeMenu = () => setVisible(false);
   *
   *   return (
   *     <PaperProvider>
   *       <View
   *         style={{
   *           paddingTop: 50,
   *           flexDirection: 'row',
   *           justifyContent: 'center',
   *         }}>
   *         <Menu
   *           visible={visible}
   *           onDismiss={closeMenu}
   *           anchor={<Button onPress={openMenu}>Show menu</Button>}>
   *           <Menu.Item onPress={() => {}} title="Item 1" />
   *           <Menu.Item onPress={() => {}} title="Item 2" />
   *           <Divider />
   *           <Menu.Item onPress={() => {}} title="Item 3" />
   *         </Menu>
   *       </View>
   *     </PaperProvider>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   *
   * ### Note
   * When using `Menu` within a React Native's `Modal` component, you need to wrap all
   * `Modal` contents within a `PaperProvider` in order for the menu to show. This
   * wrapping is not necessary if you use Paper's `Modal` instead.
   */

  var Menu = _ref => {
    var visible = _ref.visible,
      _ref$statusBarHeight = _ref.statusBarHeight,
      statusBarHeight = _ref$statusBarHeight === undefined ? _constants.APPROX_STATUSBAR_HEIGHT : _ref$statusBarHeight,
      _ref$overlayAccessibi = _ref.overlayAccessibilityLabel,
      overlayAccessibilityLabel = _ref$overlayAccessibi === undefined ? 'Close menu' : _ref$overlayAccessibi,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'menu' : _ref$testID,
      anchor = _ref.anchor,
      onDismiss = _ref.onDismiss,
      anchorPosition = _ref.anchorPosition,
      contentStyle = _ref.contentStyle,
      style = _ref.style,
      _ref$elevation = _ref.elevation,
      elevation = _ref$elevation === undefined ? DEFAULT_ELEVATION : _ref$elevation,
      _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? DEFAULT_MODE : _ref$mode,
      children = _ref.children,
      themeOverrides = _ref.theme,
      keyboardShouldPersistTaps = _ref.keyboardShouldPersistTaps;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useState = React.useState(visible),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      rendered = _React$useState2[0],
      setRendered = _React$useState2[1];
    var _React$useState3 = React.useState(0),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      left = _React$useState4[0],
      setLeft = _React$useState4[1];
    var _React$useState5 = React.useState(0),
      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
      top = _React$useState6[0],
      setTop = _React$useState6[1];
    var _React$useState7 = React.useState({
        width: 0,
        height: 0
      }),
      _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
      menuLayout = _React$useState8[0],
      setMenuLayout = _React$useState8[1];
    var _React$useState9 = React.useState({
        width: 0,
        height: 0
      }),
      _React$useState10 = (0, _slicedToArray2.default)(_React$useState9, 2),
      anchorLayout = _React$useState10[0],
      setAnchorLayout = _React$useState10[1];
    var _React$useState11 = React.useState({
        width: WINDOW_LAYOUT.width,
        height: WINDOW_LAYOUT.height
      }),
      _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
      windowLayout = _React$useState12[0],
      setWindowLayout = _React$useState12[1];
    var opacityAnimationRef = React.useRef(new _reactNative.Animated.Value(0));
    var scaleAnimationRef = React.useRef(new _reactNative.Animated.ValueXY({
      x: 0,
      y: 0
    }));
    var keyboardHeightRef = React.useRef(0);
    var prevVisible = React.useRef(null);
    var anchorRef = React.useRef(null);
    var menuRef = React.useRef(null);
    var prevRendered = React.useRef(false);
    var keyboardDidShow = React.useCallback(e => {
      var keyboardHeight = e.endCoordinates.height;
      keyboardHeightRef.current = keyboardHeight;
    }, []);
    var keyboardDidHide = React.useCallback(() => {
      keyboardHeightRef.current = 0;
    }, []);
    var keyboardDidShowListenerRef = React.useRef();
    var keyboardDidHideListenerRef = React.useRef();
    var backHandlerSubscriptionRef = React.useRef();
    var dimensionsSubscriptionRef = React.useRef();
    var handleDismiss = React.useCallback(() => {
      if (visible) {
        onDismiss?.();
      }
    }, [onDismiss, visible]);
    var handleKeypress = React.useCallback(e => {
      if (e.key === 'Escape') {
        onDismiss?.();
      }
    }, [onDismiss]);
    var removeListeners = React.useCallback(() => {
      backHandlerSubscriptionRef.current?.remove();
      dimensionsSubscriptionRef.current?.remove();
      isBrowser() && document.removeEventListener('keyup', handleKeypress);
    }, [handleKeypress]);
    var attachListeners = React.useCallback(() => {
      backHandlerSubscriptionRef.current = (0, _addEventListener.addEventListener)(_BackHandler.BackHandler, 'hardwareBackPress', handleDismiss);
      dimensionsSubscriptionRef.current = (0, _addEventListener.addEventListener)(_reactNative.Dimensions, 'change', handleDismiss);
      false;
    }, [handleDismiss, handleKeypress]);
    var measureMenuLayout = () => new Promise(resolve => {
      if (menuRef.current) {
        menuRef.current.measureInWindow((x, y, width, height) => {
          resolve({
            x,
            y,
            width,
            height
          });
        });
      }
    });
    var measureAnchorLayout = React.useCallback(() => new Promise(resolve => {
      if (isCoordinate(anchor)) {
        resolve({
          x: anchor.x,
          y: anchor.y,
          width: 0,
          height: 0
        });
        return;
      }
      if (anchorRef.current) {
        anchorRef.current.measureInWindow((x, y, width, height) => {
          resolve({
            x,
            y,
            width,
            height
          });
        });
      }
    }), [anchor]);
    var show = React.useCallback(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
      var windowLayoutResult = _reactNative.Dimensions.get('window');
      var _yield$Promise$all = yield Promise.all([measureMenuLayout(), measureAnchorLayout()]),
        _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2),
        menuLayoutResult = _yield$Promise$all2[0],
        anchorLayoutResult = _yield$Promise$all2[1];

      // When visible is true for first render
      // native views can be still not rendered and
      // measureMenuLayout/measureAnchorLayout functions
      // return wrong values e.g { x:0, y: 0, width: 0, height: 0 }
      // so we have to wait until views are ready
      // and rerun this function to show menu
      if (!windowLayoutResult.width || !windowLayoutResult.height || !menuLayoutResult.width || !menuLayoutResult.height || !anchorLayoutResult.width && !isCoordinate(anchor) || !anchorLayoutResult.height && !isCoordinate(anchor)) {
        requestAnimationFrame(show);
        return;
      }
      setLeft(anchorLayoutResult.x);
      setTop(anchorLayoutResult.y);
      setAnchorLayout({
        height: anchorLayoutResult.height,
        width: anchorLayoutResult.width
      });
      setMenuLayout({
        height: menuLayoutResult.height,
        width: menuLayoutResult.width
      });
      setWindowLayout({
        height: windowLayoutResult.height - keyboardHeightRef.current,
        width: windowLayoutResult.width
      });
      attachListeners();
      var animation = theme.animation;
      _reactNative.Animated.parallel([_reactNative.Animated.timing(scaleAnimationRef.current, {
        toValue: {
          x: menuLayoutResult.width,
          y: menuLayoutResult.height
        },
        duration: ANIMATION_DURATION * animation.scale,
        easing: EASING,
        useNativeDriver: true
      }), _reactNative.Animated.timing(opacityAnimationRef.current, {
        toValue: 1,
        duration: ANIMATION_DURATION * animation.scale,
        easing: EASING,
        useNativeDriver: true
      })]).start(_ref3 => {
        var finished = _ref3.finished;
        if (finished) {
          focusFirstDOMNode(menuRef.current);
          prevRendered.current = true;
        }
      });
    }), [anchor, attachListeners, measureAnchorLayout, theme]);
    var hide = React.useCallback(() => {
      removeListeners();
      var animation = theme.animation;
      _reactNative.Animated.timing(opacityAnimationRef.current, {
        toValue: 0,
        duration: ANIMATION_DURATION * animation.scale,
        easing: EASING,
        useNativeDriver: true
      }).start(_ref4 => {
        var finished = _ref4.finished;
        if (finished) {
          setMenuLayout({
            width: 0,
            height: 0
          });
          setRendered(false);
          prevRendered.current = false;
          focusFirstDOMNode(anchorRef.current);
        }
      });
    }, [removeListeners, theme]);
    var updateVisibility = React.useCallback(/*#__PURE__*/function () {
      var _ref5 = (0, _asyncToGenerator2.default)(function* (display) {
        // Menu is rendered in Portal, which updates items asynchronously
        // We need to do the same here so that the ref is up-to-date
        yield Promise.resolve().then(() => {
          if (display && !prevRendered.current) {
            show();
          } else {
            if (rendered) {
              hide();
            }
          }
          return;
        });
      });
      return function (_x) {
        return _ref5.apply(this, arguments);
      };
    }(), [hide, show, rendered]);
    React.useEffect(() => {
      var opacityAnimation = opacityAnimationRef.current;
      var scaleAnimation = scaleAnimationRef.current;
      keyboardDidShowListenerRef.current = _reactNative.Keyboard.addListener('keyboardDidShow', keyboardDidShow);
      keyboardDidHideListenerRef.current = _reactNative.Keyboard.addListener('keyboardDidHide', keyboardDidHide);
      return () => {
        removeListeners();
        keyboardDidShowListenerRef.current?.remove();
        keyboardDidHideListenerRef.current?.remove();
        scaleAnimation.removeAllListeners();
        opacityAnimation?.removeAllListeners();
      };
    }, [removeListeners, keyboardDidHide, keyboardDidShow]);
    React.useEffect(() => {
      if (prevVisible.current !== visible) {
        prevVisible.current = visible;
        if (visible !== rendered) {
          setRendered(visible);
        }
      }
    }, [visible, rendered]);
    React.useEffect(() => {
      updateVisibility(rendered);
    }, [rendered, updateVisibility]);

    // I don't know why but on Android measure function is wrong by 24
    var additionalVerticalValue = 0;

    // We need to translate menu while animating scale to imitate transform origin for scale animation
    var positionTransforms = [];
    var leftTransformation = left;
    var topTransformation = !isCoordinate(anchorRef.current) && anchorPosition === 'bottom' ? top + anchorLayout.height : top;

    // Check if menu fits horizontally and if not align it to right.
    if (left <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {
      positionTransforms.push({
        translateX: scaleAnimationRef.current.x.interpolate({
          inputRange: [0, menuLayout.width],
          outputRange: [-(menuLayout.width / 2), 0]
        })
      });

      // Check if menu position has enough space from left side
      if (leftTransformation < SCREEN_INDENT) {
        leftTransformation = SCREEN_INDENT;
      }
    } else {
      positionTransforms.push({
        translateX: scaleAnimationRef.current.x.interpolate({
          inputRange: [0, menuLayout.width],
          outputRange: [menuLayout.width / 2, 0]
        })
      });
      leftTransformation += anchorLayout.width - menuLayout.width;
      var right = leftTransformation + menuLayout.width;
      // Check if menu position has enough space from right side
      if (right > windowLayout.width - SCREEN_INDENT) {
        leftTransformation = windowLayout.width - SCREEN_INDENT - menuLayout.width;
      }
    }

    // If the menu is larger than available vertical space,
    // calculate the height of scrollable view
    var scrollableMenuHeight = 0;

    // Check if the menu should be scrollable
    if (
    // Check if the menu overflows from bottom side
    topTransformation >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue &&
    // And bottom side of the screen has more space than top side
    topTransformation <= windowLayout.height - topTransformation) {
      // Scrollable menu should be below the anchor (expands downwards)
      scrollableMenuHeight = windowLayout.height - topTransformation - SCREEN_INDENT - additionalVerticalValue;
    } else if (
    // Check if the menu overflows from bottom side
    topTransformation >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue &&
    // And top side of the screen has more space than bottom side
    topTransformation >= windowLayout.height - top &&
    // And menu overflows from top side
    topTransformation <= menuLayout.height - anchorLayout.height + SCREEN_INDENT - additionalVerticalValue) {
      // Scrollable menu should be above the anchor (expands upwards)
      scrollableMenuHeight = topTransformation + anchorLayout.height - SCREEN_INDENT + additionalVerticalValue;
    }

    // Scrollable menu max height
    scrollableMenuHeight = scrollableMenuHeight > windowLayout.height - 16 ? windowLayout.height - 16 : scrollableMenuHeight;

    // Menu is typically positioned below the element that generates it
    // So first check if it fits below the anchor (expands downwards)
    if (
    // Check if menu fits vertically
    topTransformation <= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue ||
    // Or if the menu overflows from bottom side
    topTransformation >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue &&
    // And bottom side of the screen has more space than top side
    topTransformation <= windowLayout.height - topTransformation) {
      positionTransforms.push({
        translateY: scaleAnimationRef.current.y.interpolate({
          inputRange: [0, menuLayout.height],
          outputRange: [-((scrollableMenuHeight || menuLayout.height) / 2), 0]
        })
      });

      // Check if menu position has enough space from top side
      if (topTransformation < SCREEN_INDENT) {
        topTransformation = SCREEN_INDENT;
      }
    } else {
      positionTransforms.push({
        translateY: scaleAnimationRef.current.y.interpolate({
          inputRange: [0, menuLayout.height],
          outputRange: [(scrollableMenuHeight || menuLayout.height) / 2, 0]
        })
      });
      topTransformation += anchorLayout.height - (scrollableMenuHeight || menuLayout.height);
      var bottom = topTransformation + (scrollableMenuHeight || menuLayout.height) + additionalVerticalValue;

      // Check if menu position has enough space from bottom side
      if (bottom > windowLayout.height - SCREEN_INDENT) {
        topTransformation = scrollableMenuHeight === windowLayout.height - 16 ? -16 : windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue;
      }
    }
    var shadowMenuContainerStyle = {
      opacity: opacityAnimationRef.current,
      transform: [{
        scaleX: scaleAnimationRef.current.x.interpolate({
          inputRange: [0, menuLayout.width],
          outputRange: [0, 1]
        })
      }, {
        scaleY: scaleAnimationRef.current.y.interpolate({
          inputRange: [0, menuLayout.height],
          outputRange: [0, 1]
        })
      }],
      borderRadius: theme.roundness,
      ...(!theme.isV3 && {
        elevation: 8
      }),
      ...(scrollableMenuHeight ? {
        height: scrollableMenuHeight
      } : {})
    };
    var positionStyle = {
      top: isCoordinate(anchor) ? topTransformation : topTransformation + additionalVerticalValue,
      ...(_reactNative.I18nManager.getConstants().isRTL ? {
        right: leftTransformation
      } : {
        left: leftTransformation
      })
    };
    var pointerEvents = visible ? 'box-none' : 'none';
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      ref: ref => anchorRef.current = ref,
      collapsable: false,
      children: [isCoordinate(anchor) ? null : anchor, rendered ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Portal.default, {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Pressable, {
          accessibilityLabel: overlayAccessibilityLabel,
          accessibilityRole: "button",
          onPress: onDismiss,
          style: styles.pressableOverlay
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          ref: ref => menuRef.current = ref,
          collapsable: false,
          accessibilityViewIsModal: visible,
          style: [styles.wrapper, positionStyle, style],
          pointerEvents: pointerEvents,
          onAccessibilityEscape: onDismiss,
          testID: `${testID}-view`,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            pointerEvents: pointerEvents,
            style: {
              transform: positionTransforms
            },
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Surface.default, {
              mode: mode,
              pointerEvents: pointerEvents,
              style: [styles.shadowMenuContainer, shadowMenuContainerStyle, theme.isV3 && {
                backgroundColor: theme.colors.elevation[ELEVATION_LEVELS_MAP[elevation]]
              }, contentStyle],
              ...(theme.isV3 && {
                elevation
              }),
              testID: `${testID}-surface`,
              theme: theme,
              children: scrollableMenuHeight && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
                keyboardShouldPersistTaps: keyboardShouldPersistTaps,
                children: children
              }) || /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
                children: children
              })
            })
          })
        })]
      }) : null]
    });
  };
  Menu.Item = _MenuItem.default;
  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      position: 'absolute'
    },
    shadowMenuContainer: {
      opacity: 0,
      paddingVertical: 8
    },
    pressableOverlay: {
      ...undefined,
      ..._reactNative.StyleSheet.absoluteFillObject,
      width: '100%'
    }
  });
  var _default = exports.default = Menu;
},639,[1,40,29,125,45,640,642,506,643,564,644,645,599,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _utils = require(_dependencyMap[3]);
  var _theming = require(_dependencyMap[4]);
  var _Icon = _interopRequireDefault(require(_dependencyMap[5]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[6]));
  var _Text = _interopRequireDefault(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show a single list item inside a Menu.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { View } from 'react-native';
   * import { Menu } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <View style={{ flex: 1 }}>
   *     <Menu.Item leadingIcon="redo" onPress={() => {}} title="Redo" />
   *     <Menu.Item leadingIcon="undo" onPress={() => {}} title="Undo" />
   *     <Menu.Item leadingIcon="content-cut" onPress={() => {}} title="Cut" disabled />
   *     <Menu.Item leadingIcon="content-copy" onPress={() => {}} title="Copy" disabled />
   *     <Menu.Item leadingIcon="content-paste" onPress={() => {}} title="Paste" />
   *   </View>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var MenuItem = _ref => {
    var leadingIcon = _ref.leadingIcon,
      trailingIcon = _ref.trailingIcon,
      dense = _ref.dense,
      title = _ref.title,
      disabled = _ref.disabled,
      background = _ref.background,
      onPress = _ref.onPress,
      style = _ref.style,
      contentStyle = _ref.contentStyle,
      titleStyle = _ref.titleStyle,
      customRippleColor = _ref.rippleColor,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'menu-item' : _ref$testID,
      accessibilityLabel = _ref.accessibilityLabel,
      accessibilityState = _ref.accessibilityState,
      themeOverrides = _ref.theme,
      _ref$titleMaxFontSize = _ref.titleMaxFontSizeMultiplier,
      titleMaxFontSizeMultiplier = _ref$titleMaxFontSize === undefined ? 1.5 : _ref$titleMaxFontSize;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _getMenuItemColor = (0, _utils.getMenuItemColor)({
        theme,
        disabled,
        customRippleColor
      }),
      titleColor = _getMenuItemColor.titleColor,
      iconColor = _getMenuItemColor.iconColor,
      rippleColor = _getMenuItemColor.rippleColor;
    var isV3 = theme.isV3;
    var containerPadding = isV3 ? 12 : 8;
    var iconWidth = isV3 ? 24 : 40;
    var minWidth = _utils.MIN_WIDTH - (isV3 ? 12 : 16);
    var maxWidth = (0, _utils.getContentMaxWidth)({
      isV3,
      iconWidth,
      leadingIcon,
      trailingIcon
    });
    var titleTextStyle = {
      color: titleColor,
      ...(isV3 ? theme.fonts.bodyLarge : {})
    };
    var newAccessibilityState = {
      ...accessibilityState,
      disabled
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
      style: [styles.container, {
        paddingHorizontal: containerPadding
      }, dense && styles.md3DenseContainer, style],
      onPress: onPress,
      disabled: disabled,
      testID: testID,
      background: background,
      accessibilityLabel: accessibilityLabel,
      accessibilityRole: "menuitem",
      accessibilityState: newAccessibilityState,
      rippleColor: rippleColor,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.row,
        children: [leadingIcon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [!isV3 && styles.item, {
            width: iconWidth
          }],
          pointerEvents: "box-none",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
            source: leadingIcon,
            size: 24,
            color: iconColor
          })
        }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [!isV3 && styles.item, styles.content, {
            minWidth,
            maxWidth
          }, isV3 && (leadingIcon ? styles.md3LeadingIcon : styles.md3WithoutLeadingIcon), contentStyle],
          pointerEvents: "none",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
            variant: "bodyLarge",
            selectable: false,
            numberOfLines: 1,
            testID: `${testID}-title`,
            style: [!isV3 && styles.title, titleTextStyle, titleStyle],
            maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
            children: title
          })
        }), isV3 && trailingIcon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [!isV3 && styles.item, {
            width: iconWidth
          }],
          pointerEvents: "box-none",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
            source: trailingIcon,
            size: 24,
            color: iconColor
          })
        }) : null]
      })
    });
  };
  MenuItem.displayName = 'Menu.Item';
  var styles = _reactNative.StyleSheet.create({
    container: {
      minWidth: _utils.MIN_WIDTH,
      maxWidth: _utils.MAX_WIDTH,
      height: 48,
      justifyContent: 'center'
    },
    md3DenseContainer: {
      height: 32
    },
    row: {
      flexDirection: 'row'
    },
    title: {
      fontSize: 16
    },
    item: {
      marginHorizontal: 8
    },
    content: {
      justifyContent: 'center'
    },
    md3LeadingIcon: {
      marginLeft: 12
    },
    md3WithoutLeadingIcon: {
      marginLeft: 4
    }
  });
  var _default = exports.default = MenuItem;
},640,[1,125,45,641,506,570,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getMenuItemColor = exports.getContentMaxWidth = exports.MIN_WIDTH = exports.MAX_WIDTH = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var _colors = require(_dependencyMap[2]);
  var MIN_WIDTH = exports.MIN_WIDTH = 112;
  var MAX_WIDTH = exports.MAX_WIDTH = 280;
  var getDisabledColor = theme => {
    if (theme.isV3) {
      return theme.colors.onSurfaceDisabled;
    }
    return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
  };
  var getTitleColor = _ref => {
    var theme = _ref.theme,
      disabled = _ref.disabled;
    if (disabled) {
      return getDisabledColor(theme);
    }
    if (theme.isV3) {
      return theme.colors.onSurface;
    }
    return (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
  };
  var getIconColor = _ref2 => {
    var theme = _ref2.theme,
      disabled = _ref2.disabled;
    if (disabled) {
      return getDisabledColor(theme);
    }
    if (theme.isV3) {
      return theme.colors.onSurfaceVariant;
    }
    return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
  };
  var getRippleColor = _ref3 => {
    var theme = _ref3.theme,
      customRippleColor = _ref3.customRippleColor;
    if (customRippleColor) {
      return customRippleColor;
    }
    if (theme.isV3) {
      return (0, _color.default)(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();
    }
    return undefined;
  };
  var getMenuItemColor = _ref4 => {
    var theme = _ref4.theme,
      disabled = _ref4.disabled,
      customRippleColor = _ref4.customRippleColor;
    return {
      titleColor: getTitleColor({
        theme,
        disabled
      }),
      iconColor: getIconColor({
        theme,
        disabled
      }),
      rippleColor: getRippleColor({
        theme,
        customRippleColor
      })
    };
  };
  exports.getMenuItemColor = getMenuItemColor;
  var getContentMaxWidth = _ref5 => {
    var isV3 = _ref5.isV3,
      iconWidth = _ref5.iconWidth,
      leadingIcon = _ref5.leadingIcon,
      trailingIcon = _ref5.trailingIcon;
    if (isV3) {
      if (leadingIcon && trailingIcon) {
        return MAX_WIDTH - (2 * iconWidth + 24);
      }
      if (leadingIcon || trailingIcon) {
        return MAX_WIDTH - (iconWidth + 24);
      }
      return MAX_WIDTH - 12;
    }
    if (leadingIcon) {
      return MAX_WIDTH - (iconWidth + 48);
    }
    return MAX_WIDTH - 16;
  };
  exports.getContentMaxWidth = getContentMaxWidth;
},641,[1,515,529]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.APPROX_STATUSBAR_HEIGHT = undefined;
  var _reactNative = require(_dependencyMap[0]);
  // Use the existence of expo-constants as a heuristic for determining if the
  // status bar is translucent on Android. This should be replaced in the future
  // with react-native-safe-area-context.
  var estimatedStatusBarHeight = _reactNative.NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants?.statusBarHeight ?? 0;
  var APPROX_STATUSBAR_HEIGHT = exports.APPROX_STATUSBAR_HEIGHT = typeof _reactNative.Platform.Version === 'number' && _reactNative.Platform.Version < 11 ? estimatedStatusBarHeight : 0;
},642,[45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MD3TypescaleKey = exports.ElevationLevels = undefined;
  // MD3 types
  var MD3TypescaleKey = exports.MD3TypescaleKey = /*#__PURE__*/function (MD3TypescaleKey) {
    MD3TypescaleKey["displayLarge"] = "displayLarge";
    MD3TypescaleKey["displayMedium"] = "displayMedium";
    MD3TypescaleKey["displaySmall"] = "displaySmall";
    MD3TypescaleKey["headlineLarge"] = "headlineLarge";
    MD3TypescaleKey["headlineMedium"] = "headlineMedium";
    MD3TypescaleKey["headlineSmall"] = "headlineSmall";
    MD3TypescaleKey["titleLarge"] = "titleLarge";
    MD3TypescaleKey["titleMedium"] = "titleMedium";
    MD3TypescaleKey["titleSmall"] = "titleSmall";
    MD3TypescaleKey["labelLarge"] = "labelLarge";
    MD3TypescaleKey["labelMedium"] = "labelMedium";
    MD3TypescaleKey["labelSmall"] = "labelSmall";
    MD3TypescaleKey["bodyLarge"] = "bodyLarge";
    MD3TypescaleKey["bodyMedium"] = "bodyMedium";
    MD3TypescaleKey["bodySmall"] = "bodySmall";
    return MD3TypescaleKey;
  }({});
  var ElevationLevels = exports.ElevationLevels = /*#__PURE__*/function (ElevationLevels) {
    ElevationLevels[ElevationLevels["level0"] = 0] = "level0";
    ElevationLevels[ElevationLevels["level1"] = 1] = "level1";
    ElevationLevels[ElevationLevels["level2"] = 2] = "level2";
    ElevationLevels[ElevationLevels["level3"] = 3] = "level3";
    ElevationLevels[ElevationLevels["level4"] = 4] = "level4";
    ElevationLevels[ElevationLevels["level5"] = 5] = "level5";
    return ElevationLevels;
  }({});
},643,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "BackHandler", {
    enumerable: true,
    get: function () {
      return _reactNative.BackHandler;
    }
  });
  var _reactNative = require(_dependencyMap[0]);
},644,[45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var React = _interopRequireWildcard(require(_dependencyMap[6]));
  var _PortalConsumer = _interopRequireDefault(require(_dependencyMap[7]));
  var _PortalHost = _interopRequireWildcard(require(_dependencyMap[8]));
  var _settings = require(_dependencyMap[9]);
  var _theming = require(_dependencyMap[10]);
  var _jsxRuntime = require(_dependencyMap[11]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  /**
   * Portal allows rendering a component at a different place in the parent tree.
   * You can use it to render content which should appear above other elements, similar to `Modal`.
   * It requires a [`Portal.Host`](PortalHost) component to be rendered somewhere in the parent tree.
   * Note that if you're using the `Provider` component, this already includes a `Portal.Host`.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Portal, Text } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Portal>
   *     <Text>This is rendered at a different place</Text>
   *   </Portal>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Portal = /*#__PURE__*/function (_React$Component) {
    function Portal() {
      (0, _classCallCheck2.default)(this, Portal);
      return _callSuper(this, Portal, arguments);
    }
    (0, _inherits2.default)(Portal, _React$Component);
    return (0, _createClass2.default)(Portal, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          children = _this$props.children,
          theme = _this$props.theme;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_settings.Consumer, {
          children: settings => /*#__PURE__*/(0, _jsxRuntime.jsx)(_PortalHost.PortalContext.Consumer, {
            children: manager => /*#__PURE__*/(0, _jsxRuntime.jsx)(_PortalConsumer.default, {
              manager: manager,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_settings.Provider, {
                value: settings,
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_theming.ThemeProvider, {
                  theme: theme,
                  children: children
                })
              })
            })
          })
        });
      }
    }]);
  }(React.Component);
  // @component ./PortalHost.tsx
  Portal.Host = _PortalHost.default;
  var _default = exports.default = (0, _theming.withInternalTheme)(Portal);
},645,[1,10,11,50,52,55,125,646,562,542,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var React = _interopRequireWildcard(require(_dependencyMap[6]));
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var PortalConsumer = exports.default = /*#__PURE__*/function (_React$Component) {
    function PortalConsumer() {
      (0, _classCallCheck2.default)(this, PortalConsumer);
      return _callSuper(this, PortalConsumer, arguments);
    }
    (0, _inherits2.default)(PortalConsumer, _React$Component);
    return (0, _createClass2.default)(PortalConsumer, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.checkManager();
        this.key = this.props.manager.mount(this.props.children);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.checkManager();
        this.props.manager.update(this.key, this.props.children);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.checkManager();
        this.props.manager.unmount(this.key);
      }
    }, {
      key: "checkManager",
      value: function checkManager() {
        if (!this.props.manager) {
          throw new Error("Looks like you forgot to wrap your root component with `Provider` component from `react-native-paper`.\n\nPlease read our getting-started guide and make sure you've followed all the required steps.\n\nhttps://callstack.github.io/react-native-paper/docs/guides/getting-started");
        }
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
  }(React.Component);
},646,[1,10,11,50,52,55,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.DataTableRow = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _theming = require(_dependencyMap[5]);
  var _colors = require(_dependencyMap[6]);
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  var _excluded = ["onPress", "style", "children", "pointerEvents", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show a single row inside of a table.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { DataTable } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *      <DataTable.Row>
   *        <DataTable.Cell numeric>1</DataTable.Cell>
   *        <DataTable.Cell numeric>2</DataTable.Cell>
   *        <DataTable.Cell numeric>3</DataTable.Cell>
   *        <DataTable.Cell numeric>4</DataTable.Cell>
   *      </DataTable.Row>
   * );
   *
   * export default MyComponent;
   * ```
   *
   * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
   */
  var DataTableRow = _ref => {
    var onPress = _ref.onPress,
      style = _ref.style,
      children = _ref.children,
      pointerEvents = _ref.pointerEvents,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var borderBottomColor = theme.isV3 ? theme.colors.surfaceVariant : (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
      ...rest,
      onPress: onPress,
      style: [styles.container, {
        borderBottomColor
      }, style],
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.content,
        pointerEvents: pointerEvents,
        children: children
      })
    });
  };
  exports.DataTableRow = DataTableRow;
  DataTableRow.displayName = 'DataTable.Row';
  var styles = _reactNative.StyleSheet.create({
    container: {
      borderStyle: 'solid',
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      minHeight: 48,
      paddingHorizontal: 16
    },
    content: {
      flex: 1,
      flexDirection: 'row'
    }
  });
  var _default = exports.default = DataTableRow; // @component-docs ignore-next-line
},647,[1,203,125,45,515,506,529,580,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.DataTableTitle = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _theming = require(_dependencyMap[5]);
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[6]));
  var _Text = _interopRequireDefault(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  var _excluded = ["numeric", "children", "onPress", "sortDirection", "textStyle", "style", "theme", "numberOfLines", "maxFontSizeMultiplier"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to display title in table header.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { DataTable } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *       <DataTable>
   *         <DataTable.Header>
   *           <DataTable.Title
   *             sortDirection='descending'
   *           >
   *             Dessert
   *           </DataTable.Title>
   *           <DataTable.Title numeric>Calories</DataTable.Title>
   *           <DataTable.Title numeric>Fat (g)</DataTable.Title>
   *         </DataTable.Header>
   *       </DataTable>
   * );
   *
   * export default MyComponent;
   * ```
   */

  var DataTableTitle = _ref => {
    var numeric = _ref.numeric,
      children = _ref.children,
      onPress = _ref.onPress,
      sortDirection = _ref.sortDirection,
      textStyle = _ref.textStyle,
      style = _ref.style,
      themeOverrides = _ref.theme,
      _ref$numberOfLines = _ref.numberOfLines,
      numberOfLines = _ref$numberOfLines === undefined ? 1 : _ref$numberOfLines,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(sortDirection === 'ascending' ? 0 : 1)),
      spinAnim = _React$useRef.current;
    React.useEffect(() => {
      _reactNative.Animated.timing(spinAnim, {
        toValue: sortDirection === 'ascending' ? 0 : 1,
        duration: 150,
        useNativeDriver: true
      }).start();
    }, [sortDirection, spinAnim]);
    var textColor = theme.isV3 ? theme.colors.onSurface : theme?.colors?.text;
    var alphaTextColor = (0, _color.default)(textColor).alpha(0.6).rgb().string();
    var spin = spinAnim.interpolate({
      inputRange: [0, 1],
      outputRange: ['0deg', '180deg']
    });
    var icon = sortDirection ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: [styles.icon, {
        transform: [{
          rotate: spin
        }]
      }],
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
        name: "arrow-up",
        size: 16,
        color: textColor,
        direction: _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
      })
    }) : null;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Pressable, {
      disabled: !onPress,
      onPress: onPress,
      ...rest,
      style: [styles.container, numeric && styles.right, style],
      children: [icon, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
        style: [styles.cell,
        // height must scale with numberOfLines
        {
          maxHeight: 24 * numberOfLines
        },
        // if numberOfLines causes wrap, center is lost. Align directly, sensitive to numeric and RTL
        numberOfLines > 1 ? numeric ? _reactNative.I18nManager.getConstants().isRTL ? styles.leftText : styles.rightText : styles.centerText : {}, sortDirection ? styles.sorted : {
          color: alphaTextColor
        }, textStyle],
        numberOfLines: numberOfLines,
        maxFontSizeMultiplier: maxFontSizeMultiplier,
        children: children
      })]
    });
  };
  exports.DataTableTitle = DataTableTitle;
  DataTableTitle.displayName = 'DataTable.Title';
  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'row',
      alignContent: 'center',
      paddingVertical: 12
    },
    rightText: {
      textAlign: 'right'
    },
    leftText: {
      textAlign: 'left'
    },
    centerText: {
      textAlign: 'center'
    },
    right: {
      justifyContent: 'flex-end'
    },
    cell: {
      lineHeight: 24,
      fontSize: 12,
      fontWeight: '500',
      alignItems: 'center'
    },
    sorted: {
      marginLeft: 8
    },
    icon: {
      height: 24,
      justifyContent: 'center'
    }
  });
  var _default = exports.default = DataTableTitle; // @component-docs ignore-next-line
},648,[1,203,125,45,515,506,543,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _reactNativeSafeAreaContext = require(_dependencyMap[3]);
  var _DialogActions = _interopRequireDefault(require(_dependencyMap[4]));
  var _DialogContent = _interopRequireDefault(require(_dependencyMap[5]));
  var _DialogIcon = _interopRequireDefault(require(_dependencyMap[6]));
  var _DialogScrollArea = _interopRequireDefault(require(_dependencyMap[7]));
  var _DialogTitle = _interopRequireDefault(require(_dependencyMap[8]));
  var _theming = require(_dependencyMap[9]);
  var _overlay = _interopRequireDefault(require(_dependencyMap[10]));
  var _Modal = _interopRequireDefault(require(_dependencyMap[11]));
  var _jsxRuntime = require(_dependencyMap[12]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var DIALOG_ELEVATION = 24;

  /**
   * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.
   * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](../../Portal) component.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { View } from 'react-native';
   * import { Button, Dialog, Portal, PaperProvider, Text } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [visible, setVisible] = React.useState(false);
   *
   *   const showDialog = () => setVisible(true);
   *
   *   const hideDialog = () => setVisible(false);
   *
   *   return (
   *     <PaperProvider>
   *       <View>
   *         <Button onPress={showDialog}>Show Dialog</Button>
   *         <Portal>
   *           <Dialog visible={visible} onDismiss={hideDialog}>
   *             <Dialog.Title>Alert</Dialog.Title>
   *             <Dialog.Content>
   *               <Text variant="bodyMedium">This is simple dialog</Text>
   *             </Dialog.Content>
   *             <Dialog.Actions>
   *               <Button onPress={hideDialog}>Done</Button>
   *             </Dialog.Actions>
   *           </Dialog>
   *         </Portal>
   *       </View>
   *     </PaperProvider>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var Dialog = _ref => {
    var children = _ref.children,
      _ref$dismissable = _ref.dismissable,
      dismissable = _ref$dismissable === undefined ? true : _ref$dismissable,
      _ref$dismissableBackB = _ref.dismissableBackButton,
      dismissableBackButton = _ref$dismissableBackB === undefined ? dismissable : _ref$dismissableBackB,
      onDismiss = _ref.onDismiss,
      _ref$visible = _ref.visible,
      visible = _ref$visible === undefined ? false : _ref$visible,
      style = _ref.style,
      themeOverrides = _ref.theme,
      testID = _ref.testID;
    var _useSafeAreaInsets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)(),
      right = _useSafeAreaInsets.right,
      left = _useSafeAreaInsets.left;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3,
      dark = theme.dark,
      mode = theme.mode,
      colors = theme.colors,
      roundness = theme.roundness;
    var borderRadius = (isV3 ? 7 : 1) * roundness;
    var backgroundColorV2 = dark && mode === 'adaptive' ? (0, _overlay.default)(DIALOG_ELEVATION, colors?.surface) : colors?.surface;
    var backgroundColor = isV3 ? theme.colors.elevation.level3 : backgroundColorV2;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Modal.default, {
      dismissable: dismissable,
      dismissableBackButton: dismissableBackButton,
      onDismiss: onDismiss,
      visible: visible,
      contentContainerStyle: [{
        borderRadius,
        backgroundColor,
        marginHorizontal: Math.max(left, right, 26)
      }, styles.container, style],
      theme: theme,
      testID: testID,
      children: React.Children.toArray(children).filter(child => child != null && typeof child !== 'boolean').map((child, i) => {
        if (isV3) {
          if (i === 0 && /*#__PURE__*/React.isValidElement(child)) {
            return /*#__PURE__*/React.cloneElement(child, {
              style: [{
                marginTop: 24
              }, child.props.style]
            });
          }
        }
        if (i === 0 && /*#__PURE__*/React.isValidElement(child) && child.type === _DialogContent.default) {
          // Dialog content is the first item, so we add a top padding
          return /*#__PURE__*/React.cloneElement(child, {
            style: [{
              paddingTop: 24
            }, child.props.style]
          });
        }
        return child;
      })
    });
  };

  // @component ./DialogContent.tsx
  Dialog.Content = _DialogContent.default;
  // @component ./DialogActions.tsx
  Dialog.Actions = _DialogActions.default;
  // @component ./DialogTitle.tsx
  Dialog.Title = _DialogTitle.default;
  // @component ./DialogScrollArea.tsx
  Dialog.ScrollArea = _DialogScrollArea.default;
  // @component ./DialogIcon.tsx
  Dialog.Icon = _DialogIcon.default;
  var styles = _reactNative.StyleSheet.create({
    container: {
      /**
       * This prevents the shadow from being clipped on Android since Android
       * doesn't support `overflow: visible`.
       * One downside for this fix is that it will disable clicks on the area
       * of the shadow around the dialog, consequently, if you click around the
       * dialog (44 pixel from the top and bottom) it won't be dismissed.
       */
      marginVertical: 0,
      elevation: DIALOG_ELEVATION,
      justifyContent: 'flex-start'
    }
  });
  var _default = exports.default = Dialog;
},649,[1,125,45,533,650,651,652,653,654,506,566,655,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  var _theming = require(_dependencyMap[2]);
  var _jsxRuntime = require(_dependencyMap[3]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show a list of actions in a Dialog.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Button, Dialog, Portal } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [visible, setVisible] = React.useState(false);
   *
   *   const hideDialog = () => setVisible(false);
   *
   *   return (
   *     <Portal>
   *       <Dialog visible={visible} onDismiss={hideDialog}>
   *         <Dialog.Actions>
   *           <Button onPress={() => console.log('Cancel')}>Cancel</Button>
   *           <Button onPress={() => console.log('Ok')}>Ok</Button>
   *         </Dialog.Actions>
   *       </Dialog>
   *     </Portal>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var DialogActions = props => {
    var _useInternalTheme = (0, _theming.useInternalTheme)(props.theme),
      isV3 = _useInternalTheme.isV3;
    var actionsLength = React.Children.toArray(props.children).length;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ...props,
      style: [isV3 ? styles.v3Container : styles.container, props.style],
      children: React.Children.map(props.children, (child, i) => /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {
        compact: true,
        uppercase: !isV3,
        style: [isV3 && {
          marginRight: i + 1 === actionsLength ? 0 : 8
        }, child.props.style]
      }) : child)
    });
  };
  DialogActions.displayName = 'Dialog.Actions';
  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'flex-end',
      padding: 8
    },
    v3Container: {
      flexDirection: 'row',
      flexGrow: 1,
      alignItems: 'center',
      justifyContent: 'flex-end',
      paddingBottom: 24,
      paddingHorizontal: 24
    }
  });
  var _default = exports.default = DialogActions;
},650,[125,45,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  var _jsxRuntime = require(_dependencyMap[2]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show content in a Dialog.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Dialog, Portal, Text } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [visible, setVisible] = React.useState(false);
   *
   *   const hideDialog = () => setVisible(false);
   *
   *   return (
   *     <Portal>
   *       <Dialog visible={visible} onDismiss={hideDialog}>
   *         <Dialog.Content>
   *           <Text variant="bodyMedium">This is simple dialog</Text>
   *         </Dialog.Content>
   *       </Dialog>
   *     </Portal>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var DialogContent = props => /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
    ...props,
    style: [styles.container, props.style],
    children: props.children
  });
  DialogContent.displayName = 'Dialog.Content';
  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingBottom: 24,
      paddingHorizontal: 24
    }
  });
  var _default = exports.default = DialogContent;
},651,[125,45,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.DialogIcon = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _theming = require(_dependencyMap[3]);
  var _Icon = _interopRequireDefault(require(_dependencyMap[4]));
  var _jsxRuntime = require(_dependencyMap[5]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * @supported Available in v5.x with theme version 3
   * A component to show an icon in a Dialog.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { StyleSheet } from 'react-native';
   * import { Dialog, Portal, Text } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [visible, setVisible] = React.useState(false);
   *
   *   const hideDialog = () => setVisible(false);
   *
   *   return (
   *     <Portal>
   *       <Dialog visible={visible} onDismiss={hideDialog}>
   *         <Dialog.Icon icon="alert" />
   *         <Dialog.Title style={styles.title}>This is a title</Dialog.Title>
   *         <Dialog.Content>
   *           <Text variant="bodyMedium">This is simple dialog</Text>
   *         </Dialog.Content>
   *       </Dialog>
   *     </Portal>
   *   );
   * };
   *
   * const styles = StyleSheet.create({
   *   title: {
   *     textAlign: 'center',
   *   },
   * })
   *
   * export default MyComponent;
   * ```
   */
  var DialogIcon = _ref => {
    var _ref$size = _ref.size,
      size = _ref$size === undefined ? 24 : _ref$size,
      color = _ref.color,
      icon = _ref.icon,
      themeOverrides = _ref.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    if (!theme.isV3) {
      return null;
    }

    //@ts-ignore
    var iconColor = color || theme.colors.secondary;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.wrapper,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
        source: icon,
        color: iconColor,
        size: size
      })
    });
  };
  exports.DialogIcon = DialogIcon;
  DialogIcon.displayName = 'Dialog.Icon';
  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      alignItems: 'center',
      justifyContent: 'center',
      paddingTop: 24
    }
  });
  var _default = exports.default = DialogIcon; // @component-docs ignore-next-line
},652,[1,125,45,506,570,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  var _theming = require(_dependencyMap[2]);
  var _jsxRuntime = require(_dependencyMap[3]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show a scrollable content in a Dialog. The component only provides appropriate styling.
   * For the scrollable content you can use `ScrollView`, `FlatList` etc. depending on your requirement.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { ScrollView } from 'react-native';
   * import { Dialog, Portal, Text } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [visible, setVisible] = React.useState(false);
   *
   *   const hideDialog = () => setVisible(false);
   *
   *   return (
   *     <Portal>
   *       <Dialog visible={visible} onDismiss={hideDialog}>
   *         <Dialog.ScrollArea>
   *           <ScrollView contentContainerStyle={{paddingHorizontal: 24}}>
   *             <Text>This is a scrollable area</Text>
   *           </ScrollView>
   *         </Dialog.ScrollArea>
   *       </Dialog>
   *     </Portal>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var DialogScrollArea = props => {
    var theme = (0, _theming.useInternalTheme)(props.theme);
    var borderStyles = {
      borderColor: theme.isV3 ? theme.colors.surfaceVariant : 'rgba(0, 0, 0, .12)',
      borderTopWidth: theme.isV3 ? 1 : _reactNative.StyleSheet.hairlineWidth,
      borderBottomWidth: theme.isV3 ? 1 : _reactNative.StyleSheet.hairlineWidth
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ...props,
      style: [styles.container, borderStyles, theme.isV3 && styles.v3Container, props.style],
      children: props.children
    });
  };
  DialogScrollArea.displayName = 'Dialog.ScrollArea';
  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingHorizontal: 24,
      flexGrow: 1,
      flexShrink: 1
    },
    v3Container: {
      marginBottom: 24
    }
  });
  var _default = exports.default = DialogScrollArea;
},653,[125,45,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.DialogTitle = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _theming = require(_dependencyMap[4]);
  var _Text = _interopRequireDefault(require(_dependencyMap[5]));
  var _Title = _interopRequireDefault(require(_dependencyMap[6]));
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["children", "theme", "style"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to show a title in a Dialog.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Dialog, Portal, Text } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [visible, setVisible] = React.useState(false);
   *
   *   const hideDialog = () => setVisible(false);
   *
   *   return (
   *     <Portal>
   *       <Dialog visible={visible} onDismiss={hideDialog}>
   *         <Dialog.Title>This is a title</Dialog.Title>
   *         <Dialog.Content>
   *           <Text variant="bodyMedium">This is simple dialog</Text>
   *         </Dialog.Content>
   *       </Dialog>
   *     </Portal>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var DialogTitle = _ref => {
    var children = _ref.children,
      themeOverrides = _ref.theme,
      style = _ref.style,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3,
      colors = theme.colors,
      fonts = theme.fonts;
    var TextComponent = isV3 ? _Text.default : _Title.default;
    var headerTextStyle = {
      color: isV3 ? colors.onSurface : colors?.text,
      ...(isV3 ? fonts.headlineSmall : {})
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(TextComponent, {
      variant: "headlineSmall",
      accessibilityRole: "header",
      style: [styles.text, isV3 && styles.v3Text, headerTextStyle, style],
      ...rest,
      children: children
    });
  };
  exports.DialogTitle = DialogTitle;
  DialogTitle.displayName = 'Dialog.Title';
  var styles = _reactNative.StyleSheet.create({
    text: {
      marginTop: 22,
      marginBottom: 18,
      marginHorizontal: 24
    },
    v3Text: {
      marginTop: 16,
      marginBottom: 16
    }
  });
  var _default = exports.default = DialogTitle; // @component-docs ignore-next-line
},654,[1,203,125,45,506,573,623,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _reactNativeSafeAreaContext = require(_dependencyMap[4]);
  var _useLatestCallback = _interopRequireDefault(require(_dependencyMap[5]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[6]));
  var _theming = require(_dependencyMap[7]);
  var _addEventListener = require(_dependencyMap[8]);
  var _BackHandler = require(_dependencyMap[9]);
  var _useAnimatedValue = _interopRequireDefault(require(_dependencyMap[10]));
  var _jsxRuntime = require(_dependencyMap[11]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var DEFAULT_DURATION = 220;
  var AnimatedPressable = _reactNative.Animated.createAnimatedComponent(_reactNative.Pressable);

  /**
   * The Modal component is a simple way to present content above an enclosing view.
   * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](./Portal) component.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Modal, Portal, Text, Button, PaperProvider } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [visible, setVisible] = React.useState(false);
   *
   *   const showModal = () => setVisible(true);
   *   const hideModal = () => setVisible(false);
   *   const containerStyle = {backgroundColor: 'white', padding: 20};
   *
   *   return (
   *     <PaperProvider>
   *       <Portal>
   *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>
   *           <Text>Example Modal.  Click outside this area to dismiss.</Text>
   *         </Modal>
   *       </Portal>
   *       <Button style={{marginTop: 30}} onPress={showModal}>
   *         Show
   *       </Button>
   *     </PaperProvider>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  function Modal(_ref) {
    var _ref$dismissable = _ref.dismissable,
      dismissable = _ref$dismissable === undefined ? true : _ref$dismissable,
      _ref$dismissableBackB = _ref.dismissableBackButton,
      dismissableBackButton = _ref$dismissableBackB === undefined ? dismissable : _ref$dismissableBackB,
      _ref$visible = _ref.visible,
      visible = _ref$visible === undefined ? false : _ref$visible,
      _ref$overlayAccessibi = _ref.overlayAccessibilityLabel,
      overlayAccessibilityLabel = _ref$overlayAccessibi === undefined ? 'Close modal' : _ref$overlayAccessibi,
      _ref$onDismiss = _ref.onDismiss,
      onDismiss = _ref$onDismiss === undefined ? () => {} : _ref$onDismiss,
      children = _ref.children,
      contentContainerStyle = _ref.contentContainerStyle,
      style = _ref.style,
      themeOverrides = _ref.theme,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'modal' : _ref$testID;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var onDismissCallback = (0, _useLatestCallback.default)(onDismiss);
    var scale = theme.animation.scale;
    var _useSafeAreaInsets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)(),
      top = _useSafeAreaInsets.top,
      bottom = _useSafeAreaInsets.bottom;
    var opacity = (0, _useAnimatedValue.default)(visible ? 1 : 0);
    var _React$useState = React.useState(visible),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      visibleInternal = _React$useState2[0],
      setVisibleInternal = _React$useState2[1];
    var showModalAnimation = React.useCallback(() => {
      _reactNative.Animated.timing(opacity, {
        toValue: 1,
        duration: scale * DEFAULT_DURATION,
        easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
        useNativeDriver: true
      }).start();
    }, [opacity, scale]);
    var hideModalAnimation = React.useCallback(() => {
      _reactNative.Animated.timing(opacity, {
        toValue: 0,
        duration: scale * DEFAULT_DURATION,
        easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
        useNativeDriver: true
      }).start(_ref2 => {
        var finished = _ref2.finished;
        if (!finished) {
          return;
        }
        setVisibleInternal(false);
      });
    }, [opacity, scale]);
    React.useEffect(() => {
      if (visibleInternal === visible) {
        return;
      }
      if (!visibleInternal && visible) {
        setVisibleInternal(true);
        return showModalAnimation();
      }
      if (visibleInternal && !visible) {
        return hideModalAnimation();
      }
    }, [visible, showModalAnimation, hideModalAnimation, visibleInternal]);
    React.useEffect(() => {
      if (!visible) {
        return undefined;
      }
      var onHardwareBackPress = () => {
        if (dismissable || dismissableBackButton) {
          onDismissCallback();
        }
        return true;
      };
      var subscription = (0, _addEventListener.addEventListener)(_BackHandler.BackHandler, 'hardwareBackPress', onHardwareBackPress);
      return () => subscription.remove();
    }, [dismissable, dismissableBackButton, onDismissCallback, visible]);
    if (!visibleInternal) {
      return null;
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      pointerEvents: visible ? 'auto' : 'none',
      accessibilityViewIsModal: true,
      accessibilityLiveRegion: "polite",
      style: _reactNative.StyleSheet.absoluteFill,
      onAccessibilityEscape: onDismissCallback,
      testID: testID,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(AnimatedPressable, {
        accessibilityLabel: overlayAccessibilityLabel,
        accessibilityRole: "button",
        disabled: !dismissable,
        onPress: dismissable ? onDismissCallback : undefined,
        importantForAccessibility: "no",
        style: [styles.backdrop, {
          backgroundColor: theme.colors?.backdrop,
          opacity
        }],
        testID: `${testID}-backdrop`
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.wrapper, {
          marginTop: top,
          marginBottom: bottom
        }, style],
        pointerEvents: "box-none",
        testID: `${testID}-wrapper`,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Surface.default, {
          testID: `${testID}-surface`,
          theme: theme,
          style: [{
            opacity
          }, styles.content, contentContainerStyle],
          children: children
        })
      })]
    });
  }
  var _default = exports.default = Modal;
  var styles = _reactNative.StyleSheet.create({
    backdrop: {
      flex: 1
    },
    wrapper: {
      ..._reactNative.StyleSheet.absoluteFillObject,
      justifyContent: 'center'
    },
    // eslint-disable-next-line react-native/no-color-literals
    content: {
      backgroundColor: 'transparent',
      justifyContent: 'center'
    }
  });
},655,[1,29,125,45,533,603,599,506,564,644,610,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _FAB = _interopRequireDefault(require(_dependencyMap[1]));
  var _FABGroup = _interopRequireDefault(require(_dependencyMap[2]));
  var FAB = Object.assign(
  // @component ./FAB.tsx
  _FAB.default, {
    // @component ./FABGroup.tsx
    Group: _FABGroup.default
  });
  var _default = exports.default = FAB;
},656,[1,657,658]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.FAB = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _utils = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _forwardRef = require(_dependencyMap[6]);
  var _ActivityIndicator = _interopRequireDefault(require(_dependencyMap[7]));
  var _CrossFadeIcon = _interopRequireDefault(require(_dependencyMap[8]));
  var _Icon = _interopRequireDefault(require(_dependencyMap[9]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[10]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[11]));
  var _Text = _interopRequireDefault(require(_dependencyMap[12]));
  var _jsxRuntime = require(_dependencyMap[13]);
  var _excluded = ["icon", "label", "background", "accessibilityLabel", "accessibilityState", "animated", "color", "rippleColor", "disabled", "onPress", "onLongPress", "delayLongPress", "theme", "style", "visible", "uppercase", "loading", "testID", "size", "customSize", "mode", "variant", "labelMaxFontSizeMultiplier"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A floating action button represents the primary action on a screen. It appears in front of all screen content.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { StyleSheet } from 'react-native';
   * import { FAB } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <FAB
   *     icon="plus"
   *     style={styles.fab}
   *     onPress={() => console.log('Pressed')}
   *   />
   * );
   *
   * const styles = StyleSheet.create({
   *   fab: {
   *     position: 'absolute',
   *     margin: 16,
   *     right: 0,
   *     bottom: 0,
   *   },
   * })
   *
   * export default MyComponent;
   * ```
   */
  var FAB = exports.FAB = (0, _forwardRef.forwardRef)((_ref, ref) => {
    var icon = _ref.icon,
      label = _ref.label,
      background = _ref.background,
      _ref$accessibilityLab = _ref.accessibilityLabel,
      accessibilityLabel = _ref$accessibilityLab === undefined ? label : _ref$accessibilityLab,
      accessibilityState = _ref.accessibilityState,
      _ref$animated = _ref.animated,
      animated = _ref$animated === undefined ? true : _ref$animated,
      customColor = _ref.color,
      customRippleColor = _ref.rippleColor,
      disabled = _ref.disabled,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      delayLongPress = _ref.delayLongPress,
      themeOverrides = _ref.theme,
      style = _ref.style,
      _ref$visible = _ref.visible,
      visible = _ref$visible === undefined ? true : _ref$visible,
      uppercaseProp = _ref.uppercase,
      loading = _ref.loading,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'fab' : _ref$testID,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 'medium' : _ref$size,
      customSize = _ref.customSize,
      _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? 'elevated' : _ref$mode,
      _ref$variant = _ref.variant,
      variant = _ref$variant === undefined ? 'primary' : _ref$variant,
      labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var uppercase = uppercaseProp ?? !theme.isV3;
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
      visibility = _React$useRef.current;
    var isV3 = theme.isV3,
      animation = theme.animation;
    var scale = animation.scale;
    React.useEffect(() => {
      if (visible) {
        _reactNative.Animated.timing(visibility, {
          toValue: 1,
          duration: 200 * scale,
          useNativeDriver: true
        }).start();
      } else {
        _reactNative.Animated.timing(visibility, {
          toValue: 0,
          duration: 150 * scale,
          useNativeDriver: true
        }).start();
      }
    }, [visible, scale, visibility]);
    var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;
    var fabStyle = (0, _utils.getFabStyle)({
      customSize,
      size,
      theme
    });
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$borderRadius = _ref2.borderRadius,
      borderRadius = _ref2$borderRadius === undefined ? fabStyle.borderRadius : _ref2$borderRadius,
      customBackgroundColor = _ref2.backgroundColor;
    var _getFABColors = (0, _utils.getFABColors)({
        theme,
        variant,
        disabled,
        customColor,
        customBackgroundColor,
        customRippleColor
      }),
      backgroundColor = _getFABColors.backgroundColor,
      foregroundColor = _getFABColors.foregroundColor,
      rippleColor = _getFABColors.rippleColor;
    var isLargeSize = size === 'large';
    var isFlatMode = mode === 'flat';
    var iconSize = isLargeSize ? 36 : 24;
    var loadingIndicatorSize = isLargeSize ? 24 : 18;
    var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
    var extendedStyle = (0, _utils.getExtendedFabStyle)({
      customSize,
      theme
    });
    var textStyle = {
      color: foregroundColor,
      ...font
    };
    var md3Elevation = isFlatMode || disabled ? 0 : 3;
    var newAccessibilityState = {
      ...accessibilityState,
      disabled
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Surface.default, {
      ref: ref,
      ...rest,
      style: [{
        borderRadius,
        backgroundColor,
        opacity: visibility,
        transform: [{
          scale: visibility
        }]
      }, !isV3 && styles.elevated, !isV3 && disabled && styles.disabled, style],
      pointerEvents: visible ? 'auto' : 'none',
      testID: `${testID}-container`,
      ...(isV3 && {
        elevation: md3Elevation
      }),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
        borderless: true,
        background: background,
        onPress: onPress,
        onLongPress: onLongPress,
        delayLongPress: delayLongPress,
        rippleColor: rippleColor,
        disabled: disabled,
        accessibilityLabel: accessibilityLabel,
        accessibilityRole: "button",
        accessibilityState: newAccessibilityState,
        testID: testID,
        style: {
          borderRadius
        },
        ...rest,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.content, label ? extendedStyle : fabStyle],
          testID: `${testID}-content`,
          pointerEvents: "none",
          children: [icon && loading !== true ? /*#__PURE__*/(0, _jsxRuntime.jsx)(IconComponent, {
            source: icon,
            size: customSize ? customSize / 2 : iconSize,
            color: foregroundColor
          }) : null, loading ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ActivityIndicator.default, {
            size: customSize ? customSize / 2 : loadingIndicatorSize,
            color: foregroundColor
          }) : null, label ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
            variant: "labelLarge",
            selectable: false,
            testID: `${testID}-text`,
            style: [styles.label, uppercase && styles.uppercaseLabel, textStyle],
            maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
            children: label
          }) : null]
        })
      })
    });
  });
  var styles = _reactNative.StyleSheet.create({
    elevated: {
      elevation: 6
    },
    content: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center'
    },
    label: {
      marginHorizontal: 8
    },
    uppercaseLabel: {
      textTransform: 'uppercase'
    },
    disabled: {
      elevation: 0
    }
  });
  var _default = exports.default = FAB; // @component-docs ignore-next-line
},657,[1,203,125,45,598,506,577,601,638,570,599,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.FABGroup = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _reactNativeSafeAreaContext = require(_dependencyMap[4]);
  var _FAB = _interopRequireDefault(require(_dependencyMap[5]));
  var _utils = require(_dependencyMap[6]);
  var _theming = require(_dependencyMap[7]);
  var _Card = _interopRequireDefault(require(_dependencyMap[8]));
  var _Text = _interopRequireDefault(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var AnimatedPressable = _reactNative.Animated.createAnimatedComponent(_reactNative.Pressable);
  /**
   * A component to display a stack of FABs with related actions in a speed dial.
   * To render the group above other components, you'll need to wrap it with the [`Portal`](../Portal) component.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { FAB, Portal, PaperProvider } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [state, setState] = React.useState({ open: false });
   *
   *   const onStateChange = ({ open }) => setState({ open });
   *
   *   const { open } = state;
   *
   *   return (
   *     <PaperProvider>
   *       <Portal>
   *         <FAB.Group
   *           open={open}
   *           visible
   *           icon={open ? 'calendar-today' : 'plus'}
   *           actions={[
   *             { icon: 'plus', onPress: () => console.log('Pressed add') },
   *             {
   *               icon: 'star',
   *               label: 'Star',
   *               onPress: () => console.log('Pressed star'),
   *             },
   *             {
   *               icon: 'email',
   *               label: 'Email',
   *               onPress: () => console.log('Pressed email'),
   *             },
   *             {
   *               icon: 'bell',
   *               label: 'Remind',
   *               onPress: () => console.log('Pressed notifications'),
   *             },
   *           ]}
   *           onStateChange={onStateChange}
   *           onPress={() => {
   *             if (open) {
   *               // do something if the speed dial is open
   *             }
   *           }}
   *         />
   *       </Portal>
   *     </PaperProvider>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var FABGroup = _ref => {
    var actions = _ref.actions,
      icon = _ref.icon,
      open = _ref.open,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      toggleStackOnLongPress = _ref.toggleStackOnLongPress,
      accessibilityLabel = _ref.accessibilityLabel,
      themeOverrides = _ref.theme,
      style = _ref.style,
      fabStyle = _ref.fabStyle,
      visible = _ref.visible,
      label = _ref.label,
      testID = _ref.testID,
      onStateChange = _ref.onStateChange,
      colorProp = _ref.color,
      _ref$delayLongPress = _ref.delayLongPress,
      delayLongPress = _ref$delayLongPress === undefined ? 200 : _ref$delayLongPress,
      _ref$variant = _ref.variant,
      variant = _ref$variant === undefined ? 'primary' : _ref$variant,
      _ref$enableLongPressW = _ref.enableLongPressWhenStackOpened,
      enableLongPressWhenStackOpened = _ref$enableLongPressW === undefined ? false : _ref$enableLongPressW,
      customBackdropColor = _ref.backdropColor,
      rippleColor = _ref.rippleColor;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(0)),
      backdrop = _React$useRef.current;
    var animations = React.useRef(actions.map(() => new _reactNative.Animated.Value(open ? 1 : 0)));
    var _React$useState = React.useState(null),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      prevActions = _React$useState2[0],
      setPrevActions = _React$useState2[1];
    var scale = theme.animation.scale;
    var isV3 = theme.isV3;
    React.useEffect(() => {
      if (open) {
        _reactNative.Animated.parallel([_reactNative.Animated.timing(backdrop, {
          toValue: 1,
          duration: 250 * scale,
          useNativeDriver: true
        }), _reactNative.Animated.stagger(isV3 ? 15 : 50 * scale, animations.current.map(animation => _reactNative.Animated.timing(animation, {
          toValue: 1,
          duration: 150 * scale,
          useNativeDriver: true
        })).reverse())]).start();
      } else {
        _reactNative.Animated.parallel([_reactNative.Animated.timing(backdrop, {
          toValue: 0,
          duration: 200 * scale,
          useNativeDriver: true
        }), ...animations.current.map(animation => _reactNative.Animated.timing(animation, {
          toValue: 0,
          duration: 150 * scale,
          useNativeDriver: true
        }))]).start();
      }
    }, [open, actions, backdrop, scale, isV3]);
    var close = () => onStateChange({
      open: false
    });
    var toggle = () => onStateChange({
      open: !open
    });
    var _getFABGroupColors = (0, _utils.getFABGroupColors)({
        theme,
        customBackdropColor
      }),
      labelColor = _getFABGroupColors.labelColor,
      backdropColor = _getFABGroupColors.backdropColor,
      stackedFABBackgroundColor = _getFABGroupColors.stackedFABBackgroundColor;
    var backdropOpacity = open ? backdrop.interpolate({
      inputRange: [0, 0.5, 1],
      outputRange: [0, 1, 1]
    }) : backdrop;
    var opacities = animations.current;
    var scales = opacities.map(opacity => open ? opacity.interpolate({
      inputRange: [0, 1],
      outputRange: [0.5, 1]
    }) : 1);
    var translations = opacities.map(opacity => open ? opacity.interpolate({
      inputRange: [0, 1],
      outputRange: [24, -8]
    }) : -8);
    var labelTranslations = opacities.map(opacity => open ? opacity.interpolate({
      inputRange: [0, 1],
      outputRange: [8, -8]
    }) : -8);
    var _useSafeAreaInsets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)(),
      top = _useSafeAreaInsets.top,
      bottom = _useSafeAreaInsets.bottom,
      right = _useSafeAreaInsets.right,
      left = _useSafeAreaInsets.left;
    var containerPaddings = {
      paddingBottom: bottom,
      paddingRight: right,
      paddingLeft: left,
      paddingTop: top
    };
    if (actions.length !== prevActions?.length) {
      animations.current = actions.map((_, i) => animations.current[i] || new _reactNative.Animated.Value(open ? 1 : 0));
      setPrevActions(actions);
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      pointerEvents: "box-none",
      style: [styles.container, containerPaddings, style],
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(AnimatedPressable, {
        accessibilityRole: "button",
        onPress: close,
        pointerEvents: open ? 'auto' : 'none',
        style: [styles.backdrop, {
          opacity: backdropOpacity,
          backgroundColor: backdropColor
        }]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        pointerEvents: "box-none",
        style: styles.safeArea,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          pointerEvents: open ? 'box-none' : 'none',
          children: actions.map((it, i) => {
            var labelTextStyle = {
              color: it.labelTextColor ?? labelColor,
              ...(isV3 ? theme.fonts.titleMedium : {})
            };
            var marginHorizontal = typeof it.size === 'undefined' || it.size === 'small' ? 24 : 16;
            var accessibilityLabel = typeof it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label;
            var size = typeof it.size !== 'undefined' ? it.size : 'small';
            return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
              // eslint-disable-line react/no-array-index-key
              style: [styles.item, {
                marginHorizontal
              }],
              pointerEvents: open ? 'box-none' : 'none',
              accessibilityRole: "button",
              importantForAccessibility: "yes",
              accessible: true,
              accessibilityLabel: accessibilityLabel,
              children: [it.label && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Card.default, {
                  mode: isV3 ? 'contained' : 'elevated',
                  onPress: e => {
                    it.onPress(e);
                    close();
                  },
                  accessibilityHint: it.accessibilityHint,
                  importantForAccessibility: "no-hide-descendants",
                  accessibilityElementsHidden: true,
                  style: [styles.containerStyle, {
                    transform: [isV3 ? {
                      translateY: labelTranslations[i]
                    } : {
                      scale: scales[i]
                    }],
                    opacity: opacities[i]
                  }, isV3 && styles.v3ContainerStyle, it.containerStyle],
                  children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
                    variant: "titleMedium",
                    importantForAccessibility: "no-hide-descendants",
                    accessibilityElementsHidden: true,
                    style: [labelTextStyle, it.labelStyle],
                    maxFontSizeMultiplier: it.labelMaxFontSizeMultiplier,
                    children: it.label
                  })
                })
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_FAB.default, {
                size: size,
                icon: it.icon,
                color: it.color,
                style: [{
                  transform: [{
                    scale: scales[i]
                  }],
                  opacity: opacities[i],
                  backgroundColor: stackedFABBackgroundColor
                }, isV3 && {
                  transform: [{
                    translateY: translations[i]
                  }]
                }, it.style],
                accessibilityElementsHidden: true,
                theme: theme,
                onPress: e => {
                  it.onPress(e);
                  close();
                },
                importantForAccessibility: "no-hide-descendants",
                testID: it.testID,
                visible: open,
                rippleColor: it.rippleColor
              })]
            }, i);
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_FAB.default, {
          onPress: e => {
            onPress?.(e);
            if (!toggleStackOnLongPress || open) {
              toggle();
            }
          },
          onLongPress: e => {
            if (!open || enableLongPressWhenStackOpened) {
              onLongPress?.(e);
              if (toggleStackOnLongPress) {
                toggle();
              }
            }
          },
          delayLongPress: delayLongPress,
          icon: icon,
          color: colorProp,
          accessibilityLabel: accessibilityLabel,
          accessibilityRole: "button",
          accessibilityState: {
            expanded: open
          },
          style: [styles.fab, fabStyle],
          theme: theme,
          visible: visible,
          label: label,
          testID: testID,
          variant: variant,
          rippleColor: rippleColor
        })]
      })]
    });
  };
  exports.FABGroup = FABGroup;
  FABGroup.displayName = 'FAB.Group';
  var _default = exports.default = FABGroup; // @component-docs ignore-next-line
  var styles = _reactNative.StyleSheet.create({
    safeArea: {
      alignItems: 'flex-end'
    },
    container: {
      ..._reactNative.StyleSheet.absoluteFillObject,
      justifyContent: 'flex-end'
    },
    fab: {
      marginHorizontal: 16,
      marginBottom: 16,
      marginTop: 0
    },
    backdrop: {
      ..._reactNative.StyleSheet.absoluteFillObject
    },
    containerStyle: {
      borderRadius: 5,
      paddingHorizontal: 12,
      paddingVertical: 6,
      marginVertical: 8,
      marginHorizontal: 16,
      elevation: 2
    },
    item: {
      marginBottom: 16,
      flexDirection: 'row',
      justifyContent: 'flex-end',
      alignItems: 'center'
    },
    // eslint-disable-next-line react-native/no-color-literals
    v3ContainerStyle: {
      backgroundColor: 'transparent',
      elevation: 0
    }
  });
},658,[1,29,125,45,533,657,598,506,616,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _utils = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _AnimatedText = _interopRequireDefault(require(_dependencyMap[6]));
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["style", "type", "visible", "theme", "onLayout", "padding", "disabled"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Helper text is used in conjuction with input elements to provide additional hints for the user.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { View } from 'react-native';
   * import { HelperText, TextInput } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [text, setText] = React.useState('');
   *
   *    const onChangeText = text => setText(text);
   *
   *   const hasErrors = () => {
   *     return !text.includes('@');
   *   };
   *
   *  return (
   *     <View>
   *       <TextInput label="Email" value={text} onChangeText={onChangeText} />
   *       <HelperText type="error" visible={hasErrors()}>
   *         Email address is invalid!
   *       </HelperText>
   *     </View>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var HelperText = _ref => {
    var style = _ref.style,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'info' : _ref$type,
      _ref$visible = _ref.visible,
      visible = _ref$visible === undefined ? true : _ref$visible,
      themeOverrides = _ref.theme,
      onLayout = _ref.onLayout,
      _ref$padding = _ref.padding,
      padding = _ref$padding === undefined ? 'normal' : _ref$padding,
      disabled = _ref.disabled,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
      shown = _React$useRef.current;
    var _React$useRef2 = React.useRef(0),
      textHeight = _React$useRef2.current;
    var scale = theme.animation.scale;
    var _rest$maxFontSizeMult = rest.maxFontSizeMultiplier,
      maxFontSizeMultiplier = _rest$maxFontSizeMult === undefined ? 1.5 : _rest$maxFontSizeMult;
    React.useEffect(() => {
      if (visible) {
        // show text
        _reactNative.Animated.timing(shown, {
          toValue: 1,
          duration: 150 * scale,
          useNativeDriver: true
        }).start();
      } else {
        // hide text
        _reactNative.Animated.timing(shown, {
          toValue: 0,
          duration: 180 * scale,
          useNativeDriver: true
        }).start();
      }
    }, [visible, scale, shown]);
    var handleTextLayout = e => {
      onLayout?.(e);
      textHeight = e.nativeEvent.layout.height;
    };
    var textColor = (0, _utils.getTextColor)({
      theme,
      disabled,
      type
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_AnimatedText.default, {
      onLayout: handleTextLayout,
      style: [styles.text, padding !== 'none' ? styles.padding : {}, {
        color: textColor,
        opacity: shown,
        transform: visible && type === 'error' ? [{
          translateY: shown.interpolate({
            inputRange: [0, 1],
            outputRange: [-textHeight / 2, 0]
          })
        }] : []
      }, style],
      maxFontSizeMultiplier: maxFontSizeMultiplier,
      ...rest,
      children: rest.children
    });
  };
  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 12,
      paddingVertical: 4
    },
    padding: {
      paddingHorizontal: 12
    }
  });
  var _default = exports.default = HelperText;
},659,[1,203,125,45,660,506,574,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getTextColor = getTextColor;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  function getTextColor(_ref) {
    var theme = _ref.theme,
      disabled = _ref.disabled,
      type = _ref.type;
    var colors = theme.colors,
      dark = theme.dark;
    if (type === 'error') {
      return colors?.error;
    }
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      } else {
        return theme.colors.onSurfaceVariant;
      }
    }
    return (0, _color.default)(theme?.colors?.text).alpha(dark ? 0.7 : 0.54).rgb().string();
  }
},660,[1,515]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _color = _interopRequireDefault(require(_dependencyMap[5]));
  var _theming = require(_dependencyMap[6]);
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["color", "indeterminate", "progress", "visible", "theme", "animatedValue", "style", "fillStyle", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var INDETERMINATE_DURATION = 2000;
  var INDETERMINATE_MAX_WIDTH = 0.6;
  var isRTL = _reactNative.I18nManager.isRTL;

  /**
   * Progress bar is an indicator used to present progress of some activity in the app.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { ProgressBar, MD3Colors } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <ProgressBar progress={0.5} color={MD3Colors.error50} />
   * );
   *
   * export default MyComponent;
   * ```
   */
  var ProgressBar = _ref => {
    var color = _ref.color,
      indeterminate = _ref.indeterminate,
      _ref$progress = _ref.progress,
      progress = _ref$progress === undefined ? 0 : _ref$progress,
      _ref$visible = _ref.visible,
      visible = _ref$visible === undefined ? true : _ref$visible,
      themeOverrides = _ref.theme,
      animatedValue = _ref.animatedValue,
      style = _ref.style,
      fillStyle = _ref.fillStyle,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'progress-bar' : _ref$testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var isWeb = false;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(0)),
      timer = _React$useRef.current;
    var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(0)),
      fade = _React$useRef2.current;
    var passedAnimatedValue = React.useRef(animatedValue);
    var _React$useState = React.useState(0),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      width = _React$useState2[0],
      setWidth = _React$useState2[1];
    var _React$useState3 = React.useState(0),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      prevWidth = _React$useState4[0],
      setPrevWidth = _React$useState4[1];
    var indeterminateAnimation = React.useRef(null);
    var scale = theme.animation.scale;
    React.useEffect(() => {
      passedAnimatedValue.current = animatedValue;
    });
    var startAnimation = React.useCallback(() => {
      // Show progress bar
      _reactNative.Animated.timing(fade, {
        duration: 200 * scale,
        toValue: 1,
        useNativeDriver: true,
        isInteraction: false
      }).start();

      /**
       * We shouldn't add @param animatedValue to the
       * deps array, to avoid the unnecessary loop.
       * We can only check if the prop is passed initially,
       * and we do early return.
       */
      var externalAnimation = typeof passedAnimatedValue.current !== 'undefined' && passedAnimatedValue.current >= 0;
      if (externalAnimation) {
        return;
      }

      // Animate progress bar
      if (indeterminate) {
        if (!indeterminateAnimation.current) {
          indeterminateAnimation.current = _reactNative.Animated.timing(timer, {
            duration: INDETERMINATE_DURATION,
            toValue: 1,
            // Animated.loop does not work if useNativeDriver is true on web
            useNativeDriver: true,
            isInteraction: false
          });
        }

        // Reset timer to the beginning
        timer.setValue(0);
        _reactNative.Animated.loop(indeterminateAnimation.current).start();
      } else {
        _reactNative.Animated.timing(timer, {
          duration: 200 * scale,
          toValue: progress ? progress : 0,
          useNativeDriver: true,
          isInteraction: false
        }).start();
      }
    }, [fade, scale, indeterminate, timer, progress, isWeb]);
    var stopAnimation = React.useCallback(() => {
      // Stop indeterminate animation
      if (indeterminateAnimation.current) {
        indeterminateAnimation.current.stop();
      }
      _reactNative.Animated.timing(fade, {
        duration: 200 * scale,
        toValue: 0,
        useNativeDriver: true,
        isInteraction: false
      }).start();
    }, [fade, scale]);
    React.useEffect(() => {
      if (visible) startAnimation();else stopAnimation();
    }, [visible, startAnimation, stopAnimation]);
    React.useEffect(() => {
      if (animatedValue && animatedValue >= 0) {
        timer.setValue(animatedValue);
      }
    }, [animatedValue, timer]);
    React.useEffect(() => {
      // Start animation the very first time when previously the width was unclear
      if (visible && prevWidth === 0) {
        startAnimation();
      }
    }, [prevWidth, startAnimation, visible]);
    var onLayout = event => {
      setPrevWidth(width);
      setWidth(event.nativeEvent.layout.width);
    };
    var tintColor = color || theme.colors?.primary;
    var trackTintColor = theme.isV3 ? theme.colors.surfaceVariant : (0, _color.default)(tintColor).alpha(0.38).rgb().string();
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      onLayout: onLayout,
      ...rest,
      accessible: true,
      accessibilityRole: "progressbar",
      accessibilityState: {
        busy: visible
      },
      accessibilityValue: indeterminate ? {} : {
        min: 0,
        max: 100,
        now: Math.round(progress * 100)
      },
      style: isWeb,
      testID: testID,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [styles.container, {
          backgroundColor: trackTintColor,
          opacity: fade
        }, style],
        children: width ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          testID: `${testID}-fill`,
          style: [styles.progressBar, {
            width,
            backgroundColor: tintColor,
            transform: [{
              translateX: timer.interpolate(indeterminate ? {
                inputRange: [0, 0.5, 1],
                outputRange: [(isRTL ? 1 : -1) * 0.5 * width, (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL ? -1 : 1) * 0.7 * width]
              } : {
                inputRange: [0, 1],
                outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0]
              })
            }, {
              // Workaround for workaround for https://github.com/facebook/react-native/issues/6278
              scaleX: timer.interpolate(indeterminate ? {
                inputRange: [0, 0.5, 1],
                outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]
              } : {
                inputRange: [0, 1],
                outputRange: [0.0001, 1]
              })
            }]
          }, fillStyle]
        }) : null
      })
    });
  };
  var styles = _reactNative.StyleSheet.create({
    container: {
      height: 4,
      overflow: 'hidden'
    },
    webContainer: {
      width: '100%',
      height: '100%'
    },
    progressBar: {
      flex: 1
    }
  });
  var _default = exports.default = ProgressBar;
},661,[1,29,203,125,45,515,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _RadioButton = _interopRequireDefault(require(_dependencyMap[1]));
  var _RadioButtonAndroid = _interopRequireDefault(require(_dependencyMap[2]));
  var _RadioButtonGroup = _interopRequireDefault(require(_dependencyMap[3]));
  var _RadioButtonIOS = _interopRequireDefault(require(_dependencyMap[4]));
  var _RadioButtonItem = _interopRequireDefault(require(_dependencyMap[5]));
  var RadioButton = Object.assign(
  // @component ./RadioButton.tsx
  _RadioButton.default, {
    // @component ./RadioButtonGroup.tsx
    Group: _RadioButtonGroup.default,
    // @component ./RadioButtonAndroid.tsx
    Android: _RadioButtonAndroid.default,
    // @component ./RadioButtonIOS.tsx
    IOS: _RadioButtonIOS.default,
    // @component ./RadioButtonItem.tsx
    Item: _RadioButtonItem.default
  });
  var _default = exports.default = RadioButton;
},662,[1,663,664,665,667,668]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _RadioButtonAndroid = _interopRequireDefault(require(_dependencyMap[4]));
  var _RadioButtonIOS = _interopRequireDefault(require(_dependencyMap[5]));
  var _theming = require(_dependencyMap[6]);
  var _jsxRuntime = require(_dependencyMap[7]);
  var _excluded = ["theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Radio buttons allow the selection a single option from a set.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { View } from 'react-native';
   * import { RadioButton } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [checked, setChecked] = React.useState('first');
   *
   *   return (
   *     <View>
   *       <RadioButton
   *         value="first"
   *         status={ checked === 'first' ? 'checked' : 'unchecked' }
   *         onPress={() => setChecked('first')}
   *       />
   *       <RadioButton
   *         value="second"
   *         status={ checked === 'second' ? 'checked' : 'unchecked' }
   *         onPress={() => setChecked('second')}
   *       />
   *     </View>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var RadioButton = _ref => {
    var themeOverrides = _ref.theme,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var Button = _RadioButtonIOS.default;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Button, {
      ...props,
      theme: theme
    });
  };
  var _default = exports.default = RadioButton;
},663,[1,203,125,45,664,667,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.RadioButtonAndroid = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _RadioButtonGroup = require(_dependencyMap[4]);
  var _utils = require(_dependencyMap[5]);
  var _theming = require(_dependencyMap[6]);
  var _utils2 = require(_dependencyMap[7]);
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["disabled", "onPress", "theme", "value", "status", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var BORDER_WIDTH = 2;

  /**
   * Radio buttons allow the selection a single option from a set.
   * This component follows platform guidelines for Android, but can be used
   * on any platform.
   *
   * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
   */
  var RadioButtonAndroid = _ref => {
    var disabled = _ref.disabled,
      onPress = _ref.onPress,
      themeOverrides = _ref.theme,
      value = _ref.value,
      status = _ref.status,
      testID = _ref.testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(BORDER_WIDTH)),
      borderAnim = _React$useRef.current;
    var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(1)),
      radioAnim = _React$useRef2.current;
    var isFirstRendering = React.useRef(true);
    var scale = theme.animation.scale;
    React.useEffect(() => {
      // Do not run animation on very first rendering
      if (isFirstRendering.current) {
        isFirstRendering.current = false;
        return;
      }
      if (status === 'checked') {
        radioAnim.setValue(1.2);
        _reactNative.Animated.timing(radioAnim, {
          toValue: 1,
          duration: 150 * scale,
          useNativeDriver: true
        }).start();
      } else {
        borderAnim.setValue(10);
        _reactNative.Animated.timing(borderAnim, {
          toValue: BORDER_WIDTH,
          duration: 150 * scale,
          useNativeDriver: false
        }).start();
      }
    }, [status, borderAnim, radioAnim, scale]);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RadioButtonGroup.RadioButtonContext.Consumer, {
      children: context => {
        var checked = (0, _utils.isChecked)({
          contextValue: context?.value,
          status,
          value
        }) === 'checked';
        var _getAndroidSelectionC = (0, _utils2.getAndroidSelectionControlColor)({
            theme,
            disabled,
            checked,
            customColor: rest.color,
            customUncheckedColor: rest.uncheckedColor
          }),
          rippleColor = _getAndroidSelectionC.rippleColor,
          selectionControlColor = _getAndroidSelectionC.selectionControlColor;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
          ...rest,
          borderless: true,
          rippleColor: rippleColor,
          onPress: disabled ? undefined : event => {
            (0, _utils.handlePress)({
              onPress,
              onValueChange: context?.onValueChange,
              value,
              event
            });
          },
          accessibilityRole: "radio",
          accessibilityState: {
            disabled,
            checked
          },
          accessibilityLiveRegion: "polite",
          style: styles.container,
          testID: testID,
          theme: theme,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            style: [styles.radio, {
              borderColor: selectionControlColor,
              borderWidth: borderAnim
            }],
            children: checked ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [_reactNative.StyleSheet.absoluteFill, styles.radioContainer],
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                style: [styles.dot, {
                  backgroundColor: selectionControlColor,
                  transform: [{
                    scale: radioAnim
                  }]
                }]
              })
            }) : null
          })
        });
      }
    });
  };
  exports.RadioButtonAndroid = RadioButtonAndroid;
  RadioButtonAndroid.displayName = 'RadioButton.Android';
  var styles = _reactNative.StyleSheet.create({
    container: {
      borderRadius: 18
    },
    radioContainer: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    radio: {
      height: 20,
      width: 20,
      borderRadius: 10,
      margin: 8
    },
    dot: {
      height: 10,
      width: 10,
      borderRadius: 5
    }
  });
  var _default = exports.default = RadioButtonAndroid; // @component-docs ignore-next-line
},664,[1,203,125,45,665,666,506,627,580,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.RadioButtonGroup = exports.RadioButtonContext = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  var _jsxRuntime = require(_dependencyMap[2]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var RadioButtonContext = exports.RadioButtonContext = /*#__PURE__*/React.createContext(null);

  /**
   * Radio button group allows to control a group of radio buttons.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { View } from 'react-native';
   * import { RadioButton, Text } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [value, setValue] = React.useState('first');
   *
   *   return (
   *     <RadioButton.Group onValueChange={newValue => setValue(newValue)} value={value}>
   *       <View>
   *         <Text>First</Text>
   *         <RadioButton value="first" />
   *       </View>
   *       <View>
   *         <Text>Second</Text>
   *         <RadioButton value="second" />
   *       </View>
   *     </RadioButton.Group>
   *   );
   * };
   *
   * export default MyComponent;
   *```
   */
  var RadioButtonGroup = _ref => {
    var value = _ref.value,
      onValueChange = _ref.onValueChange,
      children = _ref.children;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(RadioButtonContext.Provider, {
      value: {
        value,
        onValueChange
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        accessibilityRole: "radiogroup",
        children: children
      })
    });
  };
  exports.RadioButtonGroup = RadioButtonGroup;
  RadioButtonGroup.displayName = 'RadioButton.Group';
  var _default = exports.default = RadioButtonGroup; // @component-docs ignore-next-line
},665,[125,45,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isChecked = exports.handlePress = undefined;
  var handlePress = _ref => {
    var onPress = _ref.onPress,
      value = _ref.value,
      onValueChange = _ref.onValueChange,
      event = _ref.event;
    if (onPress && onValueChange) {
      console.warn(`onPress in the scope of RadioButtonGroup will not be executed, use onValueChange instead`);
    }
    onValueChange ? onValueChange(value) : onPress?.(event);
  };
  exports.handlePress = handlePress;
  var isChecked = _ref2 => {
    var value = _ref2.value,
      status = _ref2.status,
      contextValue = _ref2.contextValue;
    if (contextValue !== undefined && contextValue !== null) {
      return contextValue === value ? 'checked' : 'unchecked';
    } else {
      return status;
    }
  };
  exports.isChecked = isChecked;
},666,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.RadioButtonIOS = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _RadioButtonGroup = require(_dependencyMap[4]);
  var _utils = require(_dependencyMap[5]);
  var _theming = require(_dependencyMap[6]);
  var _utils2 = require(_dependencyMap[7]);
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[8]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  var _excluded = ["disabled", "onPress", "theme", "status", "value", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Radio buttons allow the selection a single option from a set.
   * This component follows platform guidelines for iOS, but can be used
   * on any platform.
   *
   * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
   */
  var RadioButtonIOS = _ref => {
    var disabled = _ref.disabled,
      onPress = _ref.onPress,
      themeOverrides = _ref.theme,
      status = _ref.status,
      value = _ref.value,
      testID = _ref.testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RadioButtonGroup.RadioButtonContext.Consumer, {
      children: context => {
        var checked = (0, _utils.isChecked)({
          contextValue: context?.value,
          status,
          value
        }) === 'checked';
        var _getSelectionControlI = (0, _utils2.getSelectionControlIOSColor)({
            theme,
            disabled,
            customColor: rest.color
          }),
          checkedColor = _getSelectionControlI.checkedColor,
          rippleColor = _getSelectionControlI.rippleColor;
        var opacity = checked ? 1 : 0;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
          ...rest,
          borderless: true,
          rippleColor: rippleColor,
          onPress: disabled ? undefined : event => {
            (0, _utils.handlePress)({
              onPress,
              value,
              onValueChange: context?.onValueChange,
              event
            });
          },
          accessibilityRole: "radio",
          accessibilityState: {
            disabled,
            checked
          },
          accessibilityLiveRegion: "polite",
          style: styles.container,
          testID: testID,
          theme: theme,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: {
              opacity
            },
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
              allowFontScaling: false,
              name: "check",
              size: 24,
              color: checkedColor,
              direction: "ltr"
            })
          })
        });
      }
    });
  };
  exports.RadioButtonIOS = RadioButtonIOS;
  RadioButtonIOS.displayName = 'RadioButton.IOS';
  var styles = _reactNative.StyleSheet.create({
    container: {
      borderRadius: 18,
      padding: 6
    }
  });
  var _default = exports.default = RadioButtonIOS; // @component-docs ignore-next-line
},667,[1,203,125,45,665,666,506,627,543,580,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.RadioButtonItem = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _RadioButton = _interopRequireDefault(require(_dependencyMap[3]));
  var _RadioButtonAndroid = _interopRequireDefault(require(_dependencyMap[4]));
  var _RadioButtonGroup = require(_dependencyMap[5]);
  var _RadioButtonIOS = _interopRequireDefault(require(_dependencyMap[6]));
  var _utils = require(_dependencyMap[7]);
  var _theming = require(_dependencyMap[8]);
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[9]));
  var _Text = _interopRequireDefault(require(_dependencyMap[10]));
  var _jsxRuntime = require(_dependencyMap[11]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { RadioButton } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [value, setValue] = React.useState('first');
   *
   *   return (
   *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>
   *       <RadioButton.Item label="First item" value="first" />
   *       <RadioButton.Item label="Second item" value="second" />
   *     </RadioButton.Group>
   *   );
   * };
   *
   * export default MyComponent;
   *```
   */
  var RadioButtonItem = _ref => {
    var value = _ref.value,
      label = _ref.label,
      style = _ref.style,
      labelStyle = _ref.labelStyle,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      disabled = _ref.disabled,
      color = _ref.color,
      uncheckedColor = _ref.uncheckedColor,
      rippleColor = _ref.rippleColor,
      status = _ref.status,
      themeOverrides = _ref.theme,
      background = _ref.background,
      _ref$accessibilityLab = _ref.accessibilityLabel,
      accessibilityLabel = _ref$accessibilityLab === undefined ? label : _ref$accessibilityLab,
      testID = _ref.testID,
      mode = _ref.mode,
      _ref$position = _ref.position,
      position = _ref$position === undefined ? 'trailing' : _ref$position,
      _ref$labelVariant = _ref.labelVariant,
      labelVariant = _ref$labelVariant === undefined ? 'bodyLarge' : _ref$labelVariant,
      labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var radioButtonProps = {
      value,
      disabled,
      status,
      color,
      theme,
      uncheckedColor
    };
    var isLeading = position === 'leading';
    var radioButton;
    if (mode === 'android') {
      radioButton = /*#__PURE__*/(0, _jsxRuntime.jsx)(_RadioButtonAndroid.default, {
        ...radioButtonProps
      });
    } else if (mode === 'ios') {
      radioButton = /*#__PURE__*/(0, _jsxRuntime.jsx)(_RadioButtonIOS.default, {
        ...radioButtonProps
      });
    } else {
      radioButton = /*#__PURE__*/(0, _jsxRuntime.jsx)(_RadioButton.default, {
        ...radioButtonProps
      });
    }
    var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;
    var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;
    var textAlign = isLeading ? 'right' : 'left';
    var computedStyle = {
      color: disabled ? disabledTextColor : textColor,
      textAlign
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RadioButtonGroup.RadioButtonContext.Consumer, {
      children: context => {
        var checked = (0, _utils.isChecked)({
          contextValue: context?.value,
          status,
          value
        }) === 'checked';
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
          onPress: event => (0, _utils.handlePress)({
            onPress: onPress,
            onValueChange: context?.onValueChange,
            value,
            event
          }),
          onLongPress: onLongPress,
          accessibilityLabel: accessibilityLabel,
          accessibilityRole: "radio",
          accessibilityState: {
            checked,
            disabled
          },
          testID: testID,
          disabled: disabled,
          background: background,
          theme: theme,
          rippleColor: rippleColor,
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: [styles.container, style],
            pointerEvents: "none",
            children: [isLeading && radioButton, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
              variant: labelVariant,
              style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle],
              maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
              children: label
            }), !isLeading && radioButton]
          })
        });
      }
    });
  };
  exports.RadioButtonItem = RadioButtonItem;
  RadioButtonItem.displayName = 'RadioButton.Item';
  var _default = exports.default = RadioButtonItem; // @component-docs ignore-next-line
  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingVertical: 8,
      paddingHorizontal: 16
    },
    label: {
      flexShrink: 1,
      flexGrow: 1
    },
    font: {
      fontSize: 16
    }
  });
},668,[1,125,45,663,664,665,667,666,506,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _ActivityIndicator = _interopRequireDefault(require(_dependencyMap[5]));
  var _Divider = _interopRequireDefault(require(_dependencyMap[6]));
  var _IconButton = _interopRequireDefault(require(_dependencyMap[7]));
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[8]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[9]));
  var _theming = require(_dependencyMap[10]);
  var _forwardRef = require(_dependencyMap[11]);
  var _jsxRuntime = require(_dependencyMap[12]);
  var _excluded = ["icon", "iconColor", "rippleColor", "onIconPress", "searchAccessibilityLabel", "clearIcon", "clearAccessibilityLabel", "onClearIconPress", "traileringIcon", "traileringIconColor", "traileringIconAccessibilityLabel", "traileringRippleColor", "onTraileringIconPress", "right", "mode", "showDivider", "inputStyle", "placeholder", "elevation", "style", "theme", "value", "loading", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Searchbar is a simple input box where users can type search queries.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Searchbar } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [searchQuery, setSearchQuery] = React.useState('');
   *
   *   return (
   *     <Searchbar
   *       placeholder="Search"
   *       onChangeText={setSearchQuery}
   *       value={searchQuery}
   *     />
   *   );
   * };
   *
   * export default MyComponent;
  
   * ```
   */
  var Searchbar = (0, _forwardRef.forwardRef)((_ref, ref) => {
    var icon = _ref.icon,
      customIconColor = _ref.iconColor,
      customRippleColor = _ref.rippleColor,
      onIconPress = _ref.onIconPress,
      _ref$searchAccessibil = _ref.searchAccessibilityLabel,
      searchAccessibilityLabel = _ref$searchAccessibil === undefined ? 'search' : _ref$searchAccessibil,
      clearIcon = _ref.clearIcon,
      _ref$clearAccessibili = _ref.clearAccessibilityLabel,
      clearAccessibilityLabel = _ref$clearAccessibili === undefined ? 'clear' : _ref$clearAccessibili,
      onClearIconPress = _ref.onClearIconPress,
      traileringIcon = _ref.traileringIcon,
      traileringIconColor = _ref.traileringIconColor,
      traileringIconAccessibilityLabel = _ref.traileringIconAccessibilityLabel,
      customTraileringRippleColor = _ref.traileringRippleColor,
      onTraileringIconPress = _ref.onTraileringIconPress,
      right = _ref.right,
      _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? 'bar' : _ref$mode,
      _ref$showDivider = _ref.showDivider,
      showDivider = _ref$showDivider === undefined ? true : _ref$showDivider,
      inputStyle = _ref.inputStyle,
      placeholder = _ref.placeholder,
      _ref$elevation = _ref.elevation,
      elevation = _ref$elevation === undefined ? 0 : _ref$elevation,
      style = _ref.style,
      themeOverrides = _ref.theme,
      value = _ref.value,
      _ref$loading = _ref.loading,
      loading = _ref$loading === undefined ? false : _ref$loading,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'search-bar' : _ref$testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var root = React.useRef(null);
    React.useImperativeHandle(ref, () => {
      var input = root.current;
      if (input) {
        return {
          focus: () => input.focus(),
          clear: () => input.clear(),
          setNativeProps: args => input.setNativeProps(args),
          isFocused: () => input.isFocused(),
          blur: () => input.blur()
        };
      }
      var noop = () => {
        throw new Error('TextInput is not available');
      };
      return {
        focus: noop,
        clear: noop,
        setNativeProps: noop,
        isFocused: noop,
        blur: noop
      };
    });
    var handleClearPress = e => {
      root.current?.clear();
      rest.onChangeText?.('');
      onClearIconPress?.(e);
    };
    var roundness = theme.roundness,
      dark = theme.dark,
      isV3 = theme.isV3,
      fonts = theme.fonts;
    var placeholderTextColor = isV3 ? theme.colors.onSurface : theme.colors?.placeholder;
    var textColor = isV3 ? theme.colors.onSurfaceVariant : theme.colors.text;
    var md2IconColor = dark ? textColor : (0, _color.default)(textColor).alpha(0.54).rgb().string();
    var iconColor = customIconColor || (isV3 ? theme.colors.onSurfaceVariant : md2IconColor);
    var rippleColor = customRippleColor || (0, _color.default)(textColor).alpha(0.32).rgb().string();
    var traileringRippleColor = customTraileringRippleColor || (0, _color.default)(textColor).alpha(0.32).rgb().string();
    var font = isV3 ? {
      ...fonts.bodyLarge,
      lineHeight: 0
    } : theme.fonts.regular;
    var isBarMode = isV3 && mode === 'bar';
    var shouldRenderTraileringIcon = isBarMode && traileringIcon && !loading && (!value || right !== undefined);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Surface.default, {
      style: [{
        borderRadius: roundness
      }, !isV3 && styles.elevation, isV3 && {
        backgroundColor: theme.colors.elevation.level3,
        borderRadius: roundness * (isBarMode ? 7 : 0)
      }, styles.container, style],
      testID: `${testID}-container`,
      ...(theme.isV3 && {
        elevation
      }),
      theme: theme,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
        accessibilityRole: "button",
        borderless: true,
        rippleColor: rippleColor,
        onPress: onIconPress,
        iconColor: iconColor,
        icon: icon || (_ref2 => {
          var size = _ref2.size,
            color = _ref2.color;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
            name: "magnify",
            color: color,
            size: size,
            direction: _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
          });
        }),
        theme: theme,
        accessibilityLabel: searchAccessibilityLabel,
        testID: `${testID}-icon`
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        style: [styles.input, {
          color: textColor,
          ...font,
          ...undefined
        }, isV3 && (isBarMode ? styles.barModeInput : styles.viewModeInput), inputStyle],
        placeholder: placeholder || '',
        placeholderTextColor: placeholderTextColor,
        selectionColor: theme.colors?.primary,
        underlineColorAndroid: "transparent",
        returnKeyType: "search",
        keyboardAppearance: dark ? 'dark' : 'light',
        accessibilityRole: "search",
        ref: root,
        value: value,
        testID: testID,
        ...rest
      }), loading ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ActivityIndicator.default, {
        testID: "activity-indicator",
        style: isV3 ? styles.v3Loader : styles.loader
      }) :
      /*#__PURE__*/
      // Clear icon should be always rendered within Searchbar – it's transparent,
      // without touch events, when there is no value. It's done to avoid issues
      // with the abruptly stopping ripple effect and changing bar width on web,
      // when clearing the value.
      (0, _jsxRuntime.jsx)(_reactNative.View, {
        pointerEvents: value ? 'auto' : 'none',
        testID: `${testID}-icon-wrapper`,
        style: [isV3 && !value && styles.v3ClearIcon, isV3 && right !== undefined && styles.v3ClearIconHidden],
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
          borderless: true,
          accessibilityLabel: clearAccessibilityLabel,
          iconColor: value ? iconColor : 'rgba(255, 255, 255, 0)',
          rippleColor: rippleColor,
          onPress: handleClearPress,
          icon: clearIcon || (_ref3 => {
            var size = _ref3.size,
              color = _ref3.color;
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
              name: isV3 ? 'close' : 'close-circle-outline',
              color: color,
              size: size,
              direction: _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
            });
          }),
          testID: `${testID}-clear-icon`,
          accessibilityRole: "button",
          theme: theme
        })
      }), shouldRenderTraileringIcon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
        accessibilityRole: "button",
        borderless: true,
        onPress: onTraileringIconPress,
        iconColor: traileringIconColor || theme.colors.onSurfaceVariant,
        rippleColor: traileringRippleColor,
        icon: traileringIcon,
        accessibilityLabel: traileringIconAccessibilityLabel,
        testID: `${testID}-trailering-icon`
      }) : null, isBarMode && right?.({
        color: textColor,
        style: styles.rightStyle,
        testID
      }), isV3 && !isBarMode && showDivider && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Divider.default, {
        bold: true,
        style: [styles.divider, {
          backgroundColor: theme.colors.outline
        }],
        testID: `${testID}-divider`
      })]
    });
  });
  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    input: {
      flex: 1,
      fontSize: 18,
      paddingLeft: 8,
      alignSelf: 'stretch',
      textAlign: _reactNative.I18nManager.getConstants().isRTL ? 'right' : 'left',
      minWidth: 0
    },
    barModeInput: {
      paddingLeft: 0,
      minHeight: 56
    },
    viewModeInput: {
      paddingLeft: 0,
      minHeight: 72
    },
    elevation: {
      elevation: 4
    },
    loader: {
      margin: 10
    },
    v3Loader: {
      marginHorizontal: 16
    },
    rightStyle: {
      marginRight: 16
    },
    v3ClearIcon: {
      position: 'absolute',
      right: 0,
      marginLeft: 16
    },
    v3ClearIconHidden: {
      display: 'none'
    },
    divider: {
      position: 'absolute',
      bottom: 0,
      width: '100%'
    }
  });
  var _default = exports.default = Searchbar;
},669,[1,203,125,45,515,601,587,636,543,599,506,577,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _reactNativeSafeAreaContext = require(_dependencyMap[5]);
  var _useLatestCallback = _interopRequireDefault(require(_dependencyMap[6]));
  var _Button = _interopRequireDefault(require(_dependencyMap[7]));
  var _IconButton = _interopRequireDefault(require(_dependencyMap[8]));
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[9]));
  var _Surface = _interopRequireDefault(require(_dependencyMap[10]));
  var _Text = _interopRequireDefault(require(_dependencyMap[11]));
  var _theming = require(_dependencyMap[12]);
  var _jsxRuntime = require(_dependencyMap[13]);
  var _excluded = ["visible", "action", "icon", "onIconPress", "iconAccessibilityLabel", "duration", "onDismiss", "children", "elevation", "wrapperStyle", "style", "theme", "maxFontSizeMultiplier", "rippleColor", "testID"],
    _excluded2 = ["style", "label", "onPress", "rippleColor"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var DURATION_SHORT = 4000;
  var DURATION_MEDIUM = 7000;
  var DURATION_LONG = 10000;

  /**
   * Snackbars provide brief feedback about an operation through a message rendered at the bottom of the container in which it's wrapped.
   *
   * Note: To display it as a popup, regardless of the parent's position, wrap it with a `Portal` component – refer to the example in the "More Examples` section.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { View, StyleSheet } from 'react-native';
   * import { Button, Snackbar } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [visible, setVisible] = React.useState(false);
   *
   *   const onToggleSnackBar = () => setVisible(!visible);
   *
   *   const onDismissSnackBar = () => setVisible(false);
   *
   *   return (
   *     <View style={styles.container}>
   *       <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>
   *       <Snackbar
   *         visible={visible}
   *         onDismiss={onDismissSnackBar}
   *         action={{
   *           label: 'Undo',
   *           onPress: () => {
   *             // Do something
   *           },
   *         }}>
   *         Hey there! I'm a Snackbar.
   *       </Snackbar>
   *     </View>
   *   );
   * };
   *
   * const styles = StyleSheet.create({
   *   container: {
   *     flex: 1,
   *     justifyContent: 'space-between',
   *   },
   * });
   *
   * export default MyComponent;
   * ```
   */
  var Snackbar = _ref => {
    var visible = _ref.visible,
      action = _ref.action,
      icon = _ref.icon,
      onIconPress = _ref.onIconPress,
      _ref$iconAccessibilit = _ref.iconAccessibilityLabel,
      iconAccessibilityLabel = _ref$iconAccessibilit === undefined ? 'Close icon' : _ref$iconAccessibilit,
      _ref$duration = _ref.duration,
      duration = _ref$duration === undefined ? DURATION_MEDIUM : _ref$duration,
      onDismiss = _ref.onDismiss,
      children = _ref.children,
      _ref$elevation = _ref.elevation,
      elevation = _ref$elevation === undefined ? 2 : _ref$elevation,
      wrapperStyle = _ref.wrapperStyle,
      style = _ref.style,
      themeOverrides = _ref.theme,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
      rippleColor = _ref.rippleColor,
      testID = _ref.testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _useSafeAreaInsets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)(),
      bottom = _useSafeAreaInsets.bottom,
      right = _useSafeAreaInsets.right,
      left = _useSafeAreaInsets.left;
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(0.0)),
      opacity = _React$useRef.current;
    var hideTimeout = React.useRef(undefined);
    var _React$useState = React.useState(!visible),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      hidden = _React$useState2[0],
      setHidden = _React$useState2[1];
    var scale = theme.animation.scale;
    var animateShow = (0, _useLatestCallback.default)(() => {
      if (hideTimeout.current) clearTimeout(hideTimeout.current);
      _reactNative.Animated.timing(opacity, {
        toValue: 1,
        duration: 200 * scale,
        easing: _reactNative.Easing.out(_reactNative.Easing.ease),
        useNativeDriver: true
      }).start(_ref2 => {
        var finished = _ref2.finished;
        if (finished) {
          var isInfinity = duration === Number.POSITIVE_INFINITY || duration === Number.NEGATIVE_INFINITY;
          if (!isInfinity) {
            hideTimeout.current = setTimeout(onDismiss, duration);
          }
        }
      });
    });
    var handleOnVisible = (0, _useLatestCallback.default)(() => {
      // show
      setHidden(false);
    });
    var handleOnHidden = (0, _useLatestCallback.default)(() => {
      // hide
      if (hideTimeout.current) {
        clearTimeout(hideTimeout.current);
      }
      _reactNative.Animated.timing(opacity, {
        toValue: 0,
        duration: 100 * scale,
        useNativeDriver: true
      }).start(_ref3 => {
        var finished = _ref3.finished;
        if (finished) {
          setHidden(true);
        }
      });
    });
    React.useEffect(() => {
      if (!hidden) {
        animateShow();
      }
    }, [animateShow, hidden]);
    React.useEffect(() => {
      return () => {
        if (hideTimeout.current) clearTimeout(hideTimeout.current);
      };
    }, []);
    React.useLayoutEffect(() => {
      if (visible) {
        handleOnVisible();
      } else {
        handleOnHidden();
      }
    }, [visible, handleOnVisible, handleOnHidden]);
    var colors = theme.colors,
      roundness = theme.roundness,
      isV3 = theme.isV3;
    if (hidden) {
      return null;
    }
    var _ref4 = action || {},
      actionStyle = _ref4.style,
      actionLabel = _ref4.label,
      onPressAction = _ref4.onPress,
      actionRippleColor = _ref4.rippleColor,
      actionProps = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);
    var buttonTextColor = isV3 ? colors.inversePrimary : colors.accent;
    var textColor = isV3 ? colors.inverseOnSurface : colors?.surface;
    var backgroundColor = isV3 ? colors.inverseSurface : colors?.onSurface;
    var isIconButton = isV3 && onIconPress;
    var marginLeft = action ? -12 : -16;
    var wrapperPaddings = {
      paddingBottom: bottom,
      paddingHorizontal: Math.max(left, right)
    };
    var renderChildrenWithWrapper = () => {
      if (typeof children === 'string') {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
          variant: "bodyMedium",
          style: [styles.content, {
            color: textColor
          }],
          maxFontSizeMultiplier: maxFontSizeMultiplier,
          children: children
        });
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.content,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          children: children
        })
      });
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      pointerEvents: "box-none",
      style: [styles.wrapper, wrapperPaddings, wrapperStyle],
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Surface.default, {
        pointerEvents: "box-none",
        accessibilityLiveRegion: "polite",
        theme: theme,
        style: [!isV3 && styles.elevation, styles.container, {
          backgroundColor,
          borderRadius: roundness,
          opacity: opacity,
          transform: [{
            scale: visible ? opacity.interpolate({
              inputRange: [0, 1],
              outputRange: [0.9, 1]
            }) : 1
          }]
        }, style],
        testID: testID,
        ...(isV3 && {
          elevation
        }),
        ...rest,
        children: [renderChildrenWithWrapper(), (action || isIconButton) && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.actionsContainer, {
            marginLeft
          }],
          children: [action ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.default, {
            onPress: event => {
              onPressAction?.(event);
              onDismiss();
            },
            style: [styles.button, actionStyle],
            textColor: buttonTextColor,
            compact: !isV3,
            mode: "text",
            theme: theme,
            rippleColor: actionRippleColor,
            ...actionProps,
            children: actionLabel
          }) : null, isIconButton ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
            accessibilityRole: "button",
            borderless: true,
            onPress: onIconPress,
            iconColor: theme.colors.inverseOnSurface,
            rippleColor: rippleColor,
            theme: theme,
            icon: icon || (_ref5 => {
              var size = _ref5.size,
                color = _ref5.color;
              return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MaterialCommunityIcon.default, {
                name: "close",
                color: color,
                size: size,
                direction: _reactNative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
              });
            }),
            accessibilityLabel: iconAccessibilityLabel,
            style: styles.icon,
            testID: `${testID}-icon`
          }) : null]
        })]
      })
    });
  };

  /**
   * Show the Snackbar for a short duration.
   */
  Snackbar.DURATION_SHORT = DURATION_SHORT;

  /**
   * Show the Snackbar for a medium duration.
   */
  Snackbar.DURATION_MEDIUM = DURATION_MEDIUM;

  /**
   * Show the Snackbar for a long duration.
   */
  Snackbar.DURATION_LONG = DURATION_LONG;
  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      position: 'absolute',
      bottom: 0,
      width: '100%'
    },
    container: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      margin: 8,
      borderRadius: 4,
      minHeight: 48
    },
    content: {
      marginHorizontal: 16,
      marginVertical: 14,
      flex: 1
    },
    actionsContainer: {
      flexDirection: 'row',
      justifyContent: 'flex-end',
      alignItems: 'center',
      minHeight: 48
    },
    button: {
      marginRight: 8,
      marginLeft: 4
    },
    elevation: {
      elevation: 6
    },
    icon: {
      width: 40,
      height: 40,
      margin: 0
    }
  });
  var _default = exports.default = Snackbar;
},670,[1,29,203,125,45,533,603,605,636,543,599,573,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _utils = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _jsxRuntime = require(_dependencyMap[6]);
  var _excluded = ["value", "disabled", "onValueChange", "color", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var version = _reactNative.NativeModules.PlatformConstants ? _reactNative.NativeModules.PlatformConstants.reactNativeVersion : undefined;
  /**
   * Switch is a visual toggle between two mutually exclusive states — on and off.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Switch } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);
   *
   *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);
   *
   *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;
   * };
   *
   * export default MyComponent;
   * ```
   */
  var Switch = _ref => {
    var value = _ref.value,
      disabled = _ref.disabled,
      onValueChange = _ref.onValueChange,
      color = _ref.color,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _getSwitchColor = (0, _utils.getSwitchColor)({
        theme,
        disabled,
        value,
        color
      }),
      checkedColor = _getSwitchColor.checkedColor,
      onTintColor = _getSwitchColor.onTintColor,
      thumbTintColor = _getSwitchColor.thumbTintColor;
    var props = version && version.major === 0 && version.minor <= 56 ? {
      onTintColor,
      thumbTintColor
    } : {
      thumbColor: thumbTintColor,
      trackColor: {
        true: onTintColor,
        false: onTintColor
      }
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Switch, {
      value: value,
      disabled: disabled,
      onValueChange: disabled ? undefined : onValueChange,
      ...props,
      ...rest
    });
  };
  var _default = exports.default = Switch;
},671,[1,203,125,45,672,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getSwitchColor = undefined;
  var _reactNative = require(_dependencyMap[1]);
  var _color = _interopRequireDefault(require(_dependencyMap[2]));
  var _colors = require(_dependencyMap[3]);
  var getCheckedColor = _ref => {
    var theme = _ref.theme,
      color = _ref.color;
    if (color) {
      return color;
    }
    if (theme.isV3) {
      return theme.colors.primary;
    }
    return theme.colors.accent;
  };
  var getThumbTintColor = _ref2 => {
    var theme = _ref2.theme,
      disabled = _ref2.disabled,
      value = _ref2.value,
      checkedColor = _ref2.checkedColor;
    var isIOS = true;
    {
      return undefined;
    }
    if (disabled) {
      if (theme.dark) {
        return _colors.grey800;
      }
      return _colors.grey400;
    }
    if (value) {
      return checkedColor;
    }
    if (theme.dark) {
      return _colors.grey400;
    }
    return _colors.grey50;
  };
  var getOnTintColor = _ref3 => {
    var theme = _ref3.theme,
      disabled = _ref3.disabled,
      value = _ref3.value,
      checkedColor = _ref3.checkedColor;
    var isIOS = true;
    {
      return checkedColor;
    }
    if (disabled) {
      if (theme.dark) {
        if (theme.isV3) {
          return (0, _color.default)(_colors.white).alpha(0.06).rgb().string();
        }
        return (0, _color.default)(_colors.white).alpha(0.1).rgb().string();
      }
      return (0, _color.default)(_colors.black).alpha(0.12).rgb().string();
    }
    if (value) {
      return (0, _color.default)(checkedColor).alpha(0.5).rgb().string();
    }
    if (theme.dark) {
      return _colors.grey700;
    }
    return 'rgb(178, 175, 177)';
  };
  var getSwitchColor = _ref4 => {
    var theme = _ref4.theme,
      disabled = _ref4.disabled,
      value = _ref4.value,
      color = _ref4.color;
    var checkedColor = getCheckedColor({
      theme,
      color
    });
    return {
      onTintColor: getOnTintColor({
        theme,
        disabled,
        value,
        checkedColor
      }),
      thumbTintColor: getThumbTintColor({
        theme,
        disabled,
        value,
        checkedColor
      }),
      checkedColor
    };
  };
  exports.getSwitchColor = getSwitchColor;
},672,[1,45,515,529]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Appbar = _interopRequireDefault(require(_dependencyMap[1]));
  var _AppbarAction = _interopRequireDefault(require(_dependencyMap[2]));
  var _AppbarBackAction = _interopRequireDefault(require(_dependencyMap[3]));
  var _AppbarContent = _interopRequireDefault(require(_dependencyMap[4]));
  var _AppbarHeader = _interopRequireDefault(require(_dependencyMap[5]));
  var Appbar = Object.assign(
  // @component ./Appbar.tsx
  _Appbar.default, {
    // @component ./AppbarContent.tsx
    Content: _AppbarContent.default,
    // @component ./AppbarAction.tsx
    Action: _AppbarAction.default,
    // @component ./AppbarBackAction.tsx
    BackAction: _AppbarBackAction.default,
    // @component ./AppbarHeader.tsx
    Header: _AppbarHeader.default
  });
  var _default = exports.default = Appbar;
},673,[1,674,677,678,675,681]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Appbar = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _AppbarContent = _interopRequireDefault(require(_dependencyMap[5]));
  var _utils = require(_dependencyMap[6]);
  var _theming = require(_dependencyMap[7]);
  var _Surface = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["children", "dark", "style", "mode", "elevated", "safeAreaInsets", "theme"],
    _excluded2 = ["backgroundColor", "elevation"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to display action items in a bar. It can be placed at the top or bottom.
   * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.
   * The bottom bar usually provides access to a drawer and up to four actions.
   *
   * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.
   * See [Dark Theme](https://callstack.github.io/react-native-paper/docs/guides/theming#dark-theme) for more informations
   *
   * ## Usage
   * ### Top bar
   * ```js
   * import * as React from 'react';
   * import { Appbar } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Appbar.Header>
   *     <Appbar.BackAction onPress={() => {}} />
   *     <Appbar.Content title="Title" />
   *     <Appbar.Action icon="calendar" onPress={() => {}} />
   *     <Appbar.Action icon="magnify" onPress={() => {}} />
   *   </Appbar.Header>
   * );
   *
   * export default MyComponent;
   * ```
   *
   * ### Bottom bar
   * ```js
   * import * as React from 'react';
   * import { StyleSheet } from 'react-native';
   * import { Appbar, FAB, useTheme } from 'react-native-paper';
   * import { useSafeAreaInsets } from 'react-native-safe-area-context';
   *
   * const BOTTOM_APPBAR_HEIGHT = 80;
   * const MEDIUM_FAB_HEIGHT = 56;
   *
   * const MyComponent = () => {
   *   const { bottom } = useSafeAreaInsets();
   *   const theme = useTheme();
   *
   *   return (
   *     <Appbar
   *       style={[
   *         styles.bottom,
   *         {
   *           height: BOTTOM_APPBAR_HEIGHT + bottom,
   *           backgroundColor: theme.colors.elevation.level2,
   *         },
   *       ]}
   *       safeAreaInsets={{ bottom }}
   *     >
   *       <Appbar.Action icon="archive" onPress={() => {}} />
   *       <Appbar.Action icon="email" onPress={() => {}} />
   *       <Appbar.Action icon="label" onPress={() => {}} />
   *       <Appbar.Action icon="delete" onPress={() => {}} />
   *       <FAB
   *         mode="flat"
   *         size="medium"
   *         icon="plus"
   *         onPress={() => {}}
   *         style={[
   *           styles.fab,
   *           { top: (BOTTOM_APPBAR_HEIGHT - MEDIUM_FAB_HEIGHT) / 2 },
   *         ]}
   *       />
   *     </Appbar>
   *   );
   * };
   *
   * const styles = StyleSheet.create({
   *   bottom: {
   *     backgroundColor: 'aquamarine',
   *     position: 'absolute',
   *     left: 0,
   *     right: 0,
   *     bottom: 0,
   *   },
   *   fab: {
   *     position: 'absolute',
   *     right: 16,
   *   },
   * });
   *
   * export default MyComponent;
   * ```
   */
  var Appbar = _ref => {
    var children = _ref.children,
      dark = _ref.dark,
      style = _ref.style,
      _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? 'small' : _ref$mode,
      elevated = _ref.elevated,
      safeAreaInsets = _ref.safeAreaInsets,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3;
    var flattenedStyle = _reactNative.StyleSheet.flatten(style);
    var _ref2 = flattenedStyle || {},
      customBackground = _ref2.backgroundColor,
      _ref2$elevation = _ref2.elevation,
      elevation = _ref2$elevation === undefined ? isV3 ? elevated ? 2 : 0 : 4 : _ref2$elevation,
      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    var backgroundColor = (0, _utils.getAppbarBackgroundColor)(theme, elevation, customBackground, elevated);
    var isMode = modeToCompare => {
      return isV3 && mode === modeToCompare;
    };
    var isDark = false;
    if (typeof dark === 'boolean') {
      isDark = dark;
    } else if (!isV3) {
      isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !(0, _color.default)(backgroundColor).isLight() : true;
    }
    var isV3CenterAlignedMode = isV3 && isMode('center-aligned');
    var shouldCenterContent = false;
    var shouldAddLeftSpacing = false;
    var shouldAddRightSpacing = false;
    if (!isV3 && true || isV3CenterAlignedMode) {
      var hasAppbarContent = false;
      var leftItemsCount = 0;
      var rightItemsCount = 0;
      React.Children.forEach(children, child => {
        if (/*#__PURE__*/React.isValidElement(child)) {
          if (child.type === _AppbarContent.default) {
            hasAppbarContent = true;
          } else if (hasAppbarContent) {
            rightItemsCount++;
          } else {
            leftItemsCount++;
          }
        }
      });
      shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < (isV3 ? 3 : 2);
      shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;
      shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;
    }
    var filterAppbarActions = React.useCallback(function () {
      var isLeading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return React.Children.toArray(children).filter(child =>
      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter
      isLeading ? child.props.isLeading : !child.props.isLeading);
    }, [children]);
    var spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;
    var insets = {
      paddingBottom: safeAreaInsets?.bottom,
      paddingTop: safeAreaInsets?.top,
      paddingLeft: safeAreaInsets?.left,
      paddingRight: safeAreaInsets?.right
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Surface.default, {
      style: [{
        backgroundColor
      }, styles.appbar, {
        height: isV3 ? _utils.modeAppbarHeight[mode] : _utils.DEFAULT_APPBAR_HEIGHT
      }, insets, restStyle, !theme.isV3 && {
        elevation
      }],
      elevation: elevation,
      ...rest,
      children: [shouldAddLeftSpacing ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: spacingStyle
      }) : null, (!isV3 || isMode('small') || isMode('center-aligned')) && (0, _utils.renderAppbarContent)({
        children,
        isDark,
        theme,
        isV3,
        shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent
      }), (isMode('medium') || isMode('large')) && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.columnContainer, isMode('center-aligned') && styles.centerAlignedContainer],
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.controlsRow,
          children: [(0, _utils.renderAppbarContent)({
            children,
            isDark,
            isV3,
            renderOnly: ['Appbar.BackAction'],
            mode
          }), (0, _utils.renderAppbarContent)({
            children: filterAppbarActions(true),
            isDark,
            isV3,
            renderOnly: ['Appbar.Action'],
            mode
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.rightActionControls,
            children: (0, _utils.renderAppbarContent)({
              children: filterAppbarActions(false),
              isDark,
              isV3,
              renderExcept: ['Appbar', 'Appbar.BackAction', 'Appbar.Content', 'Appbar.Header'],
              mode
            })
          })]
        }), (0, _utils.renderAppbarContent)({
          children,
          isDark,
          isV3,
          renderOnly: ['Appbar.Content'],
          mode
        })]
      }), shouldAddRightSpacing ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: spacingStyle
      }) : null]
    });
  };
  exports.Appbar = Appbar;
  var styles = _reactNative.StyleSheet.create({
    appbar: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingHorizontal: 4
    },
    spacing: {
      width: 48
    },
    v3Spacing: {
      width: 52
    },
    controlsRow: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    rightActionControls: {
      flexDirection: 'row',
      flex: 1,
      justifyContent: 'flex-end'
    },
    columnContainer: {
      flexDirection: 'column',
      flex: 1,
      paddingTop: 8
    },
    centerAlignedContainer: {
      paddingTop: 0
    }
  });
  var _default = exports.default = Appbar; // @component-docs ignore-next-line
},674,[1,203,125,45,515,675,676,506,599,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.AppbarContent = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _utils = require(_dependencyMap[5]);
  var _theming = require(_dependencyMap[6]);
  var _colors = require(_dependencyMap[7]);
  var _Text = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["color", "subtitle", "subtitleStyle", "onPress", "disabled", "style", "titleRef", "titleStyle", "title", "titleMaxFontSizeMultiplier", "mode", "theme", "testID"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component used to display a title and optional subtitle in an appbar.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Appbar } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *     <Appbar.Header>
   *        <Appbar.Content title="Title" />
   *     </Appbar.Header>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var AppbarContent = _ref => {
    var titleColor = _ref.color,
      subtitle = _ref.subtitle,
      subtitleStyle = _ref.subtitleStyle,
      onPress = _ref.onPress,
      disabled = _ref.disabled,
      style = _ref.style,
      titleRef = _ref.titleRef,
      titleStyle = _ref.titleStyle,
      title = _ref.title,
      titleMaxFontSizeMultiplier = _ref.titleMaxFontSizeMultiplier,
      _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? 'small' : _ref$mode,
      themeOverrides = _ref.theme,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'appbar-content' : _ref$testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3,
      colors = theme.colors;
    var titleTextColor = titleColor ? titleColor : isV3 ? colors.onSurface : _colors.white;
    var subtitleColor = (0, _color.default)(titleTextColor).alpha(0.7).rgb().string();
    var modeContainerStyles = {
      small: styles.v3DefaultContainer,
      medium: styles.v3MediumContainer,
      large: styles.v3LargeContainer,
      'center-aligned': styles.v3DefaultContainer
    };
    var variant = _utils.modeTextVariant[mode];
    var contentWrapperProps = {
      pointerEvents: 'box-none',
      style: [styles.container, isV3 && modeContainerStyles[mode], style],
      testID,
      ...rest
    };
    var content = /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [typeof title === 'string' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
        ...(isV3 && {
          variant
        }),
        ref: titleRef,
        style: [{
          color: titleTextColor,
          ...(isV3 ? theme.fonts[variant] : theme.fonts.regular)
        }, !isV3 && styles.title, titleStyle],
        numberOfLines: 1,
        accessible: true,
        accessibilityRole: onPress ? 'none' : 'header'
        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
        ,
        accessibilityTraits: "header",
        testID: `${testID}-title-text`,
        maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
        children: title
      }) : title, !isV3 && subtitle ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
        style: [styles.subtitle, {
          color: subtitleColor
        }, subtitleStyle],
        numberOfLines: 1,
        children: subtitle
      }) : null]
    });
    if (onPress) {
      return (
        /*#__PURE__*/
        // eslint-disable-next-line react-native-a11y/has-accessibility-props
        (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
          accessibilityRole: touchableRole
          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
          ,
          accessibilityTraits: touchableRole,
          accessibilityComponentType: "button",
          accessbilityState: disabled ? 'disabled' : null,
          onPress: onPress,
          disabled: disabled,
          ...contentWrapperProps,
          children: content
        })
      );
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      ...contentWrapperProps,
      children: content
    });
  };
  exports.AppbarContent = AppbarContent;
  AppbarContent.displayName = 'Appbar.Content';
  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      paddingHorizontal: 12
    },
    v3DefaultContainer: {
      paddingHorizontal: 0
    },
    v3MediumContainer: {
      paddingHorizontal: 0,
      justifyContent: 'flex-end',
      paddingBottom: 24
    },
    v3LargeContainer: {
      paddingHorizontal: 0,
      paddingTop: 36,
      justifyContent: 'flex-end',
      paddingBottom: 28
    },
    title: {
      fontSize: 17
    },
    subtitle: {
      fontSize: 11
    }
  });
  var touchableRole = 'button';
  var _default = exports.default = AppbarContent; // @component-docs ignore-next-line
},675,[1,203,125,45,515,676,506,529,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.renderAppbarContent = exports.modeTextVariant = exports.modeAppbarHeight = exports.getAppbarColor = exports.getAppbarBorders = exports.getAppbarBackgroundColor = exports.DEFAULT_APPBAR_HEIGHT = undefined;
  var _react = _interopRequireDefault(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _overlay = _interopRequireDefault(require(_dependencyMap[3]));
  var _colors = require(_dependencyMap[4]);
  var borderStyleProperties = ['borderRadius', 'borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomRightRadius', 'borderBottomLeftRadius'];
  var getAppbarBackgroundColor = (theme, elevation, customBackground, elevated) => {
    var isV3 = theme.isV3,
      isDarkTheme = theme.dark,
      mode = theme.mode,
      colors = theme.colors;
    var isAdaptiveMode = mode === 'adaptive';
    if (customBackground) {
      return customBackground;
    }
    if (!isV3) {
      if (isDarkTheme && isAdaptiveMode) {
        return (0, _overlay.default)(elevation, colors?.surface);
      }
      return colors.primary;
    }
    if (elevated) {
      return theme.colors.elevation.level2;
    }
    return colors.surface;
  };
  exports.getAppbarBackgroundColor = getAppbarBackgroundColor;
  var getAppbarColor = _ref => {
    var color = _ref.color,
      isDark = _ref.isDark,
      isV3 = _ref.isV3;
    if (typeof color !== 'undefined') {
      return color;
    }
    if (isDark) {
      return _colors.white;
    }
    if (isV3) {
      return undefined;
    }
    return _colors.black;
  };
  exports.getAppbarColor = getAppbarColor;
  var getAppbarBorders = style => {
    var borders = {};
    for (var property of borderStyleProperties) {
      var value = style[property];
      if (value) {
        borders[property] = value;
      }
    }
    return borders;
  };
  exports.getAppbarBorders = getAppbarBorders;
  var DEFAULT_APPBAR_HEIGHT = exports.DEFAULT_APPBAR_HEIGHT = 56;
  var MD3_DEFAULT_APPBAR_HEIGHT = 64;
  var modeAppbarHeight = exports.modeAppbarHeight = {
    small: MD3_DEFAULT_APPBAR_HEIGHT,
    medium: 112,
    large: 152,
    'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT
  };
  var modeTextVariant = exports.modeTextVariant = {
    small: 'titleLarge',
    medium: 'headlineSmall',
    large: 'headlineMedium',
    'center-aligned': 'titleLarge'
  };
  var renderAppbarContent = _ref2 => {
    var children = _ref2.children,
      isDark = _ref2.isDark,
      _ref2$shouldCenterCon = _ref2.shouldCenterContent,
      shouldCenterContent = _ref2$shouldCenterCon === undefined ? false : _ref2$shouldCenterCon,
      isV3 = _ref2.isV3,
      renderOnly = _ref2.renderOnly,
      renderExcept = _ref2.renderExcept,
      _ref2$mode = _ref2.mode,
      mode = _ref2$mode === undefined ? 'small' : _ref2$mode,
      theme = _ref2.theme;
    return _react.default.Children.toArray(children).filter(child => child != null && typeof child !== 'boolean').filter(child =>
    // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter
    renderExcept ? !renderExcept.includes(child.type.displayName) : child).filter(child =>
    // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter
    renderOnly ? renderOnly.includes(child.type.displayName) : child).map((child, i) => {
      if (! /*#__PURE__*/_react.default.isValidElement(child) || !['Appbar.Content', 'Appbar.Action', 'Appbar.BackAction', 'Tooltip'].includes(
      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter
      child.type.displayName)) {
        return child;
      }
      var props = {
        theme,
        color: getAppbarColor({
          color: child.props.color,
          isDark,
          isV3
        })
      };

      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter
      if (child.type.displayName === 'Appbar.Content') {
        props.mode = mode;
        props.style = [isV3 ? i === 0 && !shouldCenterContent && styles.v3Spacing : i !== 0 && styles.v2Spacing, shouldCenterContent && styles.centerAlignedContent, child.props.style];
        props.color;
      }
      return /*#__PURE__*/_react.default.cloneElement(child, props);
    });
  };
  exports.renderAppbarContent = renderAppbarContent;
  var styles = _reactNative.StyleSheet.create({
    centerAlignedContent: {
      alignItems: 'center'
    },
    v2Spacing: {
      marginLeft: 8
    },
    v3Spacing: {
      marginLeft: 12
    }
  });
},676,[1,125,45,566,529]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.AppbarAction = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _color = _interopRequireDefault(require(_dependencyMap[3]));
  var _theming = require(_dependencyMap[4]);
  var _colors = require(_dependencyMap[5]);
  var _forwardRef = require(_dependencyMap[6]);
  var _IconButton = _interopRequireDefault(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  var _excluded = ["size", "color", "icon", "disabled", "onPress", "accessibilityLabel", "isLeading", "theme", "rippleColor"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component used to display an action item in the appbar.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Appbar } from 'react-native-paper';
   * import { Platform } from 'react-native';
   *
   * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';
   *
   * const MyComponent = () => (
   *     <Appbar.Header>
   *        <Appbar.Content title="Title" subtitle={'Subtitle'} />
   *         <Appbar.Action icon="magnify" onPress={() => {}} />
   *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />
   *     </Appbar.Header>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var AppbarAction = exports.AppbarAction = (0, _forwardRef.forwardRef)((_ref, ref) => {
    var _ref$size = _ref.size,
      size = _ref$size === undefined ? 24 : _ref$size,
      iconColor = _ref.color,
      icon = _ref.icon,
      disabled = _ref.disabled,
      onPress = _ref.onPress,
      accessibilityLabel = _ref.accessibilityLabel,
      isLeading = _ref.isLeading,
      themeOverrides = _ref.theme,
      rippleColor = _ref.rippleColor,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var actionIconColor = iconColor ? iconColor : theme.isV3 ? isLeading ? theme.colors.onSurface : theme.colors.onSurfaceVariant : (0, _color.default)(_colors.black).alpha(0.54).rgb().string();
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
      size: size,
      onPress: onPress,
      iconColor: actionIconColor,
      icon: icon,
      disabled: disabled,
      accessibilityLabel: accessibilityLabel,
      animated: true,
      ref: ref,
      rippleColor: rippleColor,
      ...rest
    });
  });
  AppbarAction.displayName = 'Appbar.Action';
  var _default = exports.default = AppbarAction; // @component-docs ignore-next-line
},677,[1,203,125,515,506,529,577,636,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.AppbarBackAction = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _AppbarAction = _interopRequireDefault(require(_dependencyMap[3]));
  var _AppbarBackIcon = _interopRequireDefault(require(_dependencyMap[4]));
  var _forwardRef = require(_dependencyMap[5]);
  var _jsxRuntime = require(_dependencyMap[6]);
  var _excluded = ["accessibilityLabel"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component used to display a back button in the appbar.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Appbar } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *     <Appbar.Header>
   *       <Appbar.BackAction onPress={() => {}} />
   *     </Appbar.Header>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var AppbarBackAction = exports.AppbarBackAction = (0, _forwardRef.forwardRef)((_ref, ref) => {
    var _ref$accessibilityLab = _ref.accessibilityLabel,
      accessibilityLabel = _ref$accessibilityLab === undefined ? 'Back' : _ref$accessibilityLab,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_AppbarAction.default, {
      accessibilityLabel: accessibilityLabel,
      ...rest,
      icon: _AppbarBackIcon.default,
      isLeading: true,
      ref: ref
    });
  });
  AppbarBackAction.displayName = 'Appbar.BackAction';
  var _default = exports.default = AppbarBackAction; // @component-docs ignore-next-line
},678,[1,203,125,677,679,577,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.AppbarBackIcon = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _MaterialCommunityIcon = _interopRequireDefault(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var AppbarBackIcon = _ref => {
    var size = _ref.size,
      color = _ref.color;
    var iosIconSize = size - 3;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.wrapper, {
        width: size,
        height: size,
        transform: [{
          scaleX: _reactNative.I18nManager.getConstants().isRTL ? -1 : 1
        }]
      }],
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Image, {
        source: require(_dependencyMap[5]),
        style: [styles.icon, {
          tintColor: color,
          width: iosIconSize,
          height: iosIconSize
        }],
        accessibilityIgnoresInvertColors: true
      })
    });
  };
  exports.AppbarBackIcon = AppbarBackIcon;
  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    icon: {
      resizeMode: 'contain'
    }
  });
  var _default = exports.default = AppbarBackIcon; // @component-docs ignore-next-line
},679,[1,125,45,543,243,680]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = require(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-paper/src/assets",
    "width": 63,
    "height": 63,
    "scales": [1],
    "hash": "2379ae894c2c9f63b852a9f3676c2763",
    "name": "back-chevron",
    "type": "png",
    "fileHashes": ["2379ae894c2c9f63b852a9f3676c2763"]
  });
},680,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.AppbarHeader = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _reactNativeSafeAreaContext = require(_dependencyMap[4]);
  var _Appbar = require(_dependencyMap[5]);
  var _utils = require(_dependencyMap[6]);
  var _theming = require(_dependencyMap[7]);
  var _shadow = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["statusBarHeight", "style", "dark", "mode", "elevated", "theme", "testID"],
    _excluded2 = ["height", "elevation", "backgroundColor", "zIndex"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * A component to use as a header at the top of the screen.
   * It can contain the screen title, controls such as navigation buttons, menu button etc.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Appbar } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const _goBack = () => console.log('Went back');
   *
   *   const _handleSearch = () => console.log('Searching');
   *
   *   const _handleMore = () => console.log('Shown more');
   *
   *   return (
   *     <Appbar.Header>
   *       <Appbar.BackAction onPress={_goBack} />
   *       <Appbar.Content title="Title" />
   *       <Appbar.Action icon="magnify" onPress={_handleSearch} />
   *       <Appbar.Action icon="dots-vertical" onPress={_handleMore} />
   *     </Appbar.Header>
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  var AppbarHeader = _ref => {
    var statusBarHeight = _ref.statusBarHeight,
      style = _ref.style,
      dark = _ref.dark,
      _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? 'center-aligned' : _ref$mode,
      _ref$elevated = _ref.elevated,
      elevated = _ref$elevated === undefined ? false : _ref$elevated,
      themeOverrides = _ref.theme,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'appbar-header' : _ref$testID,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3;
    var flattenedStyle = _reactNative.StyleSheet.flatten(style);
    var _ref2 = flattenedStyle || {},
      _ref2$height = _ref2.height,
      height = _ref2$height === undefined ? isV3 ? _utils.modeAppbarHeight[mode] : _utils.DEFAULT_APPBAR_HEIGHT : _ref2$height,
      _ref2$elevation = _ref2.elevation,
      elevation = _ref2$elevation === undefined ? isV3 ? elevated ? 2 : 0 : 4 : _ref2$elevation,
      customBackground = _ref2.backgroundColor,
      _ref2$zIndex = _ref2.zIndex,
      zIndex = _ref2$zIndex === undefined ? isV3 && elevated ? 1 : 0 : _ref2$zIndex,
      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    var borderRadius = (0, _utils.getAppbarBorders)(restStyle);
    var backgroundColor = (0, _utils.getAppbarBackgroundColor)(theme, elevation, customBackground, elevated);
    var _useSafeAreaInsets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)(),
      top = _useSafeAreaInsets.top,
      left = _useSafeAreaInsets.left,
      right = _useSafeAreaInsets.right;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      testID: `${testID}-root-layer`,
      style: [{
        backgroundColor,
        zIndex,
        elevation,
        paddingTop: statusBarHeight ?? top,
        paddingHorizontal: Math.max(left, right)
      }, borderRadius, (0, _shadow.default)(elevation)],
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Appbar.Appbar, {
        testID: testID,
        style: [{
          height,
          backgroundColor
        }, styles.appbar, restStyle],
        dark: dark,
        ...(isV3 && {
          mode
        }),
        ...rest,
        theme: theme
      })
    });
  };
  exports.AppbarHeader = AppbarHeader;
  AppbarHeader.displayName = 'Appbar.Header';
  var styles = _reactNative.StyleSheet.create({
    appbar: {
      elevation: 0
    }
  });
  var _default = exports.default = AppbarHeader; // @component-docs ignore-next-line
},681,[1,203,125,45,533,674,676,506,565,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _TextInputAffix = _interopRequireDefault(require(_dependencyMap[5]));
  var _TextInputIcon = _interopRequireDefault(require(_dependencyMap[6]));
  var _TextInputFlat = _interopRequireDefault(require(_dependencyMap[7]));
  var _TextInputOutlined = _interopRequireDefault(require(_dependencyMap[8]));
  var _theming = require(_dependencyMap[9]);
  var _forwardRef = require(_dependencyMap[10]);
  var _roundLayoutSize = require(_dependencyMap[11]);
  var _jsxRuntime = require(_dependencyMap[12]);
  var _excluded = ["mode", "dense", "disabled", "error", "multiline", "editable", "contentStyle", "render", "theme"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var BLUR_ANIMATION_DURATION = 180;
  var FOCUS_ANIMATION_DURATION = 150;
  var DefaultRenderer = props => /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
    ...props
  });

  /**
   * A component to allow users to input text.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { TextInput } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [text, setText] = React.useState("");
   *
   *   return (
   *     <TextInput
   *       label="Email"
   *       value={text}
   *       onChangeText={text => setText(text)}
   *     />
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   *
   * @extends TextInput props https://reactnative.dev/docs/textinput#props
   */
  var TextInput = (0, _forwardRef.forwardRef)((_ref, ref) => {
    var _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? 'flat' : _ref$mode,
      _ref$dense = _ref.dense,
      dense = _ref$dense === undefined ? false : _ref$dense,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === undefined ? false : _ref$disabled,
      _ref$error = _ref.error,
      errorProp = _ref$error === undefined ? false : _ref$error,
      _ref$multiline = _ref.multiline,
      multiline = _ref$multiline === undefined ? false : _ref$multiline,
      _ref$editable = _ref.editable,
      editable = _ref$editable === undefined ? true : _ref$editable,
      contentStyle = _ref.contentStyle,
      _ref$render = _ref.render,
      render = _ref$render === undefined ? DefaultRenderer : _ref$render,
      themeOverrides = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isControlled = rest.value !== undefined;
    var validInputValue = isControlled ? rest.value : rest.defaultValue;
    var _React$useRef = React.useRef(new _reactNative.Animated.Value(validInputValue ? 0 : 1)),
      labeled = _React$useRef.current;
    var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(errorProp ? 1 : 0)),
      error = _React$useRef2.current;
    var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      focused = _React$useState2[0],
      setFocused = _React$useState2[1];
    var _React$useState3 = React.useState(false),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      displayPlaceholder = _React$useState4[0],
      setDisplayPlaceholder = _React$useState4[1];
    var _React$useState5 = React.useState(validInputValue),
      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
      uncontrolledValue = _React$useState6[0],
      setUncontrolledValue = _React$useState6[1];
    // Use value from props instead of local state when input is controlled
    var value = isControlled ? rest.value : uncontrolledValue;
    var _React$useState7 = React.useState({
        width: 33
      }),
      _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
      labelTextLayout = _React$useState8[0],
      setLabelTextLayout = _React$useState8[1];
    var _React$useState9 = React.useState({
        width: 65
      }),
      _React$useState10 = (0, _slicedToArray2.default)(_React$useState9, 2),
      inputContainerLayout = _React$useState10[0],
      setInputContainerLayout = _React$useState10[1];
    var _React$useState11 = React.useState({
        measured: false,
        width: 0,
        height: 0
      }),
      _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
      labelLayout = _React$useState12[0],
      setLabelLayout = _React$useState12[1];
    var _React$useState13 = React.useState({
        width: null,
        height: null
      }),
      _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
      leftLayout = _React$useState14[0],
      setLeftLayout = _React$useState14[1];
    var _React$useState15 = React.useState({
        width: null,
        height: null
      }),
      _React$useState16 = (0, _slicedToArray2.default)(_React$useState15, 2),
      rightLayout = _React$useState16[0],
      setRightLayout = _React$useState16[1];
    var timer = React.useRef();
    var root = React.useRef();
    var scale = theme.animation.scale;
    React.useImperativeHandle(ref, () => ({
      focus: () => root.current?.focus(),
      clear: () => root.current?.clear(),
      setNativeProps: args => root.current?.setNativeProps(args),
      isFocused: () => root.current?.isFocused() || false,
      blur: () => root.current?.blur(),
      forceFocus: () => root.current?.focus()
    }));
    React.useEffect(() => {
      // When the input has an error, we wiggle the label and apply error styles
      if (errorProp) {
        // show error
        _reactNative.Animated.timing(error, {
          toValue: 1,
          duration: FOCUS_ANIMATION_DURATION * scale,
          // To prevent this - https://github.com/callstack/react-native-paper/issues/941
          useNativeDriver: true
        }).start();
      } else {
        // hide error
        {
          _reactNative.Animated.timing(error, {
            toValue: 0,
            duration: BLUR_ANIMATION_DURATION * scale,
            // To prevent this - https://github.com/callstack/react-native-paper/issues/941
            useNativeDriver: true
          }).start();
        }
      }
    }, [errorProp, scale, error]);
    React.useEffect(() => {
      // Show placeholder text only if the input is focused, or there's no label
      // We don't show placeholder if there's a label because the label acts as placeholder
      // When focused, the label moves up, so we can show a placeholder
      if (focused || !rest.label) {
        // If the user wants to use the contextMenu, when changing the placeholder, the contextMenu is closed
        // This is a workaround to mitigate this behavior in scenarios where the placeholder is not specified.
        if (rest.placeholder) {
          // Display placeholder in a delay to offset the label animation
          // If we show it immediately, they'll overlap and look ugly
          timer.current = setTimeout(() => setDisplayPlaceholder(true), 50);
        }
      } else {
        // hidePlaceholder
        setDisplayPlaceholder(false);
      }
      return () => {
        if (timer.current) {
          clearTimeout(timer.current);
        }
      };
    }, [focused, rest.label, rest.placeholder]);
    React.useEffect(() => {
      labeled.stopAnimation();
      // The label should be minimized if the text input is focused, or has text
      // In minimized mode, the label moves up and becomes small
      // workaround for animated regression for react native > 0.61
      // https://github.com/callstack/react-native-paper/pull/1440
      if (value || focused) {
        // minimize label
        _reactNative.Animated.timing(labeled, {
          toValue: 0,
          duration: BLUR_ANIMATION_DURATION * scale,
          // To prevent this - https://github.com/callstack/react-native-paper/issues/941
          useNativeDriver: true
        }).start();
      } else {
        // restore label
        _reactNative.Animated.timing(labeled, {
          toValue: 1,
          duration: FOCUS_ANIMATION_DURATION * scale,
          // To prevent this - https://github.com/callstack/react-native-paper/issues/941
          useNativeDriver: true
        }).start();
      }
    }, [focused, value, labeled, scale]);
    var onLeftAffixLayoutChange = React.useCallback(event => {
      var height = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.height);
      var width = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.width);
      if (width !== leftLayout.width || height !== leftLayout.height) {
        setLeftLayout({
          width,
          height
        });
      }
    }, [leftLayout.height, leftLayout.width]);
    var onRightAffixLayoutChange = React.useCallback(event => {
      var width = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.width);
      var height = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.height);
      if (width !== rightLayout.width || height !== rightLayout.height) {
        setRightLayout({
          width,
          height
        });
      }
    }, [rightLayout.height, rightLayout.width]);
    var handleFocus = args => {
      if (disabled || !editable) {
        return;
      }
      setFocused(true);
      rest.onFocus?.(args);
    };
    var handleBlur = args => {
      if (!editable) {
        return;
      }
      setFocused(false);
      rest.onBlur?.(args);
    };
    var handleChangeText = value => {
      if (!editable || disabled) {
        return;
      }
      if (!isControlled) {
        // Keep track of value in local state when input is not controlled
        setUncontrolledValue(value);
      }
      rest.onChangeText?.(value);
    };
    var handleLayoutAnimatedText = React.useCallback(e => {
      var width = (0, _roundLayoutSize.roundLayoutSize)(e.nativeEvent.layout.width);
      var height = (0, _roundLayoutSize.roundLayoutSize)(e.nativeEvent.layout.height);
      if (width !== labelLayout.width || height !== labelLayout.height) {
        setLabelLayout({
          width,
          height,
          measured: true
        });
      }
    }, [labelLayout.height, labelLayout.width]);
    var handleLabelTextLayout = React.useCallback(_ref2 => {
      var nativeEvent = _ref2.nativeEvent;
      setLabelTextLayout({
        width: nativeEvent.lines.reduce((acc, line) => acc + Math.ceil(line.width), 0)
      });
    }, []);
    var handleInputContainerLayout = React.useCallback(_ref3 => {
      var layout = _ref3.nativeEvent.layout;
      setInputContainerLayout({
        width: layout.width
      });
    }, []);
    var forceFocus = React.useCallback(() => root.current?.focus(), []);
    var _rest$maxFontSizeMult = rest.maxFontSizeMultiplier,
      maxFontSizeMultiplier = _rest$maxFontSizeMult === undefined ? 1.5 : _rest$maxFontSizeMult;
    var scaledLabel = !!(value || focused);
    if (mode === 'outlined') {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextInputOutlined.default, {
        dense: dense,
        disabled: disabled,
        error: errorProp,
        multiline: multiline,
        editable: editable,
        render: render,
        ...rest,
        theme: theme,
        value: value,
        parentState: {
          labeled,
          error,
          focused,
          displayPlaceholder,
          value,
          labelTextLayout,
          labelLayout,
          leftLayout,
          rightLayout,
          inputContainerLayout
        },
        innerRef: ref => {
          root.current = ref;
        },
        onFocus: handleFocus,
        forceFocus: forceFocus,
        onBlur: handleBlur,
        onChangeText: handleChangeText,
        onLayoutAnimatedText: handleLayoutAnimatedText,
        onInputLayout: handleInputContainerLayout,
        onLabelTextLayout: handleLabelTextLayout,
        onLeftAffixLayoutChange: onLeftAffixLayoutChange,
        onRightAffixLayoutChange: onRightAffixLayoutChange,
        maxFontSizeMultiplier: maxFontSizeMultiplier,
        contentStyle: contentStyle,
        scaledLabel: scaledLabel
      });
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextInputFlat.default, {
      dense: dense,
      disabled: disabled,
      error: errorProp,
      multiline: multiline,
      editable: editable,
      render: render,
      ...rest,
      theme: theme,
      value: value,
      parentState: {
        labeled,
        error,
        focused,
        displayPlaceholder,
        value,
        labelTextLayout,
        labelLayout,
        leftLayout,
        rightLayout,
        inputContainerLayout
      },
      innerRef: ref => {
        root.current = ref;
      },
      onFocus: handleFocus,
      forceFocus: forceFocus,
      onBlur: handleBlur,
      onInputLayout: handleInputContainerLayout,
      onChangeText: handleChangeText,
      onLayoutAnimatedText: handleLayoutAnimatedText,
      onLabelTextLayout: handleLabelTextLayout,
      onLeftAffixLayoutChange: onLeftAffixLayoutChange,
      onRightAffixLayoutChange: onRightAffixLayoutChange,
      maxFontSizeMultiplier: maxFontSizeMultiplier,
      contentStyle: contentStyle,
      scaledLabel: scaledLabel
    });
  });
  // @component ./Adornment/TextInputIcon.tsx
  TextInput.Icon = _TextInputIcon.default;

  // @component ./Adornment/TextInputAffix.tsx
  // @ts-ignore Types of property 'theme' are incompatible.
  TextInput.Affix = _TextInputAffix.default;
  var _default = exports.default = TextInput;
},682,[1,29,203,125,45,683,688,689,693,506,577,696,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.TextInputAffix = exports.AffixAdornment = undefined;
  var _react = _interopRequireDefault(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _enums = require(_dependencyMap[3]);
  var _utils = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _helpers = require(_dependencyMap[6]);
  var _jsxRuntime = require(_dependencyMap[7]);
  var AffixContext = /*#__PURE__*/_react.default.createContext({
    textStyle: {
      fontFamily: '',
      color: ''
    },
    topPosition: null,
    side: _enums.AdornmentSide.Left
  });
  var AffixAdornment = _ref => {
    var affix = _ref.affix,
      side = _ref.side,
      textStyle = _ref.textStyle,
      topPosition = _ref.topPosition,
      onLayout = _ref.onLayout,
      visible = _ref.visible,
      paddingHorizontal = _ref.paddingHorizontal,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
      testID = _ref.testID,
      disabled = _ref.disabled;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(AffixContext.Provider, {
      value: {
        side,
        textStyle,
        topPosition,
        onLayout,
        visible,
        paddingHorizontal,
        maxFontSizeMultiplier,
        testID,
        disabled
      },
      children: affix
    });
  };

  /**
   * A component to render a leading / trailing text in the TextInput
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { TextInput } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [text, setText] = React.useState('');
   *
   *   return (
   *     <TextInput
   *       mode="outlined"
   *       label="Outlined input"
   *       placeholder="Type something"
   *       right={<TextInput.Affix text="/100" />}
   *     />
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  exports.AffixAdornment = AffixAdornment;
  var TextInputAffix = _ref2 => {
    var text = _ref2.text,
      labelStyle = _ref2.textStyle,
      themeOverrides = _ref2.theme,
      onTextLayout = _ref2.onLayout,
      onPress = _ref2.onPress,
      _ref2$accessibilityLa = _ref2.accessibilityLabel,
      accessibilityLabel = _ref2$accessibilityLa === undefined ? text : _ref2$accessibilityLa;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _getConstants = (0, _helpers.getConstants)(theme.isV3),
      AFFIX_OFFSET = _getConstants.AFFIX_OFFSET;
    var _React$useContext = _react.default.useContext(AffixContext),
      textStyle = _React$useContext.textStyle,
      onLayout = _React$useContext.onLayout,
      topPosition = _React$useContext.topPosition,
      side = _React$useContext.side,
      visible = _React$useContext.visible,
      paddingHorizontal = _React$useContext.paddingHorizontal,
      maxFontSizeMultiplier = _React$useContext.maxFontSizeMultiplier,
      testID = _React$useContext.testID,
      disabled = _React$useContext.disabled;
    var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;
    var style = {
      top: topPosition,
      [side]: offset
    };
    var textColor = (0, _utils.getTextColor)({
      theme,
      disabled
    });
    var content = /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
      maxFontSizeMultiplier: maxFontSizeMultiplier,
      style: [{
        color: textColor
      }, textStyle, labelStyle],
      onLayout: onTextLayout,
      testID: `${testID}-text`,
      children: text
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: [styles.container, style, {
        opacity: visible?.interpolate({
          inputRange: [0, 1],
          outputRange: [1, 0]
        }) || 1
      }],
      onLayout: onLayout,
      testID: testID,
      children: onPress ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Pressable, {
        onPress: onPress,
        accessibilityRole: "button",
        accessibilityLabel: accessibilityLabel,
        children: content
      }) : content
    });
  };
  exports.TextInputAffix = TextInputAffix;
  TextInputAffix.displayName = 'TextInput.Affix';
  var styles = _reactNative.StyleSheet.create({
    container: {
      position: 'absolute',
      justifyContent: 'center',
      alignItems: 'center'
    }
  });
  var _default = exports.default = TextInputAffix; // @component-docs ignore-next-line
},683,[1,125,45,684,685,506,686,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.InputMode = exports.AdornmentType = exports.AdornmentSide = undefined;
  var AdornmentType = exports.AdornmentType = /*#__PURE__*/function (AdornmentType) {
    AdornmentType["Icon"] = "icon";
    AdornmentType["Affix"] = "affix";
    return AdornmentType;
  }({});
  var AdornmentSide = exports.AdornmentSide = /*#__PURE__*/function (AdornmentSide) {
    AdornmentSide["Right"] = "right";
    AdornmentSide["Left"] = "left";
    return AdornmentSide;
  }({});
  var InputMode = exports.InputMode = /*#__PURE__*/function (InputMode) {
    InputMode["Outlined"] = "outlined";
    InputMode["Flat"] = "flat";
    return InputMode;
  }({});
},684,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getIconColor = getIconColor;
  exports.getTextColor = getTextColor;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  function getTextColor(_ref) {
    var theme = _ref.theme,
      disabled = _ref.disabled;
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      }
      return theme.colors.onSurfaceVariant;
    }
    return (0, _color.default)(theme.colors?.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
  }
  function getIconColor(_ref2) {
    var theme = _ref2.theme,
      isTextInputFocused = _ref2.isTextInputFocused,
      disabled = _ref2.disabled,
      customColor = _ref2.customColor;
    if (typeof customColor === 'function') {
      return customColor(isTextInputFocused);
    }
    if (customColor) {
      return customColor;
    }
    if (!theme.isV3) {
      return theme.colors.text;
    }
    if (disabled) {
      return theme.colors.onSurfaceDisabled;
    }
    return theme.colors.onSurfaceVariant;
  }
},685,[1,515]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.adjustPaddingOut = exports.adjustPaddingFlat = undefined;
  exports.calculateFlatAffixTopPosition = calculateFlatAffixTopPosition;
  exports.calculateLabelTopPosition = exports.calculateInputHeight = exports.calculateFlatInputHorizontalPadding = undefined;
  exports.calculateOutlinedIconAndAffixTopPosition = calculateOutlinedIconAndAffixTopPosition;
  exports.getOutlinedInputColors = exports.getFlatInputColors = exports.getConstants = exports.calculatePadding = undefined;
  var _reactNative = require(_dependencyMap[1]);
  var _color = _interopRequireDefault(require(_dependencyMap[2]));
  var _enums = require(_dependencyMap[3]);
  var _constants = require(_dependencyMap[4]);
  var calculateLabelTopPosition = function (labelHeight) {
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var customHeight = height > 0 ? height : 0;
    return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);
  };
  exports.calculateLabelTopPosition = calculateLabelTopPosition;
  var calculateInputHeight = function (labelHeight) {
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var minHeight = arguments.length > 2 ? arguments[2] : undefined;
    var finalHeight = height > 0 ? height : labelHeight;
    if (height > 0) return height;
    return finalHeight < minHeight ? minHeight : finalHeight;
  };
  exports.calculateInputHeight = calculateInputHeight;
  var calculatePadding = props => {
    var height = props.height,
      _props$multiline = props.multiline,
      multiline = _props$multiline === undefined ? false : _props$multiline;
    var result = 0;
    if (multiline) {
      if (height && multiline) {
        result = calculateTextAreaPadding(props);
      } else {
        result = calculateInputPadding(props);
      }
    }
    return Math.max(0, result);
  };
  exports.calculatePadding = calculatePadding;
  var calculateTextAreaPadding = props => {
    var dense = props.dense;
    return dense ? 10 : 20;
  };
  var calculateInputPadding = _ref => {
    var topPosition = _ref.topPosition,
      fontSize = _ref.fontSize,
      multiline = _ref.multiline,
      scale = _ref.scale,
      dense = _ref.dense,
      offset = _ref.offset,
      isAndroid = _ref.isAndroid;
    var refFontSize = scale * fontSize;
    var result = Math.floor(topPosition / 2);
    result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);
    if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);
    return result;
  };
  var adjustPaddingOut = _ref2 => {
    var pad = _ref2.pad,
      multiline = _ref2.multiline,
      label = _ref2.label,
      scale = _ref2.scale,
      height = _ref2.height,
      fontSize = _ref2.fontSize,
      lineHeight = _ref2.lineHeight,
      dense = _ref2.dense,
      offset = _ref2.offset,
      isAndroid = _ref2.isAndroid;
    var fontHeight = lineHeight ?? fontSize;
    var refFontHeight = scale * fontSize;
    var result = pad;
    if (!isAndroid && height && !multiline) {
      return {
        paddingTop: Math.max(0, (height - fontHeight) / 2),
        paddingBottom: Math.max(0, (height - fontHeight) / 2)
      };
    }
    if (!isAndroid && multiline) {
      if (dense) {
        if (label) {
          result += scale < 1 ? Math.min(offset, refFontHeight / 2 * scale) : 0;
        } else {
          result += 0;
        }
      }
      if (!dense) {
        if (label) {
          result += scale < 1 ? Math.min(offset, refFontHeight * scale) : Math.min(offset / 2, refFontHeight * scale);
        } else {
          result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;
        }
      }
      result = Math.floor(result);
    }
    return {
      paddingTop: result,
      paddingBottom: result
    };
  };
  exports.adjustPaddingOut = adjustPaddingOut;
  var adjustPaddingFlat = _ref3 => {
    var pad = _ref3.pad,
      scale = _ref3.scale,
      multiline = _ref3.multiline,
      label = _ref3.label,
      height = _ref3.height,
      offset = _ref3.offset,
      dense = _ref3.dense,
      fontSize = _ref3.fontSize,
      isAndroid = _ref3.isAndroid,
      styles = _ref3.styles;
    var result = pad;
    var topResult = result;
    var bottomResult = result;
    var paddingTop = styles.paddingTop,
      paddingBottom = styles.paddingBottom;
    var refFontSize = scale * fontSize;
    if (!multiline) {
      // do not modify padding if input is not multiline
      if (label) {
        // return const style for flat input with label
        return {
          paddingTop,
          paddingBottom
        };
      }
      // return pad for flat input without label
      return {
        paddingTop: result,
        paddingBottom: result
      };
    }
    if (label) {
      // add paddings passed from styles
      topResult = paddingTop;
      bottomResult = paddingBottom;

      // adjust top padding for iOS
      if (!isAndroid) {
        if (dense) {
          topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;
        }
        if (!dense) {
          topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;
        }
      }
      topResult = Math.floor(topResult);
    } else {
      if (height) {
        // center text when height is passed
        return {
          paddingTop: Math.max(0, (height - fontSize) / 2),
          paddingBottom: Math.max(0, (height - fontSize) / 2)
        };
      }
      // adjust paddings for iOS if no label
      if (!isAndroid) {
        if (dense) {
          result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);
        }
        if (!dense) {
          result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);
        }
        result = Math.floor(result);
        topResult = result;
        bottomResult = result;
      }
    }
    return {
      paddingTop: Math.max(0, topResult),
      paddingBottom: Math.max(0, bottomResult)
    };
  };
  exports.adjustPaddingFlat = adjustPaddingFlat;
  function calculateFlatAffixTopPosition(_ref4) {
    var height = _ref4.height,
      paddingTop = _ref4.paddingTop,
      paddingBottom = _ref4.paddingBottom,
      affixHeight = _ref4.affixHeight;
    var inputHeightWithoutPadding = height - paddingTop - paddingBottom;
    var halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;
    return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;
  }
  function calculateOutlinedIconAndAffixTopPosition(_ref5) {
    var height = _ref5.height,
      affixHeight = _ref5.affixHeight,
      labelYOffset = _ref5.labelYOffset;
    return (height - affixHeight + labelYOffset) / 2;
  }
  var calculateFlatInputHorizontalPadding = _ref6 => {
    var adornmentConfig = _ref6.adornmentConfig,
      isV3 = _ref6.isV3;
    var _getConstants = getConstants(isV3),
      LABEL_PADDING_HORIZONTAL = _getConstants.LABEL_PADDING_HORIZONTAL,
      ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET,
      FLAT_INPUT_OFFSET = _getConstants.FLAT_INPUT_OFFSET;
    var paddingLeft = LABEL_PADDING_HORIZONTAL;
    var paddingRight = LABEL_PADDING_HORIZONTAL;
    adornmentConfig.forEach(_ref7 => {
      var type = _ref7.type,
        side = _ref7.side;
      if (type === _enums.AdornmentType.Icon && side === _enums.AdornmentSide.Left) {
        paddingLeft = _constants.ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
      } else if (side === _enums.AdornmentSide.Right) {
        if (type === _enums.AdornmentType.Affix) {
          paddingRight = _constants.ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
        } else if (type === _enums.AdornmentType.Icon) {
          paddingRight = _constants.ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
        }
      }
    });
    return {
      paddingLeft,
      paddingRight
    };
  };
  exports.calculateFlatInputHorizontalPadding = calculateFlatInputHorizontalPadding;
  var getInputTextColor = _ref8 => {
    var theme = _ref8.theme,
      textColor = _ref8.textColor,
      disabled = _ref8.disabled;
    if (textColor) {
      return textColor;
    }
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      }
      return theme.colors.onSurface;
    }
    if (disabled) {
      return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    }
    return theme.colors.text;
  };
  var getActiveColor = _ref9 => {
    var theme = _ref9.theme,
      disabled = _ref9.disabled,
      error = _ref9.error,
      activeUnderlineColor = _ref9.activeUnderlineColor,
      activeOutlineColor = _ref9.activeOutlineColor,
      mode = _ref9.mode;
    var isFlat = mode === 'flat';
    var modeColor = isFlat ? activeUnderlineColor : activeOutlineColor;
    if (error) {
      return theme.colors.error;
    }
    if (modeColor) {
      return modeColor;
    }
    if (disabled) {
      if (theme.isV3) {
        return theme.colors.onSurfaceDisabled;
      }
      return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    }
    return theme.colors.primary;
  };
  var getPlaceholderColor = _ref10 => {
    var theme = _ref10.theme,
      disabled = _ref10.disabled;
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      }
      return theme.colors.onSurfaceVariant;
    }
    if (disabled) {
      return theme.colors.disabled;
    }
    return theme.colors.placeholder;
  };
  var getSelectionColor = _ref11 => {
    var activeColor = _ref11.activeColor,
      customSelectionColor = _ref11.customSelectionColor;
    if (typeof customSelectionColor !== 'undefined') {
      return customSelectionColor;
    }
    return activeColor;
  };
  var getFlatBackgroundColor = _ref12 => {
    var theme = _ref12.theme,
      disabled = _ref12.disabled;
    if (theme.isV3) {
      if (disabled) {
        return (0, _color.default)(theme.colors.onSurface).alpha(0.04).rgb().string();
      } else {
        return theme.colors.surfaceVariant;
      }
    }
    if (disabled) {
      return undefined;
    }
    return theme.dark ? (0, _color.default)(theme.colors?.background).lighten(0.24).rgb().string() : (0, _color.default)(theme.colors?.background).darken(0.06).rgb().string();
  };
  var getFlatUnderlineColor = _ref13 => {
    var theme = _ref13.theme,
      disabled = _ref13.disabled,
      underlineColor = _ref13.underlineColor;
    if (!disabled && underlineColor) {
      return underlineColor;
    }
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      }
      return theme.colors.onSurfaceVariant;
    }
    if (disabled) {
      return 'transparent';
    }
    return theme.colors.disabled;
  };
  var getOutlinedOutlineInputColor = _ref14 => {
    var theme = _ref14.theme,
      disabled = _ref14.disabled,
      customOutlineColor = _ref14.customOutlineColor;
    var isTransparent = (0, _color.default)(customOutlineColor).alpha() === 0;
    if (!disabled && customOutlineColor) {
      return customOutlineColor;
    }
    if (theme.isV3) {
      if (disabled) {
        if (theme.dark) {
          return 'transparent';
        }
        return theme.colors.surfaceDisabled;
      }
      return theme.colors.outline;
    }
    if (disabled) {
      if (isTransparent) {
        return customOutlineColor;
      }
      return theme.colors.disabled;
    }
    return theme.colors.placeholder;
  };
  var getFlatInputColors = _ref15 => {
    var underlineColor = _ref15.underlineColor,
      activeUnderlineColor = _ref15.activeUnderlineColor,
      customSelectionColor = _ref15.customSelectionColor,
      textColor = _ref15.textColor,
      disabled = _ref15.disabled,
      error = _ref15.error,
      theme = _ref15.theme;
    var baseFlatColorProps = {
      theme,
      disabled
    };
    var activeColor = getActiveColor({
      ...baseFlatColorProps,
      error,
      activeUnderlineColor,
      mode: 'flat'
    });
    return {
      inputTextColor: getInputTextColor({
        ...baseFlatColorProps,
        textColor
      }),
      activeColor,
      underlineColorCustom: getFlatUnderlineColor({
        ...baseFlatColorProps,
        underlineColor
      }),
      placeholderColor: getPlaceholderColor(baseFlatColorProps),
      selectionColor: getSelectionColor({
        activeColor,
        customSelectionColor
      }),
      errorColor: theme.colors.error,
      backgroundColor: getFlatBackgroundColor(baseFlatColorProps)
    };
  };
  exports.getFlatInputColors = getFlatInputColors;
  var getOutlinedInputColors = _ref16 => {
    var activeOutlineColor = _ref16.activeOutlineColor,
      customOutlineColor = _ref16.customOutlineColor,
      customSelectionColor = _ref16.customSelectionColor,
      textColor = _ref16.textColor,
      disabled = _ref16.disabled,
      error = _ref16.error,
      theme = _ref16.theme;
    var baseOutlinedColorProps = {
      theme,
      disabled
    };
    var activeColor = getActiveColor({
      ...baseOutlinedColorProps,
      error,
      activeOutlineColor,
      mode: 'outlined'
    });
    return {
      inputTextColor: getInputTextColor({
        ...baseOutlinedColorProps,
        textColor
      }),
      activeColor,
      outlineColor: getOutlinedOutlineInputColor({
        ...baseOutlinedColorProps,
        customOutlineColor
      }),
      placeholderColor: getPlaceholderColor(baseOutlinedColorProps),
      selectionColor: getSelectionColor({
        activeColor,
        customSelectionColor
      }),
      errorColor: theme.colors.error
    };
  };
  exports.getOutlinedInputColors = getOutlinedInputColors;
  var getConstants = isV3 => {
    // Text input affix
    var AFFIX_OFFSET;
    // Text input icon
    var ICON_OFFSET;
    //Text input flat
    var LABEL_PADDING_TOP;
    var LABEL_PADDING_HORIZONTAL;
    var FLAT_INPUT_OFFSET;
    var MIN_HEIGHT;
    // Text input outlined;
    var INPUT_PADDING_HORIZONTAL;
    var ADORNMENT_OFFSET;
    var OUTLINED_INPUT_OFFSET;
    if (isV3) {
      AFFIX_OFFSET = _constants.MD3_AFFIX_OFFSET;
      ICON_OFFSET = _constants.MD3_ICON_OFFSET;
      LABEL_PADDING_TOP = _constants.MD3_LABEL_PADDING_TOP;
      LABEL_PADDING_HORIZONTAL = _constants.MD3_LABEL_PADDING_HORIZONTAL;
      FLAT_INPUT_OFFSET = _constants.MD3_FLAT_INPUT_OFFSET;
      MIN_HEIGHT = _constants.MD3_MIN_HEIGHT;
      INPUT_PADDING_HORIZONTAL = _constants.MD3_INPUT_PADDING_HORIZONTAL;
      ADORNMENT_OFFSET = _constants.MD3_ADORNMENT_OFFSET;
      OUTLINED_INPUT_OFFSET = _constants.MD3_OUTLINED_INPUT_OFFSET;
    } else {
      AFFIX_OFFSET = _constants.MD2_AFFIX_OFFSET;
      ICON_OFFSET = _constants.MD2_ICON_OFFSET;
      LABEL_PADDING_TOP = _constants.MD2_LABEL_PADDING_TOP;
      LABEL_PADDING_HORIZONTAL = _constants.MD2_LABEL_PADDING_HORIZONTAL;
      FLAT_INPUT_OFFSET = _constants.MD2_FLAT_INPUT_OFFSET;
      MIN_HEIGHT = _constants.MD2_MIN_HEIGHT;
      INPUT_PADDING_HORIZONTAL = _constants.MD2_INPUT_PADDING_HORIZONTAL;
      ADORNMENT_OFFSET = _constants.MD2_ADORNMENT_OFFSET;
      OUTLINED_INPUT_OFFSET = _constants.MD2_OUTLINED_INPUT_OFFSET;
    }
    return {
      AFFIX_OFFSET,
      ICON_OFFSET,
      LABEL_PADDING_TOP,
      LABEL_PADDING_HORIZONTAL,
      FLAT_INPUT_OFFSET,
      MIN_HEIGHT,
      INPUT_PADDING_HORIZONTAL,
      ADORNMENT_OFFSET,
      OUTLINED_INPUT_OFFSET,
      MIN_WIDTH: _constants.MIN_WIDTH
    };
  };
  exports.getConstants = getConstants;
},686,[1,45,515,684,687]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.OUTLINE_MINIMIZED_LABEL_Y_OFFSET = exports.MIN_WIDTH = exports.MIN_DENSE_HEIGHT_WL = exports.MIN_DENSE_HEIGHT_OUTLINED = exports.MIN_DENSE_HEIGHT = exports.MINIMIZED_LABEL_Y_OFFSET = exports.MINIMIZED_LABEL_FONT_SIZE = exports.MD3_OUTLINED_INPUT_OFFSET = exports.MD3_MIN_HEIGHT = exports.MD3_LABEL_PADDING_TOP = exports.MD3_LABEL_PADDING_HORIZONTAL = exports.MD3_INPUT_PADDING_HORIZONTAL = exports.MD3_ICON_OFFSET = exports.MD3_FLAT_INPUT_OFFSET = exports.MD3_AFFIX_OFFSET = exports.MD3_ADORNMENT_OFFSET = exports.MD2_OUTLINED_INPUT_OFFSET = exports.MD2_MIN_HEIGHT = exports.MD2_LABEL_PADDING_TOP = exports.MD2_LABEL_PADDING_HORIZONTAL = exports.MD2_INPUT_PADDING_HORIZONTAL = exports.MD2_ICON_OFFSET = exports.MD2_FLAT_INPUT_OFFSET = exports.MD2_AFFIX_OFFSET = exports.MD2_ADORNMENT_OFFSET = exports.MAXIMIZED_LABEL_FONT_SIZE = exports.LABEL_WIGGLE_X_OFFSET = exports.LABEL_PADDING_TOP_DENSE = exports.LABEL_PADDING_TOP = exports.ICON_SIZE = exports.ADORNMENT_SIZE = undefined;
  var MAXIMIZED_LABEL_FONT_SIZE = exports.MAXIMIZED_LABEL_FONT_SIZE = 16;
  var MINIMIZED_LABEL_FONT_SIZE = exports.MINIMIZED_LABEL_FONT_SIZE = 12;
  var LABEL_WIGGLE_X_OFFSET = exports.LABEL_WIGGLE_X_OFFSET = 4;
  var ADORNMENT_SIZE = exports.ADORNMENT_SIZE = 24;
  var MIN_WIDTH = exports.MIN_WIDTH = 100;

  //Text input affix offset
  var MD2_AFFIX_OFFSET = exports.MD2_AFFIX_OFFSET = 12;
  var MD3_AFFIX_OFFSET = exports.MD3_AFFIX_OFFSET = 16;

  // Text input icon
  var ICON_SIZE = exports.ICON_SIZE = 24;
  var MD2_ICON_OFFSET = exports.MD2_ICON_OFFSET = 12;
  var MD3_ICON_OFFSET = exports.MD3_ICON_OFFSET = 16;

  // Text input common
  var MD2_MIN_HEIGHT = exports.MD2_MIN_HEIGHT = 64;
  var MD3_MIN_HEIGHT = exports.MD3_MIN_HEIGHT = 56;
  var MD3_ADORNMENT_OFFSET = exports.MD3_ADORNMENT_OFFSET = 16;
  var MD2_ADORNMENT_OFFSET = exports.MD2_ADORNMENT_OFFSET = 12;
  var LABEL_PADDING_TOP_DENSE = exports.LABEL_PADDING_TOP_DENSE = 24;
  var LABEL_PADDING_TOP = exports.LABEL_PADDING_TOP = 8;

  // Text input flat
  var MD2_LABEL_PADDING_TOP = exports.MD2_LABEL_PADDING_TOP = 30;
  var MD3_LABEL_PADDING_TOP = exports.MD3_LABEL_PADDING_TOP = 26;
  var MD2_LABEL_PADDING_HORIZONTAL = exports.MD2_LABEL_PADDING_HORIZONTAL = 12;
  var MD3_LABEL_PADDING_HORIZONTAL = exports.MD3_LABEL_PADDING_HORIZONTAL = 16;
  var MD2_FLAT_INPUT_OFFSET = exports.MD2_FLAT_INPUT_OFFSET = 8;
  var MD3_FLAT_INPUT_OFFSET = exports.MD3_FLAT_INPUT_OFFSET = 16;
  var MINIMIZED_LABEL_Y_OFFSET = exports.MINIMIZED_LABEL_Y_OFFSET = -18;
  var MIN_DENSE_HEIGHT_WL = exports.MIN_DENSE_HEIGHT_WL = 52;
  var MIN_DENSE_HEIGHT = exports.MIN_DENSE_HEIGHT = 40;

  // Text input outlined
  var MD2_INPUT_PADDING_HORIZONTAL = exports.MD2_INPUT_PADDING_HORIZONTAL = 14;
  var MD3_INPUT_PADDING_HORIZONTAL = exports.MD3_INPUT_PADDING_HORIZONTAL = 16;

  // extra space to avoid overlapping input's text and icon
  var MD2_OUTLINED_INPUT_OFFSET = exports.MD2_OUTLINED_INPUT_OFFSET = 8;
  var MD3_OUTLINED_INPUT_OFFSET = exports.MD3_OUTLINED_INPUT_OFFSET = 16;
  var OUTLINE_MINIMIZED_LABEL_Y_OFFSET = exports.OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;
  var MIN_DENSE_HEIGHT_OUTLINED = exports.MIN_DENSE_HEIGHT_OUTLINED = 48;
},687,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.IconAdornment = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = _interopRequireDefault(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _utils = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _IconButton = _interopRequireDefault(require(_dependencyMap[6]));
  var _constants = require(_dependencyMap[7]);
  var _helpers = require(_dependencyMap[8]);
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["icon", "onPress", "forceTextInputFocus", "color", "theme", "rippleColor"];
  var StyleContext = /*#__PURE__*/_react.default.createContext({
    style: {},
    isTextInputFocused: false,
    forceFocus: () => {},
    testID: ''
  });
  var IconAdornment = _ref => {
    var icon = _ref.icon,
      topPosition = _ref.topPosition,
      side = _ref.side,
      isTextInputFocused = _ref.isTextInputFocused,
      forceFocus = _ref.forceFocus,
      testID = _ref.testID,
      themeOverrides = _ref.theme,
      disabled = _ref.disabled;
    var _useInternalTheme = (0, _theming.useInternalTheme)(themeOverrides),
      isV3 = _useInternalTheme.isV3;
    var _getConstants = (0, _helpers.getConstants)(isV3),
      ICON_OFFSET = _getConstants.ICON_OFFSET;
    var style = {
      top: topPosition,
      [side]: ICON_OFFSET
    };
    var contextState = {
      style,
      isTextInputFocused,
      forceFocus,
      testID,
      disabled
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(StyleContext.Provider, {
      value: contextState,
      children: icon
    });
  };

  /**
   * A component to render a leading / trailing icon in the TextInput
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { TextInput } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [text, setText] = React.useState('');
   *
   *   return (
   *     <TextInput
   *       label="Password"
   *       secureTextEntry
   *       right={<TextInput.Icon icon="eye" />}
   *     />
   *   );
   * };
   *
   * export default MyComponent;
   * ```
   */
  exports.IconAdornment = IconAdornment;
  var TextInputIcon = _ref2 => {
    var icon = _ref2.icon,
      onPress = _ref2.onPress,
      _ref2$forceTextInputF = _ref2.forceTextInputFocus,
      forceTextInputFocus = _ref2$forceTextInputF === undefined ? true : _ref2$forceTextInputF,
      customColor = _ref2.color,
      themeOverrides = _ref2.theme,
      rippleColor = _ref2.rippleColor,
      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
    var _React$useContext = _react.default.useContext(StyleContext),
      style = _React$useContext.style,
      isTextInputFocused = _React$useContext.isTextInputFocused,
      forceFocus = _React$useContext.forceFocus,
      testID = _React$useContext.testID,
      disabled = _React$useContext.disabled;
    var onPressWithFocusControl = _react.default.useCallback(e => {
      if (forceTextInputFocus && !isTextInputFocused) {
        forceFocus();
      }
      onPress?.(e);
    }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var iconColor = (0, _utils.getIconColor)({
      theme,
      disabled,
      isTextInputFocused,
      customColor
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.container, style],
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
        icon: icon,
        style: styles.iconButton,
        size: _constants.ICON_SIZE,
        onPress: onPressWithFocusControl,
        iconColor: iconColor,
        testID: testID,
        theme: themeOverrides,
        rippleColor: rippleColor,
        ...rest
      })
    });
  };
  TextInputIcon.displayName = 'TextInput.Icon';
  var styles = _reactNative.StyleSheet.create({
    container: {
      position: 'absolute',
      width: _constants.ICON_SIZE,
      height: _constants.ICON_SIZE,
      justifyContent: 'center',
      alignItems: 'center'
    },
    iconButton: {
      margin: 0
    }
  });
  var _default = exports.default = TextInputIcon; // @component-docs ignore-next-line
},688,[1,203,125,45,685,506,636,687,686,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _Underline = require(_dependencyMap[4]);
  var _enums = require(_dependencyMap[5]);
  var _TextInputAdornment = _interopRequireWildcard(require(_dependencyMap[6]));
  var _constants = require(_dependencyMap[7]);
  var _helpers = require(_dependencyMap[8]);
  var _InputLabel = _interopRequireDefault(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  var _excluded = ["disabled", "editable", "label", "error", "selectionColor", "cursorColor", "underlineColor", "underlineStyle", "activeUnderlineColor", "textColor", "dense", "style", "theme", "render", "multiline", "parentState", "innerRef", "onFocus", "forceFocus", "onBlur", "onChangeText", "onLayoutAnimatedText", "onLabelTextLayout", "onLeftAffixLayoutChange", "onRightAffixLayoutChange", "onInputLayout", "left", "right", "placeholderTextColor", "testID", "contentStyle", "scaledLabel"],
    _excluded2 = ["fontSize", "lineHeight", "fontWeight", "height", "paddingHorizontal", "textAlign"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var TextInputFlat = _ref => {
    var _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === undefined ? false : _ref$disabled,
      _ref$editable = _ref.editable,
      editable = _ref$editable === undefined ? true : _ref$editable,
      label = _ref.label,
      _ref$error = _ref.error,
      error = _ref$error === undefined ? false : _ref$error,
      customSelectionColor = _ref.selectionColor,
      cursorColor = _ref.cursorColor,
      underlineColor = _ref.underlineColor,
      underlineStyle = _ref.underlineStyle,
      activeUnderlineColor = _ref.activeUnderlineColor,
      textColor = _ref.textColor,
      dense = _ref.dense,
      style = _ref.style,
      theme = _ref.theme,
      _ref$render = _ref.render,
      render = _ref$render === undefined ? props => /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        ...props
      }) : _ref$render,
      _ref$multiline = _ref.multiline,
      multiline = _ref$multiline === undefined ? false : _ref$multiline,
      parentState = _ref.parentState,
      innerRef = _ref.innerRef,
      onFocus = _ref.onFocus,
      forceFocus = _ref.forceFocus,
      onBlur = _ref.onBlur,
      onChangeText = _ref.onChangeText,
      onLayoutAnimatedText = _ref.onLayoutAnimatedText,
      onLabelTextLayout = _ref.onLabelTextLayout,
      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,
      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,
      onInputLayout = _ref.onInputLayout,
      left = _ref.left,
      right = _ref.right,
      placeholderTextColor = _ref.placeholderTextColor,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'text-input-flat' : _ref$testID,
      contentStyle = _ref.contentStyle,
      scaledLabel = _ref.scaledLabel,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var isAndroid = false;
    var colors = theme.colors,
      isV3 = theme.isV3,
      roundness = theme.roundness;
    var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;
    var hasActiveOutline = parentState.focused || error;
    var _getConstants = (0, _helpers.getConstants)(isV3),
      LABEL_PADDING_TOP = _getConstants.LABEL_PADDING_TOP,
      FLAT_INPUT_OFFSET = _getConstants.FLAT_INPUT_OFFSET,
      MIN_HEIGHT = _getConstants.MIN_HEIGHT,
      MIN_WIDTH = _getConstants.MIN_WIDTH;
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      fontSizeStyle = _ref2.fontSize,
      lineHeightStyle = _ref2.lineHeight,
      fontWeight = _ref2.fontWeight,
      height = _ref2.height,
      paddingHorizontal = _ref2.paddingHorizontal,
      textAlign = _ref2.textAlign,
      viewStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;
    var lineHeight = lineHeightStyle || undefined;
    var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';
    var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({
      left,
      right
    });
    var _calculateFlatInputHo = (0, _helpers.calculateFlatInputHorizontalPadding)({
        adornmentConfig,
        isV3
      }),
      paddingLeft = _calculateFlatInputHo.paddingLeft,
      paddingRight = _calculateFlatInputHo.paddingRight;
    if (isPaddingHorizontalPassed) {
      paddingLeft = paddingHorizontal;
      paddingRight = paddingHorizontal;
    }
    var leftLayout = parentState.leftLayout,
      rightLayout = parentState.rightLayout;
    var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
    var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
    var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({
      adornmentConfig,
      rightAffixWidth,
      leftAffixWidth,
      paddingHorizontal,
      inputOffset: FLAT_INPUT_OFFSET,
      mode: _enums.InputMode.Flat,
      isV3
    });
    var _getFlatInputColors = (0, _helpers.getFlatInputColors)({
        underlineColor,
        activeUnderlineColor,
        customSelectionColor,
        textColor,
        disabled,
        error,
        theme
      }),
      inputTextColor = _getFlatInputColors.inputTextColor,
      activeColor = _getFlatInputColors.activeColor,
      underlineColorCustom = _getFlatInputColors.underlineColorCustom,
      placeholderColor = _getFlatInputColors.placeholderColor,
      errorColor = _getFlatInputColors.errorColor,
      backgroundColor = _getFlatInputColors.backgroundColor,
      selectionColor = _getFlatInputColors.selectionColor;
    var containerStyle = {
      backgroundColor,
      borderTopLeftRadius: theme.roundness,
      borderTopRightRadius: theme.roundness
    };
    var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;
    var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;
    var labelWidth = parentState.labelLayout.width;
    var labelHeight = parentState.labelLayout.height;
    var labelHalfWidth = labelWidth / 2;
    var labelHalfHeight = labelHeight / 2;
    var baseLabelTranslateX = (_reactNative.I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (_reactNative.I18nManager.getConstants().isRTL ? -1 : 1) * paddingLeft;
    var minInputHeight = dense ? (label ? _constants.MIN_DENSE_HEIGHT_WL : _constants.MIN_DENSE_HEIGHT) - _constants.LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;
    var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);
    var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);
    if (height && typeof height !== 'number') {
      // eslint-disable-next-line
      console.warn('Currently we support only numbers in height prop');
    }
    var paddingSettings = {
      height: height ? +height : null,
      labelHalfHeight,
      offset: FLAT_INPUT_OFFSET,
      multiline: multiline ? multiline : null,
      dense: dense ? dense : null,
      topPosition,
      fontSize,
      lineHeight,
      label,
      scale: fontScale,
      isAndroid,
      styles: _reactNative.StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)
    };
    var pad = (0, _helpers.calculatePadding)(paddingSettings);
    var paddingFlat = (0, _helpers.adjustPaddingFlat)({
      ...paddingSettings,
      pad
    });
    var baseLabelTranslateY = -labelHalfHeight - (topPosition + _constants.MINIMIZED_LABEL_Y_OFFSET);
    var _React$useRef = React.useRef([new _reactNative.Animated.Value(0), new _reactNative.Animated.Value(1)]),
      placeholderOpacityAnims = _React$useRef.current;
    var placeholderOpacity = hasActiveOutline ? parentState.labeled : placeholderOpacityAnims[parentState.labelLayout.measured ? 1 : 0];

    // We don't want to show placeholder if label is displayed, because they overlap.
    // Before it was done by setting placeholder's value to " ", but inputs have the same props
    // what causes broken styles due to: https://github.com/facebook/react-native/issues/48249
    var placeholderTextColorBasedOnState = parentState.displayPlaceholder ? placeholderTextColor ?? placeholderColor : 'transparent';
    var minHeight = height || (dense ? label ? _constants.MIN_DENSE_HEIGHT_WL : _constants.MIN_DENSE_HEIGHT : MIN_HEIGHT);
    var flatHeight = inputHeight + (!height ? dense ? _constants.LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);
    var iconTopPosition = (flatHeight - _constants.ADORNMENT_SIZE) / 2;
    var leftAffixTopPosition = leftLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)({
      height: flatHeight,
      ...paddingFlat,
      affixHeight: leftLayout.height
    }) : null;
    var rightAffixTopPosition = rightLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)({
      height: flatHeight,
      ...paddingFlat,
      affixHeight: rightLayout.height
    }) : null;
    var labelProps = {
      label,
      onLayoutAnimatedText,
      onLabelTextLayout,
      placeholderOpacity,
      labelError: error,
      placeholderStyle: styles.placeholder,
      baseLabelTranslateY,
      baseLabelTranslateX,
      font,
      fontSize,
      lineHeight,
      fontWeight,
      labelScale,
      wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,
      topPosition,
      paddingLeft: paddingLeft,
      paddingRight: paddingRight,
      hasActiveOutline,
      activeColor,
      placeholderColor,
      errorColor,
      roundness,
      maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
      testID,
      contentStyle,
      inputContainerLayout: parentState.inputContainerLayout,
      labelTextLayout: parentState.labelTextLayout,
      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1,
      isV3
    };
    var affixTopPosition = {
      [_enums.AdornmentSide.Left]: leftAffixTopPosition,
      [_enums.AdornmentSide.Right]: rightAffixTopPosition
    };
    var onAffixChange = {
      [_enums.AdornmentSide.Left]: onLeftAffixLayoutChange,
      [_enums.AdornmentSide.Right]: onRightAffixLayoutChange
    };
    var adornmentProps = {
      paddingHorizontal,
      adornmentConfig,
      forceFocus,
      topPosition: {
        [_enums.AdornmentType.Affix]: affixTopPosition,
        [_enums.AdornmentType.Icon]: iconTopPosition
      },
      onAffixChange,
      isTextInputFocused: parentState.focused,
      maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
      disabled
    };
    if (adornmentConfig.length) {
      adornmentProps = {
        ...adornmentProps,
        left,
        right,
        textStyle: {
          ...font,
          fontSize,
          lineHeight,
          fontWeight
        },
        visible: parentState.labeled
      };
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [containerStyle, viewStyle],
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Underline.Underline, {
        style: underlineStyle,
        hasActiveOutline: hasActiveOutline,
        parentState: parentState,
        underlineColorCustom: underlineColorCustom,
        error: error,
        colors: colors,
        activeColor: activeColor,
        theme: theme
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        onLayout: onInputLayout,
        style: [styles.labelContainer, {
          minHeight
        }],
        children: [multiline && !!label && !disabled &&
        /*#__PURE__*/
        // Workaround for: https://github.com/callstack/react-native-paper/issues/2799
        // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.
        (0, _jsxRuntime.jsx)(_reactNative.View, {
          testID: "patch-container",
          pointerEvents: "none",
          style: [_reactNative.StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {
            backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,
            left: paddingLeft,
            right: paddingRight
          }]
        }), label ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_InputLabel.default, {
          labeled: parentState.labeled,
          error: parentState.error,
          focused: parentState.focused,
          scaledLabel: scaledLabel,
          wiggle: Boolean(parentState.value && labelProps.labelError),
          labelLayoutMeasured: parentState.labelLayout.measured,
          labelLayoutWidth: parentState.labelLayout.width,
          labelLayoutHeight: parentState.labelLayout.height,
          ...labelProps
        }) : null, render?.({
          ...rest,
          ref: innerRef,
          onChangeText,
          placeholder: rest.placeholder,
          editable: !disabled && editable,
          selectionColor,
          cursorColor: typeof cursorColor === 'undefined' ? activeColor : cursorColor,
          placeholderTextColor: placeholderTextColorBasedOnState,
          onFocus,
          onBlur,
          underlineColorAndroid: 'transparent',
          multiline,
          style: [styles.input, multiline && height ? {
            height: flatHeight
          } : {}, paddingFlat, {
            paddingLeft,
            paddingRight,
            ...font,
            fontSize,
            lineHeight,
            fontWeight,
            color: inputTextColor,
            textAlignVertical: multiline ? 'top' : 'center',
            textAlign: textAlign ? textAlign : _reactNative.I18nManager.getConstants().isRTL ? 'right' : 'left',
            minWidth: Math.min(parentState.labelTextLayout.width + 2 * FLAT_INPUT_OFFSET, MIN_WIDTH)
          }, false, adornmentStyleAdjustmentForNativeInput, contentStyle],
          testID
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextInputAdornment.default, {
        ...adornmentProps
      })]
    });
  };
  var _default = exports.default = TextInputFlat;
  var styles = _reactNative.StyleSheet.create({
    placeholder: {
      position: 'absolute',
      left: 0
    },
    labelContainer: {
      paddingTop: 0,
      paddingBottom: 0,
      flexGrow: 1
    },
    input: {
      margin: 0,
      flexGrow: 1
    },
    inputFlat: {
      paddingTop: 24,
      paddingBottom: 4
    },
    inputFlatDense: {
      paddingTop: 22,
      paddingBottom: 2
    },
    patchContainer: {
      height: 24,
      zIndex: 2
    },
    densePatchContainer: {
      height: 22,
      zIndex: 2
    }
  });
},689,[1,203,125,45,690,684,691,687,686,692,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Underline = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  var _theming = require(_dependencyMap[2]);
  var _jsxRuntime = require(_dependencyMap[3]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var Underline = _ref => {
    var parentState = _ref.parentState,
      error = _ref.error,
      colors = _ref.colors,
      activeColor = _ref.activeColor,
      underlineColorCustom = _ref.underlineColorCustom,
      hasActiveOutline = _ref.hasActiveOutline,
      style = _ref.style,
      themeOverrides = _ref.theme;
    var _useInternalTheme = (0, _theming.useInternalTheme)(themeOverrides),
      isV3 = _useInternalTheme.isV3;
    var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;
    if (error) backgroundColor = colors?.error;
    var activeScale = isV3 ? 2 : 1;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      testID: "text-input-underline",
      style: [styles.underline, isV3 && styles.md3Underline, {
        backgroundColor,
        // Underlines is thinner when input is not focused
        transform: [{
          scaleY: (isV3 ? hasActiveOutline : parentState.focused) ? activeScale : 0.5
        }]
      }, style]
    });
  };
  exports.Underline = Underline;
  var styles = _reactNative.StyleSheet.create({
    underline: {
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      height: 2,
      zIndex: 1
    },
    md3Underline: {
      height: 1
    }
  });
},690,[125,45,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.getAdornmentConfig = getAdornmentConfig;
  exports.getAdornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput;
  var _react = _interopRequireWildcard(require(_dependencyMap[0]));
  var _enums = require(_dependencyMap[1]);
  var _TextInputAffix = _interopRequireWildcard(require(_dependencyMap[2]));
  var _TextInputIcon = _interopRequireWildcard(require(_dependencyMap[3]));
  var _helpers = require(_dependencyMap[4]);
  var _jsxRuntime = require(_dependencyMap[5]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  function getAdornmentConfig(_ref) {
    var left = _ref.left,
      right = _ref.right;
    var adornmentConfig = [];
    if (left || right) {
      [{
        side: _enums.AdornmentSide.Left,
        adornment: left
      }, {
        side: _enums.AdornmentSide.Right,
        adornment: right
      }].forEach(_ref2 => {
        var side = _ref2.side,
          adornment = _ref2.adornment;
        if (adornment && /*#__PURE__*/_react.default.isValidElement(adornment)) {
          var type;
          if (adornment.type === _TextInputAffix.default) {
            type = _enums.AdornmentType.Affix;
          } else if (adornment.type === _TextInputIcon.default) {
            type = _enums.AdornmentType.Icon;
          }
          adornmentConfig.push({
            side,
            type
          });
        }
      });
    }
    return adornmentConfig;
  }
  function getAdornmentStyleAdjustmentForNativeInput(_ref3) {
    var adornmentConfig = _ref3.adornmentConfig,
      leftAffixWidth = _ref3.leftAffixWidth,
      rightAffixWidth = _ref3.rightAffixWidth,
      paddingHorizontal = _ref3.paddingHorizontal,
      _ref3$inputOffset = _ref3.inputOffset,
      inputOffset = _ref3$inputOffset === undefined ? 0 : _ref3$inputOffset,
      mode = _ref3.mode,
      isV3 = _ref3.isV3;
    var _getConstants = (0, _helpers.getConstants)(isV3),
      OUTLINED_INPUT_OFFSET = _getConstants.OUTLINED_INPUT_OFFSET,
      ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;
    if (adornmentConfig.length) {
      var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(_ref4 => {
        var type = _ref4.type,
          side = _ref4.side;
        var isLeftSide = side === _enums.AdornmentSide.Left;
        var inputModeAdornemntOffset = mode === _enums.InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;
        var paddingKey = `padding${captalize(side)}`;
        var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;
        var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;
        var offset = affixWidth + padding;
        var isAffix = type === _enums.AdornmentType.Affix;
        var marginKey = `margin${captalize(side)}`;
        return {
          [marginKey]: isAffix ? 0 : offset,
          [paddingKey]: isAffix ? offset : inputOffset
        };
      });
      var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce((mergedStyles, currentStyle) => {
        return {
          ...mergedStyles,
          ...currentStyle
        };
      }, {});
      return allStyleAdjustmentsMerged;
    } else {
      return [{}];
    }
  }
  var captalize = text => text.charAt(0).toUpperCase() + text.slice(1);
  var TextInputAdornment = _ref5 => {
    var adornmentConfig = _ref5.adornmentConfig,
      left = _ref5.left,
      right = _ref5.right,
      onAffixChange = _ref5.onAffixChange,
      textStyle = _ref5.textStyle,
      visible = _ref5.visible,
      topPosition = _ref5.topPosition,
      isTextInputFocused = _ref5.isTextInputFocused,
      forceFocus = _ref5.forceFocus,
      paddingHorizontal = _ref5.paddingHorizontal,
      maxFontSizeMultiplier = _ref5.maxFontSizeMultiplier,
      theme = _ref5.theme,
      disabled = _ref5.disabled;
    if (adornmentConfig.length) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: adornmentConfig.map(_ref6 => {
          var type = _ref6.type,
            side = _ref6.side;
          var inputAdornmentComponent;
          if (side === _enums.AdornmentSide.Left) {
            inputAdornmentComponent = left;
          } else if (side === _enums.AdornmentSide.Right) {
            inputAdornmentComponent = right;
          }
          var commonProps = {
            side: side,
            testID: `${side}-${type}-adornment`,
            isTextInputFocused,
            paddingHorizontal,
            disabled
          };
          if (type === _enums.AdornmentType.Icon) {
            return /*#__PURE__*/(0, _react.createElement)(_TextInputIcon.IconAdornment, {
              ...commonProps,
              theme: theme,
              key: side,
              icon: inputAdornmentComponent,
              topPosition: topPosition[_enums.AdornmentType.Icon],
              forceFocus: forceFocus
            });
          } else if (type === _enums.AdornmentType.Affix) {
            return /*#__PURE__*/(0, _react.createElement)(_TextInputAffix.AffixAdornment, {
              ...commonProps,
              key: side,
              topPosition: topPosition[_enums.AdornmentType.Affix][side],
              affix: inputAdornmentComponent,
              textStyle: textStyle,
              onLayout: onAffixChange[side],
              visible: visible,
              maxFontSizeMultiplier: maxFontSizeMultiplier
            });
          } else {
            return null;
          }
        })
      });
    } else {
      return null;
    }
  };
  var _default = exports.default = TextInputAdornment;
},691,[125,684,683,688,686,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _react = _interopRequireDefault(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _AnimatedText = _interopRequireDefault(require(_dependencyMap[3]));
  var _helpers = require(_dependencyMap[4]);
  var _jsxRuntime = require(_dependencyMap[5]);
  var InputLabel = props => {
    var labeled = props.labeled,
      wiggle = props.wiggle,
      error = props.error,
      focused = props.focused,
      opacity = props.opacity,
      labelLayoutWidth = props.labelLayoutWidth,
      labelLayoutHeight = props.labelLayoutHeight,
      labelBackground = props.labelBackground,
      label = props.label,
      labelError = props.labelError,
      onLayoutAnimatedText = props.onLayoutAnimatedText,
      onLabelTextLayout = props.onLabelTextLayout,
      hasActiveOutline = props.hasActiveOutline,
      activeColor = props.activeColor,
      placeholderStyle = props.placeholderStyle,
      baseLabelTranslateX = props.baseLabelTranslateX,
      baseLabelTranslateY = props.baseLabelTranslateY,
      font = props.font,
      fontSize = props.fontSize,
      lineHeight = props.lineHeight,
      fontWeight = props.fontWeight,
      placeholderOpacity = props.placeholderOpacity,
      wiggleOffsetX = props.wiggleOffsetX,
      labelScale = props.labelScale,
      topPosition = props.topPosition,
      paddingLeft = props.paddingLeft,
      paddingRight = props.paddingRight,
      backgroundColor = props.backgroundColor,
      roundness = props.roundness,
      placeholderColor = props.placeholderColor,
      errorColor = props.errorColor,
      labelTranslationXOffset = props.labelTranslationXOffset,
      maxFontSizeMultiplier = props.maxFontSizeMultiplier,
      testID = props.testID,
      isV3 = props.isV3,
      inputContainerLayout = props.inputContainerLayout,
      scaledLabel = props.scaledLabel;
    var _getConstants = (0, _helpers.getConstants)(isV3),
      INPUT_PADDING_HORIZONTAL = _getConstants.INPUT_PADDING_HORIZONTAL;
    var _useWindowDimensions = (0, _reactNative.useWindowDimensions)(),
      width = _useWindowDimensions.width;
    var paddingOffset = paddingLeft && paddingRight ? {
      paddingLeft,
      paddingRight
    } : {};
    var labelTranslationX = {
      transform: [{
        // Offset label scale since RN doesn't support transform origin
        translateX: labeled.interpolate({
          inputRange: [0, 1],
          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]
        })
      }]
    };
    var labelStyle = {
      ...font,
      fontSize,
      lineHeight,
      fontWeight,
      opacity: labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [hasActiveOutline ? 1 : 0, 0]
      }),
      transform: [{
        // Wiggle the label when there's an error
        translateX: wiggle ? error.interpolate({
          inputRange: [0, 0.5, 1],
          outputRange: [0, wiggleOffsetX, 0]
        }) : 0
      }, {
        // Move label to top
        translateY: baseLabelTranslateY !== 0 ? labeled.interpolate({
          inputRange: [0, 1],
          outputRange: [baseLabelTranslateY, 0]
        }) : 0
      }, {
        // Make label smaller
        scale: labelScale !== 0 ? labeled.interpolate({
          inputRange: [0, 1],
          outputRange: [labelScale, 1]
        }) : labeled
      }]
    };
    var labelWidth = (inputContainerLayout.width + INPUT_PADDING_HORIZONTAL / 2) / (scaledLabel ? labelScale : 1);
    var commonStyles = [placeholderStyle, {
      top: topPosition
    }, {
      maxWidth: labelWidth
    }, labelStyle, paddingOffset || {}];
    var textColor = labelError && errorColor ? errorColor : placeholderColor;
    return (
      /*#__PURE__*/
      // Position colored placeholder and gray placeholder on top of each other and crossfade them
      // This gives the effect of animating the color, but allows us to use native driver
      (0, _jsxRuntime.jsx)(_reactNative.View, {
        pointerEvents: "none",
        style: [_reactNative.StyleSheet.absoluteFill, styles.overflow],
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          pointerEvents: "none",
          style: [_reactNative.StyleSheet.absoluteFill, styles.labelContainer, {
            width
          }, {
            opacity
          }, labelTranslationX],
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: {
              width: labelWidth
            },
            children: [labelBackground?.({
              labeled,
              labelLayoutWidth,
              labelLayoutHeight,
              labelStyle,
              placeholderStyle,
              baseLabelTranslateX,
              topPosition,
              label,
              backgroundColor,
              roundness,
              maxFontSizeMultiplier: maxFontSizeMultiplier,
              testID
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_AnimatedText.default, {
              variant: "bodySmall",
              onLayout: onLayoutAnimatedText,
              onTextLayout: onLabelTextLayout,
              style: [commonStyles, {
                color: activeColor
              }],
              numberOfLines: 1,
              maxFontSizeMultiplier: maxFontSizeMultiplier,
              testID: `${testID}-label-active`,
              children: label
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_AnimatedText.default, {
              variant: focused ? 'bodyLarge' : 'bodySmall',
              style: [commonStyles, {
                color: textColor,
                opacity: placeholderOpacity
              }],
              numberOfLines: 1,
              maxFontSizeMultiplier: maxFontSizeMultiplier,
              testID: `${testID}-label-inactive`,
              children: label
            })]
          })
        })
      })
    );
  };
  var styles = _reactNative.StyleSheet.create({
    overflow: {
      overflow: 'hidden'
    },
    labelContainer: {
      zIndex: 3
    }
  });
  var _default = exports.default = /*#__PURE__*/_react.default.memo(InputLabel);
},692,[1,125,45,574,686,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _Outline = require(_dependencyMap[4]);
  var _enums = require(_dependencyMap[5]);
  var _TextInputAdornment = _interopRequireWildcard(require(_dependencyMap[6]));
  var _constants = require(_dependencyMap[7]);
  var _helpers = require(_dependencyMap[8]);
  var _InputLabel = _interopRequireDefault(require(_dependencyMap[9]));
  var _LabelBackground = _interopRequireDefault(require(_dependencyMap[10]));
  var _jsxRuntime = require(_dependencyMap[11]);
  var _excluded = ["disabled", "editable", "label", "error", "selectionColor", "cursorColor", "underlineColor", "outlineColor", "activeOutlineColor", "outlineStyle", "textColor", "dense", "style", "theme", "render", "multiline", "parentState", "innerRef", "onFocus", "forceFocus", "onBlur", "onChangeText", "onLayoutAnimatedText", "onLabelTextLayout", "onLeftAffixLayoutChange", "onRightAffixLayoutChange", "onInputLayout", "onLayout", "left", "right", "placeholderTextColor", "testID", "contentStyle", "scaledLabel"],
    _excluded2 = ["fontSize", "fontWeight", "lineHeight", "height", "backgroundColor", "textAlign"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var TextInputOutlined = _ref => {
    var _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === undefined ? false : _ref$disabled,
      _ref$editable = _ref.editable,
      editable = _ref$editable === undefined ? true : _ref$editable,
      label = _ref.label,
      _ref$error = _ref.error,
      error = _ref$error === undefined ? false : _ref$error,
      customSelectionColor = _ref.selectionColor,
      cursorColor = _ref.cursorColor,
      _underlineColor = _ref.underlineColor,
      customOutlineColor = _ref.outlineColor,
      activeOutlineColor = _ref.activeOutlineColor,
      outlineStyle = _ref.outlineStyle,
      textColor = _ref.textColor,
      dense = _ref.dense,
      style = _ref.style,
      theme = _ref.theme,
      _ref$render = _ref.render,
      render = _ref$render === undefined ? props => /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        ...props
      }) : _ref$render,
      _ref$multiline = _ref.multiline,
      multiline = _ref$multiline === undefined ? false : _ref$multiline,
      parentState = _ref.parentState,
      innerRef = _ref.innerRef,
      onFocus = _ref.onFocus,
      forceFocus = _ref.forceFocus,
      onBlur = _ref.onBlur,
      onChangeText = _ref.onChangeText,
      onLayoutAnimatedText = _ref.onLayoutAnimatedText,
      onLabelTextLayout = _ref.onLabelTextLayout,
      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,
      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,
      onInputLayout = _ref.onInputLayout,
      onLayout = _ref.onLayout,
      left = _ref.left,
      right = _ref.right,
      placeholderTextColor = _ref.placeholderTextColor,
      _ref$testID = _ref.testID,
      testID = _ref$testID === undefined ? 'text-input-outlined' : _ref$testID,
      contentStyle = _ref.contentStyle,
      scaledLabel = _ref.scaledLabel,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({
      left,
      right
    });
    var colors = theme.colors,
      isV3 = theme.isV3,
      roundness = theme.roundness;
    var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;
    var hasActiveOutline = parentState.focused || error;
    var _getConstants = (0, _helpers.getConstants)(isV3),
      INPUT_PADDING_HORIZONTAL = _getConstants.INPUT_PADDING_HORIZONTAL,
      MIN_HEIGHT = _getConstants.MIN_HEIGHT,
      ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET,
      MIN_WIDTH = _getConstants.MIN_WIDTH;
    var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      fontSizeStyle = _ref2.fontSize,
      fontWeight = _ref2.fontWeight,
      lineHeightStyle = _ref2.lineHeight,
      height = _ref2.height,
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === undefined ? colors?.background : _ref2$backgroundColor,
      textAlign = _ref2.textAlign,
      viewStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;
    var lineHeight = lineHeightStyle || undefined;
    var _getOutlinedInputColo = (0, _helpers.getOutlinedInputColors)({
        activeOutlineColor,
        customOutlineColor,
        customSelectionColor,
        textColor,
        disabled,
        error,
        theme
      }),
      inputTextColor = _getOutlinedInputColo.inputTextColor,
      activeColor = _getOutlinedInputColo.activeColor,
      outlineColor = _getOutlinedInputColo.outlineColor,
      placeholderColor = _getOutlinedInputColo.placeholderColor,
      errorColor = _getOutlinedInputColo.errorColor,
      selectionColor = _getOutlinedInputColo.selectionColor;
    var densePaddingTop = label ? _constants.LABEL_PADDING_TOP_DENSE : 0;
    var paddingTop = label ? _constants.LABEL_PADDING_TOP : 0;
    var yOffset = label ? _constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET : 0;
    var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;
    var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;
    var labelWidth = parentState.labelLayout.width;
    var labelHeight = parentState.labelLayout.height;
    var labelHalfWidth = labelWidth / 2;
    var labelHalfHeight = labelHeight / 2;
    var baseLabelTranslateX = (_reactNative.I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);
    var labelTranslationXOffset = 0;
    var isAdornmentLeftIcon = adornmentConfig.some(_ref3 => {
      var side = _ref3.side,
        type = _ref3.type;
      return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;
    });
    var isAdornmentRightIcon = adornmentConfig.some(_ref4 => {
      var side = _ref4.side,
        type = _ref4.type;
      return side === _enums.AdornmentSide.Right && type === _enums.AdornmentType.Icon;
    });
    if (isAdornmentLeftIcon) {
      labelTranslationXOffset = (_reactNative.I18nManager.getConstants().isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));
    }
    var minInputHeight = (dense ? _constants.MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - paddingTop;
    var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);
    var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, paddingTop);
    if (height && typeof height !== 'number') {
      // eslint-disable-next-line
      console.warn('Currently we support only numbers in height prop');
    }
    var paddingSettings = {
      height: height ? +height : null,
      labelHalfHeight,
      offset: paddingTop,
      multiline: multiline ? multiline : null,
      dense: dense ? dense : null,
      topPosition,
      fontSize,
      lineHeight,
      label,
      scale: fontScale,
      isAndroid: false,
      styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)
    };
    var pad = (0, _helpers.calculatePadding)(paddingSettings);
    var paddingOut = (0, _helpers.adjustPaddingOut)({
      ...paddingSettings,
      pad
    });
    var baseLabelTranslateY = -labelHalfHeight - (topPosition + yOffset);
    var _React$useRef = React.useRef([new _reactNative.Animated.Value(0), new _reactNative.Animated.Value(1)]),
      placeholderOpacityAnims = _React$useRef.current;
    var placeholderOpacity = hasActiveOutline ? parentState.labeled : placeholderOpacityAnims[parentState.labelLayout.measured ? 1 : 0];
    var placeholderStyle = {
      position: 'absolute',
      left: 0,
      paddingHorizontal: INPUT_PADDING_HORIZONTAL
    };
    var placeholderTextColorBasedOnState = parentState.displayPlaceholder ? placeholderTextColor ?? placeholderColor : 'transparent';
    var labelBackgroundColor = backgroundColor === 'transparent' ? theme.colors.background : backgroundColor;
    var labelProps = {
      label,
      onLayoutAnimatedText,
      onLabelTextLayout,
      placeholderOpacity,
      labelError: error,
      placeholderStyle,
      baseLabelTranslateY,
      baseLabelTranslateX,
      font,
      fontSize,
      lineHeight,
      fontWeight,
      labelScale,
      wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,
      topPosition,
      hasActiveOutline,
      activeColor,
      placeholderColor,
      backgroundColor: labelBackgroundColor,
      errorColor,
      labelTranslationXOffset,
      roundness,
      maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
      testID,
      contentStyle,
      inputContainerLayout: {
        width: parentState.inputContainerLayout.width + (isAdornmentRightIcon || isAdornmentLeftIcon ? INPUT_PADDING_HORIZONTAL : 0)
      },
      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1,
      isV3
    };
    var onLayoutChange = React.useCallback(e => {
      onInputLayout(e);
      onLayout?.(e);
    }, [onLayout, onInputLayout]);
    var minHeight = height || (dense ? _constants.MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);
    var outlinedHeight = inputHeight + (dense ? densePaddingTop / 2 : paddingTop);
    var leftLayout = parentState.leftLayout,
      rightLayout = parentState.rightLayout;
    var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
      height: outlinedHeight,
      affixHeight: leftLayout.height || 0,
      labelYOffset: -yOffset
    });
    var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
      height: outlinedHeight,
      affixHeight: rightLayout.height || 0,
      labelYOffset: -yOffset
    });
    var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
      height: outlinedHeight,
      affixHeight: _constants.ADORNMENT_SIZE,
      labelYOffset: -yOffset
    });
    var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
    var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
    var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({
      adornmentConfig,
      rightAffixWidth,
      leftAffixWidth,
      mode: 'outlined',
      isV3
    });
    var affixTopPosition = {
      [_enums.AdornmentSide.Left]: leftAffixTopPosition,
      [_enums.AdornmentSide.Right]: rightAffixTopPosition
    };
    var onAffixChange = {
      [_enums.AdornmentSide.Left]: onLeftAffixLayoutChange,
      [_enums.AdornmentSide.Right]: onRightAffixLayoutChange
    };
    var adornmentProps = {
      adornmentConfig,
      forceFocus,
      topPosition: {
        [_enums.AdornmentType.Icon]: iconTopPosition,
        [_enums.AdornmentType.Affix]: affixTopPosition
      },
      onAffixChange,
      isTextInputFocused: parentState.focused,
      maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
      disabled
    };
    if (adornmentConfig.length) {
      adornmentProps = {
        ...adornmentProps,
        left,
        right,
        textStyle: {
          ...font,
          fontSize,
          lineHeight,
          fontWeight
        },
        visible: parentState.labeled
      };
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: viewStyle,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Outline.Outline, {
        isV3: isV3,
        style: outlineStyle,
        label: label,
        roundness: roundness,
        hasActiveOutline: hasActiveOutline,
        focused: parentState.focused,
        activeColor: activeColor,
        outlineColor: outlineColor,
        backgroundColor: backgroundColor
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.labelContainer, {
          paddingTop,
          minHeight
        }],
        children: [label ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_InputLabel.default, {
          labeled: parentState.labeled,
          error: parentState.error,
          focused: parentState.focused,
          scaledLabel: scaledLabel,
          wiggle: Boolean(parentState.value && labelProps.labelError),
          labelLayoutMeasured: parentState.labelLayout.measured,
          labelLayoutWidth: parentState.labelLayout.width,
          labelLayoutHeight: parentState.labelLayout.height,
          ...labelProps,
          labelBackground: _LabelBackground.default,
          maxFontSizeMultiplier: rest.maxFontSizeMultiplier
        }) : null, render?.({
          ...rest,
          ref: innerRef,
          onLayout: onLayoutChange,
          onChangeText,
          placeholder: rest.placeholder,
          editable: !disabled && editable,
          selectionColor,
          cursorColor: typeof cursorColor === 'undefined' ? activeColor : cursorColor,
          placeholderTextColor: placeholderTextColorBasedOnState,
          onFocus,
          onBlur,
          underlineColorAndroid: 'transparent',
          multiline,
          style: [styles.input, !multiline || multiline && height ? {
            height: inputHeight
          } : {}, paddingOut, {
            ...font,
            fontSize,
            lineHeight,
            fontWeight,
            color: inputTextColor,
            textAlignVertical: multiline ? 'top' : 'center',
            textAlign: textAlign ? textAlign : _reactNative.I18nManager.getConstants().isRTL ? 'right' : 'left',
            paddingHorizontal: INPUT_PADDING_HORIZONTAL,
            minWidth: Math.min(parentState.labelTextLayout.width + 2 * INPUT_PADDING_HORIZONTAL, MIN_WIDTH)
          }, false, adornmentStyleAdjustmentForNativeInput, contentStyle],
          testID
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextInputAdornment.default, {
        ...adornmentProps
      })]
    });
  };
  var _default = exports.default = TextInputOutlined;
  var styles = _reactNative.StyleSheet.create({
    labelContainer: {
      paddingBottom: 0,
      flexGrow: 1
    },
    input: {
      margin: 0,
      flexGrow: 1
    },
    inputOutlined: {
      paddingTop: 8,
      paddingBottom: 8
    },
    inputOutlinedDense: {
      paddingTop: 4,
      paddingBottom: 4
    }
  });
},693,[1,203,125,45,694,684,691,687,686,692,695,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Outline = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _reactNative = require(_dependencyMap[1]);
  var _jsxRuntime = require(_dependencyMap[2]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var Outline = _ref => {
    var isV3 = _ref.isV3,
      label = _ref.label,
      activeColor = _ref.activeColor,
      backgroundColor = _ref.backgroundColor,
      hasActiveOutline = _ref.hasActiveOutline,
      focused = _ref.focused,
      outlineColor = _ref.outlineColor,
      roundness = _ref.roundness,
      style = _ref.style;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      testID: "text-input-outline",
      pointerEvents: "none",
      style: [styles.outline, !label && styles.noLabelOutline,
      // eslint-disable-next-line react-native/no-inline-styles
      {
        backgroundColor,
        borderRadius: roundness,
        borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,
        borderColor: hasActiveOutline ? activeColor : outlineColor
      }, style]
    });
  };
  exports.Outline = Outline;
  var styles = _reactNative.StyleSheet.create({
    outline: {
      position: 'absolute',
      left: 0,
      right: 0,
      top: 6,
      bottom: 0
    },
    noLabelOutline: {
      top: 0
    }
  });
},694,[125,45,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _AnimatedText = _interopRequireDefault(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var LabelBackground = _ref => {
    var labeled = _ref.labeled,
      labelLayoutWidth = _ref.labelLayoutWidth,
      labelLayoutHeight = _ref.labelLayoutHeight,
      placeholderStyle = _ref.placeholderStyle,
      baseLabelTranslateX = _ref.baseLabelTranslateX,
      topPosition = _ref.topPosition,
      backgroundColor = _ref.backgroundColor,
      roundness = _ref.roundness,
      labelStyle = _ref.labelStyle,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
      testID = _ref.testID;
    var opacity = labeled.interpolate({
      inputRange: [0, 0.6],
      outputRange: [1, 0]
    });
    var labelTranslationX = {
      translateX: labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [-baseLabelTranslateX, 0]
      })
    };
    var labelTextScaleY = {
      scaleY: labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [0.2, 1]
      })
    };
    var labelTextTransform = [...labelStyle.transform, labelTextScaleY];
    var isRounded = roundness > 6;
    var roundedEdgeCover = isRounded ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      pointerEvents: "none",
      style: [_reactNative.StyleSheet.absoluteFill, styles.view, {
        backgroundColor,
        maxHeight: Math.max(roundness / 3, 2),
        bottom: Math.max(roundness, 2),
        transform: [labelTranslationX],
        opacity
      }]
    }, "labelBackground-view") : null;
    return [roundedEdgeCover, /*#__PURE__*/(0, _jsxRuntime.jsx)(_AnimatedText.default, {
      testID: `${testID}-label-background`,
      style: [placeholderStyle, labelStyle, styles.outlinedLabel, {
        top: topPosition + 1,
        width: labelLayoutWidth - placeholderStyle.paddingHorizontal,
        height: labelLayoutHeight,
        backgroundColor,
        opacity,
        transform: labelTextTransform
      }],
      numberOfLines: 1,
      maxFontSizeMultiplier: maxFontSizeMultiplier
    }, "labelBackground-text")];
  };
  var _default = exports.default = LabelBackground;
  var styles = _reactNative.StyleSheet.create({
    view: {
      position: 'absolute',
      top: 6,
      left: 10,
      width: 12
    },
    // eslint-disable-next-line react-native/no-color-literals
    outlinedLabel: {
      position: 'absolute',
      left: 8,
      paddingHorizontal: 0,
      color: 'transparent'
    }
  });
},695,[1,125,45,574,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.roundLayoutSize = undefined;
  var roundLayoutSize = size => Math.round(size * 1000) / 1000;
  exports.roundLayoutSize = roundLayoutSize;
},696,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ToggleButton = _interopRequireDefault(require(_dependencyMap[1]));
  var _ToggleButtonGroup = _interopRequireDefault(require(_dependencyMap[2]));
  var _ToggleButtonRow = _interopRequireDefault(require(_dependencyMap[3]));
  var ToggleButton = Object.assign(
  // @component ./ToggleButton.tsx
  _ToggleButton.default, {
    // @component ./ToggleButtonGroup.tsx
    Group: _ToggleButtonGroup.default,
    // @component ./ToggleButtonRow.tsx
    Row: _ToggleButtonRow.default
  });
  var _default = exports.default = ToggleButton;
},697,[1,698,699,701]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.ToggleButton = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _color = _interopRequireDefault(require(_dependencyMap[4]));
  var _ToggleButtonGroup = require(_dependencyMap[5]);
  var _utils = require(_dependencyMap[6]);
  var _theming = require(_dependencyMap[7]);
  var _colors = require(_dependencyMap[8]);
  var _forwardRef = require(_dependencyMap[9]);
  var _IconButton = _interopRequireDefault(require(_dependencyMap[10]));
  var _jsxRuntime = require(_dependencyMap[11]);
  var _excluded = ["icon", "size", "theme", "accessibilityLabel", "disabled", "style", "value", "status", "onPress", "rippleColor"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,
   * a group should share a common container.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { ToggleButton } from 'react-native-paper';
   *
   * const ToggleButtonExample = () => {
   *   const [status, setStatus] = React.useState('checked');
   *
   *   const onButtonToggle = value => {
   *     setStatus(status === 'checked' ? 'unchecked' : 'checked');
   *   };
   *
   *   return (
   *     <ToggleButton
   *       icon="bluetooth"
   *       value="bluetooth"
   *       status={status}
   *       onPress={onButtonToggle}
   *     />
   *   );
   * };
   *
   * export default ToggleButtonExample;
   *
   * ```
   */
  var ToggleButton = exports.ToggleButton = (0, _forwardRef.forwardRef)((_ref, ref) => {
    var icon = _ref.icon,
      size = _ref.size,
      themeOverrides = _ref.theme,
      accessibilityLabel = _ref.accessibilityLabel,
      disabled = _ref.disabled,
      style = _ref.style,
      value = _ref.value,
      status = _ref.status,
      onPress = _ref.onPress,
      rippleColor = _ref.rippleColor,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var borderRadius = theme.roundness;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, {
      children: context => {
        var checked = context && context.value === value || status === 'checked';
        var backgroundColor = (0, _utils.getToggleButtonColor)({
          theme,
          checked
        });
        var borderColor = theme.isV3 ? theme.colors.outline : (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
          borderless: false,
          icon: icon,
          onPress: e => {
            if (onPress) {
              onPress(e);
            }
            if (context) {
              context.onValueChange(!checked ? value : null);
            }
          },
          size: size,
          accessibilityLabel: accessibilityLabel,
          accessibilityState: {
            disabled,
            selected: checked
          },
          disabled: disabled,
          style: [styles.content, {
            backgroundColor,
            borderRadius,
            borderColor
          }, style],
          ref: ref,
          theme: theme,
          rippleColor: rippleColor,
          ...rest
        });
      }
    });
  });
  var styles = _reactNative.StyleSheet.create({
    content: {
      width: 42,
      height: 42,
      margin: 0
    }
  });
  var _default = exports.default = ToggleButton; // @component-docs ignore-next-line
},698,[1,203,125,45,515,699,700,506,529,577,636,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.ToggleButtonGroupContext = exports.ToggleButtonGroup = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  var _jsxRuntime = require(_dependencyMap[1]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var ToggleButtonGroupContext = exports.ToggleButtonGroupContext =
  /*#__PURE__*/
  //@ts-expect-error: TS can't ensure the type from Group to children
  React.createContext(null);

  /**
   * Toggle group allows to control a group of toggle buttons.</br>
   * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, check out [ToggleButton.Row](ToggleButtonRow).
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { ToggleButton } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [value, setValue] = React.useState('left');
   *
   *   return (
   *     <ToggleButton.Group
   *       onValueChange={value => setValue(value)}
   *       value={value}>
   *       <ToggleButton icon="format-align-left" value="left" />
   *       <ToggleButton icon="format-align-right" value="right" />
   *     </ToggleButton.Group>
   *   );
   * };
   *
   * export default MyComponent;
   *```
   */
  var ToggleButtonGroup = _ref => {
    var value = _ref.value,
      onValueChange = _ref.onValueChange,
      children = _ref.children;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(ToggleButtonGroupContext.Provider, {
      value: {
        value,
        onValueChange
      },
      children: children
    });
  };
  exports.ToggleButtonGroup = ToggleButtonGroup;
  ToggleButtonGroup.displayName = 'ToggleButton.Group';
  var _default = exports.default = ToggleButtonGroup; // @component-docs ignore-next-line
},699,[125,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getToggleButtonColor = undefined;
  var _color = _interopRequireDefault(require(_dependencyMap[1]));
  var _tokens = require(_dependencyMap[2]);
  var getToggleButtonColor = _ref => {
    var theme = _ref.theme,
      checked = _ref.checked;
    if (checked) {
      if (theme.isV3) {
        return (0, _color.default)(theme.colors.onSecondaryContainer).alpha(_tokens.tokens.md.ref.opacity.level2).rgb().string();
      }
      if (theme.dark) {
        return 'rgba(255, 255, 255, .12)';
      }
      return 'rgba(0, 0, 0, .08)';
    }
    return 'transparent';
  };
  exports.getToggleButtonColor = getToggleButtonColor;
},700,[1,515,505]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.ToggleButtonRow = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _ToggleButton = _interopRequireDefault(require(_dependencyMap[3]));
  var _ToggleButtonGroup = _interopRequireDefault(require(_dependencyMap[4]));
  var _jsxRuntime = require(_dependencyMap[5]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Toggle button row renders a group of toggle buttons in a row.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { ToggleButton } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [value, setValue] = React.useState('left');
   *
   *   return (
   *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>
   *       <ToggleButton icon="format-align-left" value="left" />
   *       <ToggleButton icon="format-align-right" value="right" />
   *     </ToggleButton.Row>
   *   );
   * };
   *
   * export default MyComponent;
   *
   *```
   */
  var ToggleButtonRow = _ref => {
    var value = _ref.value,
      onValueChange = _ref.onValueChange,
      children = _ref.children,
      style = _ref.style;
    var count = React.Children.count(children);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleButtonGroup.default, {
      value: value,
      onValueChange: onValueChange,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.row, style],
        children: React.Children.map(children, (child, i) => {
          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter
          if (child && child.type === _ToggleButton.default) {
            // @ts-expect-error: We're sure that child is a React Element
            return /*#__PURE__*/React.cloneElement(child, {
              style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle,
              // @ts-expect-error: We're sure that child is a React Element
              child.props.style]
            });
          }
          return child;
        })
      })
    });
  };
  exports.ToggleButtonRow = ToggleButtonRow;
  ToggleButtonRow.displayName = 'ToggleButton.Row';
  var styles = _reactNative.StyleSheet.create({
    row: {
      flexDirection: 'row'
    },
    button: {
      borderWidth: _reactNative.StyleSheet.hairlineWidth
    },
    first: {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    },
    middle: {
      borderRadius: 0,
      borderLeftWidth: 0
    },
    last: {
      borderLeftWidth: 0,
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    }
  });
  var _default = exports.default = ToggleButtonRow; // @component-docs ignore-next-line
},701,[1,125,45,698,699,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.SegmentedButtons = undefined;
  var _react = _interopRequireWildcard(require(_dependencyMap[1]));
  var React = _react;
  var _reactNative = require(_dependencyMap[2]);
  var _SegmentedButtonItem = _interopRequireDefault(require(_dependencyMap[3]));
  var _utils = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _jsxRuntime = require(_dependencyMap[6]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Segmented buttons can be used to select options, switch views or sort elements.</br>
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { SafeAreaView, StyleSheet } from 'react-native';
   * import { SegmentedButtons } from 'react-native-paper';
   *
   * const MyComponent = () => {
   *   const [value, setValue] = React.useState('');
   *
   *   return (
   *     <SafeAreaView style={styles.container}>
   *       <SegmentedButtons
   *         value={value}
   *         onValueChange={setValue}
   *         buttons={[
   *           {
   *             value: 'walk',
   *             label: 'Walking',
   *           },
   *           {
   *             value: 'train',
   *             label: 'Transit',
   *           },
   *           { value: 'drive', label: 'Driving' },
   *         ]}
   *       />
   *     </SafeAreaView>
   *   );
   * };
   *
   * const styles = StyleSheet.create({
   *   container: {
   *     flex: 1,
   *     alignItems: 'center',
   *   },
   * });
   *
   * export default MyComponent;
   *```
   */
  var SegmentedButtons = _ref => {
    var value = _ref.value,
      onValueChange = _ref.onValueChange,
      buttons = _ref.buttons,
      multiSelect = _ref.multiSelect,
      density = _ref.density,
      style = _ref.style,
      themeOverrides = _ref.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.row, style],
      children: buttons.map((item, i) => {
        var disabledChildStyle = (0, _utils.getDisabledSegmentedButtonStyle)({
          theme,
          buttons,
          index: i
        });
        var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;
        var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;
        var onPress = e => {
          item.onPress?.(e);
          var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(val => item.value !== val) : [...value, item.value] : item.value;

          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly
          onValueChange(nextValue);
        };
        return /*#__PURE__*/(0, _react.createElement)(_SegmentedButtonItem.default, {
          ...item,
          key: i,
          checked: checked,
          segment: segment,
          density: density,
          onPress: onPress,
          style: [item.style, disabledChildStyle],
          labelStyle: item.labelStyle,
          theme: theme
        });
      })
    });
  };
  exports.SegmentedButtons = SegmentedButtons;
  var styles = _reactNative.StyleSheet.create({
    row: {
      flexDirection: 'row'
    }
  });
  var _default = exports.default = SegmentedButtons; // @component-docs ignore-next-line
},702,[1,125,45,703,704,506,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.SegmentedButton = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _color = _interopRequireDefault(require(_dependencyMap[3]));
  var _utils = require(_dependencyMap[4]);
  var _theming = require(_dependencyMap[5]);
  var _Icon = _interopRequireDefault(require(_dependencyMap[6]));
  var _TouchableRipple = _interopRequireDefault(require(_dependencyMap[7]));
  var _Text = _interopRequireDefault(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  var SegmentedButtonItem = _ref => {
    var checked = _ref.checked,
      accessibilityLabel = _ref.accessibilityLabel,
      disabled = _ref.disabled,
      style = _ref.style,
      labelStyle = _ref.labelStyle,
      showSelectedCheck = _ref.showSelectedCheck,
      checkedColor = _ref.checkedColor,
      uncheckedColor = _ref.uncheckedColor,
      customRippleColor = _ref.rippleColor,
      background = _ref.background,
      icon = _ref.icon,
      testID = _ref.testID,
      label = _ref.label,
      onPress = _ref.onPress,
      segment = _ref.segment,
      _ref$density = _ref.density,
      density = _ref$density === undefined ? 'regular' : _ref$density,
      themeOverrides = _ref.theme,
      labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var checkScale = React.useRef(new _reactNative.Animated.Value(0)).current;
    React.useEffect(() => {
      if (!showSelectedCheck) {
        return;
      }
      if (checked) {
        _reactNative.Animated.spring(checkScale, {
          toValue: 1,
          useNativeDriver: true
        }).start();
      } else {
        _reactNative.Animated.spring(checkScale, {
          toValue: 0,
          useNativeDriver: true
        }).start();
      }
    }, [checked, checkScale, showSelectedCheck]);
    var roundness = theme.roundness,
      isV3 = theme.isV3;
    var _getSegmentedButtonCo = (0, _utils.getSegmentedButtonColors)({
        checked,
        theme,
        disabled,
        checkedColor,
        uncheckedColor
      }),
      borderColor = _getSegmentedButtonCo.borderColor,
      textColor = _getSegmentedButtonCo.textColor,
      borderWidth = _getSegmentedButtonCo.borderWidth,
      backgroundColor = _getSegmentedButtonCo.backgroundColor;
    var borderRadius = (isV3 ? 5 : 1) * roundness;
    var segmentBorderRadius = (0, _utils.getSegmentedButtonBorderRadius)({
      theme,
      segment
    });
    var rippleColor = customRippleColor || (0, _color.default)(textColor).alpha(0.12).rgb().string();
    var showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;
    var showCheckedIcon = checked && showSelectedCheck;
    var iconSize = isV3 ? 18 : 16;
    var iconStyle = {
      marginRight: label ? 5 : showCheckedIcon ? 3 : 0,
      ...(label && {
        transform: [{
          scale: checkScale.interpolate({
            inputRange: [0, 1],
            outputRange: [1, 0]
          })
        }]
      })
    };
    var buttonStyle = {
      backgroundColor,
      borderColor,
      borderWidth,
      borderRadius,
      ...segmentBorderRadius
    };
    var paddingVertical = (0, _utils.getSegmentedButtonDensityPadding)({
      density
    });
    var rippleStyle = {
      borderRadius,
      ...segmentBorderRadius
    };
    var labelTextStyle = {
      ...(!isV3 ? {
        textTransform: 'uppercase',
        fontWeight: '500'
      } : theme.fonts.labelLarge),
      color: textColor
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [buttonStyle, styles.button, style],
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TouchableRipple.default, {
        borderless: true,
        onPress: onPress,
        accessibilityLabel: accessibilityLabel,
        accessibilityState: {
          disabled,
          checked
        },
        accessibilityRole: "button",
        disabled: disabled,
        rippleColor: rippleColor,
        testID: testID,
        style: rippleStyle,
        background: background,
        theme: theme,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.content, {
            paddingVertical
          }],
          children: [showCheckedIcon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            testID: `${testID}-check-icon`,
            style: [iconStyle, {
              transform: [{
                scale: checkScale
              }]
            }],
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
              source: 'check',
              size: iconSize,
              color: textColor
            })
          }) : null, showIcon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            testID: `${testID}-icon`,
            style: iconStyle,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.default, {
              source: icon,
              size: iconSize,
              color: textColor
            })
          }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
            variant: "labelLarge",
            style: [styles.label, labelTextStyle, labelStyle],
            selectable: false,
            numberOfLines: 1,
            maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
            testID: `${testID}-label`,
            children: label
          })]
        })
      })
    });
  };
  exports.SegmentedButton = SegmentedButtonItem;
  var styles = _reactNative.StyleSheet.create({
    button: {
      flex: 1,
      minWidth: 76,
      borderStyle: 'solid'
    },
    label: {
      textAlign: 'center'
    },
    content: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: 9,
      paddingHorizontal: 16
    }
  });
  var _default = exports.default = SegmentedButtonItem;
},703,[1,125,45,515,704,506,570,580,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getSegmentedButtonDensityPadding = exports.getSegmentedButtonColors = exports.getSegmentedButtonBorderRadius = exports.getDisabledSegmentedButtonStyle = undefined;
  var _reactNative = require(_dependencyMap[1]);
  var _color = _interopRequireDefault(require(_dependencyMap[2]));
  var _colors = require(_dependencyMap[3]);
  var DEFAULT_PADDING = 9;
  var getSegmentedButtonDensityPadding = _ref => {
    var density = _ref.density;
    var padding = DEFAULT_PADDING;
    switch (density) {
      case 'small':
        return 7;
      case 'medium':
        return 5;
      case 'high':
        return 1;
      default:
        return padding;
    }
  };
  exports.getSegmentedButtonDensityPadding = getSegmentedButtonDensityPadding;
  var getDisabledSegmentedButtonStyle = _ref2 => {
    var theme = _ref2.theme,
      index = _ref2.index,
      buttons = _ref2.buttons;
    var width = getSegmentedButtonBorderWidth({
      theme
    });
    var isDisabled = buttons[index]?.disabled;
    var isNextDisabled = buttons[index + 1]?.disabled;
    if (!isDisabled && isNextDisabled) {
      return {
        borderRightWidth: width
      };
    }
    return {};
  };
  exports.getDisabledSegmentedButtonStyle = getDisabledSegmentedButtonStyle;
  var getSegmentedButtonBorderRadius = _ref3 => {
    var segment = _ref3.segment,
      theme = _ref3.theme;
    if (segment === 'first') {
      return {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0,
        ...(theme.isV3 && {
          borderRightWidth: 0
        })
      };
    } else if (segment === 'last') {
      return {
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
      };
    } else {
      return {
        borderRadius: 0,
        ...(theme.isV3 && {
          borderRightWidth: 0
        })
      };
    }
  };
  exports.getSegmentedButtonBorderRadius = getSegmentedButtonBorderRadius;
  var getSegmentedButtonBackgroundColor = _ref4 => {
    var checked = _ref4.checked,
      theme = _ref4.theme;
    if (checked) {
      if (theme.isV3) {
        return theme.colors.secondaryContainer;
      } else {
        return (0, _color.default)(theme.colors.primary).alpha(0.12).rgb().string();
      }
    }
    return 'transparent';
  };
  var getSegmentedButtonBorderColor = _ref5 => {
    var theme = _ref5.theme,
      disabled = _ref5.disabled,
      checked = _ref5.checked;
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.surfaceDisabled;
      }
      return theme.colors.outline;
    }
    if (checked) {
      return theme.colors.primary;
    }
    return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
  };
  var getSegmentedButtonBorderWidth = _ref6 => {
    var theme = _ref6.theme;
    if (theme.isV3) {
      return 1;
    }
    return _reactNative.StyleSheet.hairlineWidth;
  };
  var getSegmentedButtonTextColor = _ref7 => {
    var theme = _ref7.theme,
      disabled = _ref7.disabled,
      checked = _ref7.checked,
      checkedColor = _ref7.checkedColor,
      uncheckedColor = _ref7.uncheckedColor;
    if (theme.isV3) {
      if (disabled) {
        return theme.colors.onSurfaceDisabled;
      }
      if (checked) {
        return checkedColor ?? theme.colors.onSecondaryContainer;
      }
      return uncheckedColor ?? theme.colors.onSurface;
    }
    if (disabled) {
      return theme.colors.disabled;
    }
    // Primary color is used for checked state too.
    return theme.colors.primary;
  };
  var getSegmentedButtonColors = _ref8 => {
    var theme = _ref8.theme,
      disabled = _ref8.disabled,
      checked = _ref8.checked,
      checkedColor = _ref8.checkedColor,
      uncheckedColor = _ref8.uncheckedColor;
    var backgroundColor = getSegmentedButtonBackgroundColor({
      theme,
      checked
    });
    var borderColor = getSegmentedButtonBorderColor({
      theme,
      disabled,
      checked
    });
    var textColor = getSegmentedButtonTextColor({
      theme,
      disabled,
      checked,
      checkedColor,
      uncheckedColor
    });
    var borderWidth = getSegmentedButtonBorderWidth({
      theme
    });
    return {
      backgroundColor,
      borderColor,
      textColor,
      borderWidth
    };
  };
  exports.getSegmentedButtonColors = getSegmentedButtonColors;
},704,[1,45,515,529]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var _utils = require(_dependencyMap[5]);
  var _theming = require(_dependencyMap[6]);
  var _addEventListener = require(_dependencyMap[7]);
  var _Portal = _interopRequireDefault(require(_dependencyMap[8]));
  var _Text = _interopRequireDefault(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  var _excluded = ["children", "enterTouchDelay", "leaveTouchDelay", "title", "theme", "titleMaxFontSizeMultiplier"];
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  /**
   * Tooltips display informative text when users hover over, focus on, or tap an element.
   *
   * Plain tooltips, when activated, display a text label identifying an element, such as a description of its function. Tooltips should include only short, descriptive text and avoid restating visible UI text.
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { IconButton, Tooltip } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Tooltip title="Selected Camera">
   *     <IconButton icon="camera" selected size={24} onPress={() => {}} />
   *   </Tooltip>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Tooltip = _ref => {
    var children = _ref.children,
      _ref$enterTouchDelay = _ref.enterTouchDelay,
      enterTouchDelay = _ref$enterTouchDelay === undefined ? 500 : _ref$enterTouchDelay,
      _ref$leaveTouchDelay = _ref.leaveTouchDelay,
      leaveTouchDelay = _ref$leaveTouchDelay === undefined ? 1500 : _ref$leaveTouchDelay,
      title = _ref.title,
      themeOverrides = _ref.theme,
      titleMaxFontSizeMultiplier = _ref.titleMaxFontSizeMultiplier,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var isWeb = false;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      visible = _React$useState2[0],
      setVisible = _React$useState2[1];
    var _React$useState3 = React.useState({
        children: {},
        tooltip: {},
        measured: false
      }),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      measurement = _React$useState4[0],
      setMeasurement = _React$useState4[1];
    var showTooltipTimer = React.useRef([]);
    var hideTooltipTimer = React.useRef([]);
    var childrenWrapperRef = React.useRef();
    var touched = React.useRef(false);
    React.useEffect(() => {
      return () => {
        if (showTooltipTimer.current.length) {
          showTooltipTimer.current.forEach(t => clearTimeout(t));
          showTooltipTimer.current = [];
        }
        if (hideTooltipTimer.current.length) {
          hideTooltipTimer.current.forEach(t => clearTimeout(t));
          hideTooltipTimer.current = [];
        }
      };
    }, []);
    React.useEffect(() => {
      var subscription = (0, _addEventListener.addEventListener)(_reactNative.Dimensions, 'change', () => setVisible(false));
      return () => subscription.remove();
    }, []);
    var handleOnLayout = _ref2 => {
      var layout = _ref2.nativeEvent.layout;
      childrenWrapperRef.current.measure((_x, _y, width, height, pageX, pageY) => {
        setMeasurement({
          children: {
            pageX,
            pageY,
            height,
            width
          },
          tooltip: {
            ...layout
          },
          measured: true
        });
      });
    };
    var handleTouchStart = () => {
      if (hideTooltipTimer.current.length) {
        hideTooltipTimer.current.forEach(t => clearTimeout(t));
        hideTooltipTimer.current = [];
      }
      {
        touched.current = true;
        setVisible(true);
      }
    };
    var handleTouchEnd = () => {
      touched.current = false;
      if (showTooltipTimer.current.length) {
        showTooltipTimer.current.forEach(t => clearTimeout(t));
        showTooltipTimer.current = [];
      }
      var id = setTimeout(() => {
        setVisible(false);
        setMeasurement({
          children: {},
          tooltip: {},
          measured: false
        });
      }, leaveTouchDelay);
      hideTooltipTimer.current.push(id);
    };
    var mobilePressProps = {
      onPress: React.useCallback(() => {
        if (touched.current) {
          return null;
        } else {
          if (children.props.disabled) return null;
          return children.props.onPress?.();
        }
      }, [children.props]),
      onLongPress: () => handleTouchStart(),
      onPressOut: () => handleTouchEnd(),
      delayLongPress: enterTouchDelay
    };
    var webPressProps = {
      onHoverIn: () => {
        handleTouchStart();
        children.props.onHoverIn?.();
      },
      onHoverOut: () => {
        handleTouchEnd();
        children.props.onHoverOut?.();
      }
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [visible && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Portal.default, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
          onLayout: handleOnLayout,
          style: [styles.tooltip, {
            backgroundColor: theme.isV3 ? theme.colors.onSurface : theme.colors.tooltip,
            ...(0, _utils.getTooltipPosition)(measurement, children),
            borderRadius: theme.roundness,
            ...(measurement.measured ? styles.visible : styles.hidden)
          }],
          testID: "tooltip-container",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
            accessibilityLiveRegion: "polite",
            numberOfLines: 1,
            selectable: false,
            variant: "labelLarge",
            style: {
              color: theme.colors.surface
            },
            maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
            children: title
          })
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Pressable, {
        ref: childrenWrapperRef,
        style: styles.pressContainer,
        ...mobilePressProps,
        children: /*#__PURE__*/React.cloneElement(children, {
          ...rest,
          ...mobilePressProps
        })
      })]
    });
  };
  Tooltip.displayName = 'Tooltip';
  var styles = _reactNative.StyleSheet.create({
    tooltip: {
      alignSelf: 'flex-start',
      justifyContent: 'center',
      paddingHorizontal: 16,
      height: 32,
      maxHeight: 32
    },
    visible: {
      opacity: 1
    },
    hidden: {
      opacity: 0
    },
    pressContainer: {
      ...false
    }
  });
  var _default = exports.default = Tooltip;
},705,[1,29,203,125,45,706,506,564,645,573,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getTooltipPosition = undefined;
  var _reactNative = require(_dependencyMap[0]);
  /**
   * Return true when the tooltip center x-coordinate relative to the wrapped element is negative.
   * The tooltip will be placed at the starting x-coordinate from the wrapped element.
   */
  var overflowLeft = center => {
    return center < 0;
  };

  /**
   * Return true when the tooltip center x-coordinate + tooltip width is greater than the layout width
   * The tooltip width will grow from right to left relative to the wrapped element.
   */
  var overflowRight = (center, tooltipWidth) => {
    var _Dimensions$get = _reactNative.Dimensions.get('window'),
      layoutWidth = _Dimensions$get.width;
    return center + tooltipWidth > layoutWidth;
  };

  /**
   * Return true when the children y-coordinate + its height + tooltip height is greater than the layout height.
   * The tooltip will be placed at the top of the wrapped element.
   */
  var overflowBottom = (childrenY, childrenHeight, tooltipHeight) => {
    var _Dimensions$get2 = _reactNative.Dimensions.get('window'),
      layoutHeight = _Dimensions$get2.height;
    return childrenY + childrenHeight + tooltipHeight > layoutHeight;
  };
  var getTooltipXPosition = (_ref, _ref2) => {
    var childrenX = _ref.pageX,
      childrenWidth = _ref.width;
    var tooltipWidth = _ref2.width;
    // when the children use position absolute the childrenWidth is measured as 0,
    // so it's best to anchor the tooltip at the start of the children
    var center = childrenWidth > 0 ? childrenX + (childrenWidth - tooltipWidth) / 2 : childrenX;
    if (overflowLeft(center)) return childrenX;
    if (overflowRight(center, tooltipWidth)) return childrenX + childrenWidth - tooltipWidth;
    return center;
  };
  var getTooltipYPosition = (_ref3, _ref4) => {
    var childrenY = _ref3.pageY,
      childrenHeight = _ref3.height;
    var tooltipHeight = _ref4.height;
    if (overflowBottom(childrenY, childrenHeight, tooltipHeight)) return childrenY - tooltipHeight;
    return childrenY + childrenHeight;
  };
  var getChildrenMeasures = (style, measures) => {
    var _ref5 = Array.isArray(style) ? style.reduce((acc, current) => ({
        ...acc,
        ...current
      })) : style,
      position = _ref5.position,
      top = _ref5.top,
      bottom = _ref5.bottom,
      left = _ref5.left,
      right = _ref5.right;
    if (position === 'absolute') {
      var pageX = 0;
      var pageY = measures.pageY;
      var height = 0;
      var width = 0;
      if (typeof left === 'number') {
        pageX = left;
        width = 0;
      }
      if (typeof right === 'number') {
        pageX = measures.width - right;
        width = 0;
      }
      if (typeof top === 'number') {
        pageY = pageY + top;
      }
      if (typeof bottom === 'number') {
        pageY = pageY - bottom;
      }
      return {
        pageX,
        pageY,
        width,
        height
      };
    }
    return measures;
  };
  var getTooltipPosition = (_ref6, component) => {
    var children = _ref6.children,
      tooltip = _ref6.tooltip,
      measured = _ref6.measured;
    if (!measured) return {};
    var measures = children;
    if (component.props.style) {
      measures = getChildrenMeasures(component.props.style, children);
    }
    return {
      left: getTooltipXPosition(measures, tooltip),
      top: getTooltipYPosition(measures, tooltip)
    };
  };
  exports.getTooltipPosition = getTooltipPosition;
},706,[45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Caption", {
    enumerable: true,
    get: function () {
      return _Caption.default;
    }
  });
  Object.defineProperty(exports, "Headline", {
    enumerable: true,
    get: function () {
      return _Headline.default;
    }
  });
  Object.defineProperty(exports, "Paragraph", {
    enumerable: true,
    get: function () {
      return _Paragraph.default;
    }
  });
  Object.defineProperty(exports, "Subheading", {
    enumerable: true,
    get: function () {
      return _Subheading.default;
    }
  });
  Object.defineProperty(exports, "Title", {
    enumerable: true,
    get: function () {
      return _Title.default;
    }
  });
  var _Caption = _interopRequireDefault(require(_dependencyMap[1]));
  var _Headline = _interopRequireDefault(require(_dependencyMap[2]));
  var _Paragraph = _interopRequireDefault(require(_dependencyMap[3]));
  var _Subheading = _interopRequireDefault(require(_dependencyMap[4]));
  var _Title = _interopRequireDefault(require(_dependencyMap[5]));
},707,[1,622,708,709,710,623]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _StyledText = _interopRequireDefault(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  // @component-group Typography

  /**
   * Typography component for showing a headline.
   *
   * <div class="screenshots">
   *   <img src="screenshots/headline.png" />
   * </div>
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Headline } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Headline>Headline</Headline>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Headline = props => {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_StyledText.default, {
      ...props,
      alpha: 0.87,
      family: "regular",
      style: [styles.text, props.style]
    });
  };
  var _default = exports.default = Headline;
  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 24,
      lineHeight: 32,
      marginVertical: 2,
      letterSpacing: 0
    }
  });
},708,[1,125,45,575,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _StyledText = _interopRequireDefault(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  // @component-group Typography

  /**
   * Typography component for showing a paragraph.
   *
   * <div class="screenshots">
   *   <img src="screenshots/paragraph.png" />
   * </div>
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Paragraph } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Paragraph>Paragraph</Paragraph>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Paragraph = props => /*#__PURE__*/(0, _jsxRuntime.jsx)(_StyledText.default, {
    ...props,
    alpha: 0.87,
    family: "regular",
    style: [styles.text, props.style]
  });
  var _default = exports.default = Paragraph;
  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 14,
      lineHeight: 20,
      marginVertical: 2,
      letterSpacing: 0.25
    }
  });
},709,[1,125,45,575,243]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _StyledText = _interopRequireDefault(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
  // @component-group Typography

  /**
   * Typography component for showing a subheading.
   *
   * <div class="screenshots">
   *   <img src="screenshots/subheading.png" />
   * </div>
   *
   * ## Usage
   * ```js
   * import * as React from 'react';
   * import { Subheading } from 'react-native-paper';
   *
   * const MyComponent = () => (
   *   <Subheading>Subheading</Subheading>
   * );
   *
   * export default MyComponent;
   * ```
   */
  var Subheading = props => /*#__PURE__*/(0, _jsxRuntime.jsx)(_StyledText.default, {
    ...props,
    alpha: 0.87,
    family: "regular",
    style: [styles.text, props.style]
  });
  var _default = exports.default = Subheading;
  var styles = _reactNative.StyleSheet.create({
    text: {
      fontSize: 16,
      lineHeight: 24,
      marginVertical: 2,
      letterSpacing: 0.5
    }
  });
},710,[1,125,45,575,243]);
__r(156);
__r(0);
//# sourceMappingURL=http://localhost:8081/_expo/static/js/ios/AppEntry-2efac2f0bfc7ebd1a5e48f90acb4f9bf.js.map
//# debugId=1ab74434-54ab-4375-9354-09dc482a46c3